/* 
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
 
var gridUpdatedData;
var globalETLLoadMenu = "";
var alterTableData = {};
var updateDataInfo = {};
var bodyTop = 20;
var bodySourceTop = 20;
var sourceFirst = true;
var operatorI = 0;
var sourceOperatoTablerI = 0;
var linkedDataObj = {};
var savedDBData = {};
var sourceTables = [];
var windowHeight;
var pageHeight;
var pageOperations;
var gridHeight;
var gridHeightInner;
var tabHeightInner;
var buttonGroups = "";
var $pageBodycontainer;
var pageBodycontinerPadding;
var TabExcelStatus;
var pageOperations1;
var gridMainHeight;
var selectConnObj;
var selectColumnsObj;
var selectedDataBase;
var globalTreeObj;
var cubePreviousOperatorId;
var currentTabId;
var processLogInterval = null;
var processScheduledJobLogInterval = null;
var trfmRulesChanged = false;
var previousOperatorId;
var treeIconClickEvent;
var operatorDoublClick = false;
var prevTargetOperatorId = null;
var globalFileTreeItem = {};
var selectedItems = [];
var imagepath;
var HtmlEntities = {
	" ": "&nbsp;"
};

var globaldblpageX;
var globaldblpageY;

var copyOperatorIds = [];
var copyFlowChartWorkSpace;
	
$(function() {
	



});

 $(document).click(function(e) {  
});

$(document).mousedown(function(event){
       if ( $(event.target).hasClass("etlConnectionItem") || $(event.target).closest(".etlConnectionItem").length >0 ) {
           
       } else {
           
             $(".etlHighlightSelectedTable").removeClass("etlHighlightSelectedTable");
       }

   });
/*$(document).ready(function() {
	var ctrlDown = false,
		ctrlKey = 17,
		cmdKey = 91,
		vKey = 86,
		cKey = 67;

	$(document).keydown(function(e) {
		if (e.keyCode == ctrlKey || e.keyCode == cmdKey) ctrlDown = true;
	}).keyup(function(e) {
		if (e.keyCode == ctrlKey || e.keyCode == cmdKey) ctrlDown = false;
	});

	$("#feedHeader").keydown(function(e) {
		if (ctrlDown && (e.keyCode == vKey || e.keyCode == cKey)) return false;
	});
	
	// Document Ctrl + C/V 
	
	$(document).keydown(function(e) {
		
			if (ctrlDown && (e.keyCode == cKey)) {
				if ( $(e.target).attr("id") == "flowChartTabs" ) {
					console.log("Document catch Ctrl+C");
					copyOperatorIds = [];
					copyFlowChartWorkSpace = flowChartWorkSpaceId;
					var flowChartData = $("#" + flowChartWorkSpaceId).flowchart("getData");
					$("#" + flowChartWorkSpaceId + " .selected").each(function() {
						var currentFlowcharArea = $(this).parent().parent().attr("id");
						var selectedOpeartorId = $(this).data("operator_id");
						copyOperatorIds.push(selectedOpeartorId);
		
					});
					
				}  else {
					copyOperatorIds = [];
				}
		}
		
		if (ctrlDown && (e.keyCode == vKey)) {
			console.log("Document catch Ctrl+V");
			if ( $(e.target).attr("id") == "flowChartTabs" ) {

			
		}
		}
		
	});
});*/

$(document).on('keydown', function(e) {
	// if key is Delete/Back Space
	if (e.which == 46 || e.which == 8) {
		// remove the same div you clicked on
		var selectedTypeVal = e.currentTarget.activeElement.type;
		if (selectedTypeVal != null
			&& (selectedTypeVal == 'input'
				|| selectedTypeVal == 'textarea'
				|| selectedTypeVal == 'text'
				|| selectedTypeVal == 'checkbox'
				|| selectedTypeVal == 'password'
				|| selectedTypeVal == 'hidden'
				|| selectedTypeVal == 'date'
				|| selectedTypeVal == 'number'
				|| selectedTypeVal == 'select')) {
			// console.log('selectedClassVal::::'+selectedClassVal);
		} else {
			// remove the same div you clicked on
			deleteSelectedOporLink();
		}

	} else if (e.which == 17 && e.which == 13) {
		var activeElement = e.currentTarget.activeElement;
		var currentEditorId = activeElement.id;
		if (currentEditorId != null && currentEditorId.indexOf("_editor_") > -1) {
			executeEditorScripts("editorViewDiv");
		}
                
	} else if (e.ctrlKey && (e.key === 'c' ||  e.key === 'C') ) {
           // var selectedTypeVal = e.currentTarget.activeElement.type;
            if ( $("#tableAlterDiv").is(":visible")){
                copyColAlterTable();
            } else if ( $(".scriptMessageDiv").is(":visible") ){
                if (document.selection) {
                    var text = document.getSelection();
                } else if (window.getSelection){
                   var text = window.getSelection();
                }
                if (text!=null && text!="") {
                    navigator.clipboard.writeText(text); 
                    showFadeMesg("Copied!");
                }
               
            } else if($(".etlSchemaExplorerInner").is(":visible")){
                var tableName = $($(".etlHighlightSelectedTable")[0]).attr("data-schemaobjectname")
                copyTableName(tableName);
                showFadeMesg("Copied!");
            }
             
        } else if (e.ctrlKey && (e.key === 'a' ||  e.key === 'A') ) {
         // var selectedTypeVal = e.currentTarget.activeElement.type;
         document.getSelection().removeAllRanges();
          if ( $(".scriptMessageDiv").is(":visible")){
               
                setTimeout(function(){
                if (document.selection) { // IE
                   var range = document.body.createTextRange();
                   range.moveToElementText(document.getElementsByClassName("scriptMessageDiv")[0]);
                   range.select();
                  
               } else if (window.getSelection) {
                   var range = document.createRange();
                   range.selectNode(document.getElementsByClassName("scriptMessageDiv")[0]);
                   window.getSelection().removeAllRanges();
                   window.getSelection().addRange(range);
                  
               }
             }, 100)
            

            
          } 
        } 

});

//document.onselectionchange = function() {
//    document.getSelection().removeAllRanges();
//    console.log("Selection changed");
//};

$(document).ready(function() {

	//    $("#pageBody").height((parseInt($(window).height()) - 100))
	//    $("#pageBody").width((parseInt($(window).width()) - 100))
});
$(document).dblclick(function(evt) {
	globaldblpageX = evt.pageX;
	globaldblpageY = evt.pageY;
	if ($(evt.target).closest('#etlIconGroup').length > 0) {
		return;
	} else {
		$("#etlIconGroup").hide();
		$(".etlComponentsPallete").removeClass("etlComponentsRightArraow");
			$(".etlComponentsPallete").addClass("etlComponentsLeftArraow");
			$(".showComponents ").css("width","40px");
	}
});
function splitterAdjustment(treeObj, connectionsDivStr) {
	globalTreeObj = treeObj;
	var jobId = genHexString(32);
	flowChartWorkSpaceId = "workSpace_" + jobId;
	$("#currentJobId").val(jobId);
	$("#" + flowChartWorkSpaceId).remove();
	$("#feedHeader").append('<div id="flowChartTabs"  class="flowChartTabs flowChartHeaderTabs" style="width: 100%;height: 9%;"><ul class=flowChartTabList><li></li></ul><div></div></div>');
	$('#flowChartTabs').jqxTabs({ width: "100%", height: "100%", position: 'top', theme: 'ui-redmond', reorder: true });
	$('#flowChartTabs').jqxTabs('showAllCloseButtons');
	$("#flowChartTabs").find("li.jqx-tabs-title").find("div.jqx-tabs-close-button").css("background-image", "url(images/close.png)");
	$("#flowChartTabs").find("li.jqx-tabs-title-selected-top").find("div.jqx-tabs-close-button").css("background-image", "url(images/close.png)");
	$('#flowChartTabs').jqxTabs('removeAt', 0);
	$('#flowChartTabs').jqxTabs('addLast', "✙", '<div  id="createNewJobIcon"  class="flowchart-example-container" style="display:none;"></div>');
	$('#flowChartTabs').jqxTabs('addFirst', "New Tab", '<div  id="' + flowChartWorkSpaceId + '" jobid= "' + jobId + '" class="flowchart-example-container"></div>');

	$('#flowChartTabs').on('selected', function(event) {
		var selectedTab = event.args.item;
		//        var content = $('#conTabs').jqxTabs('getContentAt', selectedTab);
		var tabName = $('#flowChartTabs').jqxTabs('getTitleAt', selectedTab);
		if (tabName == "✙") {
			createNewJob();
		} else {
			$("#feedContentArea").html("");
			var clickedItem = event.args.item;
			var jobName = $('#flowChartTabs').jqxTabs('getTitleAt', clickedItem);
			var content = $('#flowChartTabs').jqxTabs('getContentAt', clickedItem);
			var workSpaceId = $(content).attr("id");
			if (workSpaceId != null) {
				flowChartWorkSpaceId = workSpaceId;
			}
			if (workSpaceId == null) {
				workSpaceId = $(content).children('div:nth-child(1)').attr("id");
				var childDiv = $(content).children();
				var childDivID = childDiv[0];
				flowChartWorkSpaceId = childDivID['id'];
			}
			if (workSpaceId == null) {
				workSpaceId = $(content).children('div:nth-child(1)').attr("id");
				var childDiv = $(content).children();
				var childDivID = childDiv[1];
				if (childDivID != null) {
					flowChartWorkSpaceId = childDivID['id'];
				}
				if (childDivID == null) {
					var lastChildId = $(content).children().last();
					var getIdDiv = lastChildId[0];
					var childId = getIdDiv['lastChild'];
					flowChartWorkSpaceId = childId['id'];
				}
			}
			var jobId = flowChartWorkSpaceId.substring(10, 100);
			var jobName = $('#flowChartTabs').jqxTabs('getTitleAt', clickedItem);
			$('#currentJobName').val(jobName);
			$("#currentJobId").val(jobId);
			var divHiddenFileds = $('#' + flowChartWorkSpaceId).find('input[type="hidden"]')
			if (divHiddenFileds!=null && divHiddenFileds.length >0) {
				var id = divHiddenFileds[0].id;
				var name = divHiddenFileds[1].id;
				var folderId = $("#" + id).val();
				var folderName = $("#" + name).val();
				$("#folderIdHidden").val(folderId);
				$("#folderNameHidden").val(folderName);
			}
			
		}
			
		/*$("#flowChartTabs").find("li").find("style").remove();
		var lisel = $("#flowChartTabs").find("li.jqx-tabs-title-selected-top");
		var width = $("#flowChartTabs").find("li.jqx-tabs-title-selected-top").width();
		$("#flowChartTabs").find("li.jqx-tabs-title-selected-top").append('<style>.etl-page-body #flowChartTabs .jqx-tabs-title-selected-top::after{margin-left:'+(width+8)+'px !important;}</style>');
*/
	});

	$('#flowChartTabs').unbind('add').on('add', function(event) {
		var selectedTab = event.args.item;
		//        var content = $('#conTabs').jqxTabs('getContentAt', selectedTab);
		var tabName = $('#flowChartTabs').jqxTabs('getTitleAt', selectedTab);
		if (tabName == "✙") {
			$("#flowChartTabs").find("li.jqx-tabs-title").find("div.jqx-tabs-close-button").css("display", "none");
		
			$("#flowChartTabs").find("li.jqx-tabs-title").addClass("etlCreateNewTabIcon");
		}
	});

	$("#currentJobId").val(jobId);
	$("#" + flowChartWorkSpaceId).flowchart({
		linkWidth: 2,
		defaultSelectedLinkColor: '#000055',
		grid: 10,
		distanceFromArrow: 0,
		multipleLinksOnInput: true,
		multipleLinksOnOutput: true,
		defaultSelectedLinkColor: 'red',
		onOpeartorContextMenu: function(operatorId) {
			console.log("operatorId:::" + operatorId);
			openOpeartorContextMenu(operatorId);
			return true;
		},
	});
	
	initialiseMouseSelection();

	$('#conTabs').jqxTabs({ width: "100%", height: "100%", position: 'top' });
	$('#conTabs').on('selected', function(event) {

		$("#savedConnections").jqxTree("refresh");
		var selectedTab = event.args.item;
		var content = $('#conTabs').jqxTabs('getContentAt', selectedTab);
		var id = $(content).attr("id");
		var tabName = $('#conTabs').jqxTabs('getTitleAt', selectedTab);
		if (tabName == "FAV") {
			getFavSchemas();
		}
	});
	//    var levelTabIdHeight = $("#levelTabId").height();
	//    var visionClusterSpliterMainHeight = $("#visionClusterSpliterMain").height();
	////    var levelTabIdHeight = $("#levelTabId").height();
	//    var visionClusterSpliterMainHeight = $("#visionClusterSpliterMain").height();
	//    var pageHeight = $(".visionHeader").height() + $(".visionFooterMain").height() + $(".visionBreadcrumMain").height();
	//    var pageHeight1 = $(".visionHeader").height() + $(".visionFooterMain").height();
	//    var headerHeight = $(".header-navbar").height();
	var splitterHeight = (parseInt($(window).height()) - 110);
	//    hideBreadcrumb();
	var rss = (function($) {
		var createWidgets = function() {
			$('#mainSplitter').jqxSplitter({
				width: '99.7%',
				height: parseInt(splitterHeight),
				splitBarSize: '5px',
				panels: [{ size: "20%" }, { min: '60%', size: "79.3%" }]
			});
			$('#contentSplitter').jqxSplitter({
				width: '100%', height: '100%',
				orientation: 'horizontal',
				splitBarSize: '5px',
				panels: [{ size: "60%", min: 200 }, { min: 30, size: "40%" }]
			});
			var contentSplitterHeight = $("#feedListExpander").height();
			console.log("contentSplitterHeight:::" + contentSplitterHeight);
			$(".flowchart-example-container").css('height', parseInt(contentSplitterHeight) - 22);
			//            $('#connectionsTabs').jqxRibbon({width:5, height: "100%", position: 'left',selectionMode: 'click',mode: 'popup'});
			//            $('#connectionsTabs').jqxTabs({width: "100%", height: "100%", position: 'top', theme: 'energyblue', reorder: true});
			//            $('#designViewTab').jqxTabs({width: "100%", height: "100%",position: 'bottom',theme:'energyblue',reorder: true});
			treeSourcesMenus('ETL_DM_TREE_SOURCES', 'savedSources');
			//            showUploadedFiles('MM_TREE_UPLOADED_FILES', 'uploadSourceFiles');
			//treeSavedConnections(treeObj, 'savedConnections');

			loadSavedConnections(1);

			//            $('#savedConnections').jqxTree('expandAll');
			$('#contentSplitter').on('resize', function(event) {
				var feedContentAreaHeight = $('#feedContentArea').height();
				$('table#sourceDestColsTableId tbody').css('height', parseInt(feedContentAreaHeight) - 70);
				$('table#sourceDestColsTableId tbody').css('overflow-y', 'scroll');
				var contentSplitterHeight = $("#feedListExpander").height();
				console.log("contentSplitterHeight:::" + contentSplitterHeight);
				$(".flowchart-example-container").css('height', parseInt(contentSplitterHeight) - 22);
				if (event.args != null) {
					var panels = event.args.panels;
					if (panels != null) {
						// get first panel.
						var panel1 = panels[0].size;
						// get second panel.
						var panel2 = panels[1].size;
						try {
							// commented by Ashwini for scroll bar issue
							//                            console.log("Tabs Height:Before:" + $("#dataMigrationTabs").jqxTabs("height"));
							//                            $("#dataMigrationTabs").jqxTabs({height: ((parseInt(panel2) - 35) + "px")});
							//                            console.log("Tabs Height:After:" + $("#dataMigrationTabs").jqxTabs("height"));
							//                            $("#dataMigrationTabs .jqx-tabs-content").attr('style', 'height: ' + $("#dataMigrationTabs").jqxTabs("height") + 'px !important');

						} catch (e) {
						}
					}

				}

				// for scrol bar issue
				var feedContentAreaHeight = $("#feedContentArea").height();
				//
				var tbodyHeight = feedContentAreaHeight - 90;
				$(".visionColMappScrollDiv1").css("max-height", tbodyHeight);
				$(".visionEtlJoinClauseTablesDiv").css("max-height", tbodyHeight);
				//                $(".visionEtlMappingTablesDiv").css("max-height", parseInt(feedContentAreaHeight) - 130);
				$(".visionEtlJoinClauseTablesDivScroll").css("max-height", parseInt(feedContentAreaHeight) - 105);
				$(".visionSqlViewQuery1").css("max-height", parseInt(feedContentAreaHeight) - 67)
				$(".visionEtlJoinrClauseTablesDiv").css("max-height", parseInt(feedContentAreaHeight) - 130);
				$(".visionEtlwhereClauseTablesDiv").css("max-height", parseInt(feedContentAreaHeight) - 69);
				var joinTablesHeight = $(".visionEtlJoinrClauseTablesDiv").height();
				$(".viewJoinQueryOuterDivClass").css("max-height", parseInt(feedContentAreaHeight) - (parseInt(joinTablesHeight) + 82));
				//
				var flowchartworkSourcesspaceHeight = $("#feedListExpander").height();
				$("#feedHeader").css("height", parseInt(flowchartworkSourcesspaceHeight));
				$("#feedHeader").css("overflow-y", "auto");
				$("#flowchartworkSourcesspace").css("height", "");
				// for scrol bar issue

				if ($('#dataMigrationTabs').length) {
					$("#dataMigrationTabs").jqxTabs({ height: feedContentAreaHeight });
					console.log("Tabs Height:Before:" + $("#dataMigrationTabs").jqxTabs("height"));
					$("#dataMigrationTabs").jqxTabs({ height: ((parseInt(panel2) - 35) + "px") });
					console.log("Tabs Height:After:" + $("#dataMigrationTabs").jqxTabs("height"));
					$("#dataMigrationTabs .jqx-tabs-content").attr('style', 'height: ' + $("#dataMigrationTabs").jqxTabs("height") + 'px !important');
				}

			});
			$('#mainSplitter').on('resize', function(event) {
				var height = $("#connectionsDiv").height();
				var width = $("#connectionsDiv").width();
				$("#schemaObjectsDiv").css("height", height);
				$("#schemaObjectsDiv").css("width", width);
				var contentSplitterWidth = $("#contentSplitter").width();
				if (contentSplitterWidth > 1121) {

					$(".visionColJoinMappingInput").css('width', '84%');
					$(".visionColMappingInput").css('width', '84%');
				} else if (contentSplitterWidth > 1100 && contentSplitterWidth < 1120) {

					$(".visionColJoinMappingInput").css('width', '81%');
					$(".visionColMappingInput").css('width', '81%');
					//                    $(".visionColJoinMappingInput").attr('style', 'width:81% !important');
					//                    $(".visionColMappingInput").attr('style', 'width:84% !important');


				} else if (contentSplitterWidth > 1000 && contentSplitterWidth < 1100) {
					$(".visionColJoinMappingInput").css('width', '81%');
					$(".visionColMappingInput").css('width', '84%');
					//                    $(".visionColJoinMappingInput").attr('style', 'width:81% !important');
					//                    $(".visionColMappingInput").attr('style', 'width:84% !important');


				} else if (contentSplitterWidth > 900 && contentSplitterWidth < 1000) {
					$(".visionColJoinMappingInput").css('width', '80%');
					$(".visionColMappingInput").css('width', '83%');
					//                    $(".visionColJoinMappingInput").attr('style', 'width:80% !important');
					//                    $(".visionColMappingInput").attr('style', 'width:83% !important');

				} else if (contentSplitterWidth > 800 && contentSplitterWidth < 900) {
					$(".visionColJoinMappingInput").css('width', '78%');
					$(".visionColMappingInput").css('width', '80%');
					//                    $(".visionColJoinMappingInput").attr('style', 'width:78% !important');
					//                    $(".visionColMappingInput").attr('style', 'width:80% !important');

				} else if (contentSplitterWidth > 700 && contentSplitterWidth < 800) {
					$(".visionColJoinMappingInput").css('width', '75%');
					$(".visionColMappingInput").css('width', '78%');
					//                    $(".visionColJoinMappingInput").attr('style', 'width:75% !important');
					//                    $(".visionColMappingInput").attr('style', 'width:78% !important');

				}

			});
			$('#' + flowChartWorkSpaceId).flowchart({
				linkWidth: 2,
				defaultSelectedLinkColor: '#000055',
				grid: 10,
				distanceFromArrow: 0,
				//                defaultOperatorClass:'VisionWorkFlowTest',
				//                multipleLinksOnInput: true,
				//                multipleLinksOnOutput: true,
				defaultSelectedLinkColor: 'red',
				onOperatorContextMenu: function(operatorId) {
					console.log("operatorId:::" + operatorId);
					openOpeartorContextMenu(operatorId);
					return true;
				},
			});
			
			initialiseMouseSelection();
			
			/*$('#' + flowChartWorkSpaceId).flowchart({
				//                onOperatorSelect: function (operatorId) {
				//                    openOpeartorContextMenu(operatorId);
				//                    return true;
				//                },
				onAfterChange: function(changeType) {

					if (!operatorDoublClick) {
						trfmRulesChanged = true;
						console.error("trfmRulesChanged : " + trfmRulesChanged);
						return true;
					}
				}, onOperatorSelect: function(changeType) {
					$(document).find("input").blur();
					return true;
				},
				onLinkSelect: function(changeType) {
					$(document).find("input").blur();
					return true;
				}
			});*/
		};
		return {
			init: function() {
				createWidgets();
			}
		}
	}(jQuery));
	rss.init();
	//    setTimeout(function(event){
	//        window.dispatchEvent(new Event('resize'));
	//    }, 200);

	showEtlList('savedSources', 'newConnections');
	//    showEtlList('savedConnectionsIconsDiv', 'newConnections');

	//  $("#savedConnectionsIconsDiv").hide();
	//    $("#availableJobsDiv").hide();
	//    $("#schemaObjectsDiv").hide();
	//    $("#dataModellerJobsDiv").hide();
}

function loadETL(menu) {
	menu = menu != null ? menu : "";
//	if ($("#etlPageBody").length && globalETLLoadMenu == menu) {
//		return false;
//	}
	globalETLLoadMenu = menu != null ? menu : "";
	$.ajax({
		type: "post",
		traditional: true,
		dataType: 'json',
		url: "getDataPiping",
		cache: false,
		data: {
			treeId: 'MM_SOURCE_AVAILABLE_CONNECTION_TREE',
		},
		success: function(response) {


			if (response != null && !jQuery.isEmptyObject(response)) {
	           var currentV10ConnObj = response['currentV10ConnObj'];
	            savedDBData["Current_V10"] = currentV10ConnObj;
				var availableConnections = response['availableConnections'];
				$.each(availableConnections, function(i) {
					var connObj = availableConnections[i];
					var connectionName = connObj['CONNECTION_NAME']
					savedDBData[connectionName] = connObj;
				})
				
				var connectionsDivStr = response['connectionDivsStr'];
				$("#DxpVisualizationbutton").hide()
				$(".searchMainWrap").show();
				$(".languageSelectionBox").show();
				$(".settingheaderImage").show();
				$("#pageBodyContent").remove();
				$("#pageBody").append('<div class="page-body-content" id="pageBodyContent"><div id ="etlPageBody" class="etl-page-body"></div></div></div>');
				$("#etlPageBody").append(connectionsDivStr);
				var componentsDivStr = response['componentsDiv'];
				$("#etlIconGroup").append(componentsDivStr);
				var connMainDivStr = response['connMainDiv'];
				$("#ConnInnerDiv").append(connMainDivStr);
				$("#treePageSize").val(50);
				var treeObj = {};
				try {
					treeObj = response['treeObj']
				} catch (e) {
				}

				showSavedJobs();

				splitterAdjustment(treeObj, connectionsDivStr);

				initializeOperators();
			
				setTimeout(function() {
					$(window).resize(function() {
						var $flowchart = $('#' + flowChartWorkSpaceId);
						$flowchart.flowchart("setPositionRatio", 1);
						 $("#feedListExpander").css('height','100%');
						var savedSourcesHeight = $("#savedSources").height();
						//                        $("#avaialableJobsTree").css("height", parseInt(savedSourcesHeight) + "px");
						$("#panelavaialableJobsTree").css("height", ( parseInt(savedSourcesHeight)+ 20 ) + "px");
					
						/*$("#feedListContainer").parent().css("position","relative");
						$("#feedListContainer").parent().css("top","25px");
						
						$("#feedHeader").css("position","relative");
						$("#feedHeader").css("top","45px");*/

					}).resize();
				}, 600);
				
				$("#etlIconGroup div").draggable({
					cursor: "move",
					opacity: 0.7,
					helper: 'clone',
					containment: "#jqxWidget",
					//                                appendTo: 'body',
					zIndex: 999999,
					helper: function(event, ui) {
						var $this = $(this);
						var innerText = $this.text();
						var descripttion = $this.attr("title");
						var operatorData = {
							top: event.screenX,
							left: event.screenY,
							properties: {
								body: '<div title="' + descripttion + '" class="visionOpLabelDiv">' + innerText + '</div>',
								inputs: {
									input_1: {
										label: '',
										multipleLinks: true
									}
								},
								outputs: {
									output_1: {
										label: '',
										multipleLinks: true

									}
								}
							}
						};
						//            var obj = $('#'+flowChartWorkSpaceId).flowchart('getOperatorElement', operatorData);
						var contentSplitterStyle = $("#contentSplitter").css("display");
						var $flowchart = $('#' + flowChartWorkSpaceId);
						var operatorDiv = $flowchart.flowchart('getOperatorElement', operatorData);
						var operatorbody = operatorDiv.prop("outerHTML");
						$("#draggableOperatorId").remove();
						var body = '<div id="draggableOperatorId" style="z-index: 999999;">' + operatorbody + '</div>';
						$("body").append(body);
						return $("#draggableOperatorId");
						//                        return  $flowchart.flowchart('getOperatorElement', operatorData);
						//            return  $('#'+flowChartWorkSpaceId).flowchart('getOperatorElement', operatorData);
					},
					stop: function(e, ui) {
						$(".flowchart-operator-connector-label").hide();
						var contentSplitterStyle = $("#contentSplitter").css("display");
						var contentSplitter1Style = $("#contentSplitter1").css("display");
						var $flowchart;
						var $container;
						var $flowchart = $('#' + flowChartWorkSpaceId);
						var $container = $('#' + flowChartWorkSpaceId);
						//            var $flowchart = $('#'+flowChartWorkSpaceId);
						//            var $container = $('#'+flowChartWorkSpaceId);
						var $this = $(this);
						var innerText = $this.html();
						var title = $(this).attr("data-optitle");
						if (!(title != null && title != '')) {
							title = $(this).attr("title");
						}
						var imgsrc = $(this).attr("data-imgsrc");
						var iconType = $(this).attr("data-type");
						var component = $(this).attr("component"); // ravi component
						var functionName = $(this).attr("data-functionname");
						if (!(functionName != null && functionName != '')) {
							//                functionName = "showTranformationRules(this)";
						}
						var jobId;
						var jobName;
						if (previousOperatorId != null) {
							var previousMapOperatorData = $('#' + flowChartWorkSpaceId).flowchart('getOperatorData', previousOperatorId);
							jobId = previousMapOperatorData['jobId'];
							jobName = previousMapOperatorData['jobName'];
						}

						trfmRulesChanged = true;
						//            var title = "Click here to add transformation rules";

						var elOffset = ui.offset;
						var containerOffset = $container.offset();
						if (elOffset.left > containerOffset.left &&
							elOffset.top > containerOffset.top &&
							elOffset.left < containerOffset.left + $container.width() &&
							elOffset.top < containerOffset.top + $container.height()) {
							var flowchartOffset = $flowchart.offset();
							var relativeLeft = elOffset.left - flowchartOffset.left;
							var relativeTop = elOffset.top - flowchartOffset.top;
							var positionRatio = $flowchart.flowchart('getPositionRatio');
							relativeLeft /= positionRatio;
							relativeTop /= positionRatio;
							elOffset.left = relativeLeft;
							elOffset.top = relativeTop;
						}

						var bodyLabel = "";
						//if (component != "Y") {
							bodyLabel = '<div class="visionOpLabelDiv" title="Double click to Rename" ondblclick="renameOperatorDisplayLabel(\'' + title + '\',this)" style="width:' + (title.length * 5) + 'px;margin-left:' + (((title.length * -5) / 2) + 14) + 'px;">' + title + '</div>'
						//}

						//mapDivId:'',

						var executionSequence = getHighestSequence(flowChartWorkSpaceId);

						var data = {
							top: elOffset.top,
							left: elOffset.left,
							iconType: iconType,
							component: component,
							jobName: jobName,
							jobId: jobName,
							executionSequence: executionSequence,
							timeStamp: new Date().getTime(),
							//                statusLabel: innerText,
							properties: {

								//                                title: innerText,
								body: '<div data-icontype="' + iconType + '" title="' + title + '" ondblclick=' + functionName
									+ ' class="visionMapOperator"><img src="' + imgsrc + '" class="visionETLIcons" '
									+ 'style="width:20px;height: 20px;"/>'
									+ '<div class="etlOperatorExecutionSequecne"><span>' + executionSequence + '</span></div>'
									+ '</div>'
									+ bodyLabel,
								inputs: {
									input_1: {
										label: 'I-' + iconType,
										multipleLinks: true
									}
								},
								outputs: {
									output_1: {
										label: 'O-' + iconType,
										multipleLinks: true

									}
								}
							}
						};
						var operatorId = $flowchart.flowchart('addOperator', data);

						$(".flowchart-operator-connector-label").hide();
						$(".flowchart-operator-title").hide();
						console.log("operatorId:::" + operatorId);

						initializeOperators();
					}
				});
				$("#savedConnections").on('mousedown', function(event) {


					var target = $(event.target).parents('li:first')[0];
					var rightClick = isRightClick(event);
					if (rightClick && target != null) {
						$("#savedConnections").jqxTree('selectItem', target);
						var selectedItem = $('#savedConnections').jqxTree('getSelectedItem');
						if (selectedItem.level == 5 || selectedItem.level == 4) {
							var menuItems = "";
							var menuHeight;
							var columnObj = globalTreeObj['treeColumnObj'][selectedItem.level];
							var initParams = columnObj.TREE_INIT_PARAMS;
							if (initParams != null) {
								var rightClickFunc = initParams.uuu_RightClickFunc;
								if (rightClickFunc != null) {
									var options = rightClickFunc.split(";");
									menuHeight = options.length;
									$.each(options, function(index) {
										var menuItem = options[index].split(":")[0];
										var funcName = options[index].split(":")[1];
										menuItems += "<li onclick='" + funcName + "'>" + menuItem + "</li>"
									});
								}
							}
							$("#jqxMenu").remove();
							$(".etl-page-body").append("<div id='jqxMenu'><ul></ul></div>");
							$("#jqxMenu ul").html(menuItems);
							var contextMenu = $("#jqxMenu").jqxMenu({
								width: '120px', height: menuHeight * 30 + 'px', autoOpenPopup: false, mode: 'popup',
								//                                theme: 'energyblue'
							}); // ravi start




						} else if (selectedItem.level == 3) {// ravi start
							var height = 1;
							var parentListItem = selectedItem.parentElement.parentElement.parentElement;
							if (parentListItem != null) {
								var selectedParentItem = $('#savedConnections').jqxTree('getItem', parentListItem);
							}


							//   PKH View file data START--->  


							var item = $("#savedConnections").jqxTree('getSelectedItem');
							var fileType = "";
							var title = item.label;
							var fileExtensions = [".xlsx", ".xls", ".XLS", ".XLSX", ".txt", ".csv", ".xml", ".TXT", ".CSV", ".XML", ".JSON", ".json", ".PDF", ".pdf", ".JPEG", ".jpeg", ".PNG", ".png"];
							if (item != null && !item.hasItems && title != null && title != '') {
								for (var i = 0; i < fileExtensions.length; i++) {
									if (title.endsWith(fileExtensions[i])) {
										fileType = fileExtensions[i];
										break;
									}
								}
							}
							var fileType = "." + title.substr((title.lastIndexOf('.') + 1));
							var fileObj = {};
							var filePath = item['value'];
							if (filePath != null && filePath.lastIndexOf("\\") > -1) {
								filePath = filePath.substring(filePath.lastIndexOf("\\") + 1);
							}
							fileObj['filePath'] = filePath;
							fileObj['fileType'] = fileType;
							for (var entitykey in HtmlEntities) {
								var entity = HtmlEntities[entitykey];
								var regex = new RegExp(entitykey, 'g');
								title = title.replace(regex, entity);
							}
							fileObj['fileName'] = title;
							//   PKH View file data end ----->  

							if (selectedParentItem != null && selectedParentItem.label == "Files") {
								height = 2;
								var menuItems = "<li onclick='deleteFile()' file-data='" + JSON.stringify(fileObj) + "' >Delete</li>";
								menuItems += "<li onclick=viewFileData('" + JSON.stringify(fileObj) + "')>View File Data</li>";
								$("#jqxMenu").remove();
								$(".etl-page-body").append("<div id='jqxMenu'><ul></ul></div>");
								$("#jqxMenu ul").html(menuItems);
								var contextMenu = $("#jqxMenu").jqxMenu({
									width: '140px', height: height * 30 + 'px', autoOpenPopup: false, mode: 'popup',
									//                                    theme: 'energyblue'
								}); // ravi start

							} else {
								var menuItems = "";
								height = 1;
								if (selectedItem.value != "Current_V10") {
									menuItems += "<li onclick='viewConnection()'>View</li>";
									menuItems += "<li onclick='deleteConnection()'>Delete</li>";
									height = 3;
								}
								menuItems += "<li onclick=viewSQLEditor('" + selectedItem.value + "')>SQL</li>";
								$("#jqxMenu").remove();
								$(".etl-page-body").append("<div id='jqxMenu'><ul></ul></div>");
								$("#jqxMenu ul").html(menuItems);
								var contextMenu = $("#jqxMenu").jqxMenu({
									width: '140px', height: height * 30 + 'px', autoOpenPopup: false, mode: 'popup',
									//                                    theme: 'energyblue'
								}); // ravi start
							}
						} else { // ravi end
							return false;
						}


						var scrollTop = $(window).scrollTop();
						var scrollLeft = $(window).scrollLeft();
						contextMenu.jqxMenu('open', parseInt(event.clientX) + 5 + scrollLeft, parseInt(event.clientY) + 5 + scrollTop);
						return false;
					}
				});
				// ravi start
				$("#schemaObjectsDiv").on('mousedown', function(event) {

					var target;
					if ($(event.target).hasClass('visionObjectNameDiv')) {
						target = $(event.target);
					} else {
						target = $(event.target).parents('div.visionObjectNameDiv')[0];
					}



					var rightClick = isRightClick(event);
					if (rightClick && target != null) {

						$(".visionObjectNameDiv").removeClass("visionSelectedObject");
						$(target).addClass("visionSelectedObject");
						$(".visionObjectNameDiv").find('span').removeClass("visionHighlightTables");
						$(target).find('span').addClass("visionHighlightTables");
						var menuItems = "";
						var menuHeight;
						var columnObj = globalTreeObj['treeColumnObj'][5];
						var initParams = columnObj.TREE_INIT_PARAMS;
						if (initParams != null) {
							var rightClickFunc = initParams.uuu_RightClickFunc;
							if (rightClickFunc != null) {
								var options = rightClickFunc.split(";");
								menuHeight = options.length;
								$.each(options, function(index) {
									var menuItem = this.split(":")[0];
									var funcName = this.split(":")[1];
									menuItems += "<li onclick='" + funcName + "'>" + menuItem + "</li>"
								});
							}
						}

						$("#jqxMenu").remove();
						$(".etl-page-body").append("<div id='jqxMenu'><ul></ul></div>");
						$("#jqxMenu ul").html(menuItems);
						var contextMenu = $("#jqxMenu").jqxMenu({
							width: '120px', height: menuHeight * 30 + 'px', autoOpenPopup: false, mode: 'popup',
							//                            theme: 'energyblue'
						}); // ravi start

						var scrollTop = $(window).scrollTop();
						var scrollLeft = $(window).scrollLeft();
						contextMenu.jqxMenu('open', parseInt(event.clientX) + 5 + scrollLeft, parseInt(event.clientY) + 5 + scrollTop);
						return false;
					}
				});
//				$("#availableJobsId").on('mousedown', function(event) {
//
//
//					var target = $(event.target).parents('li:first')[0];
//					var treeItem = $(event.target).closest('.visionETLAvailableJobs');
//					var rightClick = isRightClick(event);
//					if (rightClick && target != null && treeItem.length > 0) {
//						$("#avaialableJobsTree").jqxTree('selectItem', target);
//						var selectedItem = $('#avaialableJobsTree').jqxTree('getSelectedItem');
//						var jobName = selectedItem['label'];
//						var jobId = $(target).find("div.visionETLAvailableJobs").attr("id");
//						
//						var  folderId =  $('#'+jobId).closest("ul").siblings("div").find(".visionEtlTreeFolders").attr("id"); 
//						var folderName = $("#"+folderId).text(); 				
//						var menuItems = "<li onclick=\"openSavedJob(" + true + ",'" + jobId + "','" + jobName +"','" + folderName +"','" + folderId + "')\">Open</li>";
//						menuItems += "<li onclick=\"rightClickProcessJob('" + jobId + "')\">Execute</li>";
//						menuItems += "<li onclick=\"deleteJob('" + jobId + "')\">Delete</li>";
//						menuItems += "<li onclick=\"copyJob('" + jobId + "')\">Copy</li>"; // -----------------ravi copy job
//						menuItems += "<li onclick=\"renameJob('" + jobId + "','" + jobName + "')\">Rename</li>"; // -----------------ravi copy job
//						menuItems += "<li onclick=\"scheduleJob('" + jobId + "')\">Schedule</li>";
//						var menuHeight = 4;
//
//						$("#jqxMenu").remove();
//						$(".etl-page-body").append("<div id='jqxMenu'><ul></ul></div>");
//						$("#jqxMenu ul").html(menuItems);
//						var contextMenu = $("#jqxMenu").jqxMenu({
//							width: '120px', height: menuHeight * 27.5 + 'px', autoOpenPopup: false, mode: 'popup',
//							//                            theme: 'energyblue'
//						}); // ravi start
//
//
//						var scrollTop = $(window).scrollTop();
//						var scrollLeft = $(window).scrollLeft();
//						contextMenu.jqxMenu('open', parseInt(event.clientX) + 5 + scrollLeft, parseInt(event.clientY) + 5 + scrollTop);
//						return false;
//					}
//					if (rightClick && target != null && treeItem.length == 0) { // // -----------------ravi new job
//						$("#avaialableJobsTree").jqxTree('selectItem', target);
//						var selectedItem = $('#avaialableJobsTree').jqxTree('getSelectedItem');
//						var menuItems = "<li onclick=\"createNewJob()\">New Job</li>"
//							+ "<li onclick=\"createNewSaveJobFolder()\">New Folder</li>"
//							+ "<li onclick=\"deleteFolder()\">Delete Folder</li>"
//
//						var menuHeight = 3;
//						$("#jqxMenu").remove();
//						$(".etl-page-body").append("<div id='jqxMenu'><ul></ul></div>");
//						$("#jqxMenu ul").html(menuItems);
//						var contextMenu = $("#jqxMenu").jqxMenu({
//							width: '120px', height: menuHeight * 30 + 'px', autoOpenPopup: false, mode: 'popup',
//							//                            theme: 'energyblue'
//						}); // ravi start
//
//						var scrollTop = $(window).scrollTop();
//						var scrollLeft = $(window).scrollLeft();
//						contextMenu.jqxMenu('open', parseInt(event.clientX) + 5 + scrollLeft, parseInt(event.clientY) + 5 + scrollTop);
//						return false;
//					}
//				});
				// disable the default browser's context menu.
				$(document).on('contextmenu', function(e) {
					if ($(e.target).parents('.jqx-tree').length > 0) {
						return false;
					}
					if ($(event.target).parents('div.visionObjectNameDiv').length > 0 || $(event.target).hasClass('visionObjectNameDiv')) {
						return false;
					}
					if ($(event.target).parents('div.ConnInnerDivClass').length > 0 || $(event.target).hasClass('ConnInnerDivClass')) {
						return false;
					}
					if ($(event.target).parents('div.etl-page-body').length > 0 || $(event.target).hasClass('etl-page-body')) {
						return false;
					}

					return true;
				});
				function isRightClick(event) {
					var rightclick;
					if (!event)
						var event = window.event;
					if (event.which)
						rightclick = (event.which == 3);
					else if (event.button)
						rightclick = (event.button == 2);
					return rightclick;
				}
				//$("#sqlIconsdiv").remove();
				$('#editorViewDiv').jqxTabs({
					width: "100%",
					height: "100%",
					position: 'top',
					//                    theme: 'energyblue',
					reorder: true,
					showCloseButtons: true
				});
				
				
				
					
				
				$('#editorViewDiv').unbind('selected').on('selected', function(event) {
							
				/*	var width = $("#editorViewDiv").find("li.jqx-tabs-title-selected-top").width();
					$("#editorViewDiv").find("li").find("style").remove();
					$("#editorViewDiv").find("li.jqx-tabs-title-selected-top").append('<style>.etl-page-body #editorViewDiv .jqx-tabs-title-selected-top::after{margin-left:'+(width+8)+'px !important;}</style>');
				*/
				});
						
						
				$("#Current_V10_editor_1").attr("data-connction-name", "Current_V10");
				var sqlMainEditor = ace.edit("Current_V10_editor_1", {
					mode: "ace/mode/sql",
					// enableBasicAutocompletion: true, // the editor completes the statement when you hit Ctrl + Space
					// showPrintMargin: true, // hides the vertical limiting strip
					fontSize: "100%", // ensures that the editor fits in the environment
					minLines: 5,
					maxLines: 20,
					wrap: true,
					autoScrollEditorIntoView: true
				});
                                
                                 $("#Current_V10_editor_1").find(".ace_content").on("mousedown",function(mdevent){
                                       
                                        if ( mdevent.ctrlKey ) {
                                            var  text = sqlMainEditor.getSelectedText();
                                            if (text!=null && text!="") {
                                                var columnsObj = globalTreeObj['treeColumnObj'];
                                                var extTreeParams = $("#extTreeParams").val();

                                                var data = {
                                                        parentkey: text.toUpperCase(),
                                                        treeId: globalTreeObj['treeId'],
                                                        level: '5',
                                                        extTreeParams: {},
                                                        columnsObj: JSON.stringify(columnsObj),
                                                        connectionObj: JSON.stringify(savedDBData['Current_V10']),
                                                        startIndex: 0,
                                                        endIndex: 50,
                                                        DBValue: 'Current_V10',
                                                        tableName: text.toUpperCase()
                                                };

                                                viewTableDataGrid(data);
                                            }
                                           
                                           
                                        }
                                     
                                    });
                                
                                 $("#Current_V10_editor_1").on("keydown",function(event){

                                    if( event.ctrlKey && event.which === 13 ) {
                                        console.log('you pressed ctrlKey+Enter');
                                        executeEditorScripts("editorViewDiv");
                                    } else if (event.ctrlKey ){
                                      
                                   
                                       // wrap words in spans
//                                        $("#Current_V10_editor_1").find('.ace_line').each(function() {
//                                            var $this = $(this);
//                                            $this.html($this.text().replace(/\b(\w+)\b/g, "<span>$1</span>"));
//                                            
//                                             $("#Current_V10_editor_1").find(".ace_scroller").find(".ace_content").hover(function() {
//                                                $(this).css('background-color','#ffff66').text(); 
//                                            },function() {
//                                                 $(this).css('background-color',''); 
//                                            });
//                                            
//                                        });
                                       // ace_text-layer
                                       
                                        // bind to each span
                                       

                                    }
                                    
                                    
                                })
				
				$("#scriptsExecute").click(function() {
					executeEditorScripts("editorViewDiv");
				});
				$('#Current_V10_editor_1_splitter').jqxSplitter({
					width: '100%', height: '100%',
					orientation: 'horizontal',
					panels: [{ size: "50%", min: 50 }, { min: 50, size: "50%" }]
				});
				$('#jobSchedulingViewSplitter').jqxSplitter({
					width: '100%', height: '100%',
					orientation: 'vertical',
					panels: [{ size: "20%", min: 50 }, { min: 50, size: "80%" }]
				});
                                
                                
			}

		},
		error: function(e) {
			console.log(e);
			sessionTimeout(e);
			stopLoader();
		}
	});
}

//showETLConnections('ETL_DM_TREE_SOURCES', 'savedSources')
function showETLConnections(menuId, treeId) {
	try {
		labelObject = JSON.parse($("#labelObjectHidden").val());
	} catch (e) {

	}
	var labelObject = {};
	$.ajax({
		type: 'POST',
		traditional: true,
		dataType: 'html',
		cache: false,
		url: 'getTreeDataMigrationConnections',
		//        url: 'getTreeDataMigrationMenus',
		data: {
			menuId: menuId,
			ssRole: "CLOUD",
			ssOrgId: "C1F5CFB03F2E444DAE78ECCEAD80D27D"
		},
		success: function(response) {
			$("#" + treeId).remove();
			$("#pageBodyContent").append('<div id="savedSources" class ="savedSourcesClass" ></div>');
			stopLoader();
			if (response != null) {
				//                console.log("response:::" + response);
				response = JSON.parse(response);
				var menuResult = response.menuResult;
				var treeMenuData = JSON.parse(menuResult);
				var source =
				{
					datatype: "json",
					datafields: [
						{ name: 'MENU_ID' },
						{ name: 'PARENT_ID' },
						{ name: 'PARENT_MENU_ID' },
						{ name: 'MENU_DESCRIPTION' },
						{ name: 'icon' },
						{ name: 'value' },
						//                                {name: 'iconsize'},
						{ name: 'TOOL_TIP' },
						{ name: 'MAIN_DESCRIPTION' }
					],
					localdata: treeMenuData
				};
				// create data adapter.
				var dataAdapter = new $.jqx.dataAdapter(source);
				// perform Data Binding.
				dataAdapter.dataBind();
				var records = dataAdapter.getRecordsHierarchy('MENU_ID',
					'PARENT_ID',
					'items',
					[{ name: 'MENU_DESCRIPTION', map: 'html' }]
				);
				//                        'MENU_ID','PARENT_MENU_ID','TOOL_TIP');

				if (treeId != null && treeId != "" && treeId != undefined && treeId == "savedSources") {
					$('#' + treeId).jqxTree({
						source: records, allowDrag: true, allowDrop: true, height: '90%', width: '100%', toggleMode: 'click',
						//                        theme: 'energyblue',
						dragEnd: function(item) {
							createImageSourcesFlowchart(item, item.value, 'File');
							createImageSourcesDataModellerFlowchart(item, item.value, 'File');
							return true;
						}
					});
				} else if (treeId != null && treeId != "" && treeId != undefined && treeId == "descSplitterContainer") {
					$('#' + treeId).jqxTree({
						source: records, allowDrag: true,
						allowDrop: true, height: '90%', width: '100%',
						toggleMode: 'click',
						//                        theme: 'energyblue',
						dragEnd: function(item) {
							createImageDestinationFlowchart(item, item.value, 'File');
							createImageDestinationDataModellerFlowchart(item, item.value, 'File');
							return true;
						}
					});
				}


				$('#' + treeId).css('visibility', 'visible');
				$('#' + treeId).on('select', function(event) {
					var item = $('#' + treeId).jqxTree('getItem', event.args.element);
					var item = $('#' + treeId).jqxTree('getItem', event.args.element);
					if (item != null && !jQuery.isEmptyObject(item) && item['value'] != null
						&& item['value'] != ''
						&& item['value'] != '#') {
						eval(item['value']);
					}
					$('#' + treeId).jqxTree('selectItem', null);

				});
				$(".savedSourcesClass").hover(function(e) {
					$("#panelsavedSourcesverticalScrollBar").show();
				}, function(e) {
					$("#panelsavedSourcesverticalScrollBar").hide();
				})
				$("#panelsavedSourcesverticalScrollBar").hide();
				$('.visionProgressSteps').hide();
				//                $("#" + treeId).jqxTree('expandAll');

			}
		},
		error: function(e) {
			sessionTimeout(e);
		}
	});
}

function uploadFilePopupETL(response, type, typeName) {
	var labelObject = {};
	try {
		labelObject = JSON.parse($("#labelObjectHidden").val());
	} catch (e) {
	}
	$("#dialog").html(response);
	$("#dialog").dialog({
		title: (labelObject['Upload'] != null ? labelObject['Upload'] : 'Upload'),
		//        modal: true,
		width: 500,
		height: 350,
		fluid: true,
		open: function() {
			//            $(this).closest(".ui-dialog").find(".ui-button").eq(1).addClass("dialogyes");
			//            $(".visionHeaderMain").css("z-index", "999");
			//            $(".visionFooterMain").css("z-index", "999");
		},
		beforeClose: function(event, ui) {
			//            $("#savedSources").jqxTree('selectItem', null);
			//            $(".visionHeaderMain").css("z-index", "99999");
			//            $(".visionFooterMain").css("z-index", "99999");
		}
	});
	//    var modelObj = {}
	//    modelObj['title']= 'File Upload';
	//    modelObj['body']= response;
	//    createModal('dialog',modelObj);
	$("#selectedTreeType").val(type);
	$("#selectedTreeTypeName").val(typeName);
	$("#importTreeDMFile").hide();
	setTimeout(function() {
		$("html").on("dragover", function(e) {
			e.preventDefault();
			e.stopPropagation();
		});
		$("html").on("drop", function(e) {
			e.preventDefault();
			e.stopPropagation();
		});
		$('.treeDMFileDivClass').on('drop', function(event) {

			$("#wait").css("display", "block");
			var filetype = $('#selectedTreeTypeName').val();
			//            dmTreeFileUpload("Y", filetype);

			//            if (filetype == 'XLSX' || filetype == 'XLS')
			//            {
			//                var files = event.target.files; // FileList object
			//                parseExcel(files[0], filetype);
			//            } else {
			//                dmTreeFileUpload("N", filetype);
			var files = event.target.files;
			uploadSelectedFileETL(files[0], filetype);
			//            }
		});
		$("#visionTreeDmFileUpload").click(function() {
			var filetype = $('#selectedTreeTypeName').val();
			console.log("iam in clickable ");
			//            dmTreeFileUpload("N", filetype);

			$("#importTreeDMFile").click();
			//            $("#importTreeDMFile").trigger("change");
		});
		$("#importTreeDMFile").on('change', function(event) {

			var filetype = $('#selectedTreeTypeName').val();
			console.log("iam in files change ");
			//            dmTreeFileUpload("N", filetype);
			//            if (filetype == 'XLSX' || filetype == 'XLS')
			//            {
			//                var files = event.target.files; // FileList object
			//                parseExcel(files[0], filetype);
			//            } else {
			var files = event.target.files;
			//                dmTreeFileUpload("N", filetype);
			uploadSelectedFileETL(files[0], filetype);
			//            }

		});
	}, 300);
}

function dmTreeFileUpload(draganddropInd, fileType) {
	labelObject = {};
	try {
		labelObject = JSON.parse($("#labelObjectHidden").val());
	} catch (e) {

	}
	var params = {};
	params['selectedFiletype'] = fileType;
	var browseId = "#importTreeDMFile";
	$(browseId).ajaxfileupload({
		'action': 'importTreeDMFile',
		params: params,
		'onComplete': function(response) {
			$("#Loader").css("display", "none");
			$("body").css({ "pointer-events": "auto" });
			var message = response.message;
			if (message != null && message.indexOf("{") > -1 && message.indexOf("}") > -1) {
				message = message.substring(message.indexOf("{"), message.indexOf("}") + 1);
			}
			message = JSON.parse(message);
			var fileName = message.fileName;
			var result = message.result;
			if (result != null && result.indexOf("successfully") > -1) {
				$("#visionShowFileUploadMsg").html('<p style="color:green">' + result + '</p>');
			} else {
				$("#visionShowFileUploadMsg").html('<p style="color:red">' + result + '</p>');
			}
			$("#importTreeDMFile").remove();
			var fileImprtDiv = "<input type='file' name='importTreeDMFile' id='importTreeDMFile' style='display:none'>";
			$("#visionTreeDmFileUpload").parent().append(fileImprtDiv);
			console.log("On Complete::");
			// files expand ravi start
			if (fileType != null) {
				var treeItemElement = globalFileTreeItem[fileType];
				if (treeItemElement != null) {
					var $element = $(treeItemElement);
					var children = $element.find('ul:first').children();
					if (children != null && children.length > 0) {
						$.each(children, function(index) {
							$('#savedConnections').jqxTree('removeItem', this)
						})
						$('#savedConnections').jqxTree('addTo', { label: 'dummy', value: "ajax" }, treeItemElement);
						$('#savedConnections').jqxTree('collapseItem', treeItemElement);
						$('#savedConnections').jqxTree('expandItem', treeItemElement);
					}
				}
			}
			//            var treeItemElement = globalFileTreeItem[fileType];
			//            var $element = $(treeItemElement);
			//            var children = $element.find('ul:first').children();
			//            $.each(children, function (index) {
			//                $('#savedConnections').jqxTree('removeItem', this)
			//            })
			//            $('#savedConnections').jqxTree('addTo', {label: 'dummy', value: "ajax"}, treeItemElement);
			//            $('#savedConnections').jqxTree('collapseItem', treeItemElement);
			//            $('#savedConnections').jqxTree('expandItem', treeItemElement);
			// files expand ravi end 
		},
		'onStart': function() {
			$('#Loader').show();
			$("body").css({ "pointer-events": "none" });
			$("#Loader").css("display", "block");
		}
	});
	if (draganddropInd == 'N') {
		$("#importTreeDMFile").click();
	}

}

function parseExcel(file, filetype) {
	var sheets = [];
	var fileName = file['name'];
	var fileDataType = file['type'];
	var reader = new FileReader();
	if (filetype != null && filetype != '' && filetype != undefined) {
		filetype = filetype.toLowerCase();
	}
	reader.onload = function(e) {


		var data = e.target.result;
		var workbook;
		if (filetype == 'xls') {
			workbook = XLS.read(data, {
				type: 'binary',
				cellDates: true
			});
		} else if (filetype == 'xlsx') {
			//            workbook = XLSX.read(data, {
			//                type: 'binary',
			//                cellDates: true
			//            });
			workbook = XLSX.read(data, { type: 'binary', cellDates: true, cellNF: true, cellText: false });
		}
		var headersObj = {};
		workbook.SheetNames.forEach(function(sheetName) {

			sheets.push(sheetName);
			//        const sheet = workbook.Sheets[sheetName]
			//        const headers = extractHeader(sheet);
			//        headersObj[sheetName]= headers;
		});
		var checkBoxDiv = "<div id='visionETLXlsxFileSelectId' class='visionETLXlsxFileSelectClass'>";
		checkBoxDiv += "<div id='VisionETLXlsxFileNameId' class='VisionETLXlsxFileNameClass'></div>";
		checkBoxDiv += "<label><input type='checkbox' id='visionETLXlsxFileIdAll' name='visionETLXlsxFileClass' value='All Sheets'/>All Sheets</label>";
		$.each(sheets, function(index, value) {
			checkBoxDiv += "<label><input type='checkbox' class='visionETLXlsxFileClass' name='visionETLXlsxFileClass' value='" + value + "'/>" + value + "</label>";
		});
		checkBoxDiv += "<label><input type='radio' id='visionETLXlsxSameFile' name='visionETLXlsxFileClass' value='Y' checked='checked'/>Save as same File</label>";
		checkBoxDiv += "<label><input type='radio' id='visionETLXlsxDiffFile' name='visionETLXlsxFileClass' value='N' />Save as Different Files</label>";
		checkBoxDiv += "</div>";
		getCheckBoxXlsxFileSheet(checkBoxDiv, workbook, file, filetype, fileName, fileDataType, sheets);
	}


	reader.onerror = function(ex) {
		console.log(ex);
	};
	reader.readAsBinaryString(file);
}


function getCheckBoxXlsxFileSheet(checkBoxDiv, workbook, file, filetype, fileName, fileDataType, sheets) {
	labelObject = {};
	try {
		labelObject = JSON.parse($("#labelObjectHidden").val());
	} catch (e) {

	}
	$("#dialog1").html(checkBoxDiv);
	$("#dialog1").dialog({
		title: (labelObject['Xlsx Sheets'] != null ? labelObject['Xlsx Sheets'] : 'Xlsx Sheets'),
		modal: true,
		width: 300,
		minHeight: 180,
		height: 'auto',
		fluid: true,
		buttons: [{
			text: (labelObject['Upload'] != null ? labelObject['Upload'] : 'Upload'),
			click: function() {
				$("#Loader").css("display", "block");
				var checkBoxIds = $('.visionETLXlsxFileClass:checked').map(function() {
					return this.value;
				}).get();
				function extractHeader(ws) {
					const header = []
					const columnCount = XLSX.utils.decode_range(ws['!ref']).e.c + 1
					for (let i = 0; i < columnCount; ++i) {
						header[i] = ws[`${XLSX.utils.encode_col(i)}1`].v
					}
					return header
				}

				if (checkBoxIds != null && checkBoxIds.length > 0) {
					$.each(sheets, function(index, value) {
						if (value != null && value != '' && value != undefined) {
							if (!(checkBoxIds.indexOf(value) > -1)) {
								const sidx = workbook.SheetNames.indexOf(value);
								if (sidx == -1) {

								} else {
									workbook.SheetNames.splice(sidx, 1);
									delete workbook.Sheets[value];
									delete workbook.Workbook.Sheets.splice(sidx, 1)
										;
								}

							}
						}
					});
					var JSONData = {}
					var headersObj = {}
					var sheetsArray = []
					workbook.SheetNames.forEach(function(sheetName) {

						var XL_row_object = XLSX.utils.sheet_to_json(workbook.Sheets[sheetName], { raw: true })
						JSONData[sheetName] = XL_row_object;
						//            document.getElementById("jsonObject").innerHTML = json_object;
						sheetsArray.push(sheetName);
						const sheet = workbook.Sheets[sheetName]
						const headers = extractHeader(sheet);
						headersObj[sheetName] = headers;
					});
					uploadSelectedFileXlsx(JSONData, filetype, fileName, headersObj, sheetsArray);
				} else {
					var JSONData = {}
					var headersObj = {}
					var sheetsArray = []
					workbook.SheetNames.forEach(function(sheetName) {

						var XL_row_object = XLSX.utils.sheet_to_json(workbook.Sheets[sheetName], { raw: true })
						JSONData[sheetName] = XL_row_object;
						//            document.getElementById("jsonObject").innerHTML = json_object;
						sheetsArray.push(sheetName);
						const sheet = workbook.Sheets[sheetName]
						const headers = extractHeader(sheet);
						headersObj[sheetName] = headers;
					});
					uploadSelectedFileXlsx(JSONData, filetype, fileName, headersObj, sheetsArray);
				}
				$(this).html("");
				//$(this).dialog("close");
				$(this).dialog("destroy");
			}

		}
			//            , {
			//                text: (labelObject['Save as Different files'] != null ? labelObject['Save as Different files'] : 'Save as Different files'),
			//                click: function () {
			//                    $("#Loader").css("display", "block");
			//                    var files = [];
			//                    var checkBoxIds = $('.visionETLXlsxFileClass:checked').map(function () {
			//                        return this.value;
			//                    }).get();
			//                    if (checkBoxIds != null && checkBoxIds.length > 0) {
			//                        $.each(checkBoxIds, function (index, value) {
			//                            var fileTypeName = fileName;
			//                            var wb = XLSX.utils.book_new();
			//                            wb.Props = {
			//                                Title: "Xlsx File Data",
			//                                Subject: "Data",
			//                                Author: "Vision",
			//                                CreatedDate: new Date()
			//                            };
			//                            wb.SheetNames.push(value);
			//                            var sheet = workbook.Sheets[value];
			//                            wb.Sheets[value] = sheet;
			//                            if (value != null && value != '' && value != undefined) {
			//                                var blob;
			//                                if (filetype == 'xls') {
			//                                    fileTypeName = fileTypeName.replace('.xls', '');
			//                                    fileTypeName = fileTypeName + "_" + value + ".xls";
			//                                    blob = new Blob([s2ab(XLS.write(wb, {sheet: value, bookType: 'xlsx', type: 'binary'}))], {
			//                                        type: fileDataType
			//                                    });
			//                                } else if (filetype == 'xlsx')
			//                                {
			//                                    fileTypeName = fileTypeName.replace('.xlsx', '');
			//                                    fileTypeName = fileTypeName + "_" + value + ".xlsx";
			//                                    blob = new Blob([s2ab(XLSX.write(wb, {sheet: value, bookType: 'xlsx', type: 'binary'}))], {
			//                                        type: fileDataType
			//                                    });
			//                                }
			//                                function s2ab(s) {
			//                                    var buf = new ArrayBuffer(s.length);
			//                                    var view = new Uint8Array(buf);
			//                                    for (var i = 0; i != s.length; ++i)
			//                                        view[i] = s.charCodeAt(i) & 0xFF;
			//                                    return buf;
			//                                }
			//                                var file = new File([blob], fileTypeName, {lastModified: new Date().getTime(), type: blob.type});
			//                                files.push(file);
			//                            }
			//                        });
			//
			//                        etlXlsxSheetDifferentFiles(files, filetype);
			//                    }
			//                    $(this).html("");
			//                    //$(this).dialog("close");
			//                    $(this).dialog("destroy");
			//                }
			//
			//            }
		],
		open: function() {
			$(this).closest(".ui-dialog").find(".ui-button").eq(1).addClass("dialogyes");
			$(".visionHeaderMain").css("z-index", "999");
			$(".visionFooterMain").css("z-index", "999");
		},
		beforeClose: function(event, ui) {
			$(".visionHeaderMain").css("z-index", "99999");
			$(".visionFooterMain").css("z-index", "99999");
		}

	});
	$("#visionETLXlsxFileIdAll").click(function() {
		$(".visionETLXlsxFileClass").prop('checked', $(this).prop('checked'));
	});
	var spanText = "<span class='VisionETLXlsxFileSpan'>1." + fileName + "</span>";
	$("#VisionETLXlsxFileNameId").html(spanText);
}


function uploadSelectedFileXlsx(jsonData, fileType, fileName, headersObj, sheets) {
	showLoader();
	var fileData = fileName;
	var url;
	if ($("#visionETLXlsxSameFile").prop("checked")) {
		url = 'importTreeDMFileXlsx';
	} else if ($("#visionETLXlsxDiffFile").prop("checked")) {
		url = 'importTreeDMDifferentFiles';
	}

	$.ajax({
		type: "post",
		traditional: true,
		url: url,
		cache: false,
		data: {
			jsonData: JSON.stringify(jsonData),
			selectedFiletype: fileType,
			fileName: fileName,
			headersObj: JSON.stringify(headersObj),
			sheets: JSON.stringify(sheets)
		},
		success: function(response) {
			stopLoader();
			console.log("The result is:::" + response);
			$("#Loader").css("display", "none");
			$("body").css({ "pointer-events": "auto" });
			response = JSON.parse(response);
			var fileName = response.fileName;
			var result = response.result;
			if (result != null && result.indexOf("successfully") > -1) {
				$("#dialog").dialog({});
				$("#dialog").html("");
				//                $("#dialog").dialog("close");
				$("#dialog").dialog("destroy");
				//                loadETL();
				showEtlList('savedConnectionsIconsDiv', 'availableConnections');
				var fileObj = {};
				fileObj['fileName'] = fileData;
				fileObj['filePath'] = fileName;
				fileObj['fileType'] = "." + fileType;
				//                getAvaliableFiles(fileType, 'FILES')
				viewFileData(JSON.stringify(fileObj));
				//                viewFileData('{"filePath":"SPIRUploadSheet1637221398185.xls","fileType":".xls","fileName":"XLS_file.xls"}');

				var fileTypeValue = fileType.toLowerCase();
				// getAvaliableFiles(fileType, 'FILES');
				//                var fileObj = {}
				//                fileObj['filePath'] = fileType;
				//                fileObj['fileType'] = fileType;
				//                fileObj['fileName'] = fileName;
				//                

				$("#visionShowFileUploadMsg").html('<p style="color:green">' + result + '</p>');
			} else {
				$("#visionShowFileUploadMsg").html('<p style="color:red">' + result + '</p>');
			}
			$("#importTreeDMFile").remove();
			var fileImprtDiv = "<input type='file' name='importTreeDMFile' id='importTreeDMFile' style='display:none'>";
			$("#visionTreeDmFileUpload").parent().append(fileImprtDiv);
			console.log("On Complete::");
			// files expand ravi start
			var treeItemElement = globalFileTreeItem[fileType];
			if (treeItemElement != null) {
				var $element = $(treeItemElement);
				var children = $element.find('ul:first').children();
				if (children != null && children.length > 0) {
					$.each(children, function(index) {
						$('#savedConnections').jqxTree('removeItem', this)
					})
					$('#savedConnections').jqxTree('addTo', { label: 'dummy', value: "ajax" }, treeItemElement);
					$('#savedConnections').jqxTree('collapseItem', treeItemElement);
					$('#savedConnections').jqxTree('expandItem', treeItemElement);
				}
			}

		}, error: function(e) {
			console.log("The Error Message is:::" + e.message);
			sessionTimeout(e);
		}
	});
}

function uploadSelectedFileETL(files, fileType) {
	showLoader();
	var data;
	var url;
	var fileData = files['name'];
	var xlsxETLFileData = new FormData();
	xlsxETLFileData.append("importTreeDMFile", files);
	xlsxETLFileData.append("selectedFiletype", fileType);
	xlsxETLFileData.append("fileLocalPath", "");
	data = xlsxETLFileData;
	url = "importTreeDMFileETL";
	$.ajax({
		url: 'importTreeDMFileETL',
		type: "POST",
		data: xlsxETLFileData,
		enctype: 'multipart/form-data',
		processData: false,
		contentType: false,
		success: function(response) {
			stopLoader();
			console.log("The result is:::" + response);
			$("#Loader").css("display", "none");
			$("body").css({ "pointer-events": "auto" });
			response = JSON.parse(response);
			var fileName = response.fileName;
			var result = response.result;
			if (result != null && result.indexOf("successfully") > -1) {
				$("#dialog").dialog({});
				$("#dialog").html("");
				$("#dialog").dialog({});
				//                $("#dialog").dialog("close");
				$("#dialog").dialog("destroy");
				showEtlList('savedConnectionsIconsDiv', 'availableConnections');
				//getAvaliableFiles(fileType, 'FILES')
				
				$("#visionShowFileUploadMsg").html('<p style="color:green">' + result + '</p>');
				var fileObj = {};
				fileObj['fileName'] = fileData;
				fileObj['filePath'] = fileName;
				fileObj['fileType'] = "." + fileType;
				//getAvaliableFiles(fileType, 'FILES');
				viewFileData(JSON.stringify(fileObj));
			} else {
				$("#visionShowFileUploadMsg").html('<p style="color:red">' + result + '</p>');
			}
			$("#importTreeDMFile").remove();
			var fileImprtDiv = "<input type='file' name='importTreeDMFile' id='importTreeDMFile' style='display:none'>";
			$("#visionTreeDmFileUpload").parent().append(fileImprtDiv);
			console.log("On Complete::");
			// files expand ravi start
			var treeItemElement = globalFileTreeItem[fileType];
			if (treeItemElement != null) {
				var $element = $(treeItemElement);
				var children = $element.find('ul:first').children();
				if (children != null && children.length > 0) {
					$.each(children, function(index) {
						$('#savedConnections').jqxTree('removeItem', this)
					})
					$('#savedConnections').jqxTree('addTo', { label: 'dummy', value: "ajax" }, treeItemElement);
					$('#savedConnections').jqxTree('collapseItem', treeItemElement);
					$('#savedConnections').jqxTree('expandItem', treeItemElement);
				}
			}

		}, error: function(e) {
			console.log("The Error Message is:::" + e.message);
			sessionTimeout(e);
		}
	});
}


function showEtlList(treeId, listId) {
	$('#mainSplitter').jqxSplitter({
		width: '99.7%',
		panels: [{ size: "20%", min: 10 }, { min: "60%", size: "80%" }]
	});
	$("#savedSources").hide();
	$("#savedConnectionsIconsDiv").hide();
	$("#availableJobsDiv").hide();
	$("#schemaObjectsDiv").hide();
	$("#dataModellerJobsDiv").hide();
	//    $("#cubeRelatedICONS").hide();
	//    $("#availableMapTools").show();
	//    $("#panelContentpanelavaialableJobsTree").show();


	$("#" + listId).parent().find('li.visionHighlightEtlIcons').removeClass('visionHighlightEtlIcons');
	$("#" + listId).addClass('visionHighlightEtlIcons');
	var mainSplitterHeight = $('#mainSplitter').height();
	console.log("mainSplitter:::" + mainSplitterHeight);
	var styleAttr = $(".savedConnectionsClass").attr('style');
	if (styleAttr != null && styleAttr != '') {
		styleAttr += ';height:' + (parseInt(mainSplitterHeight) - 20) + 'px !important;';
	} else {
		styleAttr = 'height:' + (parseInt(mainSplitterHeight) - 20) + 'px !important;';
	}
	$(".savedConnectionsClass").attr('style', styleAttr);
	$("#" + treeId).show();
	$(".visionObjectNameDiv").removeClass("visionSelectedObject");
	//    $('#mainSplitter').resize();
	// ravi tree issue
	try {
		$('#savedConnections').jqxTree('refresh'); //---------code edit
	} catch (e) {
	}
	

	$(window).resize();
	if (listId == "availableConnections") {
		/*setTimeout(function(){
			var width = $("#connectionTabs").find("li.jqx-tabs-title-selected-top").width();
			$("#connectionTabs").find("li.jqx-tabs-title-selected-top").append('<style>.etl-page-body #connectionTabs .jqx-tabs-title-selected-top::after{margin-left:'+(width+8)+'px !important;}</style>');
			
		}, 200)*/
		
	}
}

function treeSourcesMenus(menuId, treeId) {
	try {
		labelObject = JSON.parse($("#labelObjectHidden").val());
	} catch (e) {

	}
	var labelObject = {};
	$.ajax({
		type: 'POST',
		traditional: true,
		dataType: 'html',
		cache: false,
		url: 'getTreeDataMigrationMenus',
		data: { menuId: menuId },
		success: function(response) {
			stopLoader();
			if (response != null) {
				//                console.log("response:::" + response);
				response = JSON.parse(response);
				var menuResult = response.menuResult;
				var treeMenuData = JSON.parse(menuResult);
				var source =
				{
					datatype: "json",
					datafields: [
						{ name: 'MENU_ID' },
						{ name: 'PARENT_ID' },
						{ name: 'PARENT_MENU_ID' },
						{ name: 'MENU_DESCRIPTION' },
						{ name: 'icon' },
						{ name: 'value' },
						//                                {name: 'iconsize'},
						{ name: 'TOOL_TIP' },
						{ name: 'MAIN_DESCRIPTION' }
					],
					localdata: treeMenuData
				};
				// create data adapter.
				var dataAdapter = new $.jqx.dataAdapter(source);
				// perform Data Binding.
				dataAdapter.dataBind();
				var records = dataAdapter.getRecordsHierarchy('MENU_ID',
					'PARENT_ID',
					'items',
					[{ name: 'MENU_DESCRIPTION', map: 'html' }]
				);
				//                        'MENU_ID','PARENT_MENU_ID','TOOL_TIP');

				if (treeId != null && treeId != "" && treeId != undefined && treeId == "savedSources") {
					$('#' + treeId).jqxTree({
						source: records, allowDrag: true, allowDrop: true, height: '90%', width: '100%', toggleMode: 'click',
						//                        theme: 'energyblue',
						dragEnd: function(item) {
							createImageSourcesFlowchart(item, item.value, 'File');
							return true;
						}
					});
					//                    $('#' + treeId).jqxTree('expandAll');

				} else if (treeId != null && treeId != "" && treeId != undefined && treeId == "descSplitterContainer") {
					$('#' + treeId).jqxTree({
						source: records, allowDrag: true,
						allowDrop: true, height: '90%', width: '100%',
						toggleMode: 'click',
						//                        theme: 'energyblue',
						dragEnd: function(item) {
							createImageDestinationFlowchart(item, item.value, 'File');
							return true;
						}
					});
				}
				$('#' + treeId).css('visibility', 'visible');
				$('#' + treeId).on('select', function(event) {
					var item = $('#' + treeId).jqxTree('getItem', event.args.element);
					if (item != null && !jQuery.isEmptyObject(item) && item['value'] != null
						&& item['value'] != ''
						&& item['value'] != '#') {
						eval(item['value']);
					}
					$('#' + treeId).jqxTree('selectItem', null);


				});
				var timeOut = null;
				$("#" + treeId + " .jqx-tree-item-li").hover(function(hoverInevent) {


					if ($(hoverInevent.currentTarget).find(".jqx-tree-item-arrow-collapse").length > 0) {
						clearTimeout(timeOut);
						timeOut = setTimeout(function() {
							var hoverInelement = hoverInevent.currentTarget;
							$("#" + treeId).jqxTree('expandItem', hoverInelement);
						}, 1000)
					}

				}, function(hoverOutevent) {
					clearTimeout(timeOut);
					//                    $("#" + treeId).jqxTree('collapseAll');
					//                     var hoverOutelement = hoverOutevent.target;
					//                     var item = $("#"+treeId).jqxTree('getItem', hoverOutelement);
					//                      if ($(hoverInelement).find(".jqx-tree-item-arrow-expand")){
					//                           $("#"+treeId).jqxTree('collapseItem', hoverInelement);
					//                      }
				})
				$('.visionProgressSteps').hide();
			}
		},
		error: function(e) {
			sessionTimeout(e);
		}
	});
}



function treeSavedConnectionsOld(treeObj, treeId) {
	//    var connectionObj;
	var treeConfigObj = treeObj['treeConfigObj'];
	var dragEndFunction = treeObj['dragEndFunction'];
	treeConfigObj.allowDrag = true;
	treeConfigObj.allowDrop = true;
	treeConfigObj.hasThreeStates = true;
	treeConfigObj.checkboxes = true;
	treeConfigObj.dragEnd = eval('(' + dragEndFunction + ')');
	var columnsObj = treeObj['treeColumnObj'];
	$('#' + treeId).jqxTree(treeConfigObj);
	//    $('#' + treeId).jqxTree('focus');
	var filterItems = ['TABLES', 'VIEWS', 'SYNONYMS'];
	$('#' + treeId).on('select', function(event) {
		var selectedItem = $('#' + treeId).jqxTree('getItem', event.args.element);
		var $selectedElement = $(event.args.element);
		if (selectedItem != null && !jQuery.isEmptyObject(selectedItem) && selectedItem['value'] != null
			&& selectedItem['value'] != '' && filterItems.indexOf(selectedItem['value']) > -1) {
			selectColumnsObj = columnsObj
			var parentSelectId = selectedItem['parentId'];
			var parentDiv = $("#" + parentSelectId);
			var childObj = parentDiv[0].children[1];
			var valueObj = childObj.treeItem['value'];
			selectedDataBase = valueObj;
			if (savedDBData != null && !jQuery.isEmptyObject(savedDBData)) {

				var selectConnsObj = savedDBData[valueObj];
				if (selectConnsObj != null && !jQuery.isEmptyObject(selectConnsObj)) {
					selectConnObj = selectConnsObj;
				}
			}
			var hiddenFieldId = "DATABASE_" + selectedDataBase + "_" + selectedItem.value + "_hidden";
			hiddenFieldId = hiddenFieldId.replace(/ /g, '_');
			hiddenFieldId = hiddenFieldId.replace(/\//g, '_');
			var filterValue = $("#" + hiddenFieldId).val();
			if (filterValue != null && filterValue != '' && filterValue != undefined) {
				$("#treeETLFilterImage").attr('src', "images/Filter Icon2-01.svg");
			} else {
				$("#treeETLFilterImage").attr('src', "images/Filter Icon-01.svg");
			}
		} else if (selectedItem != null && !jQuery.isEmptyObject(selectedItem) && selectedItem['value'] != null
			&& selectedItem['value'] != '' && selectedItem['value'] == "Show More") {
			selectColumnsObj = columnsObj;
			var valueObj;
			var selectedValue;
			var selectedLevel;
			var parentElement = event.args.element.parentElement.parentElement;
			var parent = $('#' + treeId).jqxTree('getItem', parentElement);
			var $selectedElement = $(parentElement);
			if (parent != null) {
				selectedValue = parent.value;
				selectedLevel = parent.level;
				var parentSelectId = parent['parentId'];
				var parentDiv = $("#" + parentSelectId);
				var childObj = parentDiv[0].children[1];
				valueObj = childObj.treeItem['value'];
			}
			if (savedDBData != null && !jQuery.isEmptyObject(savedDBData)) {

				var selectConnsObj = savedDBData[valueObj];
				if (selectConnsObj != null && !jQuery.isEmptyObject(selectConnsObj)) {
					selectConnObj = selectConnsObj;
				}
			}
			var parentEventItem = parentElement;
			for (var i = selectedLevel; i > 1; i--) {
				parentEventItem = parentEventItem.parentElement.parentElement;
			}
			var selectedItem = $('#' + treeId).jqxTree('getItem', parentEventItem);
			var selectedParentValue = selectedItem['value'];
			treePaging(selectedValue, selectConnObj, $selectedElement[0], selectedLevel, selectColumnsObj, valueObj, selectedParentValue);
			//            treePaging(selectedValue, selectConnObj, $selectedElement[0], selectedLevel, selectColumnsObj, valueObj);
		}
	});

	$('#' + treeId).on('expand', function(event) {
		var connectionObj;
		var parentItem = $('#' + treeId).jqxTree('getItem', event.args.element);
		//------------ file expand code
		if (parentItem.level == '2') {
			globalFileTreeItem[parentItem.value.toUpperCase()] = parentItem.element;
		}

		var $element = $(event.args.element);
		var loader = false;
		var loaderItem = null;
		var children = $element.find('ul:first').children();
		$.each(children, function() {
			var item = $('#' + treeId).jqxTree('getItem', this);
			if (item && item.value == 'ajax') {
				loaderItem = item;
				loader = true;
				return false
			}
		});
		if (loaderItem != null) {
			showLoader();
			var extTreeParams = $("#extTreeParams").val();
			var value;
			var level = parentItem.level;
			$('#' + treeId).jqxTree('removeItem', loaderItem.element);
			if (parentItem.level > 3) {
				//var prevObj = parentItem['prevItem'];
				//                value = parentItem['value'];
				var parentEventItem = event.args.element;
				for (var i = level; i > 3; i--) {
					parentEventItem = parentEventItem.parentElement.parentElement;
				}
				var selectedItem = $('#' + treeId).jqxTree('getItem', parentEventItem);
				value = selectedItem['value'];
			}

			if (savedDBData != null && !jQuery.isEmptyObject(savedDBData)) {
				var conObj = savedDBData[value];
				if (conObj != null && !jQuery.isEmptyObject(conObj)) {
					connectionObj = conObj;
				}

			}
			var data = {
				parentkey: parentItem.value,
				treeId: treeObj['treeId'],
				level: parentItem.level,
				extTreeParams: extTreeParams,
				columnsObj: JSON.stringify(columnsObj),
				connectionObj: JSON.stringify(connectionObj),
				startIndex: 0,
				endIndex: $("#treePageSize").val()
			};
			// -------------  JAGADISH CODE START ------------ line 1764

			if (parentItem.level == '3') { // JAGADISH CODE START ETL_QUERY 
				var superParentEle = parentItem['parentElement'];
				var superParentValue = superParentEle['children'][2];
				data['superParentValue'] = superParentValue['innerText'];
			}
			// JAGADISH CODE END
			var hiddenFieldId = "DATABASE_" + value + "_" + parentItem.value + "_hidden";
			var hiddenPagingId = "DATABASE_" + value + "_" + parentItem.value + "paging__hidden";
			hiddenFieldId = hiddenFieldId.replace(/ /g, '_');
			hiddenPagingId = hiddenPagingId.replace(/ /g, '_');
			hiddenFieldId = hiddenFieldId.replace(/\//g, '_');
			hiddenPagingId = hiddenPagingId.replace(/\//g, '_');
			var hiddenPagingField = "<input type='hidden' id='" + hiddenPagingId + "'value=''/>";
			$("#savedConnections").append(hiddenPagingField);
			var prevFilterVal = $("#" + hiddenFieldId).val();
			if (prevFilterVal != null && prevFilterVal != '' && prevFilterVal != undefined) {
				prevFilterVal = JSON.parse(prevFilterVal);
				data['filterValue'] = prevFilterVal['filterType'];
				data['filterCondition'] = prevFilterVal['filterValue'];
			}
			//            var url = "getTreePagingDataOpt";
			var url = "getETLTreePagingDataOpt";
			var treePagingObj = {};
			treePagingObj['startIndex'] = '0';
			treePagingObj['endIndex'] = $("#treePageSize").val();
			$("#" + hiddenPagingId).val(JSON.stringify(treePagingObj));
			//            var url = "getTreeDataOpt";
			var filesParentElement = parentItem['parentElement'];
			var selectedFilesItem = $('#' + treeId).jqxTree('getItem', filesParentElement);
			if (parentItem.value == 'FILES'
				|| (selectedFilesItem != null
					&& selectedFilesItem['value'] == 'FILES')) {
				url = 'getTreeUploadedFiles';
			}
			if (parentItem.level > 3) {
				var parentEventItem = event.args.element;
				for (var i = level; i > 1; i--) {
					parentEventItem = parentEventItem.parentElement.parentElement;
				}
				var selectedItem = $('#' + treeId).jqxTree('getItem', parentEventItem);
				var selectedParentValue = selectedItem['value'];
				if (selectedParentValue != null && selectedParentValue != '' &&
					selectedParentValue != undefined && selectedParentValue == 'ERP') {
					url = 'getTreeErpConnectionDetails';
				}
			}
			$.ajax({
				type: "post",
				traditional: true,
				dataType: 'json',
				url: url,
				cache: false,
				data: data,
				success: function(data, status, xhr) {
					stopLoader();
					if (parentItem.level == 2) {
						var parentParentItem = $('#' + treeId).jqxTree("getItem", parentItem.parentElement);
						if (parentParentItem.value != "FILES") {

							if (data != null) {
								savedDBData = data[0].connectionObj;
							}
						}
					}

					$('#' + treeId).jqxTree('addTo', data, $element[0]);
					var items = $('#' + treeId).jqxTree('getItems');
					$.each(items, function() {
						$(this.titleElement).attr('title', this.label);
						$("#" + this.titleElement[0].id).removeClass('visionETLParentHighight');
						if (this.value == "Show More") {
							var childLength = this.element.children['length'];
							var expandDiv = this.element.children[0];
							if (childLength > 3) {
								var div = this.element.children[1];
								var checkBoxDiv = this.element.children[2];
								$("#" + expandDiv.id).remove();
								$("#" + div.id).remove();
								$("#" + checkBoxDiv.id).addClass('visionETLCheckboxEmptySpace');
							} else {
								$("#" + expandDiv.id).remove();
							}
						}
					});
					if (parentItem != null) {
						var parentItemEle = event.args.element;
						for (var p = level; p >= 0; p--) {
							var parentItemId = $('#' + treeId).jqxTree('getItem', parentItemEle);
							if (parentItemId != null) {
								var divItemId = parentItemId.titleElement[0];
								$("#" + divItemId.id).addClass('visionETLParentHighight');
							}
							parentItemEle = parentItemEle.parentElement.parentElement;
						}
					}
					$('#mainSplitter').resize();
				},
				error: function(e) {
					console.log(e);
					sessionTimeout(e);
					stopLoader();
				}
			});
		}



	});
}

function getTreeDataBase(type, typeName) {
	console.log(type + ":::iam in getTreeDataBasemethod:::" + typeName);
        if (type != null && type != "" && type != undefined && type == "Online_Services") {
             if (typeName == 'Youtube') {
               var html = "<table>"
                       +"<tr><td>Channel Url</td><td><input type='text' id='youtubeChannelUrl' value='' /></td></tr>"
                       +"<tr><td>Select Date Range </td>"
                       +"<td><input  id='youTubeDateRange' /><span style='display:none;'></span></td></tr>"
                       +"</table>";
                    $("#dialog").html(html);
                    $("#dialog").dialog({
                        title: (labelObject['Youtube'] != null ? labelObject['Youtube'] : 'Youtube'),
                        modal: true,
                        width: 300,
                        height: 'auto',
                        fluid: true,
                        open: function() {
                            var start = moment().subtract(29, 'days');
                            var end = moment();            
                            $('#youTubeDateRange').daterangepicker({
                            startDate: start,
                            endDate: end,
                            alwaysShowCalendars: true,
                            ranges: {
                                'Today': [moment(), moment()],
                                'Yesterday': [moment().subtract(1, 'days'), moment().subtract(1, 'days')],
                                'Last 7 Days': [moment().subtract(6, 'days'), moment()],
                                'This Month': [moment().startOf('month'), moment().endOf('month')],
                                'Last Month': [moment().subtract(1, 'month').startOf('month'), moment().subtract(1, 'month').endOf('month')]
                            }
                            });
                            $("#youTubeDateRange").next("span").html(start.format('MMMM D, YYYY') + ' - ' + end.format('MMMM D, YYYY'));
                            
                                $(this).closest(".ui-dialog").find(".ui-button").eq(1).addClass("dialogyes");
                                $(".visionHeaderMain").css("z-index", "999");
                                $(".visionFooterMain").css("z-index", "999");
                                $(".ui-dialog").addClass('visionDMTreePopup');
                             
                        }, buttons: [{
				text: (labelObject['Ok'] != null ? labelObject['Ok'] : 'Ok'),
				click: function() { 
                                  
                                    var fromToDate = $("#youTubeDateRange").next("span").html();
                                    var paramObj = {};
                                    if (fromToDate != null && fromToDate != '' && fromToDate != undefined) {
                                        var fromToDateArr = fromToDate.split("-");
                                        var fromd = new Date(fromToDateArr[0]);
                                        var fromDateStr = $.datepicker.formatDate('yy-mm-dd', fromd);
                                        var tod = new Date(fromToDateArr[1]);
                                        var toDateStr = $.datepicker.formatDate('yy-mm-dd', tod);
                                        paramObj.start_date = fromDateStr;
                                        paramObj.end_date = toDateStr;
                                    }
                                   var channelUrl = $("#youtubeChannelUrl").val();
                                    paramObj.url = channelUrl;
                                    var connObj = savedDBData['Current_V10'];
                                    paramObj.connObj  = JSON.stringify(connObj);
                                    paramObj.tableName  = "YT_NC_ANALYSIS_PSA_BZR";
                                    paramObj.whereClause  = " WHERE CHANNEL_URL='"+channelUrl+"' AND PUBLISHED_DATE BETWEEN  TO_DATE('"+fromDateStr+"','YYYY-MM-DD') AND TO_DATE('"+toDateStr+"','YYYY-MM-DD')  ";
                                   
                                     fetchYoutubeData(paramObj);
                                      $(this).html("");
                               
                                    $(this).dialog("destroy");
                                 }
                                }],
                        beforeClose: function(event, ui) {
                                $(".visionHeaderMain").css("z-index", "99999");
                                $(".visionFooterMain").css("z-index", "99999");
                        }, close: function(event, ui) {

                                $(this).html("");
                                //$(this).dialog("close");
                                $(this).dialog("destroy");
                        }
                });
            }
            
            
        } else if (type != null && type != "" && type != undefined && type == "FILE") {
		var response = "<div id ='treeDMFileId' class ='treeDMFileDivClass'>"
			+ "<div id='visionShowFileUploadMsg'></div>";
		response += "<input type='file' name='importTreeDMFile'  id='importTreeDMFile' class='visionTreeDMFilesInput'/>";
		response += "<div class='visionTreeDMFileUploadclass' id='visionTreeDmFileUpload'>";
		response += "<input type='hidden' id='selectedTreeTypeName' value=''>";
		response += "<input type='hidden' id='selectedTreeType' value=''>";
		response += "<p class='VisionDMUploadFileContent'>Upload Files(" + typeName + ") Here</p></div></div>";
		uploadFilePopupETL(response, type, typeName);
	} else if (type != null && type != "" && type != undefined && type == "DB") {
		var formString = "<div class='visionEtlConnectDbMain'>"
			+ "<div id='visionShowConnectionMsg'></div>"
			+ "<table class='visionEtlDbTable' autocomplete='false'>"
			+ "<tr><td><p style='font-weight:bold'>Connection Type:</p></td>"
			+ "<td>" + typeName + "</td></tr>"
			+ "<tr>"
			+ "<td> <label class='visionDbLabels'>Connection Name</label></td>"
			+ "<td> <input type='text'  name='ConnectionName' id='DbEtlConnectionName' class='visionInputDbFields' autocomplete='false'>"
			+ "<div class='dataMigrationInputError' id='DbEtlConnectionNameError'></div></td>"
			+ " </tr>"
			+ "<tr>"
			+ "<td> <label class='visionDbLabels'>Host Name</label></td>"
			+ "<td> <input type='text'  name='HostName' id='DbEtlHostName' class='visionInputDbFields' autocomplete='false'>"
			+ "<div class='dataMigrationInputError' id='DbEtlHostNameError'></div></td>"
			+ "</tr>"
			+ "<tr>"
			+ "<td>  <label class='visionDbLabels'>Port</label></td>"
			+ "<td><input type='text' value='' name='Port' id='DbEtlPort' class='visionInputDbFields' autocomplete='false'>"
			+ "<div class='dataMigrationInputError' id='DbEtlPortError'></div></td>"
			+ "</tr>"
			+ "<tr>"
			+ "<td>  <label class='visionDbLabels'>Username</label></td>"
			+ "<td> <input type='text'  name='EtlUsername' id='DbEtlUserName' class='visionInputDbFields' autocomplete='false'>"
			+ "<div class='dataMigrationInputError' id='DbEtlUserNameError'></div></td>"
			+ "</tr>"
			+ " <tr>"
			+ "<td>  <label class='visionDbLabels'>Password</label></td>"
			+ "<td>    <input type='password'   name='EtlPassword' id='DbEtlPassword' class='visionInputDbFields' autocomplete='false'>"
			+ "<div class='dataMigrationInputError' id='DbEtlPasswordError'></div></td>"
			+ "</tr>"
			+ "<tr>"
			+ "<td>  <label class='visionDbLabels'>Database/Service Name</label></td>"
			+ "<td>    <input type='text'  name='ServiceName' id='DbEtlServiceName' class='visionInputDbFields' autocomplete='false'>"
			+ "<div class='dataMigrationInputError' id='DbEtlServiceNameError'></div></td>"
			+ "</tr>"
			+ "<tr style='display:none'>"
			+ "<td>  <label class='visionDbLabels'>Audit Id</label></td>"
			+ "<td>    <input type='hidden'  name='auditId' id='EtlAuditId' class='visionInputDbFields'></td>"
			+ "</tr>"
			+ "<tr><td><input type='checkbox' name='checkBoxDetails' id = 'EtlCheckBoxChecked' value='checked' checked>Save Details"
			+ "<div class='visionDataMigrationError' style='display:none'>Please check the box</div></td></tr>"
			+ "<tr>"
			+ "<td class='visionDbConnectBtn' id='connectEtlDbTd' colspan = '2'><input type='button' value='Connect' name='Connect'  onclick = \"connectEtlDatabase('" + type + "','" + typeName + "')\" class='visionInputDbButton'></td>"

			+ "</tr>"
			+ "</table></div>";
		ShowEtlConnectionPopup(formString, type, typeName, 'Connect Database');
	} else if (type != null && type != "" && type != undefined && type == "ERP" && ( typeName == "SAP_HANA" || typeName == "SAP_ECC" )) {
		var sapConnectionTypeSelection = "<table><tr><td><p style='font-weight:bold'>Connection Type:</p></td>"
			//                + "<td>" + typeName + "</td></tr>"
			+ "<td><select id='selectSAPConnectionType' ><option value='applicationServer'>Customer Applicaton Server</option><option value='groupServer'>Group/Server Selection</option></select></td></tr>"
			+ " <tr class='visionERPDbTr'></table>";


		var erpTable = "<div class='visionEtlErpDiv' id='visionEtlErpDivId'>"
			+ "<div id='visionShowErpEtlMsg'></div>"
			+ "<table class='visionERPEtlTable'>"
			//                + "<tr><td><p style='font-weight:bold'>Connection Type:</p></td>"
			//                + "<td>" + typeName + "</td></tr>"
			//                + "<td><select id='selectSAPConnectionType' ><option value='applicationServer'>Customer Applicaton Server</option><option value='groupServer'>Group/Server Selection</option></select></td></tr>"
			+ " <tr class='visionERPDbTr'>"
			+ "<td class='visionERPDbTd'> <label class='visionERPDbLabels'>Connection Name</label></td>"
			+ "<td class='visionERPDbTd'> <input type='text' value='' name='ConnectionName' id='ErpEtlDbConnectionName' class='visionInputDbFields'>"
			+ "<div class='dataMigrationInputError' id='ErpEtlDbConnectionNameError'></div></td>"
			+ " </tr>"
			+ " <tr class='visionERPDbTr'>"
			+ "<td class='visionERPDbTd'> <label class='visionERPDbLabels'>Client</label></td>"
			+ "<td class='visionERPDbTd'> <input type='text' value='' name='Client' id='ERPEtlClientName' class='visionInputDbFields'>"
			+ "<div class='dataMigrationInputError' id='ERPEtlClientNameError'></div></td>"
			+ " </tr>"
			+ "<tr class='visionERPDbTr'>"
			+ "<td class='visionERPDbTd'> <label class='visionERPDbLabels'>Host Name</label></td>"
			+ "<td class='visionERPDbTd'> <input type='text' value='' name='ERP HostName' id='ERPEtlHostName' class='visionInputDbFields'>"
			+ "<div class='dataMigrationInputError' id='ERPEtlHostNameError'></div></td>"
			+ "</tr>"
			+ "<tr class='visionERPDbTr'>"
			+ "<td class='visionERPDbTd'>  <label class='visionERPDbLabels'>Username</label></td>"
			+ "<td class='visionERPDbTd'> <input type='text' value='' name='Username' id='ERPEtlUserName' class='visionInputDbFields'>"
			+ "<div class='dataMigrationInputError' id='ERPEtlUserNameError'></div></td>"
			+ "</tr>"
			+ " <tr class='visionERPDbTr'>"
			+ "<td class='visionERPDbTd'>  <label class='visionERPDbLabels'>Password</label></td>"
			+ "<td class='visionERPDbTd'>    <input type='password' value='' name='Password' id='ERPEtlPassword' class='visionInputDbFields'>"
			+ "<div class='dataMigrationInputError' id='ERPEtlPasswordError'></div></td>"
			+ "</tr>"
			+ "<tr class='visionERPDbTr'>"
			+ "<td class='visionERPDbTd'>  <label class='visionERPDbLabels'>Language Id</label></td>"
			+ "<td class='visionERPDbTd'>    <input type='text' value='' name='languageId' id='ERPEtlLanguageId' class='visionInputDbFields'>"
			+ "<div class='dataMigrationInputError' id='ERPEtlLanguageIdError'></div></td>"
			+ "</tr>"
			+ "<tr class='visionERPDbTr'>"
			+ "<tr class='visionERPDbTr' style='display:none'>"
			+ "<td class='visionERPDbTr'>  <label class='visionERPDbLabels'>Audit Id</label></td>"
			+ "<td class='visionERPDbTr'>    <input type='hidden' value='' name='auditId' id='ErpEtlauditId' class='visionInputDbFields'></td>"
			+ "</tr>"
			+ "<tr class='visionERPDbTr'>"
			+ "<td class='visionERPDbTd'>  <label class='visionERPDbLabels'>System Id</label></td>"
			+ "<td class='visionERPDbTd'>    <input type='text' value='' name='ERPSystemId' id='ERPEtlSystemId' class='visionInputDbFields'>"
			+ "<div class='dataMigrationInputError' id='ERPEtlSystemIdError'></div></td>"
			+ "</tr>"
			+ "<tr class='visionERPDbTr'><td><input type='checkbox' name='checkBoxDetails' id = 'checkBoxChecked' value='checked' checked>Save Details"
			+ "<div class='visionDataMigrationError' style='display:none'>Please check the box</div></td></tr>"
			+ "<tr class='visionERPDbTr'>"
			+ "<td class='visionERPDbTd visionERPDbConnectBtn' id='connectERPEtlDbTd' colspan = '2'><input type='button' value='Connect' name='Connect'  onclick = \"connectErpEtlDatabase('" + type + "','" + typeName + "')\" class='visionInputDbButton'></td>"

			+ "</tr>"
			+ "</table>";
		erpTable = sapConnectionTypeSelection + erpTable;
		ShowEtlConnectionPopup(erpTable, type, typeName, 'Connect ERP');
	} else if (typeName == 'Oracle_ERP') {
		var formString = "<div class='visionEtlConnectDbMain'>"
			+ "<div id='visionShowConnectionMsg'></div>"
			+ "<table class='visionErpEtlDbTable' autocomplete='false'>"
			+ "<tr><td><p style='font-weight:bold'>Connection Type:</p></td>"
			+ "<td>" + typeName + "</td></tr>"
			+ "<tr>"
			+ "<td> <label class='visionDbLabels'>Connection Name</label></td>"
			+ "<td> <input type='text'  name='ConnectionName' id='DbEtlConnectionName' class='visionInputDbFields' autocomplete='false'>"
			+ "<div class='dataMigrationInputError' id='DbEtlConnectionNameError'></div></td>"
			+ " </tr>"
			+ "<tr>"
			+ "<td> <label class='visionDbLabels'>Host Name</label></td>"
			+ "<td> <input type='text'  name='HostName' id='DbEtlHostName' class='visionInputDbFields' autocomplete='false'>"
			+ "<div class='dataMigrationInputError' id='DbEtlHostNameError'></div></td>"
			+ "</tr>"
			+ "<tr>"
			+ "<td>  <label class='visionDbLabels'>Port</label></td>"
			+ "<td><input type='text' value='' name='Port' id='DbEtlPort' class='visionInputDbFields' autocomplete='false'>"
			+ "<div class='dataMigrationInputError' id='DbEtlPortError'></div></td>"
			+ "</tr>"
			+ "<tr>"
			+ "<td>  <label class='visionDbLabels'>Username</label></td>"
			+ "<td> <input type='text'  name='EtlUsername' id='DbEtlUserName' class='visionInputDbFields' autocomplete='false'>"
			+ "<div class='dataMigrationInputError' id='DbEtlUserNameError'></div></td>"
			+ "</tr>"
			+ " <tr>"
			+ "<td>  <label class='visionDbLabels'>Password</label></td>"
			+ "<td>    <input type='password'   name='EtlPassword' id='DbEtlPassword' class='visionInputDbFields' autocomplete='false'>"
			+ "<div class='dataMigrationInputError' id='DbEtlPasswordError'></div></td>"
			+ "</tr>"
			+ "<tr>"
			+ "<td>  <label class='visionDbLabels'>Database/Service Name</label></td>"
			+ "<td>    <input type='text'  name='ServiceName' id='DbEtlServiceName' class='visionInputDbFields' autocomplete='false'>"
			+ "<div class='dataMigrationInputError' id='DbEtlServiceNameError'></div></td>"
			+ "</tr>"
			+ "<tr style='display:none'>"
			+ "<td>  <label class='visionDbLabels'>Audit Id</label></td>"
			+ "<td>    <input type='hidden'  name='auditId' id='EtlAuditId' class='visionInputDbFields'></td>"
			+ "</tr>"
			+ "<tr><td><input type='checkbox' name='checkBoxDetails' id = 'EtlCheckBoxChecked' value='checked' checked>Save Details"
			+ "<div class='visionDataMigrationError' style='display:none'>Please check the box</div></td></tr>"
			+ "<tr>"
			+ "<td class='visionDbConnectBtn' id='connectEtlDbTd' colspan = '2'><input type='button' value='Connect' name='Connect'  onclick = \"connectEtlDatabase('" + type + "','" + typeName + "')\" class='visionInputDbButton'></td>"

			+ "</tr>"
			+ "</table></div>";
		ShowEtlConnectionPopup(formString, type, typeName, 'Connect ERP');
	} else if (type == 'WEB_SERVICE') {
		if (typeName == 'SOAP') {
			var formString = "<div class='visionEtlConnectDbMain'>"
				+ "<div id='visionShowConnectionMsg'></div>"
				+ "<table class='visionErpEtlDbTable' autocomplete='false'>"
				+ "<tr><td><p style='font-weight:bold'>Webservice Type:</p></td>"
				+ "<td>" + typeName + "</td></tr>"
				+ "<tr>"
				+ "<td> <label class='visionDbLabels'>WSDL URL</label></td>"
				+ "<td> <input type='text'  name='wsdlURL' id='wsdlURL' class='visionInputDbFields' autocomplete='false'>"
				+ "<div class='dataMigrationInputError' id='wsdlURLError'></div></td>"
				+ " </tr>"
				+ "<tr>"
				+ "<td> <label class='visionDbLabels'>End Point URL</label></td>"
				+ "<td> <input type='text'  name='endPointURL' id='endPointURL' class='visionInputDbFields' autocomplete='false'>"
				+ "<div class='dataMigrationInputError' id='endPointURLError'></div></td>"
				+ "</tr>"
				+ "<tr>"
				+ "<tr style='display:none'>"
				+ "<td>  <label class='visionDbLabels'>Audit Id</label></td>"
				+ "<td>    <input type='hidden'  name='auditId' id='EtlAuditId' class='visionInputDbFields'></td>"
				+ "</tr>"
				+ "<tr><td><input type='checkbox' name='checkBoxDetails' id = 'EtlCheckBoxChecked' value='checked' checked>Save Details"
				+ "<div class='visionDataMigrationError' style='display:none'>Please check the box</div></td></tr>"
				+ "<tr>"
				+ "<td class='visionDbConnectBtn' id='connectEtlDbTd' colspan = '2'><input type='button' value='Import' name='Import'  onclick = \"connectEtlWSSOAP('" + type + "','" + typeName + "')\" class='visionInputDbButton'></td>"

				+ "</tr>"
				+ "</table></div>";
		} else if (typeName == 'REST') {

		}
		ShowEtlConnectionPopup(formString, type, typeName, 'Connect Webservice');
	}
}

function ShowEtlConnectionPopup(response, type, typeName, dialogTitle) {
	var labelObject = {};
	try {
		labelObject = JSON.parse($("#labelObjectHidden").val());
	} catch (e) {

	}
	$("#dialog").html(response);
	$("#dialog").dialog({
		title: (labelObject[dialogTitle] != null ? labelObject[dialogTitle] : dialogTitle),
		//        modal: true,
		width: 500,
		height: 'auto',
		maxHeight: 450,
		fluid: true,
		open: function() {
			var sapConnectionTypeSelection = "<table><tr><td><p style='font-weight:bold'>Connection Type:</p></td>"
				+ "<td><select id='selectSAPConnectionType' ><option value='applicationServer'>Customer Applicaton Server</option><option value='groupServer'>Group/Server Selection</option></select></td></tr>"
				+ " <tr class='visionERPDbTr'></table>";
			$("#selectSAPConnectionType").change(function(event) {

				var selectSAPConnectionType = $("#selectSAPConnectionType").val();
				if (selectSAPConnectionType == 'applicationServer') {
					var erpTable = "<div class='visionEtlErpDiv'>"
						+ "<div id='visionShowErpEtlMsg'></div>"
						+ "<table class='visionERPEtlTable'>"
						//                + "<tr><td><p style='font-weight:bold'>Connection Type:</p></td>"
						//                + "<td>" + typeName + "</td></tr>"
						//                + "<td><select id='selectSAPConnectionType' ><option value='applicationServer'>Customer Applicaton Server</option><option value='groupServer'>Group/Server Selection</option></select></td></tr>"
						+ " <tr class='visionERPDbTr'>"
						+ "<td class='visionERPDbTd'> <label class='visionERPDbLabels'>Connection Name</label></td>"
						+ "<td class='visionERPDbTd'> <input type='text' value='' name='ConnectionName' id='ErpEtlDbConnectionName' class='visionInputDbFields'>"
						+ "<div class='dataMigrationInputError' id='ErpEtlDbConnectionNameError'></div></td>"
						+ " </tr>"
						+ " <tr class='visionERPDbTr'>"
						+ "<td class='visionERPDbTd'> <label class='visionERPDbLabels'>Client</label></td>"
						+ "<td class='visionERPDbTd'> <input type='text' value='' name='Client' id='ERPEtlClientName' class='visionInputDbFields'>"
						+ "<div class='dataMigrationInputError' id='ERPEtlClientNameError'></div></td>"
						+ " </tr>"
						+ "<tr class='visionERPDbTr'>"
						+ "<td class='visionERPDbTd'> <label class='visionERPDbLabels'>Host Name</label></td>"
						+ "<td class='visionERPDbTd'> <input type='text' value='' name='ERP HostName' id='ERPEtlHostName' class='visionInputDbFields'>"
						+ "<div class='dataMigrationInputError' id='ERPEtlHostNameError'></div></td>"
						+ "</tr>"
						+ "<tr class='visionERPDbTr'>"
						+ "<td class='visionERPDbTd'>  <label class='visionERPDbLabels'>Username</label></td>"
						+ "<td class='visionERPDbTd'> <input type='text' value='' name='Username' id='ERPEtlUserName' class='visionInputDbFields'>"
						+ "<div class='dataMigrationInputError' id='ERPEtlUserNameError'></div></td>"
						+ "</tr>"
						+ " <tr class='visionERPDbTr'>"
						+ "<td class='visionERPDbTd'>  <label class='visionERPDbLabels'>Password</label></td>"
						+ "<td class='visionERPDbTd'>    <input type='password' value='' name='Password' id='ERPEtlPassword' class='visionInputDbFields'>"
						+ "<div class='dataMigrationInputError' id='ERPEtlPasswordError'></div></td>"
						+ "</tr>"
						+ "<tr class='visionERPDbTr'>"
						+ "<td class='visionERPDbTd'>  <label class='visionERPDbLabels'>Language Id</label></td>"
						+ "<td class='visionERPDbTd'>    <input type='text' value='' name='languageId' id='ERPEtlLanguageId' class='visionInputDbFields'>"
						+ "<div class='dataMigrationInputError' id='ERPEtlLanguageIdError'></div></td>"
						+ "</tr>"
						+ "<tr class='visionERPDbTr'>"
						+ "<tr class='visionERPDbTr' style='display:none'>"
						+ "<td class='visionERPDbTr'>  <label class='visionERPDbLabels'>Audit Id</label></td>"
						+ "<td class='visionERPDbTr'>    <input type='hidden' value='' name='auditId' id='ErpEtlauditId' class='visionInputDbFields'></td>"
						+ "</tr>"
						+ "<tr class='visionERPDbTr'>"
						+ "<td class='visionERPDbTd'>  <label class='visionERPDbLabels'>System Id</label></td>"
						+ "<td class='visionERPDbTd'>    <input type='text' value='' name='ERPSystemId' id='ERPEtlSystemId' class='visionInputDbFields'>"
						+ "<div class='dataMigrationInputError' id='ERPEtlSystemIdError'></div></td>"
						+ "</tr>"
						+ "<tr class='visionERPDbTr'><td><input type='checkbox' name='checkBoxDetails' id = 'checkBoxChecked' value='checked' checked>Save Details"
						+ "<div class='visionDataMigrationError' style='display:none'>Please check the box</div></td></tr>"
						+ "<tr class='visionERPDbTr'>"
						+ "<td class='visionERPDbTd visionERPDbConnectBtn' id='connectERPEtlDbTd' colspan = '2'><input type='button' value='Connect' name='Connect'  onclick = \"connectErpEtlDatabase('" + type + "','" + typeName + "')\" class='visionInputDbButton'></td>"

						+ "</tr>"
						+ "</table>";
					$("#visionEtlErpDivId").html(erpTable);
				} else if (selectSAPConnectionType == 'groupServer') {

					var erpTable = "<div class='visionEtlErpDiv'>"
						+ "<div id='visionShowErpEtlMsg'></div>"
						+ "<table class='visionERPEtlTable'>"

						+ " <tr class='visionERPDbTr'>"
						+ "<td class='visionERPDbTd'> <label class='visionERPDbLabels'>Connection Name</label></td>"
						+ "<td class='visionERPDbTd'> <input type='text' value='' name='ConnectionName' id='ErpEtlDbConnectionName' class='visionInputDbFields'>"
						+ "<div class='dataMigrationInputError' id='ErpEtlDbConnectionNameError'></div></td>"
						+ " </tr>"

						+ " <tr class='visionERPDbTr'>"
						+ "<td class='visionERPDbTd'> <label class='visionERPDbLabels'>Group Server</label></td>"
						+ "<td class='visionERPDbTd'> <input type='text' value='' name='GroupServer' id='ERPEtlGroupServerName' class='visionInputDbFields'>"
						+ "<div class='dataMigrationInputError' id='ERPEtlGroupServerNameError'></div></td>"
						+ " </tr>"

						+ " <tr class='visionERPDbTr'>"
						+ "<td class='visionERPDbTd'> <label class='visionERPDbLabels'>Client</label></td>"
						+ "<td class='visionERPDbTd'> <input type='text' value='' name='Client' id='ERPEtlClientName' class='visionInputDbFields'>"
						+ "<div class='dataMigrationInputError' id='ERPEtlClientNameError'></div></td>"
						+ " </tr>"
						+ "<tr class='visionERPDbTr'>"
						+ "<td class='visionERPDbTd'> <label class='visionERPDbLabels'>Host Name</label></td>"
						+ "<td class='visionERPDbTd'> <input type='text' value='' name='ERP HostName' id='ERPEtlHostName' class='visionInputDbFields'>"
						+ "<div class='dataMigrationInputError' id='ERPEtlHostNameError'></div></td>"
						+ "</tr>"
						+ "<tr class='visionERPDbTr'>"
						+ "<td class='visionERPDbTd'>  <label class='visionERPDbLabels'>Username</label></td>"
						+ "<td class='visionERPDbTd'> <input type='text' value='' name='Username' id='ERPEtlUserName' class='visionInputDbFields'>"
						+ "<div class='dataMigrationInputError' id='ERPEtlUserNameError'></div></td>"
						+ "</tr>"
						+ " <tr class='visionERPDbTr'>"
						+ "<td class='visionERPDbTd'>  <label class='visionERPDbLabels'>Password</label></td>"
						+ "<td class='visionERPDbTd'>    <input type='password' value='' name='Password' id='ERPEtlPassword' class='visionInputDbFields'>"
						+ "<div class='dataMigrationInputError' id='ERPEtlPasswordError'></div></td>"
						+ "</tr>"
						+ "<tr class='visionERPDbTr'>"
						+ "<td class='visionERPDbTd'>  <label class='visionERPDbLabels'>Language Id</label></td>"
						+ "<td class='visionERPDbTd'>    <input type='text' value='' name='languageId' id='ERPEtlLanguageId' class='visionInputDbFields'>"
						+ "<div class='dataMigrationInputError' id='ERPEtlLanguageIdError'></div></td>"
						+ "</tr>"
						+ "<tr class='visionERPDbTr'>"
						+ "<tr class='visionERPDbTr' style='display:none'>"
						+ "<td class='visionERPDbTr'>  <label class='visionERPDbLabels'>Audit Id</label></td>"
						+ "<td class='visionERPDbTr'>    <input type='hidden' value='' name='auditId' id='ErpEtlauditId' class='visionInputDbFields'></td>"
						+ "</tr>"
						+ "<tr class='visionERPDbTr'>"
						+ "<td class='visionERPDbTd'>  <label class='visionERPDbLabels'>System Id</label></td>"
						+ "<td class='visionERPDbTd'>    <input type='text' value='' name='ERPSystemId' id='ERPEtlSystemId' class='visionInputDbFields'>"
						+ "<div class='dataMigrationInputError' id='ERPEtlSystemIdError'></div></td>"
						+ "</tr>"
						+ "<tr class='visionERPDbTr'><td><input type='checkbox' name='checkBoxDetails' id = 'checkBoxChecked' value='checked' checked>Save Details"
						+ "<div class='visionDataMigrationError' style='display:none'>Please check the box</div></td></tr>"
						+ "<tr class='visionERPDbTr'>"
						+ "<td class='visionERPDbTd visionERPDbConnectBtn' id='connectERPEtlDbTd' colspan = '2'><input type='button' value='Connect' name='Connect'  onclick = \"connectErpEtlDatabase('" + type + "','" + typeName + "')\" class='visionInputDbButton'></td>"

						+ "</tr>"
						+ "</table>";
					$("#visionEtlErpDivId").html(erpTable);
				}

			})


			$(this).closest(".ui-dialog").find(".ui-button").eq(1).addClass("dialogyes");
			$(".visionHeaderMain").css("z-index", "999");
			$(".visionFooterMain").css("z-index", "999");
		},
		beforeClose: function(event, ui) {
			$(".visionHeaderMain").css("z-index", "99999");
			$(".visionFooterMain").css("z-index", "99999");
		}
	});
}


function switchETLDesignTabs(liId, divId) {

	$("#" + liId).parent().find('li.visionETLDesignTabHighLight').removeClass('visionETLDesignTabHighLight');
	$("#" + liId).addClass('visionETLDesignTabHighLight');
	$("#dataModellerDiv").hide();
	$("#contentSplitter").hide();
	$("#dataViewDiv").hide();
	$("#editorViewDiv").hide();
	$("#jobSchedulingViewDiv").hide();
	$("#cubeRelatedICONS").hide();
	$("#childJobDiv").hide();
	$("#availableMapTools").show();
	$("#" + divId).show();
	if (liId == 'li_SQLEditor') {
		$("#scriptsExecuteIcon").show();
		$("#showComponents").hide();
		$("#etlIconGroup").hide();
		
		/*setTimeout(function (){
			var width = $("#editorViewDiv").find("li.jqx-tabs-title-selected-top").width();
			if (width!=null) {
				$("#editorViewDiv").find("li").find("style").remove();
				$("#editorViewDiv").find("li.jqx-tabs-title-selected-top").append('<style>.etl-page-body #editorViewDiv .jqx-tabs-title-selected-top::after{margin-left:'+(width+8)+'px !important;}</style>');

			}
		}, 200)*/
		
	} else {
		$("#scriptsExecuteIcon").hide();
		$("#showComponents").show();
	}
	if (liId == 'li_JobScheduling') {
		loadScheduledJobs();
	}
	if (liId == 'li_DataModeller') {

		$("#availableMapTools").hide();
		$("#cubeRelatedICONS").show();
	}
	if (liId == 'li_ChildJob') {
		$("#availableMapTools").hide();
	}
}

function showSavedJobs1(){
    
}

function showSavedJobs(parFolderId, parFolderName, folderId, folderName, jobType) {
    
    if (folderId == null || folderId == 'undefined' || folderId == 'null' || folderId == ''){
        folderId = "C8DE75F32D56288CE0554B610B40A4A3";
        folderName ="Saved Jobs";
    }
    if (jobType == null){
        jobType ='ETL';
    }
   
	$.ajax({
		type: "post",
		traditional: true,
		dataType: 'json',
		url: 'getSavedJobs',
		cache: false,
		data: {
			folderId: folderId,
                        jobType: jobType
		},
		success: function(response) {
			ajaxStop();
			var jobsList = response['jobsList'];
                        var jobsListStr = "";
                        if (jobsList.length >0){
                            $.each(jobsList, function (i){
                            var jobId = this[0];
                            var jobDescr = this[1];
                            var parentFolderId = this[2];
                            var folderId = this[3];
                            var parentFolderName = this[4];
                            var folderName = this[5];
                            
                            if (folderName!=null) {
                                
                                    jobsListStr += "<div class='etlSavedJobFolder etlSavedJobsList visionEtlTreeFolders'  id='"+jobId+"'  parentfolderId='"+parentFolderId+"'  parentfoldername='"+parentFolderName+"' "
                                                    +" folderid='"+folderId+"' foldername='"+folderName+"' "
                                                    +" ondblclick=\"showSavedJobs('"+parentFolderId+"','"+parentFolderName+"','"+folderId+"','"+folderName+"','ETL')\"  >"
                                                    +"<img class='etlSavedJobsListIcon' src='images/etl/etl_folder.png' /><span>"+folderName+"</span>"
                                                    +"<img class='etlexplorerRightClickOptions etlSavejobFolderOptions'  src='images/etl/threedots-ver.png' style='display: none;'>"
                                                    +"</div>";
                             } else {
                                     jobsListStr += "<div class='etlSavedJob etlSavedJobsList visionEtlTreeFolders' id='"+jobId+"' jobname='"+jobDescr+"' "
                                                +" parentfolderId='"+parentFolderId+"'  parentfoldername='"+parentFolderName+"' "
                                                +" ondblclick=\"openSavedJob(event,'"+jobId+"','"+jobDescr+"','"+folderName+"','"+folderId+"')\"  >"
                                                +"<img class='etlSavedJobsListIcon' src='images/etl/etl_job.png' /><span>"+jobDescr+"</span>"
                                                +"<img class='etlexplorerRightClickOptions etlSavejobOptions'  src='images/etl/threedots-ver.png' style='display: none;'>"
                                                +"</div>";
                             }
                       
                             })
                        } else {
                             jobsListStr+="<div><img src='images/etl/nodatafound.png' class='etl_nodatafound_Img'></div>"
                                            
                        }
                        
                             var jobOptions = "";
                            
                             if ( $("#etlSavedJobsOptions").length == 0 ) {
                               
                                 jobOptions = "<div id='etlSavedJobsOptions' >"
                                           +"<img class='etlexplorerOptionsImg' id='etlSavedJobsOptionsBackIcon' src='images/etl/back.png' onclick=\"showSavedJobs(null,null,'"+parFolderId+"','"+parFolderName+"','ETL')\" />"
                                           +"<img class='etlexplorerOptionsImg' id='etlSavedJobsOptionsHomeIcon'  src='images/etl/home.png' onclick=showSavedJobs() />"
                                           +"<img class='etlexplorerOptionsImg' id='etlSavedJobsOptionsRefreshIcon' parentfolderid='"+parFolderId+"' parentfoldername='"+parFolderName+"' folderid='"+folderId+"'  foldername='"+folderName+"' src='images/etl/refresh.png' onclick=\"showSavedJobs('"+parFolderId+"','"+parFolderName+"','"+folderId+"','"+folderName+"','ETL')\" />"
                                           +"</div>"
                                           +"<div id='etlSavedJobsFilter' ><input id='etlSavedJobsFilterInput' placeholder='Search jobs' /></div>"
                                           +"<div id='etlSavedJobsBreadCrumb'>"
                                           +"<span id='span_"+folderId+"' onclick=showSavedJobs() >"+folderName+"</span>"
                                           +"</div>";
                                   
                                $("#availableJobsDiv").prepend(jobOptions);
                                
                             } else {
                                 if ( $("#etlSavedJobsBreadCrumb").find("#span_"+folderId).length > 0 ) {
                                     $("#etlSavedJobsBreadCrumb").find("#span_"+folderId).nextAll().remove();
                                     
                                 } else {
                                     $("#etlSavedJobsBreadCrumb").append("<span id='span_"+folderId+"' onclick=\"showSavedJobs('"+parFolderId+"','"+parFolderName+"','"+folderId+"','"+folderName+"','ETL')\"  >"+folderName+"</span>");
                                 }
                                 
                                var onclickbackbtnfunc = $("#span_"+folderId).prev().attr("onclick");
                                $("#etlSavedJobsOptionsBackIcon").attr("onclick", onclickbackbtnfunc);
                               // $("#etlSavedJobsOptionsBackIcon").attr("onclick", "showSavedJobs(null,null,'"+parFolderId+"','"+parFolderName+"','ETL')");
                                $("#etlSavedJobsOptionsHomeIcon").attr("onclick", "showSavedJobs()");
                                
                                $("#etlSavedJobsOptionsRefreshIcon").attr("onclick", "showSavedJobs('"+parFolderId+"','"+parFolderName+"','"+folderId+"','"+folderName+"','ETL')");
                                $("#etlSavedJobsOptionsRefreshIcon").attr("parentfolderid", parFolderId);
                                $("#etlSavedJobsOptionsRefreshIcon").attr("parentfoldername", parFolderName);
                                $("#etlSavedJobsOptionsRefreshIcon").attr("folderid", folderId);
                                $("#etlSavedJobsOptionsRefreshIcon").attr("foldername",folderName);
                             }
                                   
                           
                            $("#availableJobsId").html(jobsListStr);
                            
                            
                            $(".etlSavedJobsList").find(".etlSavejobOptions").click(function(event){
                                var $target = $(event.currentTarget).closest(".etlSavedJobsList");
                                var jobname = $target.attr("jobname");
                                 if (jobname!=null && jobname!=""){
                                            var jobName = $target.attr("jobName");;
                                            var jobId = $target.attr("id");;
                                            var folderId = $target.attr("parentfolderId");;
                                            var folderName = $target.attr("parentFolderName");;
                                            					
                                            var menuItems = "<li onclick=\"openSavedJob(event,'" + jobId + "','" + jobName +"','" + folderName +"','" + folderId + "')\">Open</li>";
                                            menuItems += "<li onclick=\"rightClickProcessJob('" + jobId + "')\">Execute</li>";
                                            menuItems += "<li onclick=\"deleteJob('" + jobId + "')\">Delete</li>";
                                            menuItems += "<li onclick=\"copyJob('" + jobId + "')\">Copy</li>"; // -----------------ravi copy job
                                            menuItems += "<li onclick=\"renameJob('" + jobId + "','" + jobName + "')\">Rename</li>"; // -----------------ravi copy job
                                            menuItems += "<li onclick=\"scheduleJob('" + jobId + "')\">Schedule</li>";
                                            var menuHeight = 4;

						$("#jqxMenu").remove();
						$(".etl-page-body").append("<div id='jqxMenu'><ul></ul></div>");
						$("#jqxMenu ul").html(menuItems);
						var contextMenu = $("#jqxMenu").jqxMenu({
							width: '120px', height: menuHeight * 27.5 + 'px', autoOpenPopup: false, mode: 'popup',
							//                            theme: 'energyblue'
						}); // ravi start


						var scrollTop = $(window).scrollTop();
						var scrollLeft = $(window).scrollLeft();
						contextMenu.jqxMenu('open', parseInt(event.clientX) + 5 + scrollLeft, parseInt(event.clientY) + 5 + scrollTop);
						return false;
                                        }
                            });
                            
                            
                             $(".etlSavedJobsList").find(".etlSavejobFolderOptions").click(function(event){
                                var $target = $(event.currentTarget).closest(".etlSavedJobsList");
                                var folderId = $target.attr("folderId");
                                var folderName = $target.attr("folderName");
                                
                               var menuItems =  "<li onclick=\"deleteFolder('"+folderId+"','"+folderName+"')\"  >Delete Folder</li>";
                                menuItems +=  "<li onclick=\"renameETLFolder('"+folderId+"','"+folderName+"')\"  >Rename Folder</li>";

						var menuHeight = 2;
						$("#jqxMenu").remove();
						$(".etl-page-body").append("<div id='jqxMenu'><ul></ul></div>");
						$("#jqxMenu ul").html(menuItems);
						var contextMenu = $("#jqxMenu").jqxMenu({
							width: '120px', height: menuHeight * 30 + 'px', autoOpenPopup: false, mode: 'popup',
							//                            theme: 'energyblue'
						}); // ravi start

						var scrollTop = $(window).scrollTop();
						var scrollLeft = $(window).scrollLeft();
						contextMenu.jqxMenu('open', parseInt(event.clientX) + 5 + scrollLeft, parseInt(event.clientY) + 5 + scrollTop);
						return false;
                            });
                            
                            
                            $(".etlSavedJobsList").hover(function(event){
                                $(this).find(".etlSavejobOptions").css("display","block");
                                $(this).find(".etlSavejobFolderOptions").css("display","block");
                            }, function(event){
                                $(this).find(".etlSavejobOptions").css("display","none");
                                $(this).find(".etlSavejobFolderOptions").css("display","none");
                            })
                            $("#availableJobsId").on('mousedown', function(event) {
                                        $("#jqxMenu").remove();
                                        var target = $(event.currentTarget);
                                        var rightClick = isRightClick(event);
					if (rightClick && target != null ) {
                                        var folderId = $("#etlSavedJobsOptionsRefreshIcon").attr("folderid");
                                        var folderName = $("#etlSavedJobsOptionsRefreshIcon").attr("foldername");
                                        if (true) {
                                            var menuItems = "<li onclick=\"createNewJob()\">New Job</li>"
							+ "<li onclick=\"createNewSaveJobFolder()\">New Folder</li>"


						var menuHeight = 2;
						$("#jqxMenu").remove();
						$(".etl-page-body").append("<div id='jqxMenu'><ul></ul></div>");
						$("#jqxMenu ul").html(menuItems);
						var contextMenu = $("#jqxMenu").jqxMenu({
							width: '120px', height: menuHeight * 30 + 'px', autoOpenPopup: false, mode: 'popup',
							//                            theme: 'energyblue'
						}); // ravi start

						var scrollTop = $(window).scrollTop();
						var scrollLeft = $(window).scrollLeft();
						contextMenu.jqxMenu('open', parseInt(event.clientX) + 5 + scrollLeft, parseInt(event.clientY) + 5 + scrollTop);
						return false;
                                        }
					
						
					}
                                       
					
				});
                                var timeout;
                                $("#etlSavedJobsFilterInput").unbind("keyup").on("keyup", function(){
                                    clearTimeout(timeout);
                                    timeout = setTimeout(function() {
                                    var filterValue = $("#etlSavedJobsFilterInput").val();
                                    if (filterValue!=""){
                                        $.ajax({
                                    type: "post",
                                    traditional: true,
                                    dataType: 'json',
                                    url: 'filterSavedJobs',
                                    cache: false,
                                    data: {
                                            jobType: jobType,
                                            filterValue: filterValue
                                    },
                                    success: function(response) {
                                            ajaxStop();
                                            var jobsList = response['jobsList'];
                                            var jobsListStr = "";
                                            
                                            if (jobsList.length > 0) {
                                                 $.each(jobsList, function (i){
                                                var jobId = this[0];
                                                var jobDescr = this[1];
                                                var parentFolderId = this[2];
                                                var folderId = this[3];
                                                var parentFolderName = this[4];
                                                var folderName = this[5];

                                                if (folderName!=null) {

                                                        jobsListStr += "<div class='etlSavedJobFolder etlSavedJobsList visionEtlTreeFolders'  id='"+jobId+"'  parentfolderId='"+parentFolderId+"'  parentfoldername='"+parentFolderName+"' "
                                                                        +" folderid='"+folderId+"' foldername='"+folderName+"' "
                                                                        +" ondblclick=\"showSavedJobs('"+parentFolderId+"','"+parentFolderName+"','"+folderId+"','"+folderName+"','ETL')\"  >"
                                                                        +"<img class='etlSavedJobsListIcon' src='images/etl/etl_folder.png' /><span>"+folderName+"</span>"
                                                                        +"<img class='etlexplorerRightClickOptions etlSavejobFolderOptions'  src='images/etl/threedots-ver.png' style='display: none;'>"
                                                                        +"</div>";
                                                 } else {
                                                         jobsListStr += "<div class='etlSavedJob etlSavedJobsList visionEtlTreeFolders' id='"+jobId+"' jobname='"+jobDescr+"' "
                                                                    +" parentfolderId='"+parentFolderId+"'  parentfoldername='"+parentFolderName+"' "
                                                                    +" ondblclick=\"openSavedJob(event,'"+jobId+"','"+jobDescr+"','"+folderName+"','"+folderId+"')\"  >"
                                                                    +"<img class='etlSavedJobsListIcon' src='images/etl/etl_job.png' /><span>"+jobDescr+"</span>"
                                                                    +"<img class='etlexplorerRightClickOptions etlSavejobOptions'  src='images/etl/threedots-ver.png' style='display: none;'>"
                                                                    +"</div>";
                                                 }
                                                

                                                 })
                                            } else {
                                                jobsListStr+="<div><img src='images/etl/nodatafound.png' class='etl_nodatafound_Img'></div>"
                                            }
                                           
                                                 $("#etlSavedJobsBreadCrumb").html("");
                                                 $("#availableJobsId").html(jobsListStr);
                                             },
                                             error: function(){},
                                           })
                                    } else {
                                        showSavedJobs();
                                    }
                                  
                                    }, 1000);
                                })
                                
                                

		},
		error: function(e) {
			sessionTimeout(e);
		}

	});
}

function showEtlComponents() {
	//    $("#etlIconGroup").toggle("slide");
	$('#etlIconGroup').toggle('slide', { direction: 'right' }, 500);
	setTimeout(function(){
		if ( $('#etlIconGroup').is(":visible")  ){
			$(".etlComponentsPallete").removeClass("etlComponentsLeftArraow");
			$(".etlComponentsPallete").addClass("etlComponentsRightArraow");
			$(".showComponents ").css("width","10px");
		} else {
			$(".etlComponentsPallete").removeClass("etlComponentsRightArraow");
			$(".etlComponentsPallete").addClass("etlComponentsLeftArraow");
			$(".showComponents ").css("width","40px");
		}
		
	}, 600)
	

	
	}

function genHexString(len) {
	const hex = '0123456789ABCDEF';
	let output = '';
	for (let i = 0; i < len; ++i) {
		output += hex.charAt(Math.floor(Math.random() * hex.length));
	}
	return output;
}



// function to create operator icon on dragging source tables to flowchat area in ETL
function createImageSourcesFlowchart(item, title, type) {
	//    var itemId = item.id;
	//    var items = $("#" + itemId);
	//    var childDiv = items[0].children[1];
	//    var divId = childDiv.id;
	var levelType;
	var divTitle;
	var connectionObj;
	var fileType = "";
	var fileExtensions = [".xlsx", ".xls", ".XLS", ".XLSX", ".txt", ".csv", ".xml", ".TXT", ".CSV", ".XML", ".JSON", ".json", ".PDF", ".pdf", ".JPEG", ".jpeg", ".PNG", ".png"];
	if (item != null && !item.hasItems && title != null && title != '') {
		for (var i = 0; i < fileExtensions.length; i++) {
			if (title.endsWith(fileExtensions[i])) {
				type = 'File';
				fileType = fileExtensions[i];
				break;
			}
		}
	}
	var fileType = "." + title.substr((title.lastIndexOf('.') + 1));
	if (type == 'File' || type == 'FileData') {
		levelType = 3;
	} else if (type == 'Table') {
		sourceTables.push(title);
		var parentElement = item.parentElement;
		var parent = $(parentElement)[0].parentElement;
		var childObj = parent.parentElement.children[1];
		var valueObj = childObj.treeItem['value'];
		divTitle = valueObj;
		levelType = 5;
	}
	if (savedDBData != null && !jQuery.isEmptyObject(savedDBData)) {
		var connObj = savedDBData[divTitle];
		if (connObj != null && !jQuery.isEmptyObject(connObj)) {
			connectionObj = connObj;
		}
	}
	if (item.level == levelType) {
		$("#savedConnections").off('dragEnd').on('dragEnd', function(event) {
			$(".flowchart-operator-connector-label").hide();
			var contentSplitterStyle = $("#contentSplitter").css("display");
			var contentSplitter1Style = $("#contentSplitter1").css("display");
			var $flowchart;
			var $container;
			$flowchart = $('#' + flowChartWorkSpaceId);
			$container = $('#' + flowChartWorkSpaceId);
			//            var $flowchart = $('#'+flowChartWorkSpaceId);
			//            var $container = $('#'+flowChartWorkSpaceId);
			var $this = $(this);
			var ui = event.args.originalEvent;
			var elOffset = ui.position;
			var containerOffset = $container.offset();
			if (elOffset.left > containerOffset.left &&
				elOffset.top > containerOffset.top &&
				elOffset.left < containerOffset.left + $container.width() &&
				elOffset.top < containerOffset.top + $container.height()) {
				var flowchartOffset = $flowchart.offset();
				var relativeLeft = elOffset.left - flowchartOffset.left;
				var relativeTop = elOffset.top - flowchartOffset.top;
				var positionRatio = $flowchart.flowchart('getPositionRatio');
				relativeLeft /= positionRatio;
				relativeTop /= positionRatio;
				elOffset.left = relativeLeft;
				elOffset.top = relativeTop;
			}
			var data = {
				top: elOffset.top,
				left: elOffset.left,
				dragType: type

			};
			if (connectionObj != null) {
				var items = [];
				var itemcount = 0;
				var top = elOffset.top;
				items[0] = item;
				var checkedItems = $('#savedConnections').jqxTree('getCheckedItems');
				if (checkedItems != null && checkedItems.length != null && checkedItems.length > 0) {
					for (var i = 0; i < checkedItems.length; i++) {
						var itemLevel = checkedItems[i].level;
						if (itemLevel == 5 &&
							!(checkedItems[i].label == "VIEWS" ||
								checkedItems[i].label == "SYNONYMS" ||
								checkedItems[i].label == "TABLES")) {
							items[itemcount] = checkedItems[i];
							itemcount++;
						}
					}
				}
				for (var i = 0; i < items.length; i++) {
					var dragedItem = items[i];
					if (!(dragedItem.label == "VIEWS" || dragedItem.label == "SYNONYMS" || dragedItem.label == "TABLES")) {
						var itemTreeLevel = dragedItem.level;
						var title = dragedItem.label;
						if (itemTreeLevel == 5) {

							var data = {
								top: top,
								left: elOffset.left,
								dragType: type
							};
							data['CONNECTION_NAME'] = connectionObj['CONNECTION_NAME']; //CONNECTION_NAME
							data['CONN_DB_NAME'] = connectionObj['CONN_DB_NAME']; //CONN_DB_NAME
							data['CONN_CUST_COL1'] = connectionObj['CONN_CUST_COL1']; //CONN_CUST_COL1
							data['connObj'] = connectionObj;
							data['statusLabel'] = title;
							data['tableName'] = (connectionObj['CONN_CUST_COL1'] != 'SAP_ECC' && connectionObj['CONN_CUST_COL1'] != 'SAP_HANA') ? (connectionObj['CONN_USER_NAME'] + '.' + title) : title
							//                            data['tableName'] = connectionObj['CONN_USER_NAME'] + '.' + title;
							data['properties'] = {
								body: '<div  title="' + connectionObj['CONNECTION_NAME'] + '.' + title + '" class=""><div title="Double Click here to view the Transformations rules(' + connectionObj['CONNECTION_NAME'] + '.' + title + ')" style="cursor:pointer"><img src="images/GridDB.svg"'
									+ 'class="visionOpIcons"  ondblclick=viewTrfmRules()  style="width:18px;height: 18px; padding-top: 6px;padding-top: 6px;"/></div>'

									+ '</div><div class="visionOpLabelDiv" title="Double click to Rename" ondblclick="renameOperatorDisplayLabel(\'' + title + '\',this)" style="width:' + (title.length * 5) + 'px;margin-left:' + (((title.length * -5) / 2) + 14) + 'px;">' + title + '</div>',
								inputs: {
									input_1: {
										label: '',
									}
								},
								outputs: {
									output_1: {
										label: '',
									}
								}
							}
							var operatorId = $flowchart.flowchart('addOperator', data);
							$(".flowchart-operator-connector-label").hide();
							$(".flowchart-operator-title").hide();
							//                            var component = $(this).attr("component");
							//                            if (component != "Y") {
							//                                inputOutPutPopUp(operatorId);
							//                            }
							trfmRulesChanged = true;
							top = top + 70;
						}
					}
				}


			} else {
				var items = [];
				var top = elOffset.top;
				items[0] = item;
				var itemcount = 0;
				var checkedItems = $('#savedConnections').jqxTree('getCheckedItems');
				if (checkedItems != null && checkedItems.length != null && checkedItems.length > 0) {
					for (var i = 0; i < checkedItems.length; i++) {
						var itemLevel = checkedItems[i].level;
						if (itemLevel == 3 && !(item.label == "xml" || item.label == "csv" || item.label == "xlsx" || item.label == "xls" || item.label == "json")) {
							items[itemcount] = checkedItems[i];
							itemcount++;
						}

					}
				}
				for (var i = 0; i < items.length; i++) {
					item = items[i];
					if (!(item.label == "xml" || item.label == "csv" || item.label == "xlsx" || item.label == "xls" || item.label == "json")) {
						var itemTreeLevel = item.level;
						if (itemTreeLevel == 3) {
							var data = {
								top: top,
								left: elOffset.left,
								dragType: type
							};
							var title = item.label;
							connectionObj = {};
							connectionObj['filePath'] = item['value'];
							connectionObj['fileType'] = fileType;
							connectionObj['fileName'] = title;
							var fileObj = {};
							var filePath = item['value'];
							if (filePath != null && filePath.lastIndexOf("\\") > -1) {
								filePath = filePath.substring(filePath.lastIndexOf("\\") + 1);
							}
							fileObj['filePath'] = filePath;
							fileObj['fileType'] = fileType;
							for (var entitykey in HtmlEntities) {
								var entity = HtmlEntities[entitykey];
								var regex = new RegExp(entitykey, 'g');
								title = title.replace(regex, entity);
							}
							fileObj['fileName'] = title;
							var imageIcon = "images/TEXT_Icon.svg";
							if (fileType == '.xls'
								|| fileType == '.xlsx'
								|| fileType == '.XLS'
								|| fileType == '.XLSX'
							) {
								imageIcon = "images/XLSX-Icon.svg"
							} else if (fileType == '.xml'
								|| fileType == '.XML') {
								imageIcon = "images/XML-Icon.svg";
							} else if (fileType == '.CSV'
								|| fileType == '.csv') {
								imageIcon = "images/CSV-Icon.svg";
							} else if (fileType == '.JSON'
								|| fileType == '.json') {
								imageIcon = "images/JSON_Icon.svg";
							}
							connectionObj['imageIcon'] = imageIcon;
							data['connObj'] = connectionObj;
							data['filePath'] = item['value'];
							data['properties'] = {

								body: '<div  title="' + title + '" class=""><div><img src="' + imageIcon + '"'
									+ 'class="visionOpIcons" title="Double click here to view the data" ondblclick=viewFileData(\'' + JSON.stringify(fileObj) + '\')  style="width:18px;height: 18px;"/></div><div class="visionOpLabelDiv" title="Double click to Rename" ondblclick="renameOperatorDisplayLabel(\'' + title + '\',this)" style="width:' + (title.length * 5) + 'px;margin-left:' + (((title.length * -5) / 2) + 14) + 'px;">' + title + '</div>',
								inputs: {
									input_1: {
										label: '',
									}
								},
								outputs: {
									output_1: {
										label: '',
									}
								}
							}

							var operatorId = $flowchart.flowchart('addOperator', data);
							$(".flowchart-operator-connector-label").hide();
							$(".flowchart-operator-title").hide();
							//                            var component = $(this).attr("component");
							//                            if (component != "Y") {
							//                                inputOutPutPopUp(operatorId);
							//                            }
							trfmRulesChanged = true;
							top = top + 70;
						}
					}
				}


			}
			//            $flowchart.flowchart('addOperator', data);
			//            $(".flowchart-operator-connector-label").hide();
			//            $(".flowchart-operator-title").hide();
			//            trfmRulesChanged = true;
		});
	}

}



// function to create operator icon on dragging destination tables to flowchat area in ETL
function createImageDestinationFlowchart(item, title, type) {
	var levelType;
	var divTitle;
	var connectionObj;
	if (type == 'File' || type == 'FileData') {
		levelType = 1;
	} else if (type == 'Table') {
		levelType = 3;
		var parentElement = item.parentElement;
		var parent = $(parentElement)[0].parentElement;
		var div = parent.parentElement.children[1];
		divTitle = div.title;
	}
	if (savedDBData != null && !jQuery.isEmptyObject(savedDBData)) {
		for (var i = 0; i < savedDBData.length; i++) {
			var connObj = savedDBData[i];
			if (connObj.hasOwnProperty(divTitle)) {
				connectionObj = connObj[divTitle];
			}
		}

	}
	if (item.level == levelType) {

		var operatorId = 'Dest_operator_' + sourceOperatorI;
		if (true) {
			var defaultFlowchartData = {
				operators: {
					op2: {
						top: 20,
						left: 400,
						statusLabel: title,
						tableName: title,
						dragType: type,
						connObj: connectionObj,
						properties: {
							body: '<div  title="' + title + '" class="visionOpLabelDiv">' + title + '</div>',
							inputs: {
								input_1: {
									label: 'I-' + title,
									multipleLinks: true
								}
							},
							outputs: {
								output_1: {
									label: 'O-' + title,
									multipleLinks: true
								}
							}
						}
					}
				},
			};
			$('#' + flowChartWorkSpaceId).flowchart({
				linkWidth: 2,
				defaultSelectedLinkColor: '#000055',
				grid: 10,
				distanceFromArrow: 0,
				multipleLinksOnInput: true,
				multipleLinksOnOutput: true,
				defaultSelectedLinkColor: 'red',
				onOperatorContextMenu: function(operatorId) {
					console.log("operatorId:::" + operatorId);
					openOpeartorContextMenu(operatorId);
					return true;
				},
			});
			
			initialiseMouseSelection();
			
			$('#' + flowChartWorkSpaceId).flowchart('setData', defaultFlowchartData);
			sourceFirst = false;
		} else {
			var operatorId = 'destination_operator_' + operatorI;
			var operatorData = {
				top: bodyTop,
				left: 400,
				statusLabel: title,
				tableName: title,
				dragType: type,
				connObj: connectionObj,
				properties: {
					body: '<div  title="' + title + '" class="visionOpLabelDiv">' + title + '</div>',
					inputs: {
						input_1: {
							label: '',
						}
					},
					outputs: {
						output_1: {
							label: '',
						}
					}
				}
			};
			bodyTop = bodyTop + 80;
			$('#' + flowChartWorkSpaceId).flowchart('createOperator', operatorId, operatorData);
		}

		operatorI++;
		$(".flowchart-operator-connector-label").hide();
		$(".flowchart-operator-title").hide();
		//        var component = $(this).attr("component");
		//        if (component != "Y") {
		//            inputOutPutPopUp(operatorId);
		//        }
	}
}


function createImageSourcesDataModellerFlowchart(item, title, type) {
	//    var itemId = item.id;
	//    var items = $("#" + itemId);
	//    var childDiv = items[0].children[1];
	//    var divId = childDiv.id;
	var levelType;
	var divTitle;
	var connectionObj;
	var fileType = "";
	var fileExtensions = [".xlsx", ".xls", ".XLS", ".XLSX", ".txt", ".csv", ".xml", ".TXT", ".CSV", ".XML", ".JSON", ".json", ".PDF", ".pdf", ".JPEG", ".jpeg", ".PNG", ".png"];
	if (item != null && !item.hasItems && title != null && title != '') {
		for (var i = 0; i < fileExtensions.length; i++) {

			if (title.endsWith(fileExtensions[i])) {
				type = 'File';
				fileType = fileExtensions[i];
				break;
			}
		}

	}
	var fileType = "." + title.substr((title.lastIndexOf('.') + 1));
	if (type == 'File' || type == 'FileData') {
		levelType = 3;
	} else if (type == 'Table') {
		sourceTables.push(title);
		var parentElement = item.parentElement;
		var parent = $(parentElement)[0].parentElement;
		var childObj = parent.parentElement.children[1];
		var valueObj = childObj.treeItem['value'];
		divTitle = valueObj;
		levelType = 5;
	}
	if (savedDBData != null && !jQuery.isEmptyObject(savedDBData)) {
		var connObj = savedDBData[divTitle];
		if (connObj != null && !jQuery.isEmptyObject(connObj)) {
			connectionObj = connObj;
		}
	}
	if (item.level == levelType) {
		$("#savedConnections").off('dragEnd').on('dragEnd', function(event) {
			$(".flowchart-operator-connector-label").hide();
			var $flowchart = $('#' + flowChartWorkSpaceId);
			var $container = $('#' + flowChartWorkSpaceId);
			var $this = $(this);
			var ui = event.args.originalEvent;
			var elOffset = ui.position;
			var containerOffset = $container.offset();
			if (elOffset.left > containerOffset.left &&
				elOffset.top > containerOffset.top &&
				elOffset.left < containerOffset.left + $container.width() &&
				elOffset.top < containerOffset.top + $container.height()) {
				var flowchartOffset = $flowchart.offset();
				var relativeLeft = elOffset.left - flowchartOffset.left;
				var relativeTop = elOffset.top - flowchartOffset.top;
				var positionRatio = $flowchart.flowchart('getPositionRatio');
				relativeLeft /= positionRatio;
				relativeTop /= positionRatio;
				elOffset.left = relativeLeft;
				elOffset.top = relativeTop;
			}
			var data = {
				top: elOffset.top,
				left: elOffset.left,
				dragType: type

			};
			if (connectionObj != null) {
				var items = [];
				var itemcount = 0;
				var top = elOffset.top;
				items[0] = item;
				var checkedItems = $('#savedConnections').jqxTree('getCheckedItems');
				if (checkedItems != null && checkedItems.length != null && checkedItems.length > 0) {
					for (var i = 0; i < checkedItems.length; i++) {
						var itemLevel = checkedItems[i].level;
						if (itemLevel == 5 &&
							!(checkedItems[i].label == "VIEWS" ||
								checkedItems[i].label == "SYNONYMS" ||
								checkedItems[i].label == "TABLES")) {
							items[itemcount] = checkedItems[i];
							itemcount++;
						}
					}
				}
				for (var i = 0; i < items.length; i++) {
					var dragedItem = items[i];
					if (!(dragedItem.label == "VIEWS" || dragedItem.label == "SYNONYMS" || dragedItem.label == "TABLES")) {
						var itemTreeLevel = dragedItem.level;
						var title = dragedItem.label;
						if (itemTreeLevel == 5) {

							var data = {
								top: top,
								left: elOffset.left,
								dragType: type
							};
							data['CONNECTION_NAME'] = connectionObj['CONNECTION_NAME']; //CONNECTION_NAME
							data['CONN_DB_NAME'] = connectionObj['CONN_DB_NAME']; //CONN_DB_NAME
							data['CONN_CUST_COL1'] = connectionObj['CONN_CUST_COL1']; //CONN_CUST_COL1
							data['connObj'] = connectionObj;
							data['statusLabel'] = title;
							data['tableName'] = (connectionObj['CONN_CUST_COL1'] != 'SAP_ECC' && connectionObj['CONN_CUST_COL1'] != 'SAP_HANA') ? (connectionObj['CONN_USER_NAME'] + '.' + title) : title
							//                            data['tableName'] = connectionObj['CONN_USER_NAME'] + '.' + title;
							data['properties'] = {
								body: '<div  title="' + connectionObj['CONNECTION_NAME'] + '.' + title + '" class=""><div title="Double Click here to view the Transformations rules(' + connectionObj['CONNECTION_NAME'] + '.' + title + ')" style="cursor:pointer"><img src="images/GridDB.svg"'
									+ 'class="visionOpIcons"  ondblclick=viewTrfmRules()  style="width:18px;height: 18px;padding-top: 6px;"/></div>'

									+ '</div><div class="visionOpLabelDiv" title="Double click to Rename" ondblclick="renameOperatorDisplayLabel(\'' + title + '\',this)" style="width:' + (title.length * 5) + 'px;margin-left:' + (((title.length * -5) / 2) + 14) + 'px;">' + title + '</div>',
								inputs: {
									input_1: {
										label: '',
									}
								},
								outputs: {
									output_1: {
										label: '',
									}
								}
							}
							var operatorId = $flowchart.flowchart('addOperator', data);
							$(".flowchart-operator-connector-label").hide();
							$(".flowchart-operator-title").hide();
							//                            var component = $(this).attr("component");
							//                            if (component != "Y") {
							//                                inputOutPutPopUp(operatorId);
							//                            }
							trfmRulesChanged = true;
							top = top + 70;
						}
					}
				}


			} else {
				var items = [];
				var top = elOffset.top;
				items[0] = item;
				var itemcount = 0;
				var checkedItems = $('#savedConnections').jqxTree('getCheckedItems');
				if (checkedItems != null && checkedItems.length != null && checkedItems.length > 0) {
					for (var i = 0; i < checkedItems.length; i++) {
						var itemLevel = checkedItems[i].level;
						if (itemLevel == 3 && !(item.label == "xml" || item.label == "csv" || item.label == "xlsx" || item.label == "xls" || item.label == "json")) {
							items[itemcount] = checkedItems[i];
							itemcount++;
						}

					}
				}
				for (var i = 0; i < items.length; i++) {
					item = items[i];
					if (!(item.label == "xml" || item.label == "csv" || item.label == "xlsx" || item.label == "xls" || item.label == "json")) {
						var itemTreeLevel = item.level;
						if (itemTreeLevel == 3) {
							var data = {
								top: top,
								left: elOffset.left,
								dragType: type
							};
							var title = item.label;
							connectionObj = {};
							connectionObj['filePath'] = item['value'];
							connectionObj['fileType'] = fileType;
							connectionObj['fileName'] = title;
							var fileObj = {};
							var filePath = item['value'];
							if (filePath != null && filePath.lastIndexOf("\\") > -1) {
								filePath = filePath.substring(filePath.lastIndexOf("\\") + 1);
							}
							fileObj['filePath'] = filePath;
							fileObj['fileType'] = fileType;
							for (var entitykey in HtmlEntities) {
								var entity = HtmlEntities[entitykey];
								//                                var regex = new RegExp(entitykey, 'g');
								title = title.replaceAll(entitykey, entity);
							}
							fileObj['fileName'] = title;
							var imageIcon = "images/TEXT_Icon.svg";
							if (fileType == '.xls'
								|| fileType == '.xlsx'
								|| fileType == '.XLS'
								|| fileType == '.XLSX'
							) {
								imageIcon = "images/XLSX-Icon.svg"
							} else if (fileType == '.xml'
								|| fileType == '.XML') {
								imageIcon = "images/XML-Icon.svg";
							} else if (fileType == '.CSV'
								|| fileType == '.csv') {
								imageIcon = "images/CSV-Icon.svg";
							} else if (fileType == '.JSON'
								|| fileType == '.json') {
								imageIcon = "images/JSON_Icon.svg";
							}
							connectionObj['imageIcon'] = imageIcon;
							data['connObj'] = connectionObj;
							data['filePath'] = item['value'];
							data['properties'] = {

								body: '<div  title="' + title + '" class=""><div><img src="' + imageIcon + '"'
									+ 'class="visionOpIcons" title="Double click here to view the data" ondblclick=viewFileData(\'' + JSON.stringify(fileObj) + '\')  style="width:18px;height: 18px;"/></div></div><div class="visionOpLabelDiv" title="Double click to Rename" ondblclick="renameOperatorDisplayLabel(\'' + title + '\',this)" style="width:' + (title.length * 5) + 'px;margin-left:' + (((title.length * -5) / 2) + 14) + 'px;">' + title + '</div>',
								inputs: {
									input_1: {
										label: '',
									}
								},
								outputs: {
									output_1: {
										label: '',
									}
								}
							}

							var operatorId = $flowchart.flowchart('addOperator', data);
							$(".flowchart-operator-connector-label").hide();
							$(".flowchart-operator-title").hide();
							//                            var component = $(this).attr("component");
							//                            if (component != "Y") {
							//                                inputOutPutPopUp(operatorId);
							//                            }
							trfmRulesChanged = true;
							top = top + 70;
						}
					}
				}


			}
			//            $flowchart.flowchart('addOperator', data);
			//            $(".flowchart-operator-connector-label").hide();
			//            $(".flowchart-operator-title").hide();
			//            trfmRulesChanged = true;
		});
	}

}




function createImageDestinationDataModellerFlowchart(item, title, type) {
	var levelType;
	var divTitle;
	var connectionObj;
	if (type == 'File' || type == 'FileData') {
		levelType = 1;
	} else if (type == 'Table') {
		levelType = 3;
		var parentElement = item.parentElement;
		var parent = $(parentElement)[0].parentElement;
		var div = parent.parentElement.children[1];
		divTitle = div.title;
	}
	if (savedDBData != null && !jQuery.isEmptyObject(savedDBData)) {
		for (var i = 0; i < savedDBData.length; i++) {
			var connObj = savedDBData[i];
			if (connObj.hasOwnProperty(divTitle)) {
				connectionObj = connObj[divTitle];
			}
		}

	}
	if (item.level == levelType) {

		var operatorId = 'Dest_operator_' + sourceOperatorI;
		if (true) {
			var defaultFlowchartData = {
				operators: {
					op2: {
						top: 20,
						left: 400,
						statusLabel: title,
						tableName: title,
						dragType: type,
						connObj: connectionObj,
						properties: {
							body: '<div  title="' + title + '" class="visionOpLabelDiv">' + title + '</div>',
							inputs: {
								input_1: {
									label: 'I-' + title,
									multipleLinks: true
								}
							},
							outputs: {
								output_1: {
									label: 'O-' + title,
									multipleLinks: true
								}
							}
						}
					}
				},
			};
			$('#' + flowChartWorkSpaceId).flowchart({
				linkWidth: 2,
				defaultSelectedLinkColor: '#000055',
				grid: 10,
				distanceFromArrow: 0,
				multipleLinksOnInput: true,
				multipleLinksOnOutput: true,
				defaultSelectedLinkColor: 'red',
				onOperatorContextMenu: function(operatorId) {
					console.log("operatorId:::" + operatorId);
					openOpeartorContextMenu(operatorId);
					return true;
				},
			});
			
			initialiseMouseSelection();
			
			$('#' + flowChartWorkSpaceId).flowchart('setData', defaultFlowchartData);
			sourceFirst = false;
		} else {
			var operatorId = 'destination_operator_' + operatorI;
			var operatorData = {
				top: bodyTop,
				left: 400,
				statusLabel: title,
				tableName: title,
				dragType: type,
				connObj: connectionObj,
				properties: {
					body: '<div  title="' + title + '" class="visionOpLabelDiv">' + title + '</div>',
					inputs: {
						input_1: {
							label: '',
						}
					},
					outputs: {
						output_1: {
							label: '',
						}
					}
				}
			};
			bodyTop = bodyTop + 80;
			$('#' + flowChartWorkSpaceId).flowchart('createOperator', operatorId, operatorData);
		}

		operatorI++;
		$(".flowchart-operator-connector-label").hide();
		$(".flowchart-operator-title").hide();
		//        var component = $(this).attr("component");
		//        if (component != "Y") {
		//            inputOutPutPopUp(operatorId);
		//        }
	}
}


function addJoinTableRow(connObj, tableId, rowId) {
	console.log("rowId :::" + rowId);
	$.ajax({
		type: 'post',
		traditional: true,
		dataType: 'html',
		cache: false,
		url: 'getJoinTableRows',
		async: true,
		data: {
			sourceTables: JSON.stringify(sourceTables),
			rowId: rowId,
			connObj: connObj
		},
		success: function(response) {
			stopLoader();
			if (response != null) {
				var responseObj = JSON.parse(response);
				if (responseObj != null) {
					$('#selectedJoinTables tr:last').after(responseObj.rowData);
					$("#showSourceJoinIcon").html(responseObj.rowId);
				}


			}
		},
		error: function(e) {
			sessionTimeout(e);
		}

	});
}
function getTreeDMTableTabs(fromTable, toTable, fromConnObj, toConnObj) {
	var labelObject = {};
	try {
		labelObject = JSON.parse($("#labelObjectHidden").val());
	} catch (e) {

	}
	if ((fromConnObj != null && !jQuery.isEmptyObject(fromConnObj)) && (toConnObj != null && !jQuery.isEmptyObject(toConnObj))) {
		$.ajax({
			type: 'post',
			traditional: true,
			dataType: 'html',
			cache: false,
			url: 'fetchTreeDMTableColumns',
			async: true,
			data: {
				fromTable: fromTable,
				toTable: toTable,
				fromConnObj: JSON.stringify(fromConnObj),
				toConnObj: JSON.stringify(toConnObj),
				sourceTables: JSON.stringify(sourceTables)
			},
			success: function(response) {
				stopLoader();
				if (response != null) {
					var tabsDiv = "<div id='dataMigrationTabs' class='dataMigrationTabs'><ul class='dataMigrationTabsHeader'>"
						+ "<li class='dataMigrationTabsli'><a href='#tabs-1'>Mapped Columns</a></li>"
						+ "<li class='dataMigrationTabsli'><a href='#tabs-2'>Join Mapping</a></li>"
						+ "<li class='dataMigrationTabsli'><a href='#tabs-3'>Where Clause Mapping</a></li>"
						+ "<li class='dataMigrationTabsli'><a href='#tabs-4'>Sql</a></li>"
						+ "</ul>"
						+ "<div id='tabs-1' class='dataMigrationsTabsInner'>"
						+ " </div>"
						+ "<div id='tabs-2' class='dataMigrationsTabsInner'>"
						+ "</div>"
						+ "<div id='tabs-3' class='dataMigrationsTabsInner'>"
						+ "</div>"
						+ "<div id='tabs-4' class='dataMigrationsTabsInner'>"
						+ "</div>";
					$('.visionTablesComboBox').hide();
					$('.visionUploadFileDiv').hide();
					$('.visionConnectToDbDiv').hide();
					$('#visionERPMain').hide();
					var response = JSON.parse(response);
					if (response != null && response.connectionFlag == 'Y') {
						$("#dialog").html(tabsDiv);
						$("#dialog").dialog({
							title: (labelObject['Transformation Rules'] != null ? labelObject['Transformation Rules'] : 'Transformation Rules'),
							modal: true,
							width: 1000,
							height: 'auto',
							fluid: true,
							open: function() {
								$(this).closest(".ui-dialog").find(".ui-button").eq(1).addClass("dialogyes");
								$(".visionHeaderMain").css("z-index", "999");
								$(".visionFooterMain").css("z-index", "999");
								$(".ui-dialog").addClass('visionDMTreePopup');
								$("#dataMigrationTabs").jqxTabs({ theme: 'ui-redmond' });
							},
							beforeClose: function(event, ui) {
								$(".visionHeaderMain").css("z-index", "99999");
								$(".visionFooterMain").css("z-index", "99999");
							}, close: function(event, ui) {

								$(this).html("");
								//$(this).dialog("close");
								$(this).dialog("destroy");
							}
						});
						var columnStr = response['columnStr'];
						var tablesStr = response['selectedTables'];
						var selectedJoinTables = response['selectedJoinTables'];
						$('#tabs-3').html(tablesStr);
						$('#tabs-1').html(columnStr);
						$('#tabs-2').html(selectedJoinTables);
						$('#mapColumns').addClass("active");
						$('.visionProgressFilesSteps').hide();
					} else {
						showMessagePopup(response.connectionMessage);
					}


				}
			},
			error: function(e) {
				sessionTimeout(e);
			}

		});
	}
}


function showMessagePopup(message) {
	try {
		labelObject = JSON.parse($("#labelObjectHidden").val());
	} catch (e) {

	}
	var labelObject = {};
	$("#dialog").html(message);
	$("#dialog").dialog({
		title: (labelObject['Message'] != null ? labelObject['Message'] : 'Message'),
		modal: true,
		width: 300,
		height: 135,
		fluid: true,
		buttons: [{
			text: (labelObject['Ok'] != null ? labelObject['Ok'] : 'Ok'),
			click: function() {
				$(this).html("");
				//$(this).dialog("close");
				$(this).dialog("destroy");
			}

		}],
		open: function() {
			$(this).closest(".ui-dialog").find(".ui-button").eq(1).addClass("dialogyes");
			$(".visionHeaderMain").css("z-index", "999");
			$(".visionFooterMain").css("z-index", "999");
		},
		beforeClose: function(event, ui) {
			$(".visionHeaderMain").css("z-index", "99999");
			$(".visionFooterMain").css("z-index", "99999");
		}
	});
}

function fetchTreeDMSelectedColumns() {
	try {
		labelObject = JSON.parse($("#labelObjectHidden").val());
	} catch (e) {

	}
	var labelObject = {};
	var fromConnObj = $('#fromConnObj').val();
	var toConnObj = $('#toConnObj').val();
	var fromTable = $('#fromTable').val();
	var toTable = $('#toTable').val();
	var i = 0;
	var colsObj = {};
	var defaultValObj = {};
	var destColArr = [];
	var flag = true;
	$("#sourceDestColsTableId tbody tr").each(function() {
		var sourceColNameStr = $("#SOURCE_SELECT_" + i).val();
		var destColNameStr = $("#DEST_SELECT_" + i).val();
		var sourceColName = "";
		var defaultVal = $("#DEFAULTVALUES_" + i).val();
		if (sourceColNameStr != null) {
			sourceColName = sourceColNameStr.split(":")[1];
			if (destColNameStr != null) {
				//                destColObj["TABLE_NAME"] = destColNameStr.split(":")[0];
				//                destColObj["COLUMN_NAME"] = destColNameStr.split(":")[1];

				console.log("destColArr::::" + destColArr);
				var col = destColArr.includes(destColNameStr);
				if (destColArr != null && destColArr != '' && destColArr.includes(destColNameStr)) {
					var message = "Mapped Column is already exist";
					showMessagePopup(message);
					flag = false;
					return;
				} else {
					destColArr.push(destColNameStr);
					if (destColNameStr != null && destColNameStr != '' && destColNameStr != 'Select') {
						colsObj[sourceColName] = destColNameStr;
					}

				}

			}

			if (defaultVal != null && defaultVal != '')
				defaultValObj[sourceColName] = defaultVal;
		}

		++i;
	});
	var j = 0;
	var tablesObj = {};
	$("#selectedTables tbody tr").each(function() {
		var sourceTableName = $("#SELECT_TABLE_" + j).text();
		var tableInputValue = $("#TABLE_INPUT" + j).val();
		tablesObj[sourceTableName] = tableInputValue;
		++j;
	});
	var k = 0;
	var joinTablesArr = [];
	$("#selectedJoinTables tbody tr").each(function() {
		var joinTablesObj = {};
		var fromJoinTable = $("#SOURCE_SELECT_JOIN_LEFT_" + k).val();
		var join = $("#TABLE_JOIN_INPUT_" + k).val();
		var joinCondition = $("#TABLE_JOIN_COND_INPUT_" + k).val();
		var toJoinTable = $("#SOURCE_SELECT_JOIN_RIGHT_" + k).val();
		joinTablesObj['fromJoinTable'] = fromJoinTable;
		joinTablesObj['join'] = join;
		joinTablesObj['joinCondition'] = joinCondition;
		joinTablesObj['toJoinTable'] = toJoinTable;
		joinTablesArr.push(joinTablesObj);
		++k;
	});
	console.log("defaultValObj:::::::" + defaultValObj);
	if (flag) {
		if (colsObj != null && colsObj != '') {
			$.ajax({
				type: "post",
				traditional: true,
				dataType: 'html',
				cache: false,
				url: "mappingTreeDMSourceColsWithDestCols",
				data: {
					fromConnObj: fromConnObj,
					toConnObj: toConnObj,
					fromTable: fromTable,
					toTable: toTable,
					columnsObj: JSON.stringify(colsObj),
					tablesObj: JSON.stringify(tablesObj),
					defaultValObj: JSON.stringify(defaultValObj),
					joinTablesObj: JSON.stringify(joinTablesArr),
					sourceTables: JSON.stringify(sourceTables)
				},
				success: function(response) {
					if (response != null) {

						var result = JSON.parse(response);
						if (result != null && result.connectionFlag == 'Y') {
							//var message = result.Message;
							$('#dialog').html(result.Message);
						} else {
							$('#dialog').html(result.connectionMessage);
						}
						$("#dialog").dialog({
							title: (labelObject['Message'] != null ? labelObject['Message'] : 'Message'),
							modal: true,
							width: 300,
							height: 135,
							fluid: true,
							buttons: [{
								text: (labelObject['Ok'] != null ? labelObject['Ok'] : 'Ok'),
								click: function() {
									$('.visionProgressSteps').hide();
									$('.visionProgressFilesSteps').hide();
									$('#mappingColumns').hide();
									$('#visionERPMain').hide();
									$("#" + flowChartWorkSpaceId).val("");
									$(this).html("");
									//$(this).dialog("close");
									$(this).dialog("destroy");
								}

							}],
							open: function() {
								$(this).closest(".ui-dialog").find(".ui-button").eq(1).addClass("dialogyes");
								$(".visionHeaderMain").css("z-index", "999");
								$(".visionFooterMain").css("z-index", "999");
							},
							beforeClose: function(event, ui) {
								$(".visionHeaderMain").css("z-index", "99999");
								$(".visionFooterMain").css("z-index", "99999");
							}
						});
					}
				},
				error: function(e) {
					sessionTimeout(e);
				}
			});
		}
	}



}

function getDMTableColumnsData(fromTable, toTable, fromConnObj, toConnObj) {
	var labelObject = {};
	try {
		labelObject = JSON.parse($("#labelObjectHidden").val());
	} catch (e) {

	}

	if ((fromConnObj != null && !jQuery.isEmptyObject(fromConnObj)) && (toConnObj != null && !jQuery.isEmptyObject(toConnObj))) {
		$.ajax({
			type: 'post',
			traditional: true,
			dataType: 'html',
			cache: false,
			url: 'fetchTreeDMTableColumns',
			async: true,
			data: {
				fromTable: fromTable,
				toTable: toTable,
				fromConnObj: JSON.stringify(fromConnObj),
				toConnObj: JSON.stringify(toConnObj),
				sourceTables: JSON.stringify(sourceTables)
			},
			success: function(response) {
				stopLoader();
				if (response != null) {
					var tableData = "<div id='mappingColumns' class='visionColumnsMapping' style='display:none'>"
						//            +    "<div id= 'showConnectionName' style='margin-left:15px;margin-top:15px'>  </div>"
						+ "<div id='showSourceTablesList' class='visionSourceTablesMain'></div>"
						+ "<div id='showSourceJoinIcon' class='visionSourceJoinIcon'></div>"
						+ "<div id='showSourceTablesJoinList' class='visionSourceTablesMain'></div>"
						+ "<div class='visionMappedTable' id= 'MappedTable'></div>"
						+ "<div class='visionProcessCols'>"
						+ "<input type='button' value='Process' name='Process' id='processCols' onclick = 'fetchTreeDMSelectedColumns()' class='visionProcessColsBtn'>"
						+ "</div>"
						+ "</div>";
					$('.visionTablesComboBox').hide();
					$('.visionUploadFileDiv').hide();
					$('.visionConnectToDbDiv').hide();
					$('#visionERPMain').hide();
					var response = JSON.parse(response);
					if (response != null && response.connectionFlag == 'Y') {
						$("#dialog").html(tableData);
						$("#dialog").dialog({
							title: (labelObject['Table Columns'] != null ? labelObject['Table Columns'] : 'Table Columns'),
							modal: true,
							width: 900,
							height: 'auto',
							fluid: true,
							open: function() {
								$(this).closest(".ui-dialog").find(".ui-button").eq(1).addClass("dialogyes");
								$(".visionHeaderMain").css("z-index", "999");
								$(".visionFooterMain").css("z-index", "999");
								$(".ui-dialog").addClass('visionDMTreePopup');
							},
							beforeClose: function(event, ui) {
								$(".visionHeaderMain").css("z-index", "99999");
								$(".visionFooterMain").css("z-index", "99999");
							}, close: function(event, ui) {

								$(this).html("");
								//$(this).dialog("close");
								$(this).dialog("destroy");
							}
						});
						var columnStr = response['columnStr'];
						var tablesStr = response['selectedTables'];
						var selectedJoinTables = response['selectedJoinTables'];
						var showSourceJoinIcon = response['showSourceJoinIcon'];
						$('#mappingColumns').show();
						$('#showSourceTablesList').html(tablesStr);
						$('#MappedTable').html(columnStr);
						// var matchedSelectStr = response['matchedSelectStr'];
						$("#showSourceJoinIcon").html(showSourceJoinIcon);
						$('#showSourceTablesJoinList').html(selectedJoinTables);
						$('#mapColumns').addClass("active");
						$('.visionProgressFilesSteps').hide();
					} else {
						showMessagePopup(response.connectionMessage);
					}


				}
			},
			error: function(e) {
				sessionTimeout(e);
			}

		});
	}
}
function getDMFileColumnsData(fromTable, selectType, fromConnObj) {
	var labelObject = {};
	try {
		labelObject = JSON.parse($("#labelObjectHidden").val());
	} catch (e) {

	}

	if (fromConnObj != null && !jQuery.isEmptyObject(fromConnObj)) {
		$("#selectType").val(selectType);
		if (selectType == 'XLSX' || selectType == 'XLS') {
			//$("#downloadData").attr("action");
			$("#downloadData").attr("action", "exportDMXlsxData");
			$("#downloadData").submit();
		} else if (selectType == 'CSV') {
			$("#downloadData").attr("action", "exportDMCSVData");
			$("#downloadData").submit();
		} else if (selectType == 'PDF') {
			$("#downloadData").attr("action", "exportPDFData");
			// $("#downloadData").submit();
		} else if (selectType == 'XML') {
			$("#downloadData").attr("action", "exportDMXMLData");
			$("#downloadData").submit();
		}
	}
}


function getDMFileDataColumnsData(fromTable, toTable, connectionObj) {
	var labelObject = {};
	try {
		labelObject = JSON.parse($("#labelObjectHidden").val());
	} catch (e) {

	}
	if (connectionObj != null && !jQuery.isEmptyObject(connectionObj)) {
		$.ajax({
			type: 'post',
			traditional: true,
			dataType: 'html',
			cache: false,
			url: 'fetchTreeDMTableFileColumns',
			async: true,
			data: {
				fromTable: fromTable,
				toTable: toTable,
				fromConnObj: JSON.stringify(connectionObj),
			},
			success: function(response) {
				stopLoader();
				if (response != null) {
					var tableData = "<div id='mappingColumns' class='visionColumnsMapping' style='display:none'>"
						//            +    "<div id= 'showConnectionName' style='margin-left:15px;margin-top:15px'>  </div>"
						+ "<div id='showSourceTablesList' class='visionSourceTablesMain'></div>"
						+ "<div class='visionMappedTable' id= 'MappedTable'></div>"
						+ "<div class='visionProcessCols'>"
						+ "<input type='button' value='Process' name='Process' id='processCols' onclick = 'fetchTreeDMFileSelectedColumns()' class='visionProcessColsBtn'>"
						+ "</div>"
						+ "</div>";
					$('.visionTablesComboBox').hide();
					$('.visionUploadFileDiv').hide();
					$('.visionConnectToDbDiv').hide();
					$('#visionERPMain').hide();
					var response = JSON.parse(response);
					if (response != null && response.connectionFlag == 'Y') {
						$("#dialog").html(tableData);
						$("#dialog").dialog({
							title: (labelObject['Table Columns'] != null ? labelObject['Table Columns'] : 'Table Columns'),
							modal: true,
							width: 800,
							height: 'auto',
							fluid: true,
							open: function() {
								$(this).closest(".ui-dialog").find(".ui-button").eq(1).addClass("dialogyes");
								$(".visionHeaderMain").css("z-index", "999");
								$(".visionFooterMain").css("z-index", "999");
								$(".ui-dialog").addClass('visionDMTreePopup');
							},
							beforeClose: function(event, ui) {
								$(".visionHeaderMain").css("z-index", "99999");
								$(".visionFooterMain").css("z-index", "99999");
							}, close: function(event, ui) {

								$(this).html("");
								//$(this).dialog("close");
								$(this).dialog("destroy");
							}
						});
						var columnStr = response['columnStr'];
						var tablesStr = response['selectedTables'];
						$('#mappingColumns').show();
						$('#showSourceTablesList').html(tablesStr);
						$('#MappedTable').html(columnStr);
						var matchedSelectStr = response['matchedSelectStr'];
						$('#mapColumns').addClass("active");
						$('.visionProgressFilesSteps').hide();
					} else {
						showMessagePopup(response.connectionMessage);
					}


				}
			},
			error: function(e) {
				sessionTimeout(e);
			}

		});
	}
}
function showUploadedFiles(treeId, divId) {
	$.ajax({
		type: "post",
		traditional: true,
		dataType: 'json',
		url: "getTreeParentFile",
		cache: false,
		data: {
			treeId: treeId,
			divId: divId,
		},
		success: function(data, status, xhr) {
			if (data != null && data != '' && data != undefined) {
				var treeConfigObj = data['treeConfigObj'];
				var dragEndFunction = data['dragEnd'];
				treeConfigObj.allowDrag = true;
				treeConfigObj.allowDrop = true;
				treeConfigObj.dragEnd = eval('(' + dragEndFunction + ')');
				$('#' + divId).jqxTree(treeConfigObj);
				$('#' + divId).jqxTree('focus');
				$('#' + divId).on('expand', function(event) {
					var parentItem = $('#' + divId).jqxTree('getItem', event.args.element);
					var $element = $(event.args.element);
					var loader = false;
					var loaderItem = null;
					var children = $element.find('ul:first').children();
					$.each(children, function() {
						var item = $('#' + divId).jqxTree('getItem', this);
						if (item && item.value == 'ajax') {
							loaderItem = item;
							loader = true;
							return false;
						}

					});
					if (loaderItem != null) {
						var level = parentItem.level;
						$('#' + divId).jqxTree('removeItem', loaderItem.element);
						console.log("level is :::" + level);
						$.ajax({
							type: "post",
							traditional: true,
							dataType: 'json',
							url: "getTreeUploadedFiles",
							cache: false,
							data: {
								treeId: divId,
							},
							success: function(data, status, xhr) {
								if (data != null && data != '' && data != undefined) {
									$('#' + divId).jqxTree('addTo', data, $element[0]);
									var items = $('#' + divId).jqxTree('getItems');
									$.each(items, function() {
										$(this.titleElement).attr('title', this.label);
									});
								}
							},
							error: function(e) {
								console.log(e);
								sessionTimeout(e);
								stopLoader();
							}
						});
					}
				});
			}
		},
		error: function(e) {
			console.log(e);
			sessionTimeout(e);
			stopLoader();
		}
	});
}


function fetchTreeDMFileSelectedColumns() {
	try {
		labelObject = JSON.parse($("#labelObjectHidden").val());
	} catch (e) {

	}
	var labelObject = {};
	var fromConnObj = $('#fromConnObj').val();
	var fromTable = $('#fromTable').val();
	var toTable = $('#toTable').val();
	var i = 0;
	var mappedFileColsObj = {};
	var defaultValObj = {};
	$("#sourceDestColsFilesTableId tbody tr").each(function() {
		var destColNameStr = $("#DEST_FILE_SELECT_" + i).val();
		var sourceColNameStr = $("#SOURCE_FILE_SELECT_" + i).val();
		var defaultVal = $("#DEFAULTVALUESFILES_" + i).val();
		if (destColNameStr != null && destColNameStr != '' && destColNameStr != 'Select'
			&& sourceColNameStr != null && sourceColNameStr != '' && sourceColNameStr != 'Select') {
			mappedFileColsObj[destColNameStr] = sourceColNameStr;
		}
		if (defaultVal != null && defaultVal != '') {
			defaultValObj[destColNameStr] = defaultVal;
		}

		++i;
	});
	if (mappedFileColsObj != null && !jQuery.isEmptyObject(mappedFileColsObj)) {
		$.ajax({
			type: "post",
			traditional: true,
			dataType: 'html',
			cache: false,
			url: "mappingTreeDMFileColsWithDestCols",
			data: {
				fromConnObj: fromConnObj,
				fromTable: fromTable,
				toTable: toTable,
				'mappedFileColsObj': JSON.stringify(mappedFileColsObj),
				'defaultValObj': JSON.stringify(defaultValObj),
			},
			success: function(response) {
				if (response != null) {
					$('#dialog').html(response);
					$("#dialog").dialog({
						title: (labelObject['Message'] != null ? labelObject['Message'] : 'Message'),
						modal: true,
						width: 300,
						height: 135,
						fluid: true,
						buttons: [{
							text: (labelObject['Ok'] != null ? labelObject['Ok'] : 'Ok'),
							click: function() {
								$('.visionProgressSteps').hide();
								$('.visionProgressFilesSteps').hide();
								$('#mappingColumns').hide();
								$('#visionERPMain').hide();
								$(this).html("");
								//$(this).dialog("close");
								$(this).dialog("destroy");
							}

						}],
						open: function() {
							$(this).closest(".ui-dialog").find(".ui-button").eq(1).addClass("dialogyes");
							$(".visionHeaderMain").css("z-index", "999");
							$(".visionFooterMain").css("z-index", "999");
						},
						beforeClose: function(event, ui) {
							$(".visionHeaderMain").css("z-index", "99999");
							$(".visionFooterMain").css("z-index", "99999");
						}
					});
				}
			},
			error: function(e) {
				sessionTimeout(e);
			}
		});
	}




}



function treeRefreshSavedConnections() {
	$.ajax({
		type: "post",
		traditional: true,
		dataType: 'json',
		url: "getTreeDataPiping",
		cache: false,
		data: {
			treeId: 'MM_SOURCE_AVAILABLE_CONNECTION_TREE',
		},
		success: function(response) {

			if (response != null && !jQuery.isEmptyObject(response)) {
				$("#savedConnections").html("");
				treeSavedConnections(response, 'savedConnections');
			}

		},
		error: function(e) {
			console.log(e);
			sessionTimeout(e);
			stopLoader();
		}
	});
}

function treeDestinationConnections() {
	$.ajax({
		type: "post",
		traditional: true,
		dataType: 'json',
		url: "getTreeDataPiping",
		cache: false,
		data: {
			treeId: 'MM_SOURCE_AVAILABLE_CONNECTION_TREE',
		},
		success: function(response) {

			if (response != null && !jQuery.isEmptyObject(response)) {
				$("#descSplitterContainerHeader").html("");
				treeSavedConnections(response, 'descSplitterContainerHeader');
			}

		},
		error: function(e) {
			console.log(e);
			sessionTimeout(e);
			stopLoader();
		}
	});
}




function refreshMappingArea() {
	var contentSplitterStyle = $("#contentSplitter").css("display");
	var contentSplitter1Style = $("#contentSplitter1").css("display");
	var flowChartId;
	var containerId;
	flowChartId = flowChartWorkSpaceId;
	//        flowChartId = 'flowchartworkSourcesspace';
	containerId = 'feedHeader';
	$("#dialog").html("Are you sure you want to clear the Mapping Area??");
	$("#dialog").dialog({
		title: (labelObject['Confirmation'] != null ? labelObject['Confirmation'] : 'Confirmation'),
		modal: true,
		height: 'auto',
		minWidth: 300,
		maxWidth: 'auto',
		fluid: true,
		buttons: [{
			text: (labelObject['Yes'] != null ? labelObject['Yes'] : 'Yes'),
			click: function() {
				$(this).html("");
				//$(this).dialog("close");
				$(this).dialog("destroy");
				//                    $("#currentJobId").val("");
				//                    $("#currentJobName").val("");
				//                    $("#currentGroupJobName").val("");
				var jobDescr = $("#currentJobName").val();
				var jobId = $("#" + flowChartId).attr("jobId");
				var folderId = $("#" + flowChartId).attr("folderId");
				var folderName = $("#" + flowChartId).attr("folderName");
				$("#" + flowChartId).remove();
				refreshWorkSpaceFlag = true;
				var selectedItemIndex = $('#flowChartTabs').jqxTabs('selectedItem');
				if (flowChartId.indexOf("flowchartworkSourcesspace") > -1) {
					var length = $('#flowChartTabs').jqxTabs('length');
					if (length != null) {
						$('#flowChartTabs').jqxTabs('removeAt', selectedItemIndex);
					}
					var divStr = "<div>";
					divStr += "<div  style='display: flex;float:left;margin-top:5px;'>";
					divStr += "</div>";
					divStr += '<div  id="flowchartworkSourcesspace" class="flowchart-example-container"></div>';
					$('#flowChartTabs').jqxTabs('addAt', selectedItemIndex, "New Tab", divStr);
					$("#" + flowChartId).flowchart({
						linkWidth: 2,
						defaultSelectedLinkColor: '#000055',
						grid: 10,
						distanceFromArrow: 0,
						//                defaultOperatorClass:'VisionWorkFlowTest',
						//                multipleLinksOnInput: true,
						//                multipleLinksOnOutput: true,
						defaultSelectedLinkColor: 'red',
						onOperatorContextMenu: function(operatorId) {
							console.log("operatorId:::" + operatorId);
							openOpeartorContextMenu(operatorId);
							return true;
						},
					});
					initialiseMouseSelection();
					
					
				} else {
					var htmlDiv = '<div  id="workSpace_' + jobId + '" class="flowchart-example-container" jobId="' + jobId + '" jobName="' + jobDescr + '" folderId="' + folderId + '" folderName="' + folderName + '" ></div>';
					$('#flowChartTabs').jqxTabs('setContentAt', selectedItemIndex, htmlDiv);
					setTimeout(function() {
						$("#" + flowChartId).flowchart({
							linkWidth: 2,
							defaultSelectedLinkColor: '#000055',
							grid: 10,
							distanceFromArrow: 0,
							//                defaultOperatorClass:'VisionWorkFlowTest',
							//                multipleLinksOnInput: true,
							//                multipleLinksOnOutput: true,
							defaultSelectedLinkColor: 'red',
							onOperatorContextMenu: function(operatorId) {
								console.log("operatorId:::" + operatorId);
								openOpeartorContextMenu(operatorId);
								return true;
							},
						});
						initialiseMouseSelection();
					}, 100)

				
				}
				//                    $("#dataMigrationTabs").html("");
				$("#dataMigrationTabs").remove();
				$("#normalizeOptionsTabs").remove(); // ravi normalise
				$("#deNormalizeOptionsTabs").remove();
				previousOperatorId = null;
				prevTargetOperatorId = null;
				$("#currentTrnsOpId").val(""); // ravi updated code changes

			}
		},
		{
			text: (labelObject['No'] != null ? labelObject['No'] : 'No'),
			click: function() {
				$(this).html("");
				//$(this).dialog("close");
				$(this).dialog("destroy");
				// $("#labeld").empty();

			}

		}],
		open: function() {
			$(this).closest(".ui-dialog").find(".ui-button").eq(1).addClass("dialogyes");
			$(this).closest(".ui-dialog").find(".ui-button").eq(2).addClass("dialogno");
			$(".visionHeaderMain").css("z-index", "999");
			$(".visionFooterMain").css("z-index", "999");
		},
		beforeClose: function(event, ui) {
			$(".visionHeaderMain").css("z-index", "99999");
			$(".visionFooterMain").css("z-index", "99999");
		}
	});
	initialiseMouseSelection();
}

function deleteSelectedOporLink() {

	$("#" + flowChartWorkSpaceId + " .selected").each(function() {
		var currentFlowcharArea = $(this).parent().parent().attr("id");
		var selectedOpeartorId = $(this).data("operator_id");
		console.log(":::::;" + selectedOpeartorId);
		$('#' + flowChartWorkSpaceId).flowchart('deleteOperator', selectedOpeartorId);
	});
	var linkId = $("#" + flowChartWorkSpaceId).flowchart('getSelectedLinkId');
	if (linkId != null) {
		$("#" + flowChartWorkSpaceId).	flowchart('deleteLink', linkId);
	}
	
	try {
		var currentFlowcharArea = $(this).parent().parent().attr("id");
		$('#' + currentFlowcharArea).flowchart('deleteSelected');
	} catch (e) {
	}
	trfmRulesChanged = true;
	$(".selectionArea").remove();
	$("#jqxMenu").remove();
	//    
}

function saveJob(jobName, jobId, data, folderName, folderId, processFlag) { // ravi save new job
	
	showLoader();
	var contentSplitterStyle = $("#contentSplitter").css("display");
	var contentSplitter1Style = $("#contentSplitter1").css("display");
	var flowChartId;
	var containerId;
	var jobDetails = {};
	flowChartId = flowChartWorkSpaceId;
	containerId = 'feedHeader';
	jobDetails['jobType'] = "ETL";
	if (globalETLLoadMenu == "NIMIC") {
		jobDetails['jobType'] = "NIMIC";
	}

	// ravi start

	var flowChartData = {};
	try {
		flowChartData = $('#' + flowChartId).flowchart('getData');
	} catch (e) {
	}
	
	$.each(flowChartData['operators'], function(i){
		
		var operatorId = flowChartData['operators'][i]['operatorId'];
		var operatorData = flowChartData['operators'][i];
		var body = operatorData['properties']['body'];
		var ele = document.createElement('div');
		ele.innerHTML = body;
		if ($(ele).find(".operatorProcessStatus").length > 0) {
			$(ele).find(".operatorProcessStatus").remove();
		} 
		if ($(ele).find(".visionJobReconciliation").length > 0) {
			$(ele).find(".visionJobReconciliation").remove();
		}
		if ($(ele).find(".etlProcessComponentLoader").length > 0) {
			$(ele).find(".etlProcessComponentLoader").remove();
		} 

			operatorData['properties']['body'] = $(ele).html();
			$('#' + flowChartWorkSpaceId).flowchart('setOperatorData', operatorId, operatorData);
	
	})
	flowChartData = $('#' + flowChartId).flowchart('getData');
	//console.log("Data::::" + JSON.stringify(data))
	$.ajax({
		type: "post",
		traditional: true,
		dataType: 'html',
		cache: false,
		url: "saveMappings",
		data: {
			mappedData: JSON.stringify(flowChartData),
			jobName: jobName,
			jobId: jobId, // ravi save new job
			folderName: folderName,
			folderId: folderId,
			jobDetails: JSON.stringify(jobDetails)
			//trfmRulesArray: JSON.stringify(trfmRulesArray)
		},
		success: function(response) {
			//            if (processFlag == 'Y') {
			//                return false;
			//            }
			// ravi start
			var response = JSON.parse(response);
			//            showSavedJobs();
			var message = response['message'];
			var jobId = response['jobId'];
			var jobName = response['jobName'];
			$("#currentJobId").val(jobId);
			$("#currentJobName").val(jobName);
			var flowChartData = JSON.parse(response['flowChartData']);
			var selectedItemIndex = $('#flowChartTabs').jqxTabs('selectedItem');
			$("#" + flowChartId).remove();
			if (flowChartId == "flowchartworkSourcesspace") {
				var length = $('#flowChartTabs').jqxTabs('length');
				if (length != null) {
					$('#flowChartTabs').jqxTabs('removeAt', selectedItemIndex);
				}
				var divStr = "<div>";
				divStr += "<div  style='display: flex;float:left;margin-top:5px;'>";
				divStr += "</div>";
				divStr += '<div  id="workSpace_' + jobId + '" class="flowchart-example-container" jobId="' + jobId + '" jobName="' + jobName + '" folderId= "' + folderId + '" folderName="' + folderName + '" ></div>';
				var selectedItemIndex1 = $('#flowChartTabs').jqxTabs('selectedItem');
				$('#flowChartTabs').jqxTabs('addAt', selectedItemIndex, jobName, divStr);
				flowChartWorkSpaceId = "workSpace_" + jobId;
			} else {
				var length = $('#flowChartTabs').jqxTabs('length');
				if (length != null) {
					$('#flowChartTabs').jqxTabs('removeAt', selectedItemIndex);
				}
				var divStr = "<div>";
				divStr += "<div  style='display: flex;float:left;margin-top:5px;'>";
				divStr += "</div>";
				divStr += '<div  id="workSpace_' + jobId + '" class="flowchart-example-container" jobId="' + jobId + '" jobName="' + jobName + '" folderId= "' + folderId + '" folderName="' + folderName + '" ></div>';
				var selectedItemIndex1 = $('#flowChartTabs').jqxTabs('selectedItem');
				$('#flowChartTabs').jqxTabs('addAt', selectedItemIndex, jobName, divStr);
				flowChartWorkSpaceId = "workSpace_" + jobId;
			}



			$('#' + flowChartWorkSpaceId).flowchart({
				linkWidth: 2,
				defaultSelectedLinkColor: '#000055',
				grid: 10,
				distanceFromArrow: 0,
				multipleLinksOnInput: true,
				multipleLinksOnOutput: true,
				defaultSelectedLinkColor: 'red',
				onOperatorContextMenu: function(operatorId) {
					console.log("operatorId:::" + operatorId);
					openOpeartorContextMenu(operatorId);
					return true;
				},
			});
			initialiseMouseSelection();
			
			var count = 0;
			var OperatorsData = {};
			var linksData = {};
			try {
				for (var key in flowChartData.operators) {

					OperatorsData[count] = flowChartData.operators[key];
					for (var i in flowChartData.links) {
						if (parseInt(key) == flowChartData.links[i].fromOperator) {
							flowChartData.links[i].fromOperator = count;
						}
						if (parseInt(key) == flowChartData.links[i].toOperator) {
							flowChartData.links[i].toOperator = count;
						}

					}

					count = count + 1;
				}
				for (var key in OperatorsData) {
					$('#' + flowChartWorkSpaceId).flowchart('addOperator', OperatorsData[key]);
				}
			} catch (e) {
			}



			var count = 0;
			//   try {

			for (var key in flowChartData.links) {

				linksData[count] = flowChartData.links[key];
				count = count + 1;
			}
			for (var key in linksData) {
				$('#' + flowChartWorkSpaceId).flowchart('addLink', linksData[key]);
			}

			$(".flowchart-operator-connector-label").hide();
			$(".flowchart-operator-title").hide();
			// ravi end

			stopLoader();
			ajaxStop();
			trfmRulesChanged = false;
			if (processFlag == "Y") {
				processJob();
			} else {

				showMesg(message);
			}
			// ravi end
		},
		error: function(e) {
			stopLoader();
			sessionTimeout(e);
		}
	});
}




function showTranformationRules($this) {
	showLoader();
	console.log("::showTranformationRules::");
	var t_rules = {};
	var selectedMapOperatorId = $('#' + flowChartWorkSpaceId).flowchart('getSelectedOperatorId');
	$("#currentTrnsOpId").val(selectedMapOperatorId);
	var normalizeOptionsObj = {};
	var deNormalizeOptionsObj = {};
	if (previousOperatorId != null) {
		var previousMapOperatorData = $('#' + flowChartWorkSpaceId).flowchart('getOperatorData', previousOperatorId);
		if (previousMapOperatorData['trfmRules-data'] != null) {
			t_rules = previousMapOperatorData['trfmRules-data'];
		}
	}

	var destinationColumnEmpty = false;
	var colMappingsData = []
	var rowCount = $('#sourceDestColsTableId tbody tr').length;
	var columnCount = $('#sourceDestColsTableId th').length;
	t_rules['primaryKey'] = "";
	for (var rowIndex = 0; rowIndex < rowCount; rowIndex++) {
		var rowData = {};
		var tr = $('#sourceDestColsTableId tbody tr')[rowIndex];
		var destinationColumnStyle = $(tr.children[2]).attr("style");
		var destinationColumnVal = $(tr.children[2]).find('input').val();
		if (destinationColumnStyle == "display:none;" || destinationColumnStyle == "display:none") {
			destinationColumnVal = "N/A:N/A";
		}
		if (destinationColumnVal == null || destinationColumnVal == "") {
			destinationColumnEmpty = true;
		}


		if (destinationColumnEmpty) {
			showMesg("Destination Column Cannot be empty");
			throw new Error();
		}

		//        if (destinationColumnVal != null &&
		//                destinationColumnVal != "" &&
		//                destinationColumnVal != "undefined"
		//                && destinationColumnVal.indexOf(":")==-1){
		//            destinationColumnVal = "N/A:"+destinationColumnVal; // ravi process job issues 
		//        }

		var dataFunobjStr = $(tr.children[5]).find('input').attr("data-funobjstr");
		//funobjstr
		var funObj = {};
		if (dataFunobjStr != null && dataFunobjStr != '' && dataFunobjStr != 'null') {
			funObj['funobjstr'] = dataFunobjStr;
		}

		rowData['primaryKey'] = $(tr.children[1]).find('input').prop('checked') ? "Y" : "N";
		rowData['destinationColumn'] = destinationColumnVal;
		rowData['sourceColumn'] = $(tr.children[3]).find('input').val();
		rowData['defaultValue'] = $(tr.children[4]).find('input').val();
		rowData['appendValue'] = $(tr.children[5]).find('input').val();
		rowData['columnClause'] = (dataFunobjStr != null && dataFunobjStr != '' && dataFunobjStr != 'null') ? funObj : $(tr.children[6]).find('input').val();
		rowData['data-funobjstr'] = $(tr.children[6]).find('input').attr("data-funobjstr"); // ravi change new
		rowData['data-columnClause'] = $(tr.children[6]).find('input').val(); // ravi change new
		colMappingsData[rowIndex] = rowData;
		if (rowData['primaryKey'] == 'Y') {
			t_rules['primaryKey'] = "Y";
		}
	}

	t_rules['colMappingsData'] = colMappingsData;
	// ---------------------------------
	var masterTable = "";
	var childTables = [];
	var fromTables = [];
	var rowCount = $('#EtlMappingTable thead tr').length;
	for (var rowIndex = 1; rowIndex < rowCount; rowIndex++) {
		var rowData = {};
		var tr = $('#EtlMappingTable thead tr')[rowIndex];
		fromTables.push($(tr.children[0]).find('select').val());
		if (rowIndex == 1) {
			masterTable = $(tr.children[0]).find('select').val();
		} else {
			childTables.push($(tr.children[0]).find('select').val());
		}
	}

	if (masterTable == "") {

		var mapingObj = $('#' + flowChartWorkSpaceId).flowchart('getMapOperatorData', previousOperatorId);
		if (mapingObj != null && !jQuery.isEmptyObject(mapingObj)) {
			var fromOpArray = mapingObj['fromOpArray'];
		}
		if (fromOpArray != null && fromOpArray.length != 0) {
			masterTable = fromOpArray[0]['tableName'];
		}
		//            try{
		//               masterTable = $($(".visionOpIcons")[0]).parent().next().text().trim();
		//            }catch(e){}
	}

	t_rules['masterTableName'] = masterTable;
	t_rules['masterTableName'] = masterTable;
	t_rules['childTables'] = childTables;
	t_rules['fromTables'] = fromTables;
	//------------------------------------
	var joinClauseData = []
	var mapIcons = $("#EtlMappingTable").find(".visionEtlJoinClauseMapIcon");
	$.each(mapIcons, function(index) {
		var mappedColumnData = $(this).attr('data-mappedcolumns');
		if (mappedColumnData != null
			&& mappedColumnData != ''
			&& mappedColumnData != 'null'
			&& mappedColumnData != '{}') {
			//            if (mappedColumnData == "") {
			//                mappedColumnData = "{}";
			//            }
			joinClauseData[index] = mappedColumnData;
		}
	});
	if (joinClauseData.length > 0) {
		t_rules['joinClauseData'] = joinClauseData;
	}

	//------------------------------------
	var whereClauseData = []
	var mapIcons = $("#selectedTables").find(".visionEtlWhereClauseMapIcon");
	$.each(mapIcons, function(index) {
		var mappedColumnData = $(this).attr('data-whereclause');
		if (mappedColumnData != null) {
			if (mappedColumnData == "") {
				mappedColumnData = "{}";
			}
			whereClauseData[index] = mappedColumnData;
		}

	});
	if (whereClauseData.length > 0) {
		t_rules['whereClauseData'] = whereClauseData;
	}
	//------------------------------------

	var orderByData = []

	var rowCount = $('#fromTablesOrderCauseTable tbody tr').length;
	for (var rowIndex = 0; rowIndex < rowCount; rowIndex++) {
		var rowData = {};
		var tr = $('#fromTablesOrderCauseTable tbody tr')[rowIndex];
		rowData['columnName'] = $(tr.children[1]).find('input').val();
		rowData['order'] = $(tr.children[2]).find('select').val();
		orderByData[rowIndex] = rowData;
	}
	t_rules['orderByData'] = orderByData;
	//------------------------------------

	var groupByData = []

	var rowCount = $('#fromTablesGroupCauseTable tbody tr').length;
	for (var rowIndex = 0; rowIndex < rowCount; rowIndex++) {
		var rowData = {};
		var tr = $('#fromTablesGroupCauseTable tbody tr')[rowIndex];
		rowData['columnName'] = $(tr.children[1]).find('input').val();
		groupByData[rowIndex] = rowData;
	}
	t_rules['groupByData'] = groupByData;
	//t_rules['trfmRulesId'] = currentMapId;
	var uniqueRowsFlag = $("#distinctRowsInput").val();
	t_rules['uniqueRowsFlag'] = (uniqueRowsFlag == true) ? "Y" : "N";
	var rowsCountFrom = $("#rowsCountFromInput").val();
	t_rules['rowsCountFrom'] = rowsCountFrom;
	var rowsCountTo = $("#rowsCountToInput").val();
	t_rules['rowsCountTo'] = rowsCountTo;
	var showRejectedRecords = $("#showRejectedRecords").val();
	t_rules['showRejectedRecords'] = (showRejectedRecords == true) ? "Y" : "N";
	var normalizeOptionsObj = {};
	var deNormalizeOptionsObj = {};
	var normalizeColsObj = {};
	if (previousOperatorId != null) {

		if (previousMapOperatorData.iconType == "UNGROUP") {


			var normalizeOptionsObj = {};
			var colsObj = {};
			var mapingObj = $('#' + flowChartWorkSpaceId).flowchart('getMapOperatorData', previousOperatorId);
			console.log("::::::::" + JSON.stringify(mapingObj));
			if (mapingObj != null && !jQuery.isEmptyObject(mapingObj)) {
				var toOpArray = mapingObj['toOpArray'];
				var fromOpArray = mapingObj['fromOpArray'];
			}

			var fromOperator = fromOpArray[0];
			var toOperator = toOpArray[0];
			var cols = $("#selectNormalizeColHeader").find("option");
			if (cols != null && cols.length > 0) {
				if (toOperator.dragType != null && toOperator.dragType == "Table") {
					$.each(cols, function(index) {
						if (index != 0) {
							colsObj[this.value.split(":")[1]] = this.value;
						}
					})

				} else {
					$.each(cols, function(index) {
						if (index != 0) {
							colsObj[this.value] = this.value;
						}
					})
				}

				normalizeColsObj = colsObj;
				normalizeOptionsObj['colsObj'] = colsObj;
				normalizeOptionsObj['normalizeFlag'] = "normalize";
				normalizeOptionsObj['itemSeparator'] = $("#itemSeparator").val();
				normalizeOptionsObj['normalizeColumn'] = $("#selectNormalizeColHeader").val();
				t_rules['normalizeOptionsObj'] = normalizeOptionsObj;
				previousMapOperatorData['normalizeOptionsObj'] = normalizeOptionsObj;
			}

		} else if (previousMapOperatorData.iconType == "GROUP") {
			var deNormalizeOptionsObj = {};
			var colsObj = {};
			var mapingObj = $('#' + flowChartWorkSpaceId).flowchart('getMapOperatorData', previousOperatorId);
			console.log("::::::::" + JSON.stringify(mapingObj));
			if (mapingObj != null && !jQuery.isEmptyObject(mapingObj)) {
				var toOpArray = mapingObj['toOpArray'];
				var fromOpArray = mapingObj['fromOpArray'];
			}

			var fromOperator = fromOpArray[0];
			var toOperator = toOpArray[0];
			var cols = $("#selectDenormalizeColHeader").find("option");
			if (cols != null && cols.length > 0) {
				if (toOperator.dragType != null && toOperator.dragType == "Table") {
					$.each(cols, function(index) {
						if (index != 0) {
							colsObj[this.value.split(":")[1]] = this.value;
						}
					})

				} else {
					$.each(cols, function(index) {
						if (index != 0) {
							colsObj[this.value] = this.value;
						}
					})
				}

				normalizeColsObj = colsObj;
				deNormalizeOptionsObj['colsObj'] = colsObj;
				deNormalizeOptionsObj['normalizeFlag'] = "deNormalize";
				deNormalizeOptionsObj['delimiter'] = $("#delimiter").val();
				deNormalizeOptionsObj['deNormalizeColumn'] = $("#selectDenormalizeColHeader").val();
				deNormalizeOptionsObj['keyColumn'] = $("#selectDenormalizeKeyColumn").val(); // ravi updated code

				t_rules['normalizeOptionsObj'] = deNormalizeOptionsObj;
				previousMapOperatorData['normalizeOptionsObj'] = deNormalizeOptionsObj;
			}

		}

		//        var previousMapOperatorData = $('#'+flowChartWorkSpaceId).flowchart('getOperatorData', previousOperatorId);
		previousMapOperatorData['trfmRules-data'] = t_rules;
		$('#' + flowChartWorkSpaceId).flowchart('setOperatorData', previousOperatorId, previousMapOperatorData);
		var previousMapOperatorData2 = $('#' + flowChartWorkSpaceId).flowchart('getOperatorData', previousOperatorId);
		$(".flowchart-operator-connector-label").hide();
		$(".flowchart-operator-title").hide();
	}
	//    if (previousOperatorId != null) {
	//        var previousMapOperatorData = $('#'+flowChartWorkSpaceId).flowchart('getOperatorData', previousOperatorId);
	//        previousMapOperatorData['trfmRules-data'] = t_rules
	//        $('#'+flowChartWorkSpaceId).flowchart('setOperatorData', previousOperatorId, previousMapOperatorData);
	//        var previousMapOperatorData2 = $('#'+flowChartWorkSpaceId).flowchart('getOperatorData', previousOperatorId);
	//        $(".flowchart-operator-connector-label").hide();
	//        $(".flowchart-operator-title").hide();
	//    }


	if (destinationColumnEmpty && previousOperatorId != selectedMapOperatorId) {
		showMesg("Destination Column Cannot be empty");
		return false;
	}


	previousOperatorId = selectedMapOperatorId;
	//    var selectedMapOperatorId = $('#'+flowChartWorkSpaceId).flowchart('getSelectedOperatorId');
	var selectedMapOperatorData = $('#' + flowChartWorkSpaceId).flowchart('getOperatorData', selectedMapOperatorId);
	if (selectedMapOperatorData['iconType'] == "UNGROUP") {
		normalizeData();
		return false;
	} else if (selectedMapOperatorData['iconType'] == "GROUP") {
		deNormalizeData();
		return false;
	}
	var mapingObj = $('#' + flowChartWorkSpaceId).flowchart('getMapOperatorData', selectedMapOperatorId);
	console.log("::::::::" + JSON.stringify(mapingObj));
	if (mapingObj != null && !jQuery.isEmptyObject(mapingObj)) {
		var toOpArray = mapingObj['toOpArray'];
		var fromOpArray = mapingObj['fromOpArray'];
	}

	if (toOpArray != null && toOpArray.length != 0) {

		var processFlag = true;
		var toTableName = "";
		var noSQLCount = 0;
		for (var i = 0; i < toOpArray.length != 0; i++) {
			var toOperator = toOpArray[i];
			if (toOperator['dragType'] == 'Table'
			) {
				var toConnectionObj = toOperator['connObj'];
				toTableName += toOperator['tableName'];
				if (toOperator['tableName'] != null && toOperator['tableName'] != '') {
					noSQLCount++;
					if (i != toOpArray.length - 1) {
						toTableName += ",";
					}
				}

			} else if (toOperator['dragType'] == 'SQL'
				|| toOperator['iconType'] == 'SQL') {
				toTableName += toOperator['tableName'];
				if (toOperator['tableName'] != null && toOperator['tableName'] != '') {
					noSQLCount++;
					if (i != toOpArray.length - 1) {
						toTableName += ",";
					}
				} else {
					noSQLCount = 0;
					break;
				}

			} else {
				noSQLCount++;
			}
			//            if (processFlag && toOperator['iconType'] == 'SQL') {
			//                var toTableName = toOperator['tableName'];
			//                
			//            }
		}

		if (noSQLCount == 0) {
			processFlag = false;
		}
		if (fromOpArray != null && fromOpArray.length != 0) {
			var fromConnectionObj = {};
			var fromTableName = "";
			for (var i = 0; i < fromOpArray.length; i++) {
				var fromOperator = fromOpArray[i];
				if (fromOperator != null && !jQuery.isEmptyObject(fromOperator)) {
					fromConnectionObj = fromOperator['connObj'];
					fromTableName += fromOperator['tableName'];
					if (i != fromOpArray.length - 1) {
						fromTableName += ",";
					}
				}

			}
			if (processFlag) {
				displayTransformationTabsOpt(fromConnectionObj,
					toConnectionObj,
					fromTableName,
					toTableName,
					toOperator['iconType'],
					toOperator['createTableObj'],
					toOpArray,
					fromOpArray
				);
			} else {
				stopLoader();
				showMesg("Please select target table/Create target table by double click on SQL icon.");
			}

		}
	} else {
		stopLoader();
		showMesg("Source Table/File not mapped");
		console.log("Source Table/File not mapped")
	}



}

function filterMappingTables() {
	labelObject = {};
	try {
		labelObject = JSON.parse($("#labelObjectHidden").val());
	} catch (e) {

	}
	var item = $("#savedConnections").jqxTree('getSelectedItem');
	//['Tables', 'Views', 'Synonyms'];
	if (item != null && (item['value'] == 'TABLES'
		|| item['value'] == 'VIEWS'
		|| item['value'] == 'SYNONYMS')) {
		var hiddenFieldId = "DATABASE_" + selectedDataBase + "_" + item['value'] + "_hidden";
		hiddenFieldId = hiddenFieldId.replace(/ /g, '_');
		hiddenFieldId = hiddenFieldId.replace(/\//g, '_');
		var prevFilterVal = $("#" + hiddenFieldId).val();
		var tableData = "<input type='text' id='tableId' class='visionETLFilterInputs' readonly=true value='" + item['label'] + "'/>"
			+ "<select id='operatorId' class='visionETLFilterInputs'>"
			+ "<option value='LIKE'>LIKE</option>"
			+ "<option value='NOT LIKE'>NOT LIKE</option>"
			+ "<option value='='>=</option>"
			+ "<option value='!='>!=</option>"
			+ "</select>"
			+ "<input type='text' id='valueId' class='visionETLFilterInputs' value= ''/>";
		$("#dialog").html(tableData);
		$("#dialog").dialog({
			title: (labelObject[item['label'] + ' Filter Form'] != null ? labelObject[item['label'] + ' Filter Form'] : item['label'] + ' Filter Form'),
			modal: true,
			width: 600,
			height: 150,
			fluid: true,
			buttons: [{
				text: (labelObject['Search'] != null ? labelObject['Search'] : 'Search'),
				id: 'tableSearchButton', // --------code edit---
				click: function() {
					var value = $("#valueId").val();
					var selectBoxValue = $("#operatorId option:selected").text();
					$("#" + hiddenFieldId).remove();
					var hiddenField = "<input type='hidden' id='" + hiddenFieldId + "' value=''/>";
					$("#savedConnections").append(hiddenField);
					var jsFilterObj = {};
					jsFilterObj.filterType = selectBoxValue;
					jsFilterObj.filterValue = value;
					$("#" + hiddenFieldId).val(JSON.stringify(jsFilterObj));
					showLoader();
					getFilteredValues(value, item['value'], selectConnObj, item['level'], selectColumnsObj, selectBoxValue);
					$(this).html("");
					//$(this).dialog("close");
					$(this).dialog("destroy");
				}

			}, {
				text: (labelObject['Reset'] != null ? labelObject['Reset'] : 'Reset'),
				click: function() {
					$("#valueId").val("");
					$("#operatorId").val("LIKE");
					$("#" + hiddenFieldId).remove();
					var hiddenField = "<input type='hidden' id='" + hiddenFieldId + "' value=''/>";
					$("#savedConnections").append(hiddenField);
					$("#treeETLFilterImage").attr('src', "images/Filter Icon-01.svg");
				}

			}],
			open: function() {
				//-----------  enter func start---------------
				$("#valueId").keyup(function(event) {
					if (event.keyCode === 13) {
						$("#tableSearchButton").click();
					}
				});
				$(this).closest(".ui-dialog").find(".ui-button").eq(1).addClass("dialogyes");
				$(this).closest(".ui-dialog").find(".ui-button").eq(2).addClass("dialogno");
				$(".visionHeaderMain").css("z-index", "999");
				$(".visionFooterMain").css("z-index", "999");
				$(".ui-dialog").addClass('visionDMTreePopup');
			},
			beforeClose: function(event, ui) {
				$(".visionHeaderMain").css("z-index", "99999");
				$(".visionFooterMain").css("z-index", "99999");
			}, close: function(event, ui) {


			}
		});
		if (prevFilterVal != null && prevFilterVal != '' && prevFilterVal != undefined) {
			prevFilterVal = JSON.parse(prevFilterVal);
			$("#operatorId").val(prevFilterVal['filterType']);
			$("#valueId").val(prevFilterVal['filterValue']);
		}
	} else {
		$("#dialog").html(labelObject['Please Select Views/Tables/Synonyms for filter'] != null ? labelObject['Please Select Views/Tables/Synonyms for filter'] : 'Please Select Views/Tables/Synonyms for filter');
		$("#dialog").dialog({
			title: (labelObject['Message'] != null ? labelObject['Message'] : 'Message'),
			modal: true,
			width: 300,
			height: 120,
			fluid: true,
			buttons: [{
				text: (labelObject['Ok'] != null ? labelObject['Ok'] : 'Ok'),
				click: function() {
					$(this).html("");
					//$(this).dialog("close");
					$(this).dialog("destroy");
				}

			}],
			open: function() {
				$(this).closest(".ui-dialog").find(".ui-button").eq(1).addClass("dialogyes");
				$(".visionHeaderMain").css("z-index", "999");
				$(".visionFooterMain").css("z-index", "999");
				$(".ui-dialog").addClass('visionDMTreePopup');
			},
			beforeClose: function(event, ui) {
				$(".visionHeaderMain").css("z-index", "99999");
				$(".visionFooterMain").css("z-index", "99999");
			}, close: function(event, ui) {

			}
		});
	}

}


function getFilteredValues(value, selectedLevelValue, selectConnObj, selectedLevel, selectColumnsObj, selectBoxValue) {
	selectedLevelValue = selectedLevelValue.toUpperCase();
	var item = $("#savedConnections").jqxTree('getSelectedItem');
	//    var url = 'getTreePagingDataOpt';
	var url = 'getETLTreePagingDataOpt';
	if (item != null) {
		var level = item['level'];
		var parentEventItem = item['parentElement'];
		var immideateParent = parentEventItem['parentElement'];
		immideateParent = immideateParent['parentElement'];
		for (var i = level; i > 0; i--) {
			parentEventItem = parentEventItem['parentElement'];
		}
		var selectedItem = $('#savedConnections').jqxTree('getItem', parentEventItem);
		var selectedParentValue = selectedItem['value'];
		if (selectedParentValue != null && selectedParentValue != ''
			&& selectedParentValue != undefined && selectedParentValue == 'ERP') {
			url = 'getTreeErpConnectionDetails';
			var immideateParentItem = $('#savedConnections').jqxTree('getItem', immideateParent);
			var immideateParentValue = immideateParentItem['value'];
			if (immideateParentValue == "Oracle_ERP") {
				//                url = 'getTreePagingDataOpt';
				url = 'getETLTreePagingDataOpt';
			}
		}
	}





	$.ajax({
		type: "post",
		traditional: true,
		dataType: 'json',
		url: url,
		cache: false,
		data: {
			parentkey: ((selectedLevelValue != null && selectedLevelValue != '') ? selectedLevelValue.toUpperCase() : ""),
			level: selectedLevel,
			columnsObj: JSON.stringify(selectColumnsObj),
			connectionObj: JSON.stringify(selectConnObj),
			filterValue: value,
			filterCondition: selectBoxValue,
			startIndex: 0,
			endIndex: $("#treePageSize").val()
		},
		success: function(data, status, xhr) {
			stopLoader();
			var selectedItem = $("#savedConnections").jqxTree('getSelectedItem');
			var count;
			var children;
			if (selectedItem != null) {
				children = $(selectedItem.element).find('li');
				count = children.length;
				for (var i = 0; i < count; i += 1) {
					if (i < count - 1) {
						$("#savedConnections").jqxTree('removeItem', children[i], false);
					} else {
						$("#savedConnections").jqxTree('removeItem', children[i], true);
					}
				}
			}


			$("#savedConnections").jqxTree('addTo', data, selectedItem);
			$('#savedConnections').jqxTree('expandItem', selectedItem);
			var items = $("#savedConnections").jqxTree('getItems');
			$.each(items, function() {
				$(this.titleElement).attr('title', this.label);
			});
			var itemsList = $("#" + selectedItem.id);
			try {
				var itemsLists = itemsList[0].children[3];
				var childrens = itemsLists['children'];
				var childData = childrens[childrens['length'] - 1];
				var childrenData = $("#savedConnections").jqxTree('getItem', childData);
				if (childrenData['value'] == "Show More") {
					var expandDiv = childrenData.element.children[0];
					var div = childrenData.element.children[1];
					var checkBoxDiv = childrenData.element.children[2];
					$("#" + expandDiv.id).remove();
					$("#" + div.id).remove();
					$("#" + checkBoxDiv.id).addClass('visionETLCheckboxEmptySpace');
				}
			} catch (e) {

			}
			$("#treeETLFilterImage").attr('src', "images/Filter Icon2-01.svg");
			//            $("#savedConnections").jqxTree('selectItem', null);
			var hiddenPagingId = "DATABASE_" + selectedDataBase + "_" + selectedLevelValue + "paging__hidden";
			hiddenPagingId = hiddenPagingId.replace(/ /g, '_');
			hiddenPagingId = hiddenPagingId.replace(/\//g, '_');
			$("#" + hiddenPagingId).remove();
			var hiddenPagingField = "<input type='hidden' id='" + hiddenPagingId + "'value=''/>";
			$("#savedConnections").append(hiddenPagingField);
			var dataPagingObj = {};
			dataPagingObj['startIndex'] = '0';
			dataPagingObj['endIndex'] = $("#treePageSize").val();
			$("#" + hiddenPagingId).val(JSON.stringify(dataPagingObj));
		},
		error: function(e) {
			console.log(e);
			sessionTimeout(e);
			stopLoader();
		}
	});
}
function displayTransformationTabsOpt(fromConnectionObj,
	toConnectionObj,
	fromTableName,
	toTableName,
	toIconType,
	createTableObj,
	toOpArray,
	fromOpArray) {
	// ravi start
	var selectedMapOperatorId = $('#' + flowChartWorkSpaceId).flowchart('getSelectedOperatorId');
	var selectedMapOperatorData = $('#' + flowChartWorkSpaceId).flowchart('getOperatorData', selectedMapOperatorId);
	var trfmRulesId = selectedMapOperatorData['trfmRulesId'];
	var trfmRulesData = selectedMapOperatorData['trfmRules-data'];
	// ravi end
	if ((fromConnectionObj != null && !jQuery.isEmptyObject(fromConnectionObj))) {
		showLoader();
		if (!(toConnectionObj != null && !jQuery.isEmptyObject(toConnectionObj))) {
			toConnectionObj = {};
		}
		$.ajax({
			type: 'post',
			traditional: true,
			dataType: 'html',
			cache: false,
			url: 'fetchTransformationRules',
			async: true,
			data: {
				fromTable: fromTableName,
				toTable: toTableName,
				fromConnObj: JSON.stringify(fromConnectionObj),
				toConnObj: JSON.stringify(toConnectionObj),
				sourceTables: JSON.stringify(fromTableName.split(",")),
				toIconType: toIconType,
				createTableObj: JSON.stringify(createTableObj),
				trfmRulesId: trfmRulesId,
				trfmRulesData: JSON.stringify(trfmRulesData),
				trfmRulesChanged: (trfmRulesChanged == true) ? "Y" : "N",
				toOpArray: JSON.stringify(toOpArray),
				fromOpArray: JSON.stringify(fromOpArray),
			},
			success: function(response) {
				stopLoader();
				if (response != null) {
					$('.visionTablesComboBox').hide();
					$('.visionUploadFileDiv').hide();
					$('.visionConnectToDbDiv').hide();
					$('#visionERPMain').hide();
					var response = JSON.parse(response);
					if (response != null && response.connectionFlag == 'Y') {
						$("#feedContentArea").html(response['tabsString']);
						$("#dataMigrationTabs").jqxTabs({ width: "100%", height: "130px", position: 'top', theme: 'ui-redmond', reorder: true });
						$('#dataMigrationTabs').unbind('selected').on('selected', function(event) {
							$('#iconsdiv').attr('style', 'margin-top:4px !important');
						});
						//                        $("#dataMigrationTabs").jqxTabs({width: "100%", height: "100%", position: 'top', theme: 'ui-redmond', reorder: true});
						var columnStr = response['columnMapping'];
						$("#toConnObjPK").val(JSON.stringify(response['toTablePKColumnList'])); //PKH PKIcon
						var selectedJoinTables = response['selectedJoinTables'];
						$('#tabs-1').html(columnStr);
						$('#tabs-1').append("<div id='selectedColumnStr' style='display:none'></div>");
						$("#toTableColsArray_hidden").remove();
						$("#fromTableColsArray_hidden").remove();
						var hiddenData = "<input type='hidden' id='toTableColsArray_hidden'/><input type='hidden' id='fromTableColsArray_hidden'/>";
						$('#tabs-1').append(hiddenData);
						$("#toTableColsArray_hidden").val(JSON.stringify(response['toTableColsArray']));
						$("#fromTableColsArray_hidden").val(JSON.stringify(response['fromTableColsArray']));
						$('#tabs-2').html(selectedJoinTables);
						$('#mapColumns').addClass("active");
						$('.visionProgressFilesSteps').hide();
						$("#selectedColumnStr").html(response['colMapTrString']); //colMapTrString
						var selectedTableWhereClause = response['selectedTableWhereClause'];
						if (selectedTableWhereClause != null) {
							var hiddenDataWhere = "<input type='hidden' id='whereClauseTableColsArray_hidden'/><input type='hidden' id='currentClauseMapId'/>"
								+ "<div id='wherClauseTrString' style='display:none;'></div><div id='wherClauseColsString' style='display:none;'></div>";
							$('#tabs-3').html(selectedTableWhereClause['whereClauseCondition'] + hiddenDataWhere); //whereClauseCondition
							$("#whereClauseTableColsArray_hidden").val(JSON.stringify(selectedTableWhereClause['fromTableColsArray']));
						}
						var selectedTableOrderGroupClause = response['selectedTableOrderGroupClause'];
						if (selectedTableOrderGroupClause != null) {
							var hiddenDataOrderBy = ""
								+ "<div id='orderClauseTrString' style='display:none;'></div>";
							$('#tabs-4').html(selectedTableOrderGroupClause['orderByCondition'] + hiddenDataOrderBy); //
							var hiddenDataGroupBy = ""
								+ "<div id='groupClauseTrString' style='display:none;'></div>";
							$('#tabs-5').html(selectedTableOrderGroupClause['groupByCondition'] + hiddenDataGroupBy); //
							$("#groupClauseTrString").html(selectedTableOrderGroupClause['groupByTrString']);
							$("#orderClauseTrString").html(selectedTableOrderGroupClause['orderByTrString']);
						}
						// sql Editor
						//                        var sqlEditor = ace.edit("tabs-6");
						//                        sqlEditor.setOptions({
						//                            enableBasicAutocompletion: true, // the editor completes the statement when you hit Ctrl + Space
						//                            showPrintMargin: false, // hides the vertical limiting strip
						//                            fontSize: "100%" // ensures that the editor fits in the environment
						//                        });
						//
						//                        sqlEditor.getSession().setMode("ace/mode/sql");
						$("#dataMigrationTabs").change(function(event) {
							trfmRulesChanged = true;
						});
						if (response['uniqueRowsFlag'] == "Y") {
							$("#distinctRowsInput").prop("checked", true);
						}

						if (response['showRejectedRecords'] == "Y") {
							$("#showRejectedRecords").prop("checked", true);
						}
						$("#rowsCountFromInput").val(response['rowsFrom']);
						$("#rowsCountToInput").val(response['rowsTo']);
						//                        //importColMapFile
						//                        var fileslist = [];
						//                        $("#importColMapFile").on('change', function (event) {
						//                            console.log("iam in files change ");
						//                           fileslist  = event.target.files;
						//                            srsFileNames(fileslist);
						//
						//                        });
						$(".visionETLColMapImage").mousedown(function(event) {
							treeIconClickEvent = event;
						});
						try {
							$("#sourceDestColsTableId").colResizable({
								disable: true
							});
							$("#sourceDestColsTableId").tableDnD({
								onDragStyle: null,
								onDropStyle: null,
								onDragClass: "tDnD_whileDrag",
							});
						} catch (e) {
						}
						$("#sourceDestColsTableId").colResizable();
						$('#dataMigrationTabs').on('selected', function(event) {
							var selectedTab = event.args.item;
							if (selectedTab == '0' || selectedTab == 0) {// mapping
								try {
									$("#sourceDestColsTableId").colResizable({
										disable: true
									});
									$("#sourceDestColsTableId").tableDnD({
										onDragStyle: null,
										onDropStyle: null,
										onDragClass: "tDnD_whileDrag",
									});
								} catch (e) {
								}
								$("#sourceDestColsTableId").colResizable();
							} else if (selectedTab == '1' || selectedTab == 1) {// join
								try {
									$("#EtlMappingTable").colResizable({
										disable: true
									});
								} catch (e) {
								}
								$("#EtlMappingTable").colResizable();
							} else if (selectedTab == '2' || selectedTab == 2) {//where clause
								try {
									$("#selectedTables").colResizable({
										disable: true
									});
								} catch (e) {
								}
								$("#selectedTables").colResizable();
							} else if (selectedTab == '3' || selectedTab == 3) {//order clause
								try {
									$("#fromTablesOrderCauseTable").colResizable({
										disable: true
									});
								} catch (e) {
								}
								$("#fromTablesOrderCauseTable").colResizable();
							} else if (selectedTab == '4' || selectedTab == 4) {//group clause
								try {
									$("#fromTablesGroupCauseTable").colResizable({
										disable: true
									});
								} catch (e) {
								}
								$("#fromTablesGroupCauseTable").colResizable();
							}
						});
					} else {
						stopLoader();
						showMessagePopup(response.connectionMessage);
					}


				}
			},
			error: function(e) {
				stopLoader();
				sessionTimeout(e);
			}

		});
	} else {
		stopLoader();
	}


}
function displayTransformationTabs(fromConnectionObj, toConnectionObj, fromTableName, toTableName, toIconType, createTableObj) {
	// ravi start
	var selectedMapOperatorId = $('#' + flowChartWorkSpaceId).flowchart('getSelectedOperatorId');
	var selectedMapOperatorData = $('#' + flowChartWorkSpaceId).flowchart('getOperatorData', selectedMapOperatorId);
	var trfmRulesId = selectedMapOperatorData['trfmRulesId'];
	var trfmRulesData = selectedMapOperatorData['trfmRules-data'];
	// ravi end
	if ((fromConnectionObj != null && !jQuery.isEmptyObject(fromConnectionObj))) {
		showLoader();
		if (!(toConnectionObj != null && !jQuery.isEmptyObject(toConnectionObj))) {
			toConnectionObj = {};
		}
		$.ajax({
			type: 'post',
			traditional: true,
			dataType: 'html',
			cache: false,
			url: 'fetchTransformationRules',
			async: true,
			data: {
				fromTable: fromTableName,
				toTable: toTableName,
				fromConnObj: JSON.stringify(fromConnectionObj),
				toConnObj: JSON.stringify(toConnectionObj),
				sourceTables: JSON.stringify(fromTableName.split(",")),
				toIconType: toIconType,
				createTableObj: JSON.stringify(createTableObj),
				trfmRulesId: trfmRulesId,
				trfmRulesData: JSON.stringify(trfmRulesData),
				trfmRulesChanged: (trfmRulesChanged == true) ? "Y" : "N"
			},
			success: function(response) {
				stopLoader();
				if (response != null) {
					$('.visionTablesComboBox').hide();
					$('.visionUploadFileDiv').hide();
					$('.visionConnectToDbDiv').hide();
					$('#visionERPMain').hide();
					var response = JSON.parse(response);
					if (response != null && response.connectionFlag == 'Y') {
						$("#feedContentArea").html(response['tabsString']);
						$("#dataMigrationTabs").jqxTabs({ width: "100%", height: "130px", position: 'top', theme: 'ui-redmond', reorder: true });
						$('#dataMigrationTabs').unbind('selected').on('selected', function(event) {
							$('#iconsdiv').attr('style', 'margin-top:4px !important');
						});
						//                        $("#dataMigrationTabs").jqxTabs({width: "100%", height: "100%", position: 'top', theme: 'ui-redmond', reorder: true});
						var columnStr = response['columnMapping'];
						$("#toConnObjPK").val(JSON.stringify(response['toTablePKColumnList'])); //PKH PKIcon
						var selectedJoinTables = response['selectedJoinTables'];
						$('#tabs-1').html(columnStr);
						$('#tabs-1').append("<div id='selectedColumnStr' style='display:none'></div>");
						$("#toTableColsArray_hidden").remove();
						$("#fromTableColsArray_hidden").remove();
						var hiddenData = "<input type='hidden' id='toTableColsArray_hidden'/><input type='hidden' id='fromTableColsArray_hidden'/>";
						$('#tabs-1').append(hiddenData);
						$("#toTableColsArray_hidden").val(JSON.stringify(response['toTableColsArray']));
						$("#fromTableColsArray_hidden").val(JSON.stringify(response['fromTableColsArray']));
						$('#tabs-2').html(selectedJoinTables);
						$('#mapColumns').addClass("active");
						$('.visionProgressFilesSteps').hide();
						$("#selectedColumnStr").html(response['colMapTrString']); //colMapTrString
						var selectedTableWhereClause = response['selectedTableWhereClause'];
						if (selectedTableWhereClause != null) {
							var hiddenDataWhere = "<input type='hidden' id='whereClauseTableColsArray_hidden'/><input type='hidden' id='currentClauseMapId'/>"
								+ "<div id='wherClauseTrString' style='display:none;'></div><div id='wherClauseColsString' style='display:none;'></div>";
							$('#tabs-3').html(selectedTableWhereClause['whereClauseCondition'] + hiddenDataWhere); //whereClauseCondition
							$("#whereClauseTableColsArray_hidden").val(JSON.stringify(selectedTableWhereClause['fromTableColsArray']));
						}
						var selectedTableOrderGroupClause = response['selectedTableOrderGroupClause'];
						if (selectedTableOrderGroupClause != null) {
							var hiddenDataOrderBy = ""
								+ "<div id='orderClauseTrString' style='display:none;'></div>";
							$('#tabs-4').html(selectedTableOrderGroupClause['orderByCondition'] + hiddenDataOrderBy); //
							var hiddenDataGroupBy = ""
								+ "<div id='groupClauseTrString' style='display:none;'></div>";
							$('#tabs-5').html(selectedTableOrderGroupClause['groupByCondition'] + hiddenDataGroupBy); //
							$("#groupClauseTrString").html(selectedTableOrderGroupClause['groupByTrString']);
							$("#orderClauseTrString").html(selectedTableOrderGroupClause['orderByTrString']);
						}
						// sql Editor
						//                        var sqlEditor = ace.edit("tabs-6");
						//                        sqlEditor.setOptions({
						//                            enableBasicAutocompletion: true, // the editor completes the statement when you hit Ctrl + Space
						//                            showPrintMargin: false, // hides the vertical limiting strip
						//                            fontSize: "100%" // ensures that the editor fits in the environment
						//                        });
						//
						//                        sqlEditor.getSession().setMode("ace/mode/sql");
						$("#dataMigrationTabs").change(function(event) {
							trfmRulesChanged = true;
						});
						if (response['uniqueRowsFlag'] == "Y") {
							$("#distinctRowsInput").prop("checked", true);
						}
						if (response['showRejectedRecords'] == "Y") {
							$("#showRejectedRecords").prop("checked", true);
						}

						$("#rowsCountFromInput").val(response['rowsFrom']);
						$("#rowsCountToInput").val(response['rowsTo']);
						//                        //importColMapFile
						//                        var fileslist = [];
						//                        $("#importColMapFile").on('change', function (event) {
						//                            console.log("iam in files change ");
						//                           fileslist  = event.target.files;
						//                            srsFileNames(fileslist);
						//
						//                        });
						$(".visionETLColMapImage").mousedown(function(event) {
							treeIconClickEvent = event;
						})
					} else {
						stopLoader();
						showMessagePopup(response.connectionMessage);
					}


				}
			},
			error: function(e) {
				stopLoader();
				sessionTimeout(e);
			}

		});
	} else {
		stopLoader();
	}


}

function treePaging(selectedLevelValue, selectConnObj, selectedItem, selectedLevel, selectColumnsObj, selectedDataBase, selectedParentValue) {
	showLoader();
	var hiddenPagingId = "DATABASE_" + selectedDataBase + "_" + selectedLevelValue + "paging__hidden";
	hiddenPagingId = hiddenPagingId.replace(/ /g, '_');
	hiddenPagingId = hiddenPagingId.replace(/\//g, '_');
	var pagingStr = $("#" + hiddenPagingId).val();
	if (pagingStr != null && pagingStr != '' && pagingStr != undefined) {
		var pagingObj = JSON.parse(pagingStr);
		var startIndex = pagingObj['startIndex'];
		var endIndex = pagingObj['endIndex'];
		var pagesize = $("#treePageSize").val();
		if (startIndex != null && startIndex != '' && startIndex != undefined &&
			endIndex != null && endIndex != '' && endIndex != undefined) {
			startIndex = parseInt(startIndex);
			endIndex = parseInt(endIndex);
			startIndex = endIndex + 1;
			pagesize = parseInt(pagesize);
			endIndex = pagesize + endIndex;
		}
	}
	var hiddenFieldId = "DATABASE_" + selectedDataBase + "_" + selectedLevelValue + "_hidden";
	hiddenFieldId = hiddenFieldId.replace(/ /g, '_');
	hiddenFieldId = hiddenFieldId.replace(/\//g, '_');
	var prevFilterVal = $("#" + hiddenFieldId).val();
	var filterType;
	var filterValue;
	if (prevFilterVal != null && prevFilterVal != '' && prevFilterVal != undefined) {
		prevFilterVal = JSON.parse(prevFilterVal);
		filterType = prevFilterVal['filterType'];
		filterValue = prevFilterVal['filterValue'];
	}
	selectedLevelValue = selectedLevelValue.toUpperCase();
	//    var url = 'getTreePagingDataOpt';
	var url = 'getETLTreePagingDataOpt';
	if (selectedParentValue != null && selectedParentValue != '' && selectedParentValue != undefined
		&& selectedParentValue == 'ERP') {
		url = 'getTreeErpConnectionDetails';
	}
	$.ajax({
		type: "post",
		traditional: true,
		dataType: 'json',
		url: url,
		cache: false,
		data: {
			parentkey: selectedLevelValue,
			level: selectedLevel,
			columnsObj: JSON.stringify(selectColumnsObj),
			connectionObj: JSON.stringify(selectConnObj),
			startIndex: startIndex,
			endIndex: endIndex,
			filterValue: filterValue,
			filterCondition: filterType
		},
		success: function(data, status, xhr) {
			stopLoader();
			if (data != null) {


				var children = $(selectedItem).find('li');
				var count = children.length;
				for (var i = count - 2; i < count; i += 1) {
					$("#savedConnections").jqxTree('removeItem', children[i], false);
				}

				$('#savedConnections').jqxTree('addTo', data, selectedItem);
				var items = $('#savedConnections').jqxTree('getItems');
				$.each(items, function() {
					$(this.titleElement).attr('title', this.label);
				});
				try {
					var itemsLists = selectedItem.children[3];
					var childrens = itemsLists['children'];
					var childData = childrens[childrens['length'] - 1];
					var childrenData = $('#savedConnections').jqxTree('getItem', childData);
					if (childrenData['value'] == "Show More") {
						var expandDiv = childrenData.element.children[0];
						var div = childrenData.element.children[1];
						var checkBoxDiv = childrenData.element.children[2];
						$("#" + expandDiv.id).remove();
						$("#" + div.id).remove();
						$("#" + checkBoxDiv.id).addClass('visionETLCheckboxEmptySpace');
					}
				} catch (e) {

				}
				//                $('#savedConnections').jqxTree('selectItem', null);
				$("#" + hiddenPagingId).remove();
				var hiddenPagingField = "<input type='hidden' id='" + hiddenPagingId + "'value=''/>";
				$("#savedConnections").append(hiddenPagingField);
				var dataPagingObj = {};
				dataPagingObj['startIndex'] = startIndex;
				dataPagingObj['endIndex'] = endIndex;
				$("#" + hiddenPagingId).val(JSON.stringify(dataPagingObj));
			}
		},
		error: function(e) {
			console.log(e);
			sessionTimeout(e);
			stopLoader();
		}
	});
}
function showJoinsPopup(event, tableName, tableMapId, iconIndex) {

	var dbObj = $("#SOURCE_SELECT_JOIN_TABLES_" + iconIndex).attr("data-table-db");
	showLoader();
	var prevTables = [];
	var prevTablesLabels = [];
	$(event.target).closest('tr').prevAll('tr').each(function(index) {
		if (this.rowIndex != 0) {
			var tableName = this.cells[0].children[0].value;
			var tableNameLabel = $(this.cells[0].children[0]).find("option:selected").attr("data-tablelabel");
			prevTables.push(tableName)
			prevTablesLabels.push(tableNameLabel)
		}

	});
	tableName = $("#SOURCE_SELECT_JOIN_TABLES_" + iconIndex).val();
	var tableNameLabel = $("#SOURCE_SELECT_JOIN_TABLES_" + iconIndex + " option:selected").attr("data-tablelabel");
	var joinColumnMapping = $("#" + tableMapId).attr("data-mappedcolumns");
	// ravi start
	var trfmRulesId = null;
	var trfmRulesData = null;
	if (joinColumnMapping == null || joinColumnMapping == "" || joinColumnMapping == "{}") {


		// var selectedMapOperatorId = $('#'+flowChartWorkSpaceId).flowchart('getSelectedOperatorId');
		var selectedMapOperatorData = {};
		if (previousOperatorId != null) {
			selectedMapOperatorData = $('#' + flowChartWorkSpaceId).flowchart('getOperatorData', previousOperatorId);
		} else {
			var selectedMapOperatorId = $('#' + flowChartWorkSpaceId).flowchart('getSelectedOperatorId');
			selectedMapOperatorData = $('#' + flowChartWorkSpaceId).flowchart('getOperatorData', selectedMapOperatorId);
		}
		trfmRulesData = selectedMapOperatorData['trfmRules-data'];
		trfmRulesId = selectedMapOperatorData['trfmRulesId'];
		if (trfmRulesData != null && trfmRulesData['joinClauseData'] != null) {
			var joinColumnMappings = trfmRulesData['joinClauseData']
			var joinMapId = event.target.id;
			var joinMapIndexStr = joinMapId.substring(joinMapId.indexOf("_") + 1, joinMapId.length);
			var joinMapIndex = parseInt(joinMapIndexStr) - 1;
			joinColumnMapping = trfmRulesData['joinClauseData'][joinMapIndex];
		}


	}
	var currentJoinTableId = $("#currentJoinTableId").val();
	if (currentJoinTableId != null && currentJoinTableId != '') {
		var columnJoinMapping = {};
		var joinType = $("#joinType").val();
		var i = 1;
		$("#etlJoinClauseTable tbody tr").each(function() {
			var tdArray = this.cells;
			if (tdArray != null && tdArray.length != 0) {
				var joinObj = {};
				var childTableDataFunStr = $(tdArray[1]).find("input").attr("data-funobjstr");
				var childTableColumn = $(tdArray[1]).find("input").val();
				var childTableColumnActualValue = $(tdArray[1]).find("input").attr("actual-value");
				var childFunColumnsList = $(tdArray[1]).find("input").attr("funcolumnslist");
				var operator = $(tdArray[2]).find("option:selected").val();
				var masterTableDataFunStr = $(tdArray[3]).find("input").attr("data-funobjstr");
				var masterTableColumn = $(tdArray[3]).find("input").val();
				var masterTableColumnActualValue = $(tdArray[3]).find("input").attr("actual-value");
				var masterFunColumnsList = $(tdArray[1]).find("input").attr("funcolumnslist");
				var staticValue = $(tdArray[4]).find("input").val();
				var andOrOperator = $(tdArray[5]).find("option:selected").val();
				if (childTableColumn != null && childTableColumn != '') {
					joinObj['childTableDataFunStr'] = childTableDataFunStr;
					joinObj['childTableColumn'] = (childTableColumn != null && childTableColumn == 'Select') ? "" : childTableColumn;
					joinObj['childTableColumnActualValue'] = childTableColumnActualValue;
					joinObj['childFunColumnsList'] = childFunColumnsList;
					joinObj['operator'] = operator;
					joinObj['masterTableDataFunStr'] = masterTableDataFunStr;
					joinObj['masterTableColumn'] = (masterTableColumn != null && masterTableColumn == 'Select') ? "" : masterTableColumn;
					joinObj['masterTableColumnActualValue'] = masterTableColumnActualValue;
					joinObj['masterFunColumnsList'] = masterFunColumnsList;
					joinObj['andOrOperator'] = andOrOperator;
					joinObj['staticValue'] = staticValue;
					joinObj['joinType'] = joinType;
					//$("#operatorId option:selected").text();
					console.log("childTableColumn::" + childTableColumn);
					console.log("operator::" + operator);
					console.log("masterTableColumn::" + masterTableColumn);
					console.log("andOrOperator::" + andOrOperator);
					columnJoinMapping[i] = joinObj;
					i++;
				}
			}

		});
		if (columnJoinMapping != null) {
			$("#" + currentJoinTableId).attr("data-mappedcolumns", JSON.stringify(columnJoinMapping));
		}
	}
	var joinDBStr = $("#EtlMappingTable").attr("data-join-db");
	var flowChartData = $('#' + flowChartWorkSpaceId).flowchart('getData')
	$.ajax({
		type: 'post',
		traditional: true,
		dataType: 'html',
		cache: false,
		url: 'fetchJoinTablesData',
		async: true,
		data: {
			tableName: tableName,
			tableNameLabel: tableNameLabel,
			dbObj: dbObj,
			sourceTables: JSON.stringify(prevTables),
			sourceTablesLabels: JSON.stringify(prevTablesLabels),
			iconIndex: iconIndex,
			joinColumnMapping: joinColumnMapping,
			trfmRulesId: trfmRulesId, // ravi start
			trfmRulesData: JSON.stringify(trfmRulesData),
			trfmRulesChanged: (trfmRulesChanged == true) ? "Y" : "N",
			joinDBStr: joinDBStr,
			flowchartData: JSON.stringify(flowChartData)
			//joinConditionsMapId: $("#" + currentMapId).attr("trfmRules-data")
		},
		success: function(response) {
			stopLoader();
			if (response != null) {
				var response = JSON.parse(response);
				var joinsDataStr = response['joinsDataStr'];
				var trString = response['trString'];
				$("#joinMapColumnsDivId").html(joinsDataStr);
				var hiddenData = "<input type='hidden' id='childTableColsArray_hidden'/>\n\
                <input type='hidden' id='masterTableColsArray_hidden'/><input type='hidden' id='currentJoinTableId'/>";
				$('#joinMapColumnsDivId').append(hiddenData);
				$("#childTableColsArray_hidden").val(JSON.stringify(response['childTableColsArray']));
				$("#masterTableColsArray_hidden").val(JSON.stringify(response['masterTableColsArray']));
				$("#currentJoinTableId").val(tableMapId);
				$("#joinTableColumnTr").html(trString);
				var contentSplitterWidth = $("#contentSplitter").width();
				if (contentSplitterWidth > 1121) {
					$(".visionColJoinMappingInput").attr('style', 'width:80% !important');
				} else if (contentSplitterWidth > 1100 && contentSplitterWidth < 1120) {
					$(".visionColJoinMappingInput").attr('style', 'width:81% !important');
					$(".visionColFuncInput").attr('style', 'width:68% !important');
				} else if (contentSplitterWidth > 1000 && contentSplitterWidth < 1100) {
					$(".visionColJoinMappingInput").attr('style', 'width:81% !important');
					$(".visionColFuncInput").attr('style', 'width:68% !important');
				} else if (contentSplitterWidth > 900 && contentSplitterWidth < 1000) {
					$(".visionColJoinMappingInput").attr('style', 'width:80% !important');
				} else if (contentSplitterWidth > 800 && contentSplitterWidth < 900) {
					$(".visionColJoinMappingInput").attr('style', 'width:78% !important');
				} else if (contentSplitterWidth > 700 && contentSplitterWidth < 800) {
					$(".visionColJoinMappingInput").attr('style', 'width:75% !important');
				}
				var currentJoinTableId = $("#currentJoinTableId").val();
				if (currentJoinTableId != null && currentJoinTableId != '') {
					var columnJoinMapping = {};
					var joinType = $("#joinType").val();
					var i = 1;
					$("#etlJoinClauseTable tbody tr").each(function() {
						var tdArray = this.cells;
						if (tdArray != null && tdArray.length != 0) {
							var joinObj = {};
							var childTableDataFunStr = $(tdArray[1]).find("input").attr("data-funobjstr");
							var childTableColumn = $(tdArray[1]).find("input").val();
							var childTableColumnActualValue = $(tdArray[1]).find("input").attr("actual-value");
							var childFunColumnsList = $(tdArray[1]).find("input").attr("funcolumnslist");
							var operator = $(tdArray[2]).find("option:selected").val();
							var masterTableDataFunStr = $(tdArray[3]).find("input").attr("data-funobjstr");
							var masterTableColumn = $(tdArray[3]).find("input").val();
							var masterTableColumnActualValue = $(tdArray[3]).find("input").attr("actual-value");
							var masterFunColumnsList = $(tdArray[1]).find("input").attr("funcolumnslist");
							var staticValue = $(tdArray[4]).find("input").val();
							var andOrOperator = $(tdArray[5]).find("option:selected").val();
							if (childTableColumn != null && childTableColumn != '') {
								joinObj['childTableDataFunStr'] = childTableDataFunStr;
								joinObj['childTableColumn'] = (childTableColumn != null && childTableColumn == 'Select') ? "" : childTableColumn;
								joinObj['childTableColumnActualValue'] = childTableColumnActualValue;
								joinObj['childFunColumnsList'] = childFunColumnsList;
								joinObj['operator'] = operator;
								joinObj['masterTableDataFunStr'] = masterTableDataFunStr;
								joinObj['masterTableColumn'] = (masterTableColumn != null && masterTableColumn == 'Select') ? "" : masterTableColumn;
								joinObj['masterTableColumnActualValue'] = masterTableColumnActualValue;
								joinObj['masterFunColumnsList'] = masterFunColumnsList;
								joinObj['andOrOperator'] = andOrOperator;
								joinObj['staticValue'] = staticValue;
								joinObj['joinType'] = joinType;
								//$("#operatorId option:selected").text();
								console.log("childTableColumn::" + childTableColumn);
								console.log("operator::" + operator);
								console.log("masterTableColumn::" + masterTableColumn);
								console.log("andOrOperator::" + andOrOperator);
								columnJoinMapping[i] = joinObj;
								i++;
							}
						}

					});
					if (columnJoinMapping != null) {
						$("#" + currentJoinTableId).attr("data-mappedcolumns", JSON.stringify(columnJoinMapping));
					}
				}
				try {
					var feedContentAreaHeight = $("#feedContentArea").height();
					$(".visionEtlJoinClauseTablesDivScroll").css("max-height", parseInt(feedContentAreaHeight) - 105);
				} catch (e) {
				}
				try {
					$("#etlJoinClauseTable").colResizable({
						disable: true
					});
				} catch (e) {
				}
				$("#etlJoinClauseTable").colResizable();
				$(".visionETLColMapImage").mousedown(function(event) {
					treeIconClickEvent = event;
				});
			}

		},
		error: function(e) {
			sessionTimeout(e);
			stopLoader();
		}

	});
}
function addNewJoinsRow(event, dbObject, id) {
	var trstring = $("#joinTableColumnTr").html();
	$("#etlJoinClauseTable tbody").append(trstring);
	$("#tabs-2").animate({
		scrollTop: $("#tabs-2").prop("scrollHeight")
	}, 1000);
}

function deleteSelectedRow($this) {
	//    $(this).parents("tr").remove();
	$($this).parents("tr").remove();
	// ravi file headers start
	try {
		var trArray = $("#fileColumnHeadersTable tbody tr");
		$.each(trArray, function(index) {
			$(this.children[1]).html(this.rowIndex);
		})
	} catch (e) {
	}
	// ravi file headers end
	console.log("$this");
	trfmRulesChanged = true; // ravi edit new
	try {
		$("#mainSplitter").resize();
	} catch (e) {
	}
}


function selectColumn($this, tableColType, dataArray) {
	labelObject = {};
	try {
		labelObject = JSON.parse($("#labelObjectHidden").val());
	} catch (e) {
	}
	//dddw
	// prepare the data
	var data = [];
	if (tableColType == 'fromColumn') {
		var dataStr = $("#fromTableColsArray_hidden").val();
		if (dataStr != null && dataStr != '') {
			data = JSON.parse(dataStr);
		}
	} else if (tableColType == 'toColumn') {
		var dataStr = $("#toTableColsArray_hidden").val();
		if (dataStr != null && dataStr != '') {
			data = JSON.parse(dataStr);
		}
	} else if (tableColType == 'childColumn') {
		var dataStr = $("#childTableColsArray_hidden").val();
		if (dataStr != null && dataStr != '') {
			data = JSON.parse(dataStr);
		}
	} else if (tableColType == 'masterColumn') {
		var dataStr = $("#masterTableColsArray_hidden").val();
		if (dataStr != null && dataStr != '') {
			data = JSON.parse(dataStr);
		}
	} else if (tableColType == 'fromWhereClauseColumn') {
		var dataStr = $("#whereClauseTableColsObj_hidden").val();
		if (dataStr != null && dataStr != '') {
			data = JSON.parse(dataStr);
		}
	} else if (tableColType == 'LOOKUP_TABLE,COLUMN') {
		data = dataArray;
	}
	var source =
	{
		datatype: "json",
		datafields: [
			{ name: 'id' },
			{ name: 'parentid' },
			{ name: 'text' },
			{ name: 'icon' },
			{ name: 'value' },
			{ name: 'datatype' }
		],
		id: 'id',
		icon: 'icon',
		localdata: data
	};
	// create data adapter.
	var dataAdapter = new $.jqx.dataAdapter(source);
	// perform Data Binding.
	dataAdapter.dataBind();
	// get the tree items. The first parameter is the item's id. The second parameter is the parent item's id. The 'items' parameter represents 
	// the sub items collection name. Each jqxTree item has a 'label' property, but in the JSON data, we have a 'text' field. The last parameter 
	// specifies the mapping between the 'text' and 'label' fields.  
	var records = dataAdapter.getRecordsHierarchy('id', 'parentid', 'items', [{ name: 'text', map: 'label' }]);
	$("#columnMappingDialog").html("<div class='treeSearchInputDiv'><input id='treeSearchValue' type='text' class='treeSearchValueInput' placeholder='Search'/>\n\
    <img id='treeNodeSearchIconId' src='images/icon.png' style='height:12px;width:12px;cursor:pointer;' onclick=searchTreeNode('columnMappingTree')  /><div id='searchTreeErrorMesg' style='color:red;'></div></div>\n\
    <div id='columnMappingTree' class='columnMappingTree'></div>");
	$("#columnMappingDialog").dialog({
		title: (labelObject['Columns'] != null ? labelObject['Columns'] : 'Columns'),
		modal: true,
		width: 'auto',
		maxWidth: 500,
		height: 330,
		fluid: true,
		buttons: [{
			text: (labelObject['Ok'] != null ? labelObject['Ok'] : 'Ok'),
			click: function() {
				var selectedItem = $("#columnMappingTree").jqxTree('getSelectedItem');
				if (selectedItem != null) {
					$($this).parents("td").find("input").val(selectedItem['value']);
					$($this).parents("td").find("input").attr("title", selectedItem['value']);
					$($this).parents("td").find("input").attr("actual-value", selectedItem['id']);
					var tablesList = [];
					var tablesListstr = $($this).parents("td").find("input").attr("tableName");
					if (tablesListstr != null && tablesListstr != "") {
						tablesList = JSON.parse(tablesListstr);
					}
					var currentTable = selectedItem['parentId'];
					if (currentTable != null && currentTable == 0) {
						currentTable = selectedItem['id'].split(":")[0]
					}
					if (tablesList.indexOf(currentTable) == -1) {
						tablesList.push(currentTable);
					}
					$($this).parents("td").find("input").attr("tableName", JSON.stringify(tablesList));
					var columnsList = [];
					var columnsListstr = $($this).parents("td").find("input").attr("funcolumnslist");
					if (columnsListstr != null && columnsListstr != "" && columnsListstr != "null") {
						columnsList = JSON.parse(columnsListstr);
					}
					var currentColumn = selectedItem['id'];
					if (columnsList.indexOf(currentColumn) == -1) {
						columnsList.push(currentColumn);
					}
					$($this).parents("td").find("input").attr("funcolumnslist", JSON.stringify(columnsList));
					//                       $($this).parent.find("input").val(selectedItem['value']); 
					trfmRulesChanged = true;
				}

				$(this).html("");
				//$(this).dialog("close");
				$(this).dialog("destroy");
			}

		}],
		open: function() {
			var dialog$this = this;
			$('#columnMappingTree').jqxTree({
				source: records, width: 300,
				toggleMode: 'click',
				//                theme: 'energyblue',
				enableHover: true,
				incrementalSearch: true,
				keyboardNavigation: true
			});
			$("#treeSearchValue").keyup(function(event) {
				if (event.keyCode === 13) {
					// Cancel the default action, if needed
					//            event.preventDefault();
					$("#treeNodeSearchIconId").click();
				}
			});
			$('#columnMappingTree').jqxTree('expandItem', $("#columnMappingTree").find('li:first')[0]);
			$("#columnMappingTree li").unbind('dblclick').on('dblclick', function(event) {
				var selectedItem = $("#columnMappingTree").jqxTree('getSelectedItem');
				if (selectedItem != null && !(selectedItem['icon'] != null && selectedItem['icon'] != '')) {
					$($this).parents("td").find("input").val(selectedItem['value']);
					$($this).parents("td").find("input").attr("title", selectedItem['value']);
					$($this).parents("td").find("input").attr("actual-value", selectedItem['id']);
					var tablesList = [];
					var tablesListstr = $($this).parents("td").find("input").attr("tableName");
					if (tablesListstr != null && tablesListstr != "") {
						tablesList = JSON.parse(tablesListstr);
					}
					var currentTable = selectedItem['parentId'];
					if (currentTable != null && currentTable == 0) {
						currentTable = selectedItem['id'].split(":")[0]
					}
					if (tablesList.indexOf(currentTable) == -1) {
						tablesList.push(currentTable);
					}
					$($this).parents("td").find("input").attr("tableName", JSON.stringify(tablesList));
					var columnsList = [];
					var columnsListstr = $($this).parents("td").find("input").attr("funcolumnslist");
					if (columnsListstr != null && columnsListstr != "" && columnsListstr != "null") {
						columnsList = JSON.parse(columnsListstr);
					}
					var currentColumn = selectedItem['id'];
					if (columnsList.indexOf(currentColumn) == -1) {
						columnsList.push(currentColumn);
					}
					$($this).parents("td").find("input").attr("funcolumnslist", JSON.stringify(columnsList));
					//                        $("#columnMappingDialog").html("");
					////                        $("#columnMappingDialog").dialog("close");
					//                        $("#columnMappingDialog").dialog("destroy");
					$(dialog$this).html("");
					//                        $("#columnMappingDialog").dialog("close");
					$(dialog$this).dialog("destroy");
					trfmRulesChanged = true;
				}

			});
			try {
				var inputFieldsArray = [];
				var columnIndex = treeIconClickEvent.target.parentElement.cellIndex;
				var trs = treeIconClickEvent.target.parentElement.offsetParent.children[1].children;
				;
				$.each(trs, function(index) {
					var inputVal = this.children[columnIndex].children[0].value.trim()
					inputFieldsArray.push(inputVal);
				})

				var columnsArray = $(this).find('li');
				$.each(columnsArray, function(index) {
					var _this = this;
					var colVal = this.id.trim();
					$.each(inputFieldsArray, function(index) {
						var inputVal = this.trim();
						if (colVal == inputVal) {
							if ($(_this).find(".tickMark").length == 0) {
								$(_this.children[0]).prepend("<div class='tickMark'></div>");
							}
							// $(_this).addClass("visionHighlightColumn");
							// $(_this).parent().css("background-color","yellow");
						}
					})
				});
			} catch (e) {
				console.error(e);
			}

			$(this).closest(".ui-dialog").find(".ui-button").eq(1).addClass("dialogyes");
			$(".visionHeaderMain").css("z-index", "999");
			$(".visionFooterMain").css("z-index", "999");
			$(".ui-dialog").addClass('visionDMTreePopup');
		},
		beforeClose: function(event, ui) {

			$(".visionHeaderMain").css("z-index", "99999");
			$(".visionFooterMain").css("z-index", "99999");
		}, close: function(event, ui) {

			$(this).html("");
			try {
				$("#columnMappingTree").jqxTree('destroy');
				$("#columnMappingTree").remove();
				$("#treeSearchInputDiv").remove();
			} catch (e) {
			}
			//            try {
			//                $(this).dialog("destroy");
			//            } catch (e) {
			//            }
			//                       
			//                        
			//                       
		}
		//        , create: function (event, ui) {
		//            $("#columnMappingTree li").on('dblclick', function (event) {
		//                var selectedItem = $("#columnMappingTree").jqxTree('getSelectedItem');
		//                if (selectedItem != null && !(selectedItem['icon'] != null && selectedItem['icon'] != '')) {
		//                    $($this).parents("td").find("input").val(selectedItem['value']);
		//                    $($this).parents("td").find("input").attr("title", selectedItem['value']);
		//                }
		//                //$(this).dialog("close");
		//                $(this).dialog("destroy");
		//            });
		//        }
	});
}

function addColumnMapping(event, $this) {
	var selectedColumnStr = $("#selectedColumnStr").html();
	$("#sourceDestColsTableId tbody").append(selectedColumnStr);
	//    try {
	//        $("#sourceDestColsTableId").colResizable({
	//            disable: true
	//        });
	//
	//        $("#sourceDestColsTableId").tableDnD({
	//            onDragStyle: null,
	//            onDropStyle: null,
	//            onDragClass: "tDnD_whileDrag",
	//        });
	//    } catch (e) {
	//    }
	//    $("#sourceDestColsTableId").colResizable();
	$("#tabs-1").animate({
		scrollTop: $("#tabs-1").prop("scrollHeight")
	}, 1000);
}

function saveJoinMapping(event, id) {
	var currentJoinTableId = $("#currentJoinTableId").val();
	if (currentJoinTableId != null && currentJoinTableId != '') {
		var columnJoinMapping = {};
		var joinType = $("#joinType").val();
		var i = 1;
		$("#etlJoinClauseTable tbody tr").each(function() {
			var tdArray = this.cells;
			if (tdArray != null && tdArray.length != 0) {
				var joinObj = {};
				var childTableDataFunStr = $(tdArray[1]).find("input").attr("data-funobjstr");
				var childTableColumn = $(tdArray[1]).find("input").val();
				var childTableColumnActualValue = $(tdArray[1]).find("input").attr("actual-value");
				var childFunColumnsList = $(tdArray[1]).find("input").attr("funcolumnslist");
				var operator = $(tdArray[2]).find("option:selected").val();
				var masterTableDataFunStr = $(tdArray[3]).find("input").attr("data-funobjstr");
				var masterTableColumn = $(tdArray[3]).find("input").val();
				var masterTableColumnActualValue = $(tdArray[3]).find("input").attr("actual-value");
				var masterFunColumnsList = $(tdArray[1]).find("input").attr("funcolumnslist");
				var staticValue = $(tdArray[4]).find("input").val();
				var andOrOperator = $(tdArray[5]).find("option:selected").val();
				if (childTableColumn != null && childTableColumn != '') {
					joinObj['childTableDataFunStr'] = childTableDataFunStr;
					joinObj['childTableColumn'] = (childTableColumn != null && childTableColumn == 'Select') ? "" : childTableColumn;
					joinObj['childTableColumnActualValue'] = childTableColumnActualValue;
					joinObj['childFunColumnsList'] = childFunColumnsList;
					joinObj['operator'] = operator;
					joinObj['masterTableDataFunStr'] = masterTableDataFunStr;
					joinObj['masterTableColumn'] = (masterTableColumn != null && masterTableColumn == 'Select') ? "" : masterTableColumn;
					joinObj['masterTableColumnActualValue'] = masterTableColumnActualValue;
					joinObj['masterFunColumnsList'] = masterFunColumnsList;
					joinObj['andOrOperator'] = andOrOperator;
					joinObj['staticValue'] = staticValue;
					joinObj['joinType'] = joinType;
					//$("#operatorId option:selected").text();
					console.log("childTableColumn::" + childTableColumn);
					console.log("operator::" + operator);
					console.log("masterTableColumn::" + masterTableColumn);
					console.log("andOrOperator::" + andOrOperator);
					columnJoinMapping[i] = joinObj;
					i++;
				}
			}

		});
		if (columnJoinMapping != null) {
			$("#" + currentJoinTableId).attr("data-mappedcolumns", JSON.stringify(columnJoinMapping));
		}
	}
	var dialogSplitMessage = dialogSplitIconText((labelObject['Saved Successfully'] != null ? labelObject['Saved Successfully'] : 'Saved Successfully'), "Y");
	$("#dialog").html(dialogSplitMessage);
	$("#dialog").dialog({
		title: (labelObject['Message'] != null ? labelObject['Message'] : 'Message'),
		modal: true,
		height: 'auto',
		minWidth: 300,
		maxWidth: 'auto',
		fluid: true,
		buttons: [{
			text: (labelObject['Ok'] != null ? labelObject['Ok'] : 'Ok'),
			click: function() {
				$(this).html("");
				//$(this).dialog("close");
				$(this).dialog("destroy");
			}
		}],
		open: function() {
			stopLoader();
			$(this).closest(".ui-dialog").find(".ui-button").eq(1).addClass("dialogyes");
			$(this).closest(".ui-dialog").find(".ui-button").eq(2).addClass("dialogno");
			$(".visionHeaderMain").css("z-index", "999");
			$(".visionFooterMain").css("z-index", "999");
		},
		beforeClose: function(event, ui) {
			$(".visionHeaderMain").css("z-index", "99999");
			$(".visionFooterMain").css("z-index", "99999");
		}
	});
}

function viewJoinQuery() {
	//EtlMappingTable
	var query = "<ul><li> <font color='#0071c5'>FROM</font> ";
	var i = 0;
	$("#EtlMappingTable thead tr").each(function() {
		if (i != 0) {
			var tdArray = this.cells;
			if (tdArray != null && tdArray.length != 0) {
				var tableName = $(tdArray[0]).find("option:selected").val();
				tableName = "<font color='#F911E9'>" + tableName + "</font>"
				if (i == 1) {
					query += " " + tableName + "</li><li><ul>";
				} else {
					var mappedcolumnsObjStr = $(tdArray[1]).find("img").attr("data-mappedcolumns");
					//data-mappedcolumns  
					console.log("mappedcolumnsObjStr:::" + mappedcolumnsObjStr);
					if (mappedcolumnsObjStr != null && mappedcolumnsObjStr != '') {
						var mappedcolumnsObj = JSON.parse(mappedcolumnsObjStr);
						if (mappedcolumnsObj != null && !jQuery.isEmptyObject(mappedcolumnsObj)) {
							var j = 0;
							var mapObjLength = Object.keys(mappedcolumnsObj).length;
							for (var key in mappedcolumnsObj) {
								var mappedColObj = mappedcolumnsObj[key];
								if (mappedColObj != null && !jQuery.isEmptyObject(mappedColObj)) {
									var childTableColumn = mappedColObj['childTableColumn'];
									if (childTableColumn != null && childTableColumn != '') {
										var childTableColumnArray = childTableColumn.split(":");
										childTableColumn = "<font color='#F911E9'>" + childTableColumnArray[0] + "</font>." + childTableColumnArray[1];
									}
									var masterTableColumn = mappedColObj['masterTableColumn'];
									if (masterTableColumn != null && masterTableColumn != '') {
										var masterTableColumnArray = masterTableColumn.split(":");
										masterTableColumn = "<font color='#F911E9'>" + masterTableColumnArray[0] + "</font>." + masterTableColumnArray[1];
									}
									if (j == 0) {
										query += "<li><font color='#0071c5'> " + mappedColObj['joinType'] + "</font> " + tableName + " <font color='#0071c5'>ON</font> </li><li><ul>"
									}
									var colValue = mappedColObj['staticValue'];
									if (colValue != null && colValue != '' && colValue != 'null') {
										if (mappedColObj['operator'] == 'IN' || mappedColObj['operator'] == 'NOT IN') {

											if (colValue.indexOf("##") > -1) {
												colValue = "('" + colValue.replace(/#{2,}/g, "','") + "')";
											} else {
												colValue = "('" + colValue + "')";
											}
										} else {
											colValue = "'" + colValue + "'";
										}
									}
									query += " <li> " + childTableColumn + " <font color='#0071c5'>" + mappedColObj['operator'] + "</font> "
										+ ((mappedColObj['staticValue'] != null && mappedColObj['staticValue'] != '') ? (" <font color='#FF0000'>" + colValue + "</font> ") : masterTableColumn); //staticValue

									if (j != parseInt(mapObjLength) - 1) {
										query += " <font color='#0071c5'>" + mappedColObj['andOrOperator'] + "</font> ";
									}
									query += "</li>";
								}
								j++;
							}
							query += "</ul></li>";
						}
					}
				}


			}
		}

		i++;
	});
	query += "</ul></li></ul>";
	console.log("Query:::" + query);
	$("#viewJoinQueryId").html(query);
}

function showWhereClausePopup(event, tableName, id, $this, index) {
	showLoader();
	var prevMapIconId = $("#currentClauseMapId").val();
	if (prevMapIconId != null && prevMapIconId != '') {
		var query = "";
		//fromTablesWhereCauseTable
		var columnClauseMapping = {};
		var i = 1;
		var rowCount = $('#fromTablesWhereCauseTable >tbody >tr').length;
		$("#fromTablesWhereCauseTable tbody tr").each(function() {
			var tdArray = this.cells;
			if (tdArray != null && tdArray.length != 0) {
				var clauseObj = {};
				var datafunobjstr = $(tdArray[1]).find("input").attr("data-funobjstr");
				var columnName = $(tdArray[1]).find("input").val();
				var columnNameActualValue = $(tdArray[1]).find("input").attr("actual-value");
				var funcolumnslist = $(tdArray[1]).find("input").attr("funcolumnslist");
				var operator = $(tdArray[2]).find("option:selected").val();
				var staticValue = $(tdArray[3]).find("input").val();
				var andOrOperator = $(tdArray[4]).find("option:selected").val();
				var staticValueMod = staticValue; // ravi whereclause issue
				if (columnName != null && columnName != '') {
					if (staticValueMod != null && staticValueMod != '' && staticValueMod != 'null' && staticValueMod != 'NULL') {
						if (operator == 'IN' || operator == 'NOT IN') {
							if (staticValueMod.indexOf("##") > -1) {
								staticValueMod = "('" + staticValueMod.replace(/#{2,}/g, "','") + ")";
							} else {
								staticValueMod = "('" + staticValueMod + "')";
							}
						} else {
							staticValueMod = "'" + staticValueMod + "'";
						}

					}
					query += " " + columnName.replace(":", ".") + " " + operator + " " + staticValueMod + " ";
					if ((parseInt(i) - 1) != (parseInt(rowCount) - 1)) {
						query += " " + andOrOperator;
					}
					clauseObj['datafunobjstr'] = datafunobjstr;
					clauseObj['columnName'] = columnName;
					clauseObj['columnNameActualValue'] = columnNameActualValue;
					clauseObj['funcolumnslist'] = funcolumnslist;
					clauseObj['operator'] = operator;
					clauseObj['andOrOperator'] = andOrOperator;
					clauseObj['staticValue'] = staticValue;
					columnClauseMapping[i] = clauseObj;
					i++;
				}


			}

		});
		if (columnClauseMapping != null) {
			var currentClauseAreaId = prevMapIconId.replace("whereClauseConditionsMap_", "whereClauseConditionsArea_");
			$("#" + currentClauseAreaId).val(query);
			$("#" + prevMapIconId).attr("data-whereclause", JSON.stringify(columnClauseMapping));
		}
	}
	var whereClauseTableColsArrayStr = $("#whereClauseTableColsArray_hidden").val();
	var currentTableTreeArray = [];
	if (whereClauseTableColsArrayStr != null && whereClauseTableColsArrayStr != '') {
		var whereClauseTableColsArrayObj = JSON.parse(whereClauseTableColsArrayStr);
		if (whereClauseTableColsArrayObj != null && !jQuery.isEmptyObject(whereClauseTableColsArrayObj)) {
			currentTableTreeArray = whereClauseTableColsArrayObj[tableName];
		}
	}
	var whereClauseStr = $("#" + id).attr("data-whereclause");
	// ravi start
	var trfmRulesData;
	var trfmRulesId;
	if (whereClauseStr == null || whereClauseStr == "" || whereClauseStr == "{}") {
		var selectedMapOperatorData = $('#' + flowChartWorkSpaceId).flowchart('getOperatorData', previousOperatorId);
		trfmRulesData = selectedMapOperatorData['trfmRules-data'];
		trfmRulesId = selectedMapOperatorData['trfmRulesId'];
		if (trfmRulesData != null && trfmRulesData['whereClauseData'] != null) {

			var whereClasesConditions = trfmRulesData['whereClauseData']
			var whereClauseMapId = event.target.id;
			var whereClauseMapIndexStr = whereClauseMapId.substring(whereClauseMapId.indexOf("_") + 1, whereClauseMapId.length);
			var whereClauseMapIndex = parseInt(whereClauseMapIndexStr);
			whereClauseStr = trfmRulesData['whereClauseData'][whereClauseMapIndex];
		}
	}

	// ravi end
	$.ajax({
		type: 'post',
		traditional: true,
		dataType: 'html',
		cache: false,
		url: 'showingClauseColumns',
		async: true,
		data: {
			whereClauseStr: whereClauseStr,
			trfmRulesId: trfmRulesId,
			trfmRulesChanged: (trfmRulesChanged == true) ? "Y" : "N"
		},
		success: function(response) {
			stopLoader();
			if (response != null) {
				var response = JSON.parse(response);
				$("#currentClauseMapId").val(id);
				$("#whereClauseMapColumnsDivId").html("");
				$("#whereClauseMapColumnsDivId").html(response['whereClauseColsCondition']);
				$("#wherClauseTrString").html(response['trString']);
				$("#whereClauseMapColumnsDivId").append("<input type='hidden' id='whereClauseTableColsObj_hidden'/>");
				$("#whereClauseTableColsObj_hidden").val(JSON.stringify(currentTableTreeArray));
				var contentSplitterWidth = $("#contentSplitter").width();
				if (contentSplitterWidth > 1121) {
					$(".visionColJoinMappingInput").attr('style', 'width:80%');
				} else if (contentSplitterWidth > 1100 && contentSplitterWidth < 1120) {
					$(".visionColFuncInput").attr('style', 'width:68% !important');
				} else if (contentSplitterWidth > 1000 && contentSplitterWidth < 1100) {
					$(".visionColFuncInput").attr('style', 'width:68% !important');
				} else if (contentSplitterWidth > 900 && contentSplitterWidth < 1000) {
					$(".visionColJoinMappingInput").attr('style', 'width:80%');
				} else if (contentSplitterWidth > 800 && contentSplitterWidth < 900) {
					$(".visionColJoinMappingInput").attr('style', 'width:78%');
				} else if (contentSplitterWidth > 700 && contentSplitterWidth < 800) {
					$(".visionColJoinMappingInput").attr('style', 'width:75%');
				}
				var prevMapIconId = $("#currentClauseMapId").val();
				if (prevMapIconId != null && prevMapIconId != '') {
					var query = "";
					//fromTablesWhereCauseTable
					var columnClauseMapping = {};
					var i = 1;
					var rowCount = $('#fromTablesWhereCauseTable >tbody >tr').length;
					$("#fromTablesWhereCauseTable tbody tr").each(function() {
						var tdArray = this.cells;
						if (tdArray != null && tdArray.length != 0) {
							var clauseObj = {};
							var datafunobjstr = $(tdArray[1]).find("input").attr("data-funobjstr");
							var columnName = $(tdArray[1]).find("input").val();
							var columnNameActualValue = $(tdArray[1]).find("input").attr("actual-value");
							var funcolumnslist = $(tdArray[1]).find("input").attr("funcolumnslist");
							var operator = $(tdArray[2]).find("option:selected").val();
							var staticValue = $(tdArray[3]).find("input").val();
							var andOrOperator = $(tdArray[4]).find("option:selected").val();
							var staticValueMod = staticValue; // ravi whereclause issue
							if (columnName != null && columnName != '') {
								if (staticValueMod != null && staticValueMod != '' && staticValueMod != 'null' && staticValueMod != 'NULL') {
									if (operator == 'IN' || operator == 'NOT IN') {
										if (staticValueMod.indexOf("##") > -1) {
											staticValueMod = "('" + staticValueMod.replace(/#{2,}/g, "','") + ")";
										} else {
											staticValueMod = "('" + staticValueMod + "')";
										}
									} else {
										staticValueMod = "'" + staticValueMod + "'";
									}

								}
								query += " " + columnName.replace(":", ".") + " " + operator + " " + staticValueMod + " ";
								if ((parseInt(i) - 1) != (parseInt(rowCount) - 1)) {
									query += " " + andOrOperator;
								}
								clauseObj['datafunobjstr'] = datafunobjstr;
								clauseObj['columnName'] = columnName;
								clauseObj['columnNameActualValue'] = columnNameActualValue;
								clauseObj['funcolumnslist'] = funcolumnslist;
								clauseObj['operator'] = operator;
								clauseObj['andOrOperator'] = andOrOperator;
								clauseObj['staticValue'] = staticValue;
								columnClauseMapping[i] = clauseObj;
								i++;
							}


						}

					});
					if (columnClauseMapping != null) {
						var currentClauseAreaId = prevMapIconId.replace("whereClauseConditionsMap_", "whereClauseConditionsArea_");
						$("#" + currentClauseAreaId).val(query);
						$("#" + prevMapIconId).attr("data-whereclause", JSON.stringify(columnClauseMapping));
					}
				}
				// scroll bar issue fixed by SHI
				var feedContentAreaHeight = $("#feedContentArea").height();
				var tbodyHeight = feedContentAreaHeight - 105;
				$(".visionEtlJoinClauseTablesDivScroll").css("max-height", parseInt(feedContentAreaHeight) - 105);
				// scroll bar issue fixed by SHI
				try {
					$("#fromTablesWhereCauseTable").colResizable({
						disable: true
					});
				} catch (e) {
				}
				$("#fromTablesWhereCauseTable").colResizable();
			}

		},
		error: function(e) {
			sessionTimeout(e);
			stopLoader();
		}

	});
}
function addNewClauseRow(event, id, $this) {
	var trstring = $("#wherClauseTrString").html();
	$("#fromTablesWhereCauseTable tbody").append(trstring);
	$("#tabs-3").animate({
		scrollTop: $("#tabs-3").prop("scrollHeight")
	}, 1000);
}
function addNewOrderClauseRow(event, id, $this) {
	var trstring = $("#orderClauseTrString").html();
	$("#fromTablesOrderCauseTable tbody").append(trstring);
	$("#tabs-4").animate({
		scrollTop: $("#tabs-4").prop("scrollHeight")
	}, 1000);
}
function addNewGroupClauseRow(event, id, $this) {
	var trstring = $("#groupClauseTrString").html();
	$("#fromTablesGroupCauseTable tbody").append(trstring);
	$("#tabs-5").animate({
		scrollTop: $("#tabs-5").prop("scrollHeight")
	}, 1000);
}

function saveClauseMapping(event, id, $this) {
	var currentClauseMapId = $("#currentClauseMapId").val();
	if (currentClauseMapId != null && currentClauseMapId != '') {
		//fromTablesWhereCauseTable
		var columnClauseMapping = {};
		var i = 1;
		var rowCount = $('#fromTablesWhereCauseTable >tbody >tr').length;
		var query = "";
		$("#fromTablesWhereCauseTable tbody tr").each(function() {
			var tdArray = this.cells;
			if (tdArray != null && tdArray.length != 0) {
				var clauseObj = {};
				var datafunobjstr = $(tdArray[1]).find("input").attr("data-funobjstr");
				var columnName = $(tdArray[1]).find("input").val();
				var columnNameActualValue = $(tdArray[1]).find("input").attr("actual-value");
				var funcolumnslist = $(tdArray[1]).find("input").attr("funcolumnslist");
				var operator = $(tdArray[2]).find("option:selected").val();
				var staticValue = $(tdArray[3]).find("input").val();
				var andOrOperator = $(tdArray[4]).find("option:selected").val();
				var staticValueMod = staticValue; // ravi whereclause issue
				if (columnName != null && columnName != '') {
					if (staticValueMod != null && staticValueMod != '' && staticValueMod != 'null' && staticValueMod != 'NULL') {
						if (operator == 'IN' || operator == 'NOT IN') {
							if (staticValueMod.indexOf("##") > -1) {
								staticValueMod = "('" + staticValueMod.replace(/#{2,}/g, "','") + ")";
							} else {
								staticValueMod = "('" + staticValueMod + "')";
							}
						} else {
							staticValueMod = "'" + staticValueMod + "'";
						}

					}
					query += " " + columnName.replace(":", ".") + " " + operator + " " + staticValueMod + " ";
					if ((parseInt(i) - 1) != (parseInt(rowCount) - 1)) {
						query += " " + andOrOperator;
					}
					clauseObj['datafunobjstr'] = datafunobjstr;
					clauseObj['columnName'] = columnName;
					clauseObj['columnNameActualValue'] = columnNameActualValue;
					clauseObj['funcolumnslist'] = funcolumnslist;
					clauseObj['operator'] = operator;
					clauseObj['andOrOperator'] = andOrOperator;
					clauseObj['staticValue'] = staticValue;
					columnClauseMapping[i] = clauseObj;
					i++;
				}


			}

		});
		if (columnClauseMapping != null) {
			//            var whereClauseConditionsArea_
			var currentClauseAreaId = currentClauseMapId.replace("whereClauseConditionsMap_", "whereClauseConditionsArea_");
			$("#" + currentClauseAreaId).val(query);
			//          var tdArray = this.cells;  $($this).parents("tr").find("textarea").val(query);
			$("#" + currentClauseMapId).attr("data-whereclause", JSON.stringify(columnClauseMapping));
		}
	}
	var dialogSplitMessage = dialogSplitIconText((labelObject['Saved Successfully'] != null ? labelObject['Saved Successfully'] : 'Saved Successfully'), "Y");
	$("#dialog").html(dialogSplitMessage);
	$("#dialog").dialog({
		title: (labelObject['Message'] != null ? labelObject['Message'] : 'Message'),
		modal: true,
		height: 'auto',
		minWidth: 300,
		maxWidth: 'auto',
		fluid: true,
		buttons: [{
			text: (labelObject['Ok'] != null ? labelObject['Ok'] : 'Ok'),
			click: function() {
				$(this).html("");
				//$(this).dialog("close");
				$(this).dialog("destroy");
			}
		}],
		open: function() {
			stopLoader();
			$(this).closest(".ui-dialog").find(".ui-button").eq(1).addClass("dialogyes");
			$(this).closest(".ui-dialog").find(".ui-button").eq(2).addClass("dialogno");
			$(".visionHeaderMain").css("z-index", "999");
			$(".visionFooterMain").css("z-index", "999");
		},
		beforeClose: function(event, ui) {
			$(".visionHeaderMain").css("z-index", "99999");
			$(".visionFooterMain").css("z-index", "99999");
		}
	});
}

function viewTotalSQLQuery($this, sqlQueryTabId) {
	var selectQuery = "";
	// col mappings
	var query = "<font color='#0071c5'>SELECT</font> ";
	selectQuery += "SELECT ";
	var selectTabObj = {};
	if ($("#distinctRowsInput").is(":checked")) {
		query += "<font color='#0071c5'>DISTINCT</font>  ";
		selectQuery += " DISTINCT "
	}
	//    selectTabObj['uniqueRowsFlag'] = uniqueRowsFlag;
	//    selectTabObj['minRows'] = $("#rowsCountFromInput").val();
	//    selectTabObj['maxRows'] = $("#rowsCountToInput").val();

	var i = 0;
	var rowCount = $('#sourceDestColsTableId >tbody >tr').length;
	$("#sourceDestColsTableId tbody tr").each(function() {
		var tdArray = this.cells;
		if (tdArray != null && tdArray.length != 0) {
			var toTableColumn = $(tdArray[2]).find("input").val();
			var fromTableColumn = $(tdArray[3]).find("input").val();
			var defaultValue = $(tdArray[4]).find("input").val();
			var appendValue = $(tdArray[5]).find("input").val();
			var columnClause = $(tdArray[6]).find("input").val();
			if ((fromTableColumn != null && fromTableColumn != '')
				|| (defaultValue != null && defaultValue != '')
				|| (columnClause != null && columnClause != '')
			) {
				if (fromTableColumn != null && fromTableColumn != '') {
					query += " " + fromTableColumn.replace(":", ".") + "  ";
					selectQuery += " " + fromTableColumn.replace(":", ".") + "  ";
				} else if (defaultValue != null && defaultValue != '') {
					query += " <font color='#FF0000'>'" + defaultValue + "'</font> AS " + toTableColumn.replace(":", ".") + "  ";
					selectQuery += " '" + defaultValue + "' AS " + toTableColumn.split(":")[1] + "  ";
				} else if (columnClause != null && columnClause != '') {
					//                    if (columnClause.indexOf("'") > -1) {
					//                        var quotetedStr = "'"+columnClause.substring(columnClause.indexOf("'") + 1, 
					//                        columnClause.indexOf("'", columnClause.indexOf("'") + 1))+"'";
					//                        columnClause = columnClause.replace(quotetedStr,"<font color='#FF0000'>"+quotetedStr+"</font>");
					////                        var columnClauseArray 
					//                    }
					query += " (" + columnClause + ") AS " + toTableColumn.replace(":", ".") + "  ";
					selectQuery += " (" + columnClause + ") AS " + toTableColumn.split(":")[1] + "  ";
				}
				if ((parseInt(i)) != (parseInt(rowCount) - 1)) {
					query += " , ";
					selectQuery += " , ";
				}
			}

		}

		i++;
	});
	query += " <ul><li> <font color='#0071c5'>FROM</font> ";
	selectQuery += " FROM ";
	var i = 0;
	var joinQuery = "";
	$("#EtlMappingTable thead tr").each(function() {
		if (i != 0) {
			var tdArray = this.cells;
			if (tdArray != null && tdArray.length != 0) {
				var tableName = $(tdArray[0]).find("option:selected").val();
				tableName = "<font color='#F911E9'>" + tableName + "</font>"
				if (i == 1) {
					joinQuery += " " + tableName + "</li><li><ul>";
					selectQuery += " " + tableName.replace("<font color='#F911E9'>", "").replace("</font>", "") + " ";
				} else {
					var mappedcolumnsObjStr = $(tdArray[1]).find("img").attr("data-mappedcolumns");
					//data-mappedcolumns  
					console.log("mappedcolumnsObjStr:::" + mappedcolumnsObjStr);
					if (mappedcolumnsObjStr != null && mappedcolumnsObjStr != '') {
						var mappedcolumnsObj = JSON.parse(mappedcolumnsObjStr);
						if (mappedcolumnsObj != null && !jQuery.isEmptyObject(mappedcolumnsObj)) {
							var j = 0;
							var mapObjLength = Object.keys(mappedcolumnsObj).length;
							for (var key in mappedcolumnsObj) {
								var mappedColObj = mappedcolumnsObj[key];
								if (mappedColObj != null && !jQuery.isEmptyObject(mappedColObj)) {
									var childTableColumn = mappedColObj['childTableColumn'];
									if (childTableColumn != null && childTableColumn != '') {
										var childTableColumnArray = childTableColumn.split(":");
										childTableColumn = "<font color='#F911E9'>" + childTableColumnArray[0] + "</font>." + childTableColumnArray[1];
									}
									var masterTableColumn = mappedColObj['masterTableColumn'];
									if (masterTableColumn != null && masterTableColumn != '') {
										var masterTableColumnArray = masterTableColumn.split(":");
										masterTableColumn = "<font color='#F911E9'>" + masterTableColumnArray[0] + "</font>." + masterTableColumnArray[1];
									}
									if (j == 0) {
										joinQuery += "<li><font color='#0071c5'> " + mappedColObj['joinType'] + "</font> " + tableName + " <font color='#0071c5'>ON</font> </li><li><ul>"
										selectQuery += " " + mappedColObj['joinType'] + "  " + tableName.replace("<font color='#F911E9'>", "").replace("</font>", "") + "  ON ";
									}
									var colValue = mappedColObj['staticValue'];
									if (colValue != null && colValue != '' && colValue != 'null') {
										if (mappedColObj['operator'] == 'IN' || mappedColObj['operator'] == 'NOT IN') {

											if (colValue.indexOf("##") > -1) {
												colValue = "('" + colValue.replace(/#{2,}/g, "','") + "')";
											} else {
												colValue = "('" + colValue + "')";
											}
										} else {
											colValue = "'" + colValue + "'";
										}
									}
									joinQuery += " <li> " + childTableColumn + " <font color='#0071c5'>" + mappedColObj['operator'] + "</font> "
										+ ((mappedColObj['staticValue'] != null && mappedColObj['staticValue'] != '') ? (" <font color='#FF0000'>'" + mappedColObj['staticValue'] + "'</font> ") : masterTableColumn); //staticValue
									selectQuery += "  " + childTableColumn.replace("<font color='#F911E9'>", "").replace("</font>", "") + "  " + mappedColObj['operator'] + "  "
										+ ((mappedColObj['staticValue'] != null && mappedColObj['staticValue'] != '') ? ("  " + colValue + "  ") : masterTableColumn.replace("<font color='#F911E9'>", "").replace("</font>", "")); //staticValue

									if (j != parseInt(mapObjLength) - 1) {
										joinQuery += " <font color='#0071c5'>" + mappedColObj['andOrOperator'] + "</font> ";
										selectQuery += "  " + mappedColObj['andOrOperator'] + "  ";
									}
									joinQuery += "</li>";
								}
								j++;
							}
							joinQuery += "</ul></li>";
						}
					}
				}


			}
		}

		i++;
	}
	);
	joinQuery += "</ul></li></ul>";
	query += joinQuery;
	// where clause selectedTables
	var whereClauseCondition = "";
	var j = 0;
	var rowCount = $('#selectedTables >tbody >tr').length;
	$("#selectedTables tbody tr").each(function() {
		var tdArray = this.cells;
		if (tdArray != null && tdArray.length != 0) {
			var tableName = $(tdArray[0]).text();
			if (rowCount == 1) {
				query += " <font color='#F911E9'>" + tableName + "</font>";
				selectQuery += "  " + tableName + " ";
			}
			var condition = $("#whereClauseConditionsArea_" + j).val();
			if (condition != null && condition != '' && $.trim(condition)) {
				if (whereClauseCondition != null && whereClauseCondition != '') {
					whereClauseCondition += "AND " + condition;
				} else {
					whereClauseCondition += condition
				}

			}

		}
		j++;
	});
	if (whereClauseCondition != null && whereClauseCondition != '') {
		query += "<font color='#0071c5'> WHERE </font>" + whereClauseCondition;
		selectQuery += "  WHERE  " + whereClauseCondition;
	}
	var orderByObj = {};
	var i = 1;
	var rowCount = $('#fromTablesOrderCauseTable >tbody >tr').length;
	$("#fromTablesOrderCauseTable tbody tr").each(function() {
		var tdArray = this.cells;
		if (tdArray != null && tdArray.length != 0) {
			var columnName = $(tdArray[1]).find("input").val();
			var direction = $(tdArray[2]).find("option:selected").val();
			if (columnName != null && columnName != '') {
				if (i == 1) {
					query += " <font color='#0071c5'> ORDER BY </font>";
					selectQuery += "   ORDER BY  ";
				}
				var columnsArray = columnName.split(":");
				query += " <font color='#F911E9'>" + columnsArray[0] + "</font>." + columnsArray[1] + " <font color='#0071c5'>" + direction + "</font>";
				selectQuery += "  " + columnsArray[0] + "." + columnsArray[1] + "  " + direction + " ";
				if (i != parseInt(rowCount)) {
					query += " , ";
					selectQuery += " , ";
				}
			}
			i++;
		}
	});
	var groupByColumns = "";
	var rowCount = $('#fromTablesGroupCauseTable >tbody >tr').length;
	var i = 0;
	$("#fromTablesGroupCauseTable tbody tr").each(function() {
		var tdArray = this.cells;
		if (tdArray != null && tdArray.length != 0) {
			var columnName = $(tdArray[1]).find("input").val();
			if (columnName != null && columnName != '') {
				var columnsArray = columnName.split(":");
				groupByColumns += " <font color='#F911E9'>" + columnsArray[0] + "</font>." + columnsArray[1];
				if (i != parseInt(rowCount) - 1) {
					groupByColumns += ",";
				}
			}

			i++;
		}
	});
	if (groupByColumns != null && groupByColumns != '') {
		query += "<font color='#0071c5'> GROUP BY </font> " + groupByColumns;
		selectQuery += " GROUP BY  " + groupByColumns.replace("<font color='#F911E9'>", "").replace("</font>", "");
	}

	$("#" + sqlQueryTabId).html('<div id = "visionSqlViewQuery" class = "visionSqlViewQuery1"><div id="sqlQueryIcons"><img src="images/SQL ICON-01.svg" id="validateTotalQuery" '
		+ 'onclick="validateQuery()" title="Click here to validate query" style="width:15px;height: 15px;cursor:pointer;">'
		+ '<input type="hidden" id="generatedTotalQuery"/></div>' + query + '</div>');
	$("#generatedTotalQuery").val(selectQuery);
}
function showTablesListInTab() {
	showLoader();
	//var startIndex = parseInt(startIndx);
	var endIndex = $("#treePageSize").val();
	var connectionObj;
	var tableListHtml = '';
	var selectedItem = $('#savedConnections').jqxTree('selectedItem');
	var selecteddbLiItem = $('#savedConnections').jqxTree('getItem', selectedItem.parentElement);
	var parentItemLabel = selecteddbLiItem.value;
	var selectedItemLabel = selectedItem.label;
	var liId = ('li-' + parentItemLabel + '-' + selectedItemLabel);
	var divId = ('div-' + parentItemLabel + '-' + selectedItemLabel);
	currentTabId = divId;
	var splitterHeight = (parseInt($(window).height()) - parseInt(pageHeight));
	var value = parentItemLabel;
	var parentkey = selectedItem.value;
	var level = selectedItem.level;
	var filterId = divId.replace("div-", "filter-");
	var filterInput = '<div class ="visionFilterObjectsDiv"><input id="' + filterId + '" class="visionFilterObjectsInput" onkeyup="filterTables(event)" type="text" autocomplete="off" placeholder="Search Tables" value=""/></div>'

	var selectedItemIndex = $('#jqxtabs').jqxTabs('selectedItem');
	if (selectedItemIndex != null) {
		var html = $('#jqxtabs').html();
		if (html.indexOf(divId) > -1) {
			var length = $('#jqxtabs').jqxTabs('length');
			for (var i = 0; i < length; i++) {
				var content = $('#jqxtabs').jqxTabs('getContentAt', i);
				var id = $(content).attr("id");
				if ($(content).attr("id") == divId) {
					showEtlList("schemaObjectsDiv", "schemaObjects");
					$('#jqxtabs').jqxTabs('select', i);
					break;
				}
			}
			stopLoader();
			return false;
		}

	}

	if (savedDBData != null && !jQuery.isEmptyObject(savedDBData)) {
		var conObj = savedDBData[value];
		if (conObj != null && !jQuery.isEmptyObject(conObj)) {
			connectionObj = conObj;
		}

	}
	var columnsObj = globalTreeObj['treeColumnObj'];
	var extTreeParams = $("#extTreeParams").val();
	var data = {
		parentkey: parentkey,
		treeId: globalTreeObj['treeId'],
		level: level,
		extTreeParams: extTreeParams,
		columnsObj: JSON.stringify(columnsObj),
		connectionObj: JSON.stringify(connectionObj),
		startIndex: 0,
		endIndex: endIndex
	};
	//    var url = 'getTreePagingDataOpt';
	var url = 'getETLTreePagingDataOpt';
	if (selectedItem.level > 3) {
		var parentEventItem = selectedItem.element;
		var immideateParent = parentEventItem.parentElement.parentElement;
		immideateParent = immideateParent.parentElement.parentElement;
		for (var i = level; i > 1; i--) {
			parentEventItem = parentEventItem.parentElement.parentElement;
		}
		var selectedSuperParentItem = $('#savedConnections').jqxTree('getItem', parentEventItem);
		var selectedParentValue = selectedSuperParentItem['value'];
		if (selectedParentValue != null && selectedParentValue != '' &&
			selectedParentValue != undefined && selectedParentValue == 'ERP') {
			url = 'getTreeErpConnectionDetails';
			var immideateParentItem = $('#savedConnections').jqxTree('getItem', immideateParent);
			var immideateParentValue = immideateParentItem['value'];
			if (immideateParentValue == "Oracle_ERP") {
				//                url = 'getTreePagingDataOpt';
				url = 'getETLTreePagingDataOpt';
			}
		}
	}
	//    if (selecteddbLiItem != null) {
	//        var selectedParentValue = selecteddbLiItem['value'];
	//        if (selectedParentValue != null && selectedParentValue != ''
	//                && selectedParentValue != undefined && selectedParentValue == 'ERP')
	//        {
	//            url = 'getTreeErpConnectionDetails';
	//        }
	//    }
	$.ajax({
		type: "post",
		traditional: true,
		dataType: 'json',
		url: url,
		cache: false,
		data: data,
		success: function(data, status, xhr) {
			//            $(".showEtlIcons").css("margin-top", "223px");
			//            $(".showEtlIcons").css("margin-left", "-265");
			stopLoader();
			showEtlList("schemaObjectsDiv", "schemaObjects");
			stopLoader();
			tableListHtml += '<div id ="' + divId + '-div" class ="visionSchemaObjectsListDiv">';
			$.each(data, function(index) {
				if (this.value == "Show More") {

				} else {
					tableListHtml += '<div title="' + connectionObj['CONNECTION_NAME'] + ' . ' + this.label + '" class = "visionObjectNameDiv" style="cursor:pointer">'
						+ '<img class="visionTableIcon" src="images/GridDB.svg"/>'
						+ '<span> ' + this.label + '</span></div>'
				}
			});
			tableListHtml += '</div>';
			if (selectedItemIndex != null) {
				$('#jqxtabs').jqxTabs('addLast', selectedItem.label, tableListHtml);
			} else {
				$("#jqxtabs").find("ul").append('<li title="' + liId.replace("li-", "").replace("-", ".") + '">' + selectedItem.label + ' </li>'); // <img src="images/delete_icon_white.png" id="'+liId.replace("li_","close_")+'" class ="visionCloseTab" onclick = "closeCurrentTab(event)" />
				$("#jqxtabs").append('<div id="' + divId + '" class="visionObjectsListDiv">' + filterInput + tableListHtml + '</div>');
				$('#jqxtabs').jqxTabs({ width: "100%", height: "100%", position: 'top', theme: 'ui-redmond', reorder: true });
				$('#jqxtabs').jqxTabs('showAllCloseButtons');
				$("#jqxtabs").find("li.jqx-tabs-title").find("div.jqx-tabs-close-button").css("background-image", "url(images/close.png)");
				$("#jqxtabs").find("li.jqx-tabs-title-selected-top").find("div.jqx-tabs-close-button").css("background-image", "url(images/close.png)");
				var height = $('#connectionsDiv').height();
				var width = $('#connectionsDiv').width();
				$('#schemaObjectsDiv').css("height", height);
				$('#schemaObjectsDiv').css("width", width);
			}

			$('#jqxtabs').unbind('selected').on('selected', function(event) {
				var $thid = this;
				$("#jqxtabs").find("li.jqx-tabs-title").find("div.jqx-tabs-close-button").css("background-image", "url(images/close.png)");
				$("#jqxtabs").find("li.jqx-tabs-title-selected-top").find("div.jqx-tabs-close-button").css("background-image", "url(images/close.png)");
			});
			$('#jqxtabs').unbind('add').on('add', function(event) {
				var tabContent = $('#jqxtabs').jqxTabs('getContentAt', event.args.item);
				//                tabContent.id = currentTabId;
				$(tabContent).attr("class", "visionObjectsListDiv");
				$(tabContent).attr("id", currentTabId);
				//                tabContent.attr("class", "visionObjectsListDiv");

				var filterId = currentTabId.replace("div-", "filter-");
				var filterInput = '<div class ="visionFilterObjectsDiv"><input id="' + filterId + '" class="visionFilterObjectsInput" onkeyup="filterTables(event)" autocomplete="off"  type="text" placeholder="Search Tables" value=""/></div>'
				$(tabContent).prepend(filterInput);
				$("#jqxtabs").find("li.jqx-tabs-title").find("div.jqx-tabs-close-button").css("background-image", "url(images/close.png)");
				$("#jqxtabs").find("li.jqx-tabs-title-selected-top").find("div.jqx-tabs-close-button").css("background-image", "url(images/close.png)");
				//var title = $('#jqxtabs').jqxTabs('getTitleAt',event.args.item);
				var selectedTabLi = $("#jqxtabs").find("li.jqx-tabs-title-selected-top");
				//                var cancelButton = selectedTabLi.find("div.jqx-tabs-close-button-selected");
				//                cancelButton.css("background-image","url(images/close.png)");
				$(selectedTabLi).attr("title", currentTabId.replace("div-", "").replace("-", "."));
				// $('#jqxtabs').jqxTabs('select', event.args.item); 
			});
			var i = 0;
			var singleSelectedItem;
			$("div.visionObjectNameDiv").click(function(e) {
				if (e.ctrlKey) {
					$(this).toggleClass("selectedTabs");
					if (singleSelectedItem !== null && singleSelectedItem !== '' && singleSelectedItem !== undefined) {
						selectedItems[0] = singleSelectedItem;
					}
					selectedItems[i] = $(this).text();
					i++;
				} else {
					$(this).addClass("selectedTabs").siblings().removeClass('selectedTabs');
					singleSelectedItem = $(this).text();
					selectedItems = [];
					if (singleSelectedItem !== null && singleSelectedItem !== '' && singleSelectedItem !== undefined) {
						i = 1;
					} else {
						i = 0;
					}

				}
			});
			var timeout;
			$(".visionObjectsListDiv").unbind("scroll").on("scroll", function(event) {
				console.log("scrolled ;;")
				if (($(this).scrollTop() + $(this).innerHeight() >= $(this)[0].scrollHeight) && ($(this)[0].scrollHeight > $(this).innerHeight())) {
					console.log("iam in scroll functionality...........");
					clearTimeout(timeout);
					timeout = setTimeout(function() {
						loadOnScrollDown(event);
					}, 50);
				}
			});
			$("div.visionObjectNameDiv").draggable({
				cursor: "move",
				opacity: 0.7,
				helper: 'clone',
				//                                appendTo: 'body',
				zIndex: 1000,
				helper: function(event, ui) {
					var $this = $(this);
					var innerText = $this.text();
					var title = innerText;
					var descripttion = $this.attr("title");
					var value = this.parentElement.id.split("-")[1];
					var connectionObj;
					if (savedDBData != null && !jQuery.isEmptyObject(savedDBData)) {
						var conObj = savedDBData[value];
						if (conObj != null && !jQuery.isEmptyObject(conObj)) {
							connectionObj = conObj;
						}

					}

					var operatorData = {
						top: event.screenX,
						left: event.screenY,
						statusLabel: innerText.trim(),
						tableName: (connectionObj['CONN_CUST_COL1'] != 'SAP_ECC' && connectionObj['CONN_CUST_COL1'] != 'SAP_HANA') ? (connectionObj['CONN_USER_NAME'] + '.' + innerText.trim()) : innerText.trim(),
						//                        tableName: connectionObj['CONN_USER_NAME'] + "." + innerText.trim(),
						dragType: "Table",
						CONNECTION_NAME: connectionObj['CONNECTION_NAME'], //CONNECTION_NAME
						CONN_DB_NAME: connectionObj['CONN_DB_NAME'], //CONN_DB_NAME
						CONN_CUST_COL1: connectionObj['CONN_CUST_COL1'], //CONN_CUST_COL1
						connObj: connectionObj,
						properties: {
							//body: '<div title="' + innerText + '" class="visionOpLabelDiv">' + innerText + '</div>',
							body: '<div  title="' + connectionObj['CONNECTION_NAME'] + ' . ' + title + '" class=""><div title="Double Click here to view the Transformations rules(' + connectionObj['CONNECTION_NAME'] + '.' + title + ')" style="cursor:pointer"><img src="images/GridDB.svg"'
								+ 'class="visionOpIcons"  ondblclick=viewTrfmRules()  style="width:18px;height: 18px;padding-top: 6px;"/></div>'

								+ '</div><div class="visionOpLabelDiv" title="Double click to Rename" ondblclick="renameOperatorDisplayLabel(\'' + title + '\',this)" style="width:' + (title.length * 5) + 'px;margin-left:' + (((title.length * -5) / 2) + 14) + 'px;">' + title + '</div>',
							inputs: {
								input_1: {
									label: '',
									multipleLinks: true
								}
							},
							outputs: {
								output_1: {
									label: '',
								}
							}
						}
					};
					//            var obj = $('#'+flowChartWorkSpaceId).flowchart('getOperatorElement', operatorData);
					var contentSplitterStyle = $("#contentSplitter").css("display");
					var contentSplitter1Style = $("#contentSplitter1").css("display");
					var $flowchart;
					$flowchart = $('#' + flowChartWorkSpaceId);
					$("#draggableOperatorId").remove();
					var body = '<div id="draggableOperatorId" title="' + connectionObj['CONNECTION_NAME'] + ' . ' + this.label + '" class = "visionObjectNameDiv" style="cursor:pointer">'
						+ '<img class="visionTableIcon" src="images/GridDB.svg"/>'
						+ '<span> ' + innerText + '</span></div>';
					$("body").append(body);
					return $("#draggableOperatorId");
					//                    return  $flowchart.flowchart('getOperatorElement', operatorData);
					//                    return  $('#'+flowChartWorkSpaceId).flowchart('getOperatorElement', operatorData);
				},
				stop: function(e, ui) {
					var selItems = [];
					if (!(selectedItems != null && selectedItems.length != null && selectedItems.length > 0)) {
						selItems[0] = this.innerText;
					} else {
						selItems = selectedItems;
						//                        for (var i = 0; i < selectedItems.length; i++) {
						//                            selItems[i] = selectedItems[i];
						//                        }
					}
					$(".flowchart-operator-connector-label").hide();
					var contentSplitterStyle = $("#contentSplitter").css("display");
					var contentSplitter1Style = $("#contentSplitter1").css("display");
					var $flowchart;
					var $container;
					$flowchart = $('#' + flowChartWorkSpaceId);
					$container = $('#' + flowChartWorkSpaceId);
					//                    var $flowchart = $('#'+flowChartWorkSpaceId);
					//
					//                    var $container = $('#'+flowChartWorkSpaceId);
					var elOffset = ui.offset;
					var containerOffset = $container.offset();
					if (elOffset.left > containerOffset.left &&
						elOffset.top > containerOffset.top &&
						elOffset.left < containerOffset.left + $container.width() &&
						elOffset.top < containerOffset.top + $container.height()) {
						var flowchartOffset = $flowchart.offset();
						var relativeLeft = elOffset.left - flowchartOffset.left;
						var relativeTop = elOffset.top - flowchartOffset.top;
						var positionRatio = $flowchart.flowchart('getPositionRatio');
						relativeLeft /= positionRatio;
						relativeTop /= positionRatio;
						elOffset.left = relativeLeft;
						elOffset.top = relativeTop;
					}
					var top = elOffset.top;
					for (var j = 0; j < selItems.length; j++) {
						// ravi start
						trfmRulesChanged = true;
						// ravi end
						var $this = $(this);
						var innerText = selItems[j];
						var title = innerText;
						var value = this.parentElement.id.split("-")[1];
						var connectionObj;
						if (savedDBData != null && !jQuery.isEmptyObject(savedDBData)) {
							var conObj = savedDBData[value];
							if (conObj != null && !jQuery.isEmptyObject(conObj)) {
								connectionObj = conObj;
							}

						}


						var data = {
							top: top,
							left: elOffset.left,
							statusLabel: innerText.trim(),
							tableName: (connectionObj['CONN_CUST_COL1'] != 'SAP_ECC' && connectionObj['CONN_CUST_COL1'] != 'SAP_HANA') ? (connectionObj['CONN_USER_NAME'] + '.' + innerText.trim()) : innerText.trim(),
							//                            tableName: connectionObj['CONN_USER_NAME'] + "." + innerText.trim(),
							CONNECTION_NAME: connectionObj['CONNECTION_NAME'], //CONNECTION_NAME
							CONN_DB_NAME: connectionObj['CONN_DB_NAME'], //CONN_DB_NAME
							CONN_CUST_COL1: connectionObj['CONN_CUST_COL1'], //CONN_CUST_COL1
							dragType: "Table",
							connObj: connectionObj,
							//                statusLabel: innerText,
							properties: {

								//                                title: innerText,
								//  body: '<div  title="' + title + '"  class="visionOpLabelDiv">' + innerText + '</div>',
								body: '<div  title="' + connectionObj['CONNECTION_NAME'] + ' . ' + title + '" class=""><div title="Double Click here to view the Transformations rules(' + connectionObj['CONNECTION_NAME'] + '.' + title + ')" style="cursor:pointer"><img src="images/GridDB.svg"'
									+ 'class="visionOpIcons"  ondblclick=viewTrfmRules()  style="width:18px;height: 18px;padding-top: 6px;"/></div>'

									+ '</div><div class="visionOpLabelDiv" title="Double click to Rename" ondblclick="renameOperatorDisplayLabel(\'' + title + '\',this)" style="width:' + (title.length * 5) + 'px;margin-left:' + (((title.length * -5) / 2) + 14) + 'px;">' + title + '</div>',
								inputs: {
									input_1: {
										label: 'I-MAP',
										multipleLinks: true
									}
								},
								outputs: {
									output_1: {
										label: 'O-MAP',
									}
								}
							}
						};
						var operatorId = $flowchart.flowchart('addOperator', data);
						//                        $dataModellerFlowchart.flowchart('addOperator', data);
						$(".flowchart-operator-connector-label").hide();
						$(".flowchart-operator-title").hide();
						top = top + 70;
						//                        var component = $(this).attr("component");
						//                        if (component != "Y") {
						//                            inputOutPutPopUp(operatorId);
						//                        }
					}
				}

			});
		},
		error: function(e) {
			console.log(e);
			sessionTimeout(e);
			stopLoader();
		}
	});
}

var timeOut = null;
function filterTables(event) {

	clearTimeout(timeOut);
	timeOut = setTimeout(function() {
		showLoader();
		var inputValue = $(event.target).val();
		//if (inputValue.length<3){
		//    return false;
		//}
		var filterValue = $(event.target).val();
		if (filterValue != null && filterValue != "") {
			filterValue = "%" + filterValue + "%";
		}
		var inputId = $(event.target).attr("id");
		var divId = inputId.replace("filter-", "div-");
		var dbLabel = inputId.split("-")[1];
		var selectedLevelValue = inputId.split("-")[2].toUpperCase();
		var selectConnObj = savedDBData[dbLabel];
		var selectedLevel = '4'
		var selectColumnsObj = globalTreeObj['treeColumnObj']
		var selectBoxValue = "LIKE"

		selectedLevelValue = selectedLevelValue.toUpperCase();
		var item = $("#savedConnections").jqxTree('getSelectedItem');
		//        var url = 'getTreePagingDataOpt';
		var url = 'getETLTreePagingDataOpt';
		if (item != null) {
			var level = item['level'];
			var parentEventItem = item['parentElement'];
			var immideateParent = parentEventItem['parentElement'];
			immideateParent = immideateParent['parentElement'];
			for (var i = level; i > 0; i--) {
				parentEventItem = parentEventItem['parentElement'];
			}
			var selectedItem = $('#savedConnections').jqxTree('getItem', parentEventItem);
			var selectedParentValue = selectedItem['value'];
			if (selectedParentValue != null && selectedParentValue != ''
				&& selectedParentValue != undefined && selectedParentValue == 'ERP') {
				url = 'getTreeErpConnectionDetails';
				var immideateParentItem = $('#savedConnections').jqxTree('getItem', immideateParent);
				var immideateParentValue = immideateParentItem['value'];
				if (immideateParentValue == "Oracle_ERP") {
					//                    url = 'getTreePagingDataOpt';
					url = 'getETLTreePagingDataOpt';
				}

			}
		}
		$.ajax({
			type: "post",
			traditional: true,
			dataType: 'json',
			url: url,
			cache: false,
			data: {
				parentkey: ((selectedLevelValue != null && selectedLevelValue != '') ? selectedLevelValue.toUpperCase() : ""),
				level: selectedLevel,
				columnsObj: JSON.stringify(selectColumnsObj),
				connectionObj: JSON.stringify(selectConnObj),
				filterValue: filterValue,
				filterCondition: selectBoxValue,
				startIndex: 0,
				endIndex: $("#treePageSize").val()
			},
			success: function(data, status, xhr) {
				var tableListHtml = "";
				stopLoader();
				$.each(data, function(index) {
					if (this.label == "Show More...") {

					} else {
						tableListHtml += '<div class = "visionObjectNameDiv" style="cursor:pointer"><img class="visionTableIcon" src="images/GridDB.svg"/><span> ' + this.label + '</span></div>'
					}
				});
				//            var filterInput = '<div class ="visionFilterObjectsDiv"><input id="' + inputId + '" class="visionFilterObjectsInput" onkeyup="filterTables(event)" type="text" placeholder="Search Tables" /></div>'
				//            $("[id='" + divId + "']").html(filterInput + tableListHtml);
				//            $("[id='" + inputId + "']").focus();
				//            $("[id='" + inputId + "']").val(inputValue);

				$("[id='" + divId + "-div']").html(tableListHtml);
				selectedItems = [];
				var i = 0;
				var singleSelectedItem;
				$("div.visionObjectNameDiv").click(function(e) {
					$(document).find("input").blur();
					if (e.ctrlKey) {
						$(this).toggleClass("selectedTabs");
						if (singleSelectedItem !== null && singleSelectedItem !== '' && singleSelectedItem !== undefined) {
							selectedItems[0] = singleSelectedItem;
						}
						selectedItems[i] = $(this).text();
						i++;
					} else {
						$(this).addClass("selectedTabs").siblings().removeClass('selectedTabs');
						singleSelectedItem = $(this).text();
						selectedItems = [];
						if (singleSelectedItem !== null && singleSelectedItem !== '' && singleSelectedItem !== undefined) {
							i = 1;
						} else {
							i = 0;
						}

					}
				});
				$("div.visionObjectNameDiv").draggable({
					cursor: "move",
					opacity: 0.7,
					helper: 'clone',
					//                                appendTo: 'body',
					zIndex: 1000,
					helper: function(event, ui) {
						var $this = $(this);
						var innerText = $this.text();
						var title = innerText;
						var descripttion = $this.attr("title");
						var value = this.parentElement.id.split("-")[1];
						var connectionObj;
						if (savedDBData != null && !jQuery.isEmptyObject(savedDBData)) {
							var conObj = savedDBData[value];
							if (conObj != null && !jQuery.isEmptyObject(conObj)) {
								connectionObj = conObj;
							}

						}

						var operatorData = {
							top: event.screenX,
							left: event.screenY,
							statusLabel: innerText.trim(),
							tableName: (connectionObj['CONN_CUST_COL1'] != 'SAP_ECC' && connectionObj['CONN_CUST_COL1'] != 'SAP_HANA') ? (connectionObj['CONN_USER_NAME'] + '.' + innerText.trim()) : innerText.trim(),
							//                            tableName: connectionObj['CONN_USER_NAME'] + "." + innerText.trim(),
							dragType: "Table",
							CONNECTION_NAME: connectionObj['CONNECTION_NAME'], //CONNECTION_NAME
							CONN_DB_NAME: connectionObj['CONN_DB_NAME'], //CONN_DB_NAME
							CONN_CUST_COL1: connectionObj['CONN_CUST_COL1'], //CONN_CUST_COL1
							connObj: connectionObj,
							properties: {
								//body: '<div title="' + innerText + '" class="visionOpLabelDiv">' + innerText + '</div>',

								body: '<div  title="' + connectionObj['CONNECTION_NAME'] + ' . ' + title + '" class=""><div title="Double Click here to view the Transformations rules(' + connectionObj['CONNECTION_NAME'] + '.' + title + ')" style="cursor:pointer"><img src="images/GridDB.svg"'
									+ 'class="visionOpIcons"  ondblclick=viewTrfmRules()  style="width:18px;height: 18px;padding-top: 6px;"/></div>'

									+ '</div><div class="visionOpLabelDiv" title="Double click to Rename" ondblclick="renameOperatorDisplayLabel(\'' + title + '\',this)" style="width:' + (title.length * 5) + 'px;margin-left:' + (((title.length * -5) / 2) + 14) + 'px;">' + title + '</div>',
								inputs: {
									input_1: {
										label: '',
										multipleLinks: true
									}
								},
								outputs: {
									output_1: {
										label: '',
									}
								}
							}
						};
						//            var obj = $('#'+flowChartWorkSpaceId).flowchart('getOperatorElement', operatorData);
						var contentSplitterStyle = $("#contentSplitter").css("display");
						var contentSplitter1Style = $("#contentSplitter1").css("display");
						var $flowchart;
						$flowchart = $('#' + flowChartWorkSpaceId);
						$("#draggableOperatorId").remove();
						var body = '<div id="draggableOperatorId" title="' + connectionObj['CONNECTION_NAME'] + ' . ' + this.label + '" class = "visionObjectNameDiv" style="cursor:pointer">'
							+ '<img class="visionTableIcon" src="images/GridDB.svg"/>'
							+ '<span> ' + innerText + '</span></div>';
						$("body").append(body);
						return $("#draggableOperatorId");
					},
					stop: function(e, ui) {
						$(document).find("input").blur();
						var selItems = [];
						if (!(selectedItems != null && selectedItems.length != null && selectedItems.length > 0)) {
							selItems[0] = this.innerText;
						} else {
							selItems = [];
							for (var i = 0; i < selectedItems.length; i++) {
								selItems[i] = selectedItems[i];
							}
						}
						$(".flowchart-operator-connector-label").hide();
						var contentSplitterStyle = $("#contentSplitter").css("display");
						var contentSplitter1Style = $("#contentSplitter1").css("display");
						var $flowchart;
						var $container;
						$flowchart = $('#' + flowChartWorkSpaceId);
						$container = $('#' + flowChartWorkSpaceId);
						//                        var $flowchart = $('#'+flowChartWorkSpaceId);
						//                        var $container = $('#'+flowChartWorkSpaceId);
						var elOffset = ui.offset;
						var containerOffset = $container.offset();
						if (elOffset.left > containerOffset.left &&
							elOffset.top > containerOffset.top &&
							elOffset.left < containerOffset.left + $container.width() &&
							elOffset.top < containerOffset.top + $container.height()) {
							var flowchartOffset = $flowchart.offset();
							var relativeLeft = elOffset.left - flowchartOffset.left;
							var relativeTop = elOffset.top - flowchartOffset.top;
							var positionRatio = $flowchart.flowchart('getPositionRatio');
							relativeLeft /= positionRatio;
							relativeTop /= positionRatio;
							elOffset.left = relativeLeft;
							elOffset.top = relativeTop;
						}
						var top = elOffset.top;
						for (var j = 0; j < selItems.length; j++) {
							var $this = $(this);
							var innerText = selItems[j];
							var title = innerText;
							var value = this.parentElement.id.split("-")[1];
							var connectionObj;
							if (savedDBData != null && !jQuery.isEmptyObject(savedDBData)) {
								var conObj = savedDBData[value];
								if (conObj != null && !jQuery.isEmptyObject(conObj)) {
									connectionObj = conObj;
								}

							}

							var data = {
								top: top,
								left: elOffset.left,
								statusLabel: innerText.trim(),
								tableName: (connectionObj['CONN_CUST_COL1'] != 'SAP_ECC' && connectionObj['CONN_CUST_COL1'] != 'SAP_HANA') ? (connectionObj['CONN_USER_NAME'] + '.' + innerText.trim()) : innerText.trim(),
								//                                tableName: connectionObj['CONN_USER_NAME'] + "." + innerText.trim(),
								dragType: "Table",
								connObj: connectionObj,
								CONNECTION_NAME: connectionObj['CONNECTION_NAME'], //CONNECTION_NAME
								CONN_DB_NAME: connectionObj['CONN_DB_NAME'], //CONN_DB_NAME
								CONN_CUST_COL1: connectionObj['CONN_CUST_COL1'], //CONN_CUST_COL1
								//                statusLabel: innerText,
								properties: {

									//                                title: innerText,
									//  body: '<div  title="' + title + '"  class="visionOpLabelDiv">' + innerText + '</div>',
									body: '<div  title="' + connectionObj['CONNECTION_NAME'] + ' . ' + title + '" class=""><div title="Double Click here to view the Transformations rules(' + connectionObj['CONNECTION_NAME'] + '.' + title + ')" style="cursor:pointer"><img src="images/GridDB.svg"'
										+ 'class="visionOpIcons"  ondblclick=viewTrfmRules()  style="width:18px;height: 18px;"/></div>'

										+ '</div><div class="visionOpLabelDiv" title="Double click to Rename" ondblclick="renameOperatorDisplayLabel(\'' + title + '\',this)" style="width:' + (title.length * 5) + 'px;margin-left:' + (((title.length * -5) / 2) + 14) + 'px;">' + title + '</div>',
									inputs: {
										input_1: {
											label: 'I-MAP',
											multipleLinks: true
										}
									},
									outputs: {
										output_1: {
											label: 'O-MAP',
										}
									}
								}
							};
							var operatorId = $flowchart.flowchart('addOperator', data);
							$(".flowchart-operator-connector-label").hide();
							$(".flowchart-operator-title").hide();
							top = top + 70;
							//                            var component = $(this).attr("component");
							//                            if (component != "Y") {
							//                                inputOutPutPopUp(operatorId);
							//                            }
						}
					}
				});
				stopLoader();
			},
			error: function(e) {
				console.log(e);
				sessionTimeout(e);
				stopLoader();
			}
		});
	}, 1000);
}


function viewTableData(DBValue, parentkey, connectionObj) {
	showLoader();
	
	var selectedOperatorId = $('#' + flowChartWorkSpaceId).flowchart('getSelectedOperatorId');
	var selectedOperatorData = $('#' + flowChartWorkSpaceId).flowchart('getOperatorData', selectedOperatorId);

	var iconType = selectedOperatorData["iconType"];
	if (iconType != null && (iconType == 'PIVOT' || iconType == 'UNPIVOT')) {
		var conObj = savedDBData["Current_V10"]
		if (conObj != null && !jQuery.isEmptyObject(conObj)) {
			connectionObj = conObj;
		}
		DBValue = "Current_V10";

		var trfmRules = selectedOperatorData['trfmRules'];
		if (trfmRules != null) {
			if (trfmRules['createTableName'] != null && trfmRules['createTableName'] != "") {
				parentkey = trfmRules['createTableName'];
			} else {
				stopLoader();
				showMesg("Please provide Table Name");
				return false;

			}


		}

	}

	//    var DBValue;
	var tableName;
	var connName;
	//    var parentkey;
	var extTreeParams = $("#extTreeParams").val();
	var columnsObj = globalTreeObj['treeColumnObj'];
	var target = $("#jqxtabs").find(".visionSelectedObject")[0];
	if (!(parentkey != null && parentkey != '' && DBValue != null && DBValue != '')) {
		if (target != null) {
			tableName = target.textContent.trim();
			var div = $(target).parents('div.visionObjectsListDiv')[0];
			var divId = div.id;
			parentkey = target.textContent.trim().toUpperCase();
			DBValue = divId.split("-")[1];
			var liItems = $("#savedConnections").find("li :contains('" + DBValue + "')");
			$.each(liItems, function(index) {
				var liItem = $('#savedConnections').jqxTree('getItem', this);
				if (liItem != null && liItem.level == 3 && liItem.value == DBValue) {

					var connItem = this.parentElement.parentElement;
					var selectedConnItem = $('#savedConnections').jqxTree('getItem', connItem);
					if (selectedConnItem != null && selectedConnItem.level == 2) {
						connName = selectedConnItem.value;
					}
					stopLoader();
					return false;
				}

			})

			// var selectedDBItem = $('#savedConnections').jqxTree('getItem', dbItem);
			//DBValue = selectedDBItem['value'];

			//        var connItem = dbItem.parentElement.parentElement;
			//        var selectedConnItem = $('#savedConnections').jqxTree('getItem', connItem);
			//        if (selectedConnItem.level==2){
			//             connName = selectedConnItem.value;
			//        }

			//            tableName = target.textContent.trim();
			//            var div = $(target).parents('div.visionObjectsListDiv')[0];
			//            var divId = div.id;
			//
			//            parentkey = target.textContent.trim().toUpperCase();
			//
			//            DBValue = divId.split("-")[1];
		} else {
			var parentItem = $('#savedConnections').jqxTree('getSelectedItem');
			tableName = parentItem.label;
			parentkey = parentItem.value
			var $element = $(parentItem.element);
			var dbItem = parentItem.element.parentElement.parentElement.parentElement.parentElement;
			//var dbItemvalue = parentItem.element.parentElement.parentElement.parentElement.parentElement.children[2].title;

			var selectedDBItem = $('#savedConnections').jqxTree('getItem', dbItem);
			DBValue = selectedDBItem['value'];
			var connItem = dbItem.parentElement.parentElement;
			var selectedConnItem = $('#savedConnections').jqxTree('getItem', connItem);
			if (selectedConnItem.level == 2) {
				connName = selectedConnItem.value;
			}

			//            var parentItem = $('#savedConnections').jqxTree('getSelectedItem');
			//            tableName = parentItem.label;
			//            parentkey = parentItem.value
			//            var $element = $(parentItem.element);
			//
			//            var dbItem = parentItem.element.parentElement.parentElement.parentElement.parentElement
			//            //var dbItemvalue = parentItem.element.parentElement.parentElement.parentElement.parentElement.children[2].title;
			//
			//            var selectedDBItem = $('#savedConnections').jqxTree('getItem', dbItem);
			//            DBValue = selectedDBItem['value'];
		}
	}

	if (!(tableName != null && tableName != '')) {
		tableName = parentkey;
	}



	var contentDivId = ("divGrid-" + DBValue + "-" + tableName).replace(/\s/g, '');
	var selectedItemIndex = $('#dataViewDiv').jqxTabs('selectedItem');
	if (selectedItemIndex != null) {
		var html = $('#dataViewDiv').html();
		if (html.indexOf('"' + contentDivId + '"') > -1
			|| html.indexOf('"' + contentDivId.replace(/\//g, '') + '"') > -1) {
			var length = $('#dataViewDiv').jqxTabs('length');
			for (var i = 0; i < length; i++) {
				var content = $('#dataViewDiv').jqxTabs('getContentAt', i);
				var id = $(content).children('div:nth-child(3)').attr("id");
				if (id == null) {
					id = $(content).children('div:first').children('div:nth-child(3)').attr("id");
				}
				if (id == contentDivId || id == contentDivId.replace(/\//g, '')) {

					switchETLDesignTabs("li_contentView", "dataViewDiv");
					$('#dataViewDiv').jqxTabs('select', i);
					if (connName == "SAP_HANA" || connName == "SAP_ECC") {
						$('#dataViewDiv').jqxTabs('removeAt', i);
					}
					stopLoader()
					break;
				}

			}
			if (connName == "SAP_HANA" || connName == "SAP_ECC") {
			} else {
				stopLoader();
				return false;
			}

		}

	}



	if (connectionObj == null || connectionObj == 'undefined') {
		if (savedDBData != null && !jQuery.isEmptyObject(savedDBData)) {
			var conObj = savedDBData[DBValue];
			if (conObj != null && !jQuery.isEmptyObject(conObj)) {
				connectionObj = conObj;
			}

		}
	}


	var data = {
		parentkey: parentkey,
		treeId: globalTreeObj['treeId'],
		level: '5',
		extTreeParams: extTreeParams,
		columnsObj: JSON.stringify(columnsObj),
		connectionObj: JSON.stringify(connectionObj),
		startIndex: 0,
		endIndex: $("#treePageSize").val(),
		DBValue: DBValue,
		tableName: tableName
	};
	if (connName == null) { // ----------------ravi sap issue
		connName = connectionObj['CONN_CUST_COL1'];
	}
	//    if (connName == "SAP") {
	//        selectSapTableColumns(data);
	//    } else {
	//        viewTableDataGrid(data);
	//    }
	viewTableDataGrid(data);
}


function searchTreeNode(treeId) {

	$('#' + treeId).jqxTree('collapseAll');
	var items = $('#' + treeId).jqxTree("getItems");
	var searchedValue = $("#treeSearchValue").val();
	if (searchedValue != null && searchedValue != '') {
		$("#searchTreeErrorMesg").hide();
		searchedValue = searchedValue.toUpperCase();
		var itemFound = false;
		for (var i = 0; i < items.length; i++) {
			//.toLowerCase().indexOf(searchedValue)
			if (items[i].level != 0) { // ravi colums search issue
				//                var treeNodeValue = items[i].value;
				var treeNodeValue = items[i].label; // ravi colums search issue
				if (treeNodeValue != null && treeNodeValue != '') {
					treeNodeValue = treeNodeValue.toUpperCase();
					if (treeNodeValue.indexOf(searchedValue) > -1) {
						if (!($(items[i].element).hasClass("searched"))) {
							itemFound = true;
							$(items[i].element).addClass("searched");
							$('#' + treeId).jqxTree('expandItem', items[i].parentElement);
							$('#' + treeId).jqxTree('selectItem', items[i]);
							var elementTop = items[i].element['offsetTop'];
							$("#" + treeId).animate({
								scrollTop: parseInt(elementTop) - 100
							});
							break;
						}
					}
				}
			}
		}
		if (!itemFound) {
			$('#' + treeId + ' li').removeClass("searched");
		}
	} else {
		$("#searchTreeErrorMesg").html("Please provide value to search in tree");
		$("#searchTreeErrorMesg").show();
	}

}

//function downloadExportedFile(fileName, orginalName) {
////    $("#fileName").val(fileName);
////    $("#orginalName").val(orginalName);
////    $("#exportFinalData").submit();
//    $.ajax({
//        type: 'post',
//        cache: false,
//        dataType: 'json',
//        url: 'downloadExportedFile',
//        data: {
//            fileName: fileName,
//            orginalName: orginalName
//        },
//        success: function (response) {
//            stopLoader();
//        },
//        error: function (e)
//        {
//            sessionTimeout(e);
//
//        }
//
//    });
//
//}

function downloadExportedFile(fileName, orginalName) {

	$("#exportFinalData").remove();
	var formStr = '<form id="exportFinalData" action="downloadExportedFile" method="POST" target="_blank">'
		+ '<input type="hidden" name="fileName" id="fileName"/>'
		+ '<input type="hidden" name="orginalName" id="orginalName"/>'
		+ '</form>';
	$("#pageBody").append(formStr);
	$("#fileName").val(fileName);
	$("#orginalName").val(orginalName);
	$("#exportFinalData").submit();
	//    setTimeout(function(){
	$("#exportFinalData").remove();
	//    },1000);


}

function selectColumnFun($this, tableColType) {
	//    showLoader();
	labelObject = {};
	try {
		labelObject = JSON.parse($("#labelObjectHidden").val());
	} catch (e) {

	}
	var selectedRowData = "";
	//dddw
	// prepare the data
	var data = [];
	var dataStr = $("#functionNameObj").val();
	if (dataStr != null && dataStr != '') {
		data = JSON.parse(dataStr);
		var source =
		{
			dataType: "json",
			dataFields: [
				{ name: "FUN_ID", type: "string" },
				{ name: "FUN_DISP_NAME", type: "string" },
				{ name: "FUN_DESCR", type: "string" },
				{ name: "FUN_NAME", type: "string" },
				{ name: "HL_FUN_ID", type: "string" },
				{ name: "FUN_FORM_ID", type: "string" },
				{ name: "FUN_LVL_TYPE", type: "string" },
				{ name: "DM_FUN_CUST_COL1", type: "string" },
				{ name: "DM_FUN_CUST_COL2", type: "string" },
				{ name: "ICON_PATH", type: "string" }
			],
			hierarchy:
			{
				keyDataField: { name: 'FUN_ID' },
				parentDataField: { name: 'HL_FUN_ID' }
			},
			id: 'FUN_ID',
			localData: data
		};
		var dataAdapter = new $.jqx.dataAdapter(source);
		// create jqxTreeGrid.

		$("#columnMappingDialog").html("<div id='visionEtlColFuncText'></div><div id='columnMappingTree' class='columnMappingTree'></div>");
		$("#columnMappingDialog").dialog({
			title: (labelObject['Functions'] != null ? labelObject['Functions'] : 'Functions'),
			modal: true,
			width: 400,
			maxWidth: 1000,
			height: 400,
			fluid: true,
			buttons: [{
				text: (labelObject['Ok'] != null ? labelObject['Ok'] : 'Ok'),
				click: function() {
					var selection = $("#columnMappingTree").jqxTreeGrid('getSelection');
					if (selection != null && selection.length != 0) {
						var selectedRowData = selection[0];
						if (selectedRowData != null
							&& !jQuery.isEmptyObject(selectedRowData)
							&& selectedRowData['HL_FUN_ID'] != null && selectedRowData['HL_FUN_ID'] != '') {
							var source = $("#columnMappingTree").jqxTreeGrid('source');
							$(this).html("");
							//$(this).dialog("close");
							$(this).dialog("destroy");
							openFunctionForm(selection[0], source, $this, tableColType);
						}
					} else {
						var textAreaVal = $("#visionEtlColFuncTextId").val();
						if (textAreaVal != null && textAreaVal != '' && textAreaVal != undefined) {
							var input = $($this).parents("td").find("input"); //uttej
							input.val(textAreaVal);
							$($this).parents("td").find("input").attr("title", textAreaVal);
							$(this).html("");
							//$(this).dialog("close");
							$(this).dialog("destroy");
						}
					}
				}

			}],
			open: function() {
				$("#columnMappingTree").jqxTreeGrid(
					{
						source: dataAdapter,
						width: "100%",
						height: 300,
						sortable: true,
						columnsResize: true,
						columnsReorder: true,
						enableHover: true,
						enableBrowserSelection: true,
						filterable: true,
						//                            filterMode: 'simple',
						//                        hierarchicalCheckboxes: true,
						pageable: true,
						pagerMode: 'advanced',
						pagerPosition: 'bottom',
						pageSize: 100,
						pageSizeOptions: ['100', '200', '300'],
						//                            theme: 'energyblue',
						selectionMode: 'singleRow',
						autoShowLoadElement: false,
						columns: [
							{ text: 'FUN_ID', dataField: 'FUN_ID', hidden: true, filterable: false },
							{ text: 'Function Name', dataField: 'FUN_DISP_NAME', width: '30%', filterable: true },
							{ text: 'Description', dataField: 'FUN_DESCR', width: '70%', filterable: true },
							{ text: 'value', dataField: 'FUN_NAME', hidden: true, filterable: false },
							{ text: 'HL_FUN_ID', dataField: 'HL_FUN_ID', hidden: true, filterable: false },
							{ text: 'FUN_FORM_ID', dataField: 'FUN_FORM_ID', hidden: true, filterable: false },
							{ text: 'FUN_LVL_TYPE', dataField: 'FUN_LVL_TYPE', hidden: true, filterable: false },
							{ text: 'DM_FUN_CUST_COL1', dataField: 'DM_FUN_CUST_COL1', hidden: true, filterable: false },
							{ text: 'DM_FUN_CUST_COL2', dataField: 'DM_FUN_CUST_COL2', hidden: true, filterable: false },
							{ text: 'ICON_PATH', dataField: 'ICON_PATH', hidden: true, filterable: false }
						]
					});
				$('#columnMappingTree').on('rowDoubleClick', function(event) {
					var args = event.args;
					var selectedRowData = args.row;
					if (selectedRowData != null
						&& !jQuery.isEmptyObject(selectedRowData)
						&& selectedRowData['HL_FUN_ID'] != null && selectedRowData['HL_FUN_ID'] != '') {
						var source = $("#columnMappingTree").jqxTreeGrid('source');
						$("#columnMappingDialog").html("");
						//                        $("#columnMappingDialog").dialog("close");
						$("#columnMappingDialog").dialog("destroy");
						openFunctionForm(selectedRowData, source, $this, tableColType);
					}


				});
				$(this).closest(".ui-dialog").find(".ui-button").eq(1).addClass("dialogyes");
				$(".visionHeaderMain").css("z-index", "999");
				$(".visionFooterMain").css("z-index", "999");
				$(".ui-dialog").addClass('visionDMTreePopup');
				stopLoader();
			},
			beforeClose: function(event, ui) {

				$(".visionHeaderMain").css("z-index", "99999");
				$(".visionFooterMain").css("z-index", "99999");
			}, close: function(event, ui) {

				$(this).html("");
				try {
					$("#columnMappingTree").jqxTreeGrid('destroy');
					$("#columnMappingTree").remove();
					$("#treeSearchInputDiv").remove();
				} catch (e) {
				}

			}

		});
		var textStr = "<textarea class='visionEtlColFuncTextClass' id='visionEtlColFuncTextId' rows='5' cols='50'></textarea>";
		$("#visionEtlColFuncText").html(textStr);
		var input = $($this).parents("td").find("input");
		var textVal = input.val();
		$("#visionEtlColFuncTextId").val(textVal);
	} else {
		$.ajax({
			type: "post",
			traditional: true,
			url: 'getETLDBFunction',
			cache: false,
			data: {
				selectedRowData: JSON.stringify(selectedRowData)
			},
			success: function(response, status, xhr) {
				//columnMappingFormDialog
				if (response != null && response != '') {
					stopLoader();
					$("#functionNameObj").val(response);
					data = JSON.parse(response);
					var source =
					{
						dataType: "json",
						dataFields: [
							{ name: "FUN_ID", type: "string" },
							{ name: "FUN_DISP_NAME", type: "string" },
							{ name: "FUN_DESCR", type: "string" },
							{ name: "FUN_NAME", type: "string" },
							{ name: "HL_FUN_ID", type: "string" },
							{ name: "FUN_FORM_ID", type: "string" },
							{ name: "FUN_LVL_TYPE", type: "string" },
							{ name: "DM_FUN_CUST_COL1", type: "string" },
							{ name: "DM_FUN_CUST_COL2", type: "string" },
							{ name: "ICON_PATH", type: "string" }
						],
						hierarchy:
						{
							keyDataField: { name: 'FUN_ID' },
							parentDataField: { name: 'HL_FUN_ID' }
						},
						id: 'FUN_ID',
						localData: data
					};
					var dataAdapter = new $.jqx.dataAdapter(source);
					// create jqxTreeGrid.

					$("#columnMappingDialog").html("<div id='visionEtlColFuncText'></div><div id='columnMappingTree' class='columnMappingTree'></div>");
					$("#columnMappingDialog").dialog({
						title: (labelObject['Functions'] != null ? labelObject['Functions'] : 'Functions'),
						modal: true,
						width: 400,
						maxWidth: 1000,
						height: 400,
						fluid: true,
						buttons: [{
							text: (labelObject['Ok'] != null ? labelObject['Ok'] : 'Ok'),
							click: function() {
								var selection = $("#columnMappingTree").jqxTreeGrid('getSelection');
								if (selection != null && selection.length != 0) {
									var selectedRowData = selection[0];
									if (selectedRowData != null
										&& !jQuery.isEmptyObject(selectedRowData)
										&& selectedRowData['HL_FUN_ID'] != null && selectedRowData['HL_FUN_ID'] != '') {
										var source = $("#columnMappingTree").jqxTreeGrid('source');
										$(this).html("");
										//$(this).dialog("close");
										$(this).dialog("destroy");
										openFunctionForm(selection[0], source, $this, tableColType);
									}
								} else {
									var textAreaVal = $("#visionEtlColFuncTextId").val();
									if (textAreaVal != null && textAreaVal != '' && textAreaVal != undefined) {
										var id = $($this).parents("td").find("input").attr("id");
										$("#" + id).val(textAreaVal);
										$(this).html("");
										//$(this).dialog("close");
										$(this).dialog("destroy");
									}
								}
							}

						}],
						open: function() {
							$("#columnMappingTree").jqxTreeGrid(
								{
									source: dataAdapter,
									width: "100%",
									height: 300,
									sortable: true,
									columnsResize: true,
									columnsReorder: true,
									enableHover: true,
									enableBrowserSelection: true,
									filterable: true,
									//                            filterMode: 'simple',
									//                        hierarchicalCheckboxes: true,
									pageable: true,
									pagerMode: 'advanced',
									pagerPosition: 'bottom',
									pageSize: 100,
									pageSizeOptions: ['100', '200', '300'],
									//                                        theme: 'energyblue',
									selectionMode: 'singleRow',
									autoShowLoadElement: false,
									columns: [
										{ text: 'FUN_ID', dataField: 'FUN_ID', hidden: true, filterable: false },
										{ text: 'Function Name', dataField: 'FUN_DISP_NAME', width: '30%', filterable: true },
										{ text: 'Description', dataField: 'FUN_DESCR', width: '70%', filterable: true },
										{ text: 'value', dataField: 'FUN_NAME', hidden: true, filterable: false },
										{ text: 'HL_FUN_ID', dataField: 'HL_FUN_ID', hidden: true, filterable: false },
										{ text: 'FUN_FORM_ID', dataField: 'FUN_FORM_ID', hidden: true, filterable: false },
										{ text: 'FUN_LVL_TYPE', dataField: 'FUN_LVL_TYPE', hidden: true, filterable: false },
										{ text: 'DM_FUN_CUST_COL1', dataField: 'DM_FUN_CUST_COL1', hidden: true, filterable: false },
										{ text: 'DM_FUN_CUST_COL2', dataField: 'DM_FUN_CUST_COL2', hidden: true, filterable: false },
										{ text: 'ICON_PATH', dataField: 'ICON_PATH', hidden: true, filterable: false }
									]
								});
							$('#columnMappingTree').on('rowDoubleClick', function(event) {
								var args = event.args;
								var selectedRowData = args.row;
								var source = $("#columnMappingTree").jqxTreeGrid('source');
								if (selectedRowData != null
									&& !jQuery.isEmptyObject(selectedRowData)
									&& selectedRowData['HL_FUN_ID'] != null && selectedRowData['HL_FUN_ID'] != '') {
									$("#columnMappingDialog").html("");
									//                                    $("#columnMappingDialog").dialog("close");
									$("#columnMappingDialog").dialog("destroy");
									openFunctionForm(selectedRowData, source, $this, tableColType);
								}



							});
							$(this).closest(".ui-dialog").find(".ui-button").eq(1).addClass("dialogyes");
							$(".visionHeaderMain").css("z-index", "999");
							$(".visionFooterMain").css("z-index", "999");
							$(".ui-dialog").addClass('visionDMTreePopup');
							stopLoader();
						},
						beforeClose: function(event, ui) {

							$(".visionHeaderMain").css("z-index", "99999");
							$(".visionFooterMain").css("z-index", "99999");
						}, close: function(event, ui) {

							$(this).html("");
							try {
								$("#columnMappingTree").jqxTreeGrid('destroy');
								$("#columnMappingTree").remove();
								$("#treeSearchInputDiv").remove();
							} catch (e) {
							}

						}

					});
					var textStr = "<textarea class='visionEtlColFuncTextClass' id='visionEtlColFuncTextId' rows='5' cols='50'></textarea>";
					$("#visionEtlColFuncText").html(textStr);
					var input = $($this).parents("td").find("input");
					var textVal = input.val();
					$("#visionEtlColFuncTextId").val(textVal);
					$("#visionEtlColFuncTextId").val(textVal);
				}


			},
			error: function(e) {
				console.log(e);
				sessionTimeout(e);
				stopLoader();
			}
		});
	}



}

function openFunctionForm(selectedRowData, source, $this, columnType) {

	if (selectedRowData != null
		&& !jQuery.isEmptyObject(selectedRowData)
		&& selectedRowData['HL_FUN_ID'] != null && selectedRowData['HL_FUN_ID'] != '') {
		if (selectedRowData != null
			&& !jQuery.isEmptyObject(selectedRowData)
			&& selectedRowData['FUN_FORM_ID'] != null
			&& selectedRowData['FUN_FORM_ID'] != ''
		) {//FUN_FORM_ID
			var selectedRowDataMain = {};
			var columns = source._source.datafields;
			if (columns != null && columns.length != 0) {
				for (var i = 0; i < columns.length; i++) {
					var columnObj = columns[i];
					selectedRowDataMain[columnObj['name']] = selectedRowData[columnObj['name']];
				}
			}
			var dataFunobjstr = $($this).parents("td").find("input").attr("data-funobjstr");
			$.ajax({
				type: "post",
				traditional: true,
				url: 'getETLFunctionForm',
				cache: false,
				data: {
					selectedRowData: JSON.stringify(selectedRowDataMain),
					dataFunobjstr: dataFunobjstr,
					columnType: columnType
				},
				success: function(data, status, xhr) {
					//columnMappingFormDialog
					if (data != null && data != '') {
						var response = JSON.parse(data);
						if (response['messageFlag']) {
							var sourceTablesArray = $("#sourceTablesArray").val();
							sourceTablesArray = JSON.parse(sourceTablesArray);
							$("#columnMappingFormDialog").html(response['funFormStr'] + "<div id='funFormETLTableTr' style='display:none'></div>");
							$("#columnMappingFormDialog").dialog({
								title: (labelObject[selectedRowDataMain['FUN_DISP_NAME'] + ' Form'] != null ? labelObject[selectedRowDataMain['FUN_DISP_NAME'] + ' Form'] : selectedRowDataMain['FUN_DISP_NAME'] + ' Form'),
								modal: true,
								width: 650,
								maxWidth: 1000,
								height: 'auto',
								maxHeight: 1000,
								fluid: true,
								buttons: [{
									text: (labelObject['Ok'] != null ? labelObject['Ok'] : 'Ok'),
									click: function() {


										var selectedFunctionName = selectedRowData['FUN_NAME'];
										if (selectedFunctionName != null && selectedFunctionName != '') {
											selectedFunctionName = $.trim(selectedFunctionName);
										}

										var funStr = "";
										var funActualStr = "";
										funStr += "" + selectedFunctionName + "(";
										funActualStr += "" + selectedFunctionName + "(";
										var rowCount = $('#funFormETLTable tr:visible').length;
										var displayRowCount = $('#funFormETLTable tr:visible').length;
										//                                        $('#myTable tr').length
										var dataFunTables = "";
										var dataFunTablesArr = [];
										var loopCount = 0;
										var columnsList = [];
										$("#funFormETLTable tr:visible").each(function() {
											var tdArray = this.cells;
											if (tdArray != null && tdArray.length != 0) {
												var dataFunTablesStr = $(tdArray[1]).find("input").attr("tablename");
												if (dataFunTablesStr != null && dataFunTablesStr != "") {
													var tableName = JSON.parse(dataFunTablesStr)[0];
													if (dataFunTablesArr.indexOf(tableName) == -1) {
														dataFunTables += "," + JSON.parse(dataFunTablesStr)[0];
													}
													dataFunTablesArr.push(JSON.parse(dataFunTablesStr)[0]);
												}


												var columnsListstr = $(tdArray[1]).find("input").attr("funcolumnslist");
												if (columnsListstr != null && columnsListstr != "" && columnsListstr != "null") {
													columnsList = columnsList.concat(JSON.parse(columnsListstr));
												}


												var funFormLabel = $(tdArray[0]).text();
												var funValue = $(tdArray[1]).find("input").val();
												var funActualValue = $(tdArray[1]).find("input").attr("actual-value");
												if (funValue != null && funValue != '' && funValue != undefined) {
													var trimval = $.trim(funValue)
													if (trimval.length > 0) {
														funValue = trimval;
													}
												}
												if (funActualValue != null && funActualValue != '' && funActualValue != undefined) {
													var trimval = $.trim(funActualValue)
													if (trimval.length > 0) {
														funActualValue = trimval;
													}
												}




												if ($(this).is(":visible")) {
													if (funValue != null
														&& funValue != ''
														&& funValue != undefined && funValue.indexOf(":") > -1) {
														funStr += "" + funValue + "";
														funActualStr += "" + funActualValue + "";
													} else if (funValue != null
														&& funValue != ''
														&& funValue != undefined) {
														funStr += "'" + funValue + "'";
														funActualStr += "'" + funActualValue + "'";
													}
												}


												if (loopCount != parseInt(rowCount) - 1) {

													if ($(this).is(":visible")) {
														if (funValue != null
															&& funValue != ''
															&& funValue != undefined) {
															if (loopCount < parseInt(displayRowCount) - 1) {
																funStr += ",";
																funActualStr += ",";
															}
														} else {
															funStr = funStr.replace(/,(\s+)?$/, '');
															funActualStr = funActualStr.replace(/,(\s+)?$/, '');
														}
													}

												}




												loopCount++;
											}
										});
										funStr += ")";
										funActualStr += ")";
										$($this).parents("td").find("input").attr("funcolumnslist", JSON.stringify(columnsList));
										var input = $($this).parents("td").find("input");
										input.val(funStr);
										input.attr("actual-value", funActualStr);
										$($this).parents("td").find("input").attr("title", funStr);
										var tablesList = $($this).parents("td").find("input").attr("tableName");
										if (tablesList != null && tablesList != "") {
											tablesList = JSON.parse(tablesList);
										} else {
											tablesList = [];
										}

										tablesList.push(dataFunTables.substring(1));
										$($this).parents("td").find("input").attr("tableName", JSON.stringify(tablesList));
										$($this).parents("td").find("input").attr("data-funobjstr", JSON.stringify(functionFormObj));
										//                                            $(this).html("");
										//                                            //$(this).dialog("close");
										//                                            $(this).dialog("destroy");
										$(this).html("");
										try {
											//$(this).dialog("close");
										} catch (e) {
										}
										try {
											$(this).dialog("destroy");
										} catch (e) {
										}
									}

								}],
								open: function() {
									$("#viewFunQuery").click(function() {
										console.log("iam in clickable ");
										viewFunQuery('funFormETLTable', selectedRowData);
									});
									//                                    $("#viewFunQuery")
									$(this).closest(".ui-dialog").find(".ui-button").eq(1).addClass("dialogyes");
									$(".visionHeaderMain").css("z-index", "999");
									$(".visionFooterMain").css("z-index", "999");
									$(".ui-dialog").addClass('visionDMTreePopup');
								},
								beforeClose: function(event, ui) {

									$(".visionHeaderMain").css("z-index", "99999");
									$(".visionFooterMain").css("z-index", "99999");
								}, close: function(event, ui) {
									$(this).html("");
									try {
										//$(this).dialog("close");
									} catch (e) {
									}
									try {
										$(this).dialog("destroy");
									} catch (e) {
									}

								}
							});
							$("#funFormETLTableTr").html(response['addTrString']);
						}

					}


				},
				error: function(e) {
					console.log(e);
					sessionTimeout(e);
					stopLoader();
				}
			});
		} else {
			var selectedFunctionName = selectedRowData['FUN_NAME'];
			var functionFormObj = {};
			functionFormObj['functionName'] = selectedFunctionName;
			functionFormObj['FUN_LVL_TYPE'] = selectedRowData['FUN_LVL_TYPE'];
			functionFormObj['DM_FUN_CUST_COL1'] = selectedRowData['DM_FUN_CUST_COL1'];
			functionFormObj['DM_FUN_CUST_COL2'] = selectedRowData['DM_FUN_CUST_COL2'];
			$($this).parents("td").find("input").val(selectedFunctionName);
			$($this).parents("td").find("input").attr("title", selectedFunctionName);
			$($this).parents("td").find("input").attr("data-funobjstr", JSON.stringify(functionFormObj));
		}
	} else {
		console.log("Please select function name");
	}


}


function openFunctionForm1(selectedRowData, source, $this, columnType) {

	if (selectedRowData != null
		&& !jQuery.isEmptyObject(selectedRowData)
		&& selectedRowData['HL_FUN_ID'] != null && selectedRowData['HL_FUN_ID'] != '') {
		if (selectedRowData != null
			&& !jQuery.isEmptyObject(selectedRowData)
			&& selectedRowData['FUN_FORM_ID'] != null
			&& selectedRowData['FUN_FORM_ID'] != ''
		) {//FUN_FORM_ID
			var selectedRowDataMain = {};
			var columns = source._source.datafields;
			if (columns != null && columns.length != 0) {
				for (var i = 0; i < columns.length; i++) {
					var columnObj = columns[i];
					selectedRowDataMain[columnObj['name']] = selectedRowData[columnObj['name']];
				}
			}
			var dataFunobjstr = $($this).parents("td").find("input").attr("data-funobjstr");
			$.ajax({
				type: "post",
				traditional: true,
				url: 'getETLFunctionForm',
				cache: false,
				data: {
					selectedRowData: JSON.stringify(selectedRowDataMain),
					dataFunobjstr: dataFunobjstr,
					columnType: columnType
				},
				success: function(data, status, xhr) {
					//columnMappingFormDialog
					if (data != null && data != '') {
						var response = JSON.parse(data);
						if (response['messageFlag']) {
							var sourceTablesArray = $("#sourceTablesArray").val();
							sourceTablesArray = JSON.parse(sourceTablesArray);
							$("#columnMappingFormDialog").html(response['funFormStr'] + "<div id='funFormETLTableTr' style='display:none'></div>");
							$("#columnMappingFormDialog").dialog({
								title: (labelObject[selectedRowDataMain['FUN_DISP_NAME'] + ' Form'] != null ? labelObject[selectedRowDataMain['FUN_DISP_NAME'] + ' Form'] : selectedRowDataMain['FUN_DISP_NAME'] + ' Form'),
								modal: true,
								width: 650,
								maxWidth: 1000,
								height: 'auto',
								maxHeight: 1000,
								fluid: true,
								buttons: [{
									text: (labelObject['Ok'] != null ? labelObject['Ok'] : 'Ok'),
									click: function() {


										var selectedFunctionName = selectedRowData['FUN_NAME'];
										if (selectedFunctionName != null && selectedFunctionName != '') {
											selectedFunctionName = $.trim(selectedFunctionName);
										}
										var FUN_LVL_TYPE = selectedRowData['FUN_LVL_TYPE'];
										var HL_FUN_ID = selectedRowData['HL_FUN_ID'];
										var functionFormObj = {};
										var funStr = "";
										functionFormObj['functionName'] = selectedFunctionName;
										if (FUN_LVL_TYPE != 'MULTI_COLUMNS') {
											funStr += "" + selectedFunctionName + "(";
										} else {
											funStr += "" + selectedFunctionName + "";
										}
										var mainFunStr = "";
										if (FUN_LVL_TYPE != 'MULTI_COLUMNS') {
											mainFunStr += "" + selectedFunctionName + "(";
										} else {
											mainFunStr += "" + selectedFunctionName + "";
										}
										var rowCount = $('#funFormETLTable tr').length;
										var displayRowCount = $('#funFormETLTable tr:visible').length;
										//                                        $('#myTable tr').length
										var dataFunTables = "";
										var dataFunTablesArr = [];
										var loopCount = 0;
										var multiColumnsObj = {};
										$("#funFormETLTable tr").each(function() {
											var tdArray = this.cells;
											if (tdArray != null && tdArray.length != 0) {
												if (FUN_LVL_TYPE == 'MULTI_COLUMNS') {
													if (loopCount != 0) {
														var multiColsObj = {};
														for (var i = 1; i < tdArray.length; i++) {

															var funValue = $(tdArray[i]).find("input").val();
															if (!(funValue != null && funValue != '' && funValue != 'null')) {
																funValue = $(tdArray[i]).find("select").val();
															}
															if (funValue != null && funValue != '') {
																var trimval = $.trim(funValue)
																if (trimval.length > 0) {
																	funValue = trimval;
																}
																//                                                                                funValue = $.trim(funValue);
															}
															var funValueId = $(tdArray[i]).find("input").attr("id");
															if (!(funValueId != null && funValueId != '' && funValueId != 'null')) {
																funValueId = $(tdArray[i]).find("select").attr("id");
															}
															if (funValueId != null && funValueId != '') {
																var trimval = $.trim(funValueId)
																if (trimval.length > 0) {
																	funValueId = trimval;
																}
																//                                                                    funValueId = $.trim(funValueId);
															}
															if (!(funValue != null
																&& funValue != ''
																&& funValue != undefined
																&& funValue != 'undefined')) {
																funValue = "";
															}
															multiColsObj[funValueId] = funValue;
															funStr += "'" + funValue + "'";
															var isTableColumn = false;
															$.each(sourceTablesArray, function(indx) {
																var currentVal = sourceTablesArray[indx];
																if (funValue != null && funValue.indexOf(currentVal) > -1) {
																	isTableColumn = true;
																}
															})
															if ($(tdArray[i]).is(":visible")) {
																if (funValue != null
																	&& funValue != ''
																	&& isTableColumn ||
																	funValueId == 'CASE_COND'
																	|| funValueId == 'OPERATOR') {
																	mainFunStr += " " + funValue + " ";
																} else if (funValue != null
																	&& funValue != ''
																	&& funValue != undefined
																) {

																	mainFunStr += " '" + funValue + "' ";
																}

															}
															if (loopCount != parseInt(rowCount) - 1) {
																funStr += ",";
															}
															if (loopCount == 1 && i == 1) {
																functionFormObj['FUN_LVL_TYPE'] = FUN_LVL_TYPE;
															}
														}
														multiColumnsObj[loopCount] = multiColsObj;
													}

												} else {
													var funFormLabel = $(tdArray[0]).text();
													var funValue = $(tdArray[1]).find("input").val();
													var dataFunTablesStr = $(tdArray[1]).find("input").attr("tablename");
													if (dataFunTablesStr != null && dataFunTablesStr != "") {
														var tableName = JSON.parse(dataFunTablesStr)[0];
														if (dataFunTablesArr.indexOf(tableName) == -1) {
															dataFunTables += "," + JSON.parse(dataFunTablesStr)[0];
														}
														dataFunTablesArr.push(JSON.parse(dataFunTablesStr)[0]);
													}


													if (!(funValue != null && funValue != '' && funValue != 'null')) {
														funValue = $(tdArray[1]).find("select").val();
													}
													var funValueId = $(tdArray[1]).find("input").attr("id");
													if (!(funValueId != null && funValueId != '' && funValueId != 'null')) {
														funValueId = $(tdArray[1]).find("select").attr("id");
													}
													if (funValue != null && funValue != '' && funValue != undefined) {
														var trimval = $.trim(funValue)
														if (trimval.length > 0) {
															funValue = trimval;
														}


														//                                                            funValue = funValue.replace(":", ".");
													}
													if (funValueId != null && funValueId != '') {
														var trimval = $.trim(funValue)
														if (trimval.length > 0) {
															funValueId = $.trim(funValueId);
														}

													}

													funStr += "'" + funValue + "'";
													if ($(this).is(":visible")) {
														if (funValue != null
															&& funValue != ''
															&& funValue != undefined && funValue.indexOf(":") > -1) {
															mainFunStr += "" + funValue + "";
														} else if (funValue != null
															&& funValue != ''
															&& funValue != undefined) {
															mainFunStr += "'" + funValue + "'";
														}
													}

													functionFormObj[funValueId] = funValue;
													if (loopCount != parseInt(rowCount) - 1) {
														funStr += ",";
														if ($(this).is(":visible")) {
															if (funValue != null
																&& funValue != ''
																&& funValue != undefined) {
																if (loopCount < parseInt(displayRowCount) - 1) {
																	mainFunStr += ",";
																}
															} else {
																mainFunStr = mainFunStr.replace(/,(\s+)?$/, '');
															}
														}

													}


												}

												loopCount++;
											}
										});
										funStr += ")";
										if (FUN_LVL_TYPE != 'MULTI_COLUMNS') {
											mainFunStr += ")";
										}

										functionFormObj['funStr'] = funStr;
										functionFormObj['mainFunStr'] = mainFunStr;
										functionFormObj['HL_FUN_ID'] = HL_FUN_ID;
										functionFormObj['multiColumnsObj'] = multiColumnsObj;
										//                                            var id = $($this).parents("td").find("input").attr("id");
										//                                            $("#" + id).val(mainFunStr);
										var input = $($this).parents("td").find("input");
										input.val(mainFunStr);
										//                                            $($this).parents("td").find("input").attr("value", mainFunStr);
										$($this).parents("td").find("input").attr("title", mainFunStr);
										var tablesList = $($this).parents("td").find("input").attr("tableName");
										if (tablesList != null && tablesList != "") {
											tablesList = JSON.parse(tablesList);
										} else {
											tablesList = [];
										}

										tablesList.push(dataFunTables.substring(1));
										$($this).parents("td").find("input").attr("tableName", JSON.stringify(tablesList));
										$($this).parents("td").find("input").attr("data-funobjstr", JSON.stringify(functionFormObj));
										//                                            $(this).html("");
										//                                            //$(this).dialog("close");
										//                                            $(this).dialog("destroy");
										$(this).html("");
										try {
											//$(this).dialog("close");
										} catch (e) {
										}
										try {
											$(this).dialog("destroy");
										} catch (e) {
										}
									}

								}],
								open: function() {
									$("#viewFunQuery").click(function() {
										console.log("iam in clickable ");
										viewFunQuery('funFormETLTable', selectedRowData);
									});
									//                                    $("#viewFunQuery")
									$(this).closest(".ui-dialog").find(".ui-button").eq(1).addClass("dialogyes");
									$(".visionHeaderMain").css("z-index", "999");
									$(".visionFooterMain").css("z-index", "999");
									$(".ui-dialog").addClass('visionDMTreePopup');
								},
								beforeClose: function(event, ui) {

									$(".visionHeaderMain").css("z-index", "99999");
									$(".visionFooterMain").css("z-index", "99999");
								}, close: function(event, ui) {
									$(this).html("");
									try {
										//$(this).dialog("close");
									} catch (e) {
									}
									try {
										$(this).dialog("destroy");
									} catch (e) {
									}

								}
							});
							$("#funFormETLTableTr").html(response['addTrString']);
						}

					}


				},
				error: function(e) {
					console.log(e);
					sessionTimeout(e);
					stopLoader();
				}
			});
		} else {
			var selectedFunctionName = selectedRowData['FUN_NAME'];
			var functionFormObj = {};
			functionFormObj['functionName'] = selectedFunctionName;
			functionFormObj['FUN_LVL_TYPE'] = selectedRowData['FUN_LVL_TYPE'];
			functionFormObj['DM_FUN_CUST_COL1'] = selectedRowData['DM_FUN_CUST_COL1'];
			functionFormObj['DM_FUN_CUST_COL2'] = selectedRowData['DM_FUN_CUST_COL2'];
			$($this).parents("td").find("input").val(selectedFunctionName);
			$($this).parents("td").find("input").attr("title", selectedFunctionName);
			$($this).parents("td").find("input").attr("data-funobjstr", JSON.stringify(functionFormObj));
		}
	} else {
		console.log("Please select function name");
	}


}
function selectFunColumnValue($this, columnType, titleName, connCustCol2) {
	if (columnType == 'ALL_TABLE' || columnType == 'ALL_SCHEMA') {//ALL_TABLE 
		if (!(titleName != null && titleName != '')) {
			titleName = "Functions";
		}
		$("#columnMappingDialog").html("<div id='columnMappingTree' class='columnMappingTree'></div>");
		$("#columnMappingDialog").dialog({
			title: (labelObject[titleName] != null ? labelObject[titleName] : titleName),
			modal: true,
			width: 400,
			maxWidth: 1000,
			height: 430,
			fluid: true,
			buttons: [{
				text: (labelObject['Ok'] != null ? labelObject['Ok'] : 'Ok'),
				click: function() {
					var selection = $("#columnMappingTree").jqxTreeGrid('getSelection');
					if (selection != null && selection.length != 0) {
						var selectedRowData = selection[0];
						if (selectedRowData != null
							&& !jQuery.isEmptyObject(selectedRowData)
							&& selectedRowData['CONNECTION_NAME'] != null && selectedRowData['CONNECTION_NAME'] != '') {
							$(this).html("");
							//$(this).dialog("close");
							$(this).dialog("destroy");
							$($this).parents("td").find("input").val(selectedRowData['CONNECTION_NAME'] + "." + selectedRowData['TABLE_NAME']);
							$($this).parents("td").find("input").attr("title", selectedRowData['CONNECTION_NAME'] + "." + selectedRowData['TABLE_NAME']);
							$($this).parents("td").find("input").attr("data-conobjstr", selectedRowData['CONNECTION_OBJ']);
							$($this).parents("td").find("input").attr("data-tosystype", selectedRowData['CONNECTION_TYPE']);
						} else if (columnType == 'ALL_SCHEMA' && selectedRowData != null
							&& !jQuery.isEmptyObject(selectedRowData)) {
							$(this).html("");
							//$(this).dialog("close");
							$(this).dialog("destroy");
							//$($this).parents("td").find("input").val(selectedRowData['TABLE_NAME']);
							$($this).parents("td").find("input").attr("value", selectedRowData['TABLE_NAME']);
							$($this).parents("td").find("input").attr("title", selectedRowData['TABLE_NAME']);
							$($this).parents("td").find("input").attr("data-conobjstr", selectedRowData['CONNECTION_OBJ']);
							$($this).parents("td").find("input").attr("data-tosystype", selectedRowData['CONNECTION_TYPE']);
							// ravi predefined job
							var tableId = $($this).closest('table').attr('id');
							if (tableId != null) {
								if (tableId == "selectSourceConnections") {
									$("#selectAllSourceConnectionsDiv").remove();
									var checkBoxStr = '<div id="selectAllSourceConnectionsDiv"><input type="checkbox" id="selectAllSourceConnections" name="selectAllSourceConnections" value=""><label for="selectAllSourceConnections">Select same connection to all Tables</label></div>'
									$("#selectSourceConnections").parent('div').prepend(checkBoxStr);
									$("#selectAllSourceConnections").change(function(evnt) {
										var inputArr = $("#selectSourceConnections").find('input');
										var checked = $("#selectAllSourceConnections").prop('checked');
										if (checked) {
											$.each(inputArr, function(inx) {
												$(this).parents("td").find("input").attr("value", selectedRowData['TABLE_NAME']);
												$(this).parents("td").find("input").attr("title", selectedRowData['TABLE_NAME']);
												$(this).parents("td").find("input").attr("data-conobjstr", selectedRowData['CONNECTION_OBJ']);
												$(this).parents("td").find("input").attr("data-tosystype", selectedRowData['CONNECTION_TYPE']);
											})
										}
									});
								}
								if (tableId == "selectDestConnections") {
									$("#selectAllDestConnectionsDiv").remove();
									var checkBoxStr = '<div id="selectAllDestConnectionsDiv"><input type="checkbox" id="selectAllDestConnections" name="selectAllDestConnections" value=""><label for="selectAllDestConnections">Select same connection to all Tables</label></div>';
									$("#selectDestConnections").parent('div').prepend(checkBoxStr);
									$("#selectAllDestConnections").change(function(evnt) {
										var inputArr = $("#selectDestConnections").find('input');
										var checked = $("#selectAllDestConnections").prop('checked');
										if (checked) {
											$.each(inputArr, function(inx) {
												$(this).parents("td").find("input").attr("value", selectedRowData['TABLE_NAME']);
												$(this).parents("td").find("input").attr("title", selectedRowData['TABLE_NAME']);
												$(this).parents("td").find("input").attr("data-conobjstr", selectedRowData['CONNECTION_OBJ']);
												$(this).parents("td").find("input").attr("data-tosystype", selectedRowData['CONNECTION_TYPE']);
											})
										}
									});
								}

							}
						}
					}

				}

			}],
			open: function() {
				$("#columnMappingTree").jqxTreeGrid(
					{
						width: "100%",
						virtualModeCreateRecords: function(expandedRecord, done) {
							// expandedRecord is equal to null when the function is initially called, because there is still no record to be expanded.
							// prepare the data
							var source =
							{
								dataType: "json",
								dataFields: [
									{ name: 'CONNECTION_OBJ', type: 'string' },
									{ name: 'TABLE_NAME', type: 'string' },
									{ name: 'CONNECTION_NAME', type: 'string' },
									{ name: 'LEVEL_TYPE', type: 'string' },
									{ name: 'icon', type: 'string' },
									{ name: 'ID', type: 'string' },
									{ name: 'CONNECTION_TYPE', type: 'string' }
								],
								hierarchy:
								{
									keyDataField: { name: 'TABLE_NAME' },
									parentDataField: { name: 'CONNECTION_NAME' }
								},
								id: 'ID',
								url: "getLookupAllTables",
								method: "post",
								data: {
									expandedRecord: JSON.stringify(expandedRecord),
									columnType: columnType,
									connCustCol2: connCustCol2 // ravi predefined connections
								}
							};
							var dataAdapter = new $.jqx.dataAdapter(source,
								{
									formatData: function(data) {
										if (expandedRecord == null) {
											data.$filter = "(CONNECTION_NAME eq null)"
										} else {
											data.$filter = "(CONNECTION_NAME eq " + expandedRecord.TABLE_NAME + ")"
										}
										return data;
									},
									loadComplete: function() {
										done(dataAdapter.records);
										stopLoader();
									},
									loadStart: function() {
										showLoader();
									},
									loadError: function(xhr, status, error) {
										stopLoader();
										done(false);
										throw new Error("Error: " + error.toString());
									}
								}
							);
							dataAdapter.dataBind();
						},
						virtualModeRecordCreating: function(record) {

						},
						height: 350,
						sortable: true,
						columnsResize: true,
						columnsReorder: true,
						enableHover: true,
						enableBrowserSelection: true,
						//                           filterable: true,
						filterable: true,
						//                            filterMode: 'simple',
						icons: true,
						hierarchicalCheckboxes: true,
						pageable: true,
						pagerMode: 'advanced',
						pagerPosition: 'bottom',
						pageSize: 100,
						pageSizeOptions: ['100', '200', '300'],
						//                            theme: 'energyblue',
						selectionMode: 'singleRow',
						autoShowLoadElement: false,
						columns: [
							{ text: 'Table/Schem Name', dataField: 'TABLE_NAME', width: '80%', filterable: true },
							{ text: 'Database Type', dataField: 'CONNECTION_TYPE', width: '30%', filterable: true },
							{ text: 'CONNECTION_NAME', dataField: 'CONNECTION_NAME', hidden: true, width: 160, filterable: false },
							{ text: 'LEVEL_TYPE', dataField: 'LEVEL_TYPE', hidden: true, width: 160, filterable: false },
							{ text: 'ID', dataField: 'ID', hidden: true, width: 160, filterable: false },
							{ text: 'CONNECTION_OBJ', dataField: 'CONNECTION_OBJ', hidden: true, width: 160, filterable: false }
						]
					});
				$('#columnMappingTree').on('rowDoubleClick', function(event) {
					var args = event.args;
					var selectedRowData = args.row;
					var source = $("#columnMappingTree").jqxTreeGrid('source');
					if (selectedRowData != null
						&& !jQuery.isEmptyObject(selectedRowData)
						&& selectedRowData['CONNECTION_NAME'] != null && selectedRowData['CONNECTION_NAME'] != '') {
						$("#columnMappingDialog").html("");
						//                        $("#columnMappingDialog").dialog("close");
						$("#columnMappingDialog").dialog("destroy");
						//                      
						$($this).parents("td").find("input").val(selectedRowData['CONNECTION_NAME'] + "." + selectedRowData['TABLE_NAME']);
						$($this).parents("td").find("input").attr("title", selectedRowData['CONNECTION_NAME'] + "." + selectedRowData['TABLE_NAME']);
						$($this).parents("td").find("input").attr("data-conobjstr", selectedRowData['CONNECTION_OBJ']);
					}



				});
				$(this).closest(".ui-dialog").find(".ui-button").eq(1).addClass("dialogyes");
				$(".visionHeaderMain").css("z-index", "999");
				$(".visionFooterMain").css("z-index", "999");
				$(".ui-dialog").addClass('visionDMTreePopup');
			},
			beforeClose: function(event, ui) {

				$(".visionHeaderMain").css("z-index", "99999");
				$(".visionFooterMain").css("z-index", "99999");
			}, close: function(event, ui) {

				$(this).html("");
				try {
					$("#columnMappingTree").jqxTreeGrid('destroy');
					$("#columnMappingTree").remove();
					$("#treeSearchInputDiv").remove();
				} catch (e) {
				}
			}
		});
	} else if (columnType == 'TO_COLUMN') {
		selectColumn($this, 'toColumn');
	} else if (columnType == 'LOOKUP_TABLE,COLUMN') {

		var lookupTableName = $("#" + columnType.split(",")[0]).val();
		if (lookupTableName != null && lookupTableName != '') {
			lookupTableName = lookupTableName.split(".")[1];
		}
		var connObjStr = $("#" + columnType.split(",")[0]).attr("data-conobjstr");
		$.ajax({
			datatype: "json",
			type: "post",
			traditional: true,
			url: 'getSelectedLookupTableColumns',
			cache: false,
			data: {
				lookupTableName: lookupTableName,
				connObj: connObjStr
			},
			success: function(response, status, xhr) {

				selectColumn($this, columnType, response);
			},
			error: function(e) {
				console.log(e);
				sessionTimeout(e);
				stopLoader();
			}
		});
	} else if (columnType == 'FROM_COLUMN') {
		selectColumn($this, 'fromColumn');
	} else if (columnType == 'CHILD_COLUMN') {
		selectColumn($this, 'childColumn');
	} else if (columnType == 'MASTER_COLUMN') {
		selectColumn($this, 'masterColumn');
	} else if (columnType == 'FROM_WHERE_CLAUSE_COLUMN') {
		selectColumn($this, 'fromWhereClauseColumn');
	}
}


function showSQLPopup($this) {
	showLoader();
	var selectedOperatorId = $('#' + flowChartWorkSpaceId).flowchart('getSelectedOperatorId');
	var selectedSQLOperatorData = $('#' + flowChartWorkSpaceId).flowchart('getOperatorData', selectedOperatorId);
	var getLinksTo = $('#' + flowChartWorkSpaceId).flowchart('getLinksTo', selectedOperatorId);
//	if (getLinksTo != null && getLinksTo.length != 0) {

		var connectedFromOperatorsArray = $('#' + flowChartWorkSpaceId).flowchart('getAllConnFromOperatorsByOpId', selectedOperatorId, []);
		var sourceOperators = [];
		$.each(connectedFromOperatorsArray, function(i) {
			var component = this['component'];
			if (component != "Y") {
				sourceOperators.push(this);
			}
			var iconType = this['iconType'];
			if (iconType == 'QUERY' || iconType == 'API') {
				sourceOperators.push(this);
			}
		})
		//        var connectedFromArr = selectedSQLOperatorData['connectedFrom'];
		//        var fromOperatorsArray = [];
		//        $.each(connectedFromArr, function (i) {
		//            var operatorData = $('#' + flowChartWorkSpaceId).flowchart('getOperatorData', parseInt(this));
		//            fromOperatorsArray.push(operatorData);
		//        })
		//        var fromOperatorsArray = $('#' + flowChartWorkSpaceId).flowchart('getFromOperatorsByToOpId', selectedOperatorId);
		var createTableObj = selectedSQLOperatorData['createTableObj'];
		$.ajax({
			datatype: "json",
			type: "post",
			traditional: true,
			url: 'getFromTableColumns',
			cache: false,
			data: {
				fromOperators: JSON.stringify(sourceOperators),
				createTableObj: (createTableObj != null ? JSON.stringify(createTableObj) : "")
			},
			success: function(response, status, xhr) {
				stopLoader();
				$("#columnSQLMappingDialog").html(response['sqlPopupDiv']);
				$("#columnSQLMappingDialog").dialog({
					title: (labelObject['Create Table'] != null ? labelObject['Create Table'] : 'Create Table'),
					modal: true,
					width: 890,
					maxWidth: 1000,
					height: 350,
					maxHeight: 1000,
					fluid: true,
					buttons: [{
						text: (labelObject['Create'] != null ? labelObject['Create'] : 'Create'),
						click: function() {
							//sqlToTableName
							//sqlToTableColumnsTable
							var tableName = $("#sqlToTableName").val();
							if (tableName != null && tableName != '') {
								tableName = tableName.toUpperCase();
								var dataSourceName = $("#sqlToDataSourceName").val();
								var dataSourceObj = $("#sqlToDataSourceName").attr("data-conobjstr");
								var rowCount = $('#sqlToTableColumnsTable >tbody >tr').length;
								if (rowCount != 0) {
									var createTableObj = {};
									createTableObj['tableName'] = tableName;
									createTableObj['dataSourceName'] = dataSourceName;
									createTableObj['dataSourceObj'] = dataSourceObj;
									var tableColsArray = [];
									$("#sqlToTableColumnsTable tbody tr").each(function() {
										var tdArray = this.cells;
										if (tdArray != null && tdArray.length != 0) {
											var columnName = $(tdArray[2]).find("input").val();
											var dataType = $(tdArray[3]).find("input").val();
											if (columnName != null && columnName != '' && dataType != null && dataType != '') {
												var colsObj = {};
												colsObj['COLUMN_NAME'] = $(tdArray[2]).find("input").val();
												//PKH default value
												if ($(tdArray[4]).find("input[type=\"checkbox\"]").is(":checked")) {
													colsObj['NOTNULL'] = "Y";
												} else {
													colsObj['NOTNULL'] = "N";
												}
												colsObj['DEFAULT_VALUE'] = $(tdArray[5]).find("input").val();
												//PKH default value


												if ($(tdArray[1]).find("input[type=\"checkbox\"]").is(":checked")) {//input[type="checkbox"]:checked
													colsObj['PK'] = "Y";
												} else {
													colsObj['PK'] = "N";
												}
												colsObj['DATA_TYPE'] = $(tdArray[3]).find("input").val();
												tableColsArray.push(colsObj);
											}

										}
									});
									createTableObj['colsObj'] = tableColsArray;
									var tableName = createTableObj['tableName'];
									if (dataSourceObj != null && dataSourceObj != '') {
										var dataSourceObject = JSON.parse(dataSourceObj);
										if (dataSourceObject != null) {
											if (dataSourceObject['CONN_USER_NAME'] != null
												&& dataSourceObject['CONN_USER_NAME'] != ''
												&& tableName.indexOf(".") == -1
											) {
												tableName = dataSourceObject['CONN_USER_NAME'] + "." + tableName;
											}
										}
									}
									selectedSQLOperatorData['tableName'] = tableName;
									selectedSQLOperatorData['createTableObj'] = createTableObj;
									selectedSQLOperatorData['statusLabel'] = createTableObj['tableName'];
									var dataSourceName = createTableObj['dataSourceName'];
									var connectionObj = {};
									if (!(dataSourceName != null && dataSourceName != '')) {//dataSourceName
										dataSourceName = 'Current V10';
									}
									//                                        if (dataSourceName == 'Current V10') {
									//                                            connectionObj = savedDBData['Current_V10'];
									//                                        } else {
									//dataSourceObj
									var dataSourceObjStr = createTableObj['dataSourceObj'];
									if (dataSourceObjStr != null && dataSourceObjStr != '') {
										connectionObj = JSON.parse(dataSourceObjStr);
									}
									//                                        }

									selectedSQLOperatorData['CONNECTION_NAME'] = connectionObj['CONNECTION_NAME'];
									selectedSQLOperatorData['CONN_DB_NAME'] = connectionObj['CONN_DB_NAME'];
									selectedSQLOperatorData['connObj'] = connectionObj;
									selectedSQLOperatorData['dragType'] = "Table";
									//PKH DBIcon
									//                                        var toTableName = tableName.split(".");
									//                                        var body = "<div title='" + tableName + "'>"
									//                                                + "<div  title='Double Click here to viewTransformationRules (" + tableName + ")' ondblclick=viewTrfmRules() class='visionMapOperator'><img src='images/SQL ICON-01.svg' class='visionETLIcons' style='width:30px;height: 30px;'/></div>"
									//                                                + "<div class='visionSQLLabelDiv'>" + toTableName[1] + "</div>";
									//                                        +"</div>"
									//                                        selectedSQLOperatorData['properties']['body'] = body;
									//PKH DBIcon

									operatorDoublClick = true;
									$('#' + flowChartWorkSpaceId).flowchart('setOperatorData', selectedOperatorId, selectedSQLOperatorData);
									$(".flowchart-operator-connector-label").hide();
									$(".flowchart-operator-title").hide();
									operatorDoublClick = false;
									addPropsToSQLOp($this, createTableObj, 'columnSQLMappingDialog');
								} else {
									showMesg("You must specify some columns to create the table.");
								}
							} else {
								showMesg("Table Name Should not empty.");
							}
						}

					}],
					open: function() {
						var source =
						{
							dataType: "json",
							dataFields: [
								{ name: 'CONNECTION_OBJ', type: 'string' },
								{ name: 'TABLE_NAME', type: 'string' },
								{ name: 'CONNECTION_NAME', type: 'string' },
								{ name: 'LEVEL_TYPE', type: 'string' },
								{ name: 'icon', type: 'string' },
								{ name: 'ID', type: 'string' },
								{ name: 'DATA_TYPE', type: 'string' },
								{ name: 'COLUMN_TYPE', type: 'string' },
								{ name: 'DATA_LENGTH', type: 'string' },
								{ name: 'TO_COLUMN_TYPE', type: 'string' },
								{ name: 'CONNECTION_TYPE', type: 'string' }
							],
							hierarchy:
							{
								keyDataField: { name: 'TABLE_NAME' },
								parentDataField: { name: 'CONNECTION_NAME' }
							},
							id: 'ID',
							localData: response['fromTableColsArray']
						};
						var dataAdapter = new $.jqx.dataAdapter(source);
						$("#columnSQLMappingTree").jqxTreeGrid(
							{
								width: "100%",
								source: dataAdapter,
								height: 250,
								sortable: true,
								columnsResize: true,
								columnsReorder: true,
								enableHover: true,
								enableBrowserSelection: true,
								filterable: true,
								icons: true,
								hierarchicalCheckboxes: true,
								pageable: true,
								pagerMode: 'advanced',
								pagerPosition: 'bottom',
								pageSize: 100,
								pageSizeOptions: ['100', '200', '300', '500', '1000'],
								//                                    theme: 'energyblue',
								selectionMode: 'multipleRows',
								autoShowLoadElement: false,
								columns: [
									{ text: 'Table/Column Name', dataField: 'TABLE_NAME', width: '80%', filterable: true },
									{ text: 'Column Data Type', dataField: 'COLUMN_TYPE', width: '40%', filterable: false },
									{ text: 'Data Type', dataField: 'DATA_TYPE', hidden: true, width: '30%', filterable: false },
									{ text: 'Column Length', dataField: 'DATA_LENGTH', hidden: true, width: '10%', filterable: false },
									{ text: 'Database Type', dataField: 'CONNECTION_TYPE', width: '15%', filterable: true },
									{ text: 'CONNECTION_NAME', dataField: 'CONNECTION_NAME', hidden: true, width: 160, filterable: false },
									{ text: 'LEVEL_TYPE', dataField: 'LEVEL_TYPE', hidden: true, width: 160, filterable: false },
									{ text: 'ID', dataField: 'ID', hidden: true, width: 160, filterable: false },
									{ text: 'TO_COLUMN_TYPE', dataField: 'TO_COLUMN_TYPE', hidden: true, width: 160, filterable: false },
									{ text: 'CONNECTION_OBJ', dataField: 'CONNECTION_OBJ', hidden: true, width: 160, filterable: false }
								]
							});
						$("#sqlToTableTrDiv").html(response['trString']); //trString
						var allDataTypeObj = response['allDataTypeObj'];
						if (allDataTypeObj != null) {
							$("#sqlAllDataTypeObj").val(JSON.stringify(allDataTypeObj));
						}
						var editing = false;
						$(".editable").attr("title", "Double click here to rename the columns");
						$(".dataTypePopup").attr("title", "Double click here to change datatype");
						$('.dataTypePopup').on('dblclick', function() {
							var val = $(this).text();
							$(this).find('input').val(val).show().focus();
							$(this).find('.originalvalue').hide();
							// need to show the popup
							dataTypeDialog(this);
						});
						$('.editable').on('dblclick', function() {
							var val = $(this).text();
							$(this).find('input').val(val).show().focus();
							$(this).find('.originalvalue').hide();
						});
						$('#sqlToTableColumnsTable input').bind('keyup keypress', function(e) {
							var code = e.keyCode || e.which;
							if (editing)
								return editing = false;
							if (code == 27) {
								editing = false;
								$(this).parent().find('.originalvalue').show().focus();
								$(this).parent().find('input[type="text"],select,textarea').hide();
							}

							if (code == 13) {
								editing = false;
								$(this).parent().find('.originalvalue').show().focus();
								$(this).parent().find('input[type="text"],select,textarea').hide();
							}
						});
						$('#sqlToTableColumnsTable input').on('blur', function(e) {
							var nEl = $(this).val();
							$(this).parent().find('.originalvalue').text(nEl).show();
							$(this).parent().find('input[type="text"],select,textarea').hide();
						});
						$(this).closest(".ui-dialog").find(".ui-button").eq(1).addClass("dialogyes");
						$(".visionHeaderMain").css("z-index", "999");
						$(".visionFooterMain").css("z-index", "999");
						$(".ui-dialog").addClass('visionDMTreePopup');
					},
					resizeStop: function(event, ui) {
						//   $("#columnSQLMappingTree").jqxTreeGrid( -- 250/350 
						//.visionEtlCreateSQLTable tbody 156/350
						var sizes = ui.size;
						var height = ui.size.height;
						var width = ui.size.width;
						var treeHeight = parseInt(height) - 100;
						var tableHeight = parseInt(height) - 194;
						$("#columnSQLMappingTree").jqxTreeGrid({ height: treeHeight + "px" });
						$(".visionEtlCreateSQLTable tbody").height(tableHeight + "px");
					},
					beforeClose: function(event, ui) {

						$(".visionHeaderMain").css("z-index", "99999");
						$(".visionFooterMain").css("z-index", "99999");
					}, close: function(event, ui) {

						$(this).html("");
						try {
							$("#columnSQLMappingTree").jqxTreeGrid('destroy');
							$("#columnSQLMappingTree").remove();
							$("#treeSearchInputDiv").remove();
						} catch (e) {
						}
					}
				});
			},
			error: function(e) {
				console.log(e);
				sessionTimeout(e);
				stopLoader();
			}
		});
	/*} else {
		stopLoader();
		showMesg("No mappings found.");
	}*/
}


function connectEtlDatabase(type, typeName) {
	//    var selectedDbType = $('#selectedTypeName').val();
	//    var ConnectionEtlType = $('#selectedType').val();
	var EtlconName = $('#DbEtlConnectionName').val();
	if (EtlconName != null && EtlconName != '') {
		EtlconName = $.trim(EtlconName);
	}
	var EtlhostName = $('#DbEtlHostName').val();
	if (EtlhostName != null && EtlhostName != '') {
		EtlhostName = $.trim(EtlhostName);
	}
	var Etlport = $('#DbEtlPort').val();
	if (Etlport != null && Etlport != '') {
		Etlport = $.trim(Etlport);
	}
	var EtluserName = $('#DbEtlUserName').val();
	if (EtluserName != null && EtluserName != '') {
		EtluserName = $.trim(EtluserName);
	}
	var Etlpassword = $('#DbEtlPassword').val();
	if (Etlpassword != null && Etlpassword != '') {
		Etlpassword = $.trim(Etlpassword);
	}
	var EtlserviceName = $('#DbEtlServiceName').val();
	if (EtlserviceName != null && EtlserviceName != '') {
		EtlserviceName = $.trim(EtlserviceName);
	}
	// var EtlcheckedVal = $('#EtlcheckBoxChecked').is(':checked');
	var EtlauditId = $('#EtlauditId').val();
	if (EtlauditId != null && EtlauditId != '') {
		EtlauditId = $.trim(EtlauditId);
	}
	if (!EtlconName) {
		$('#DbEtlConnectionNameError').html("Please enter Connection Name");
	}
	if (!EtlhostName) {
		$('#DbEtlHostNameError').html("Please enter Host Name");
	}
	if (!Etlport) {
		$('#DbEtlPortError').html("Please enter Port No");
	}
	if (!EtluserName) {
		$('#DbEtlUserNameError').html("Please enter Username");
	}
	if (!Etlpassword) {
		$('#DbEtlPasswordError').html("Please enter Password");
	}
	if (!EtlserviceName) {
		$('#DbEtlServiceNameError').html("Please enter Service Name");
	} else {

		$('.dataMigrationInputError').hide();
		$('.visionDataMigrationError').hide();
		connectEtlDatabaseProcess(EtlconName, EtlhostName, Etlport, EtluserName, Etlpassword, EtlserviceName, typeName, EtlauditId, type);
	}
}

function connectEtlDatabaseProcess(EtlconName, EtlhostName, Etlport, EtluserName, Etlpassword, EtlserviceName, typeName, EtlauditId, type) {
	$('#visionShowConnectionMsg').hide();
	showLoader();
	$.ajax({
		type: 'post',
		traditional: true,
		dataType: 'html',
		cache: false,
		url: 'getConnectionDetails',
		async: true,
		data: {
			connectionName: EtlconName,
			hostName: EtlhostName,
			port: Etlport,
			userName: EtluserName,
			password: Etlpassword,
			serviceName: EtlserviceName,
			checkedVal: true,
			selectedItemLabel: typeName,
			auditId: EtlauditId,
			ConnectionType: type,
			EtlFlag: 'Y'

		},
		success: function(response) {
			stopLoader();
			if (response != null) {
				var result = JSON.parse(response);
				var messageFlag = result['messageFlag'];
				if (messageFlag) {
					$('#visionShowConnectionMsg').show();
					$('#visionShowConnectionMsg').html('<p style="color:green">' + result['connectionMessage'] + '</p>');
					//uttej ava conn code
					//                    $("#dialog").html("");
					//                    showEtlList('savedConnectionsIconsDiv', 'availableConnections');
					//                    if (savedDBData==null || jQuery.isEmptyObject(savedDBData)){
					var connObj = {}
					connObj['CONNECTION_NAME'] = EtlconName;
					connObj['CONN_CUST_COL1'] = typeName;
					connObj['CONN_DB_NAME'] = EtlserviceName;
					connObj['CONN_PASSWORD'] = Etlpassword;
					connObj['CONN_PORT'] = Etlport;
					connObj['CONN_USER_NAME'] = EtluserName;
					connObj['HOST_NAME'] = EtlhostName;
					savedDBData[EtlconName] = connObj;
					//                    }

					getSelectedDbTables('TABLES', EtlconName, typeName, type);
					showEtlList('savedConnectionsIconsDiv', 'availableConnections');
					$("#dialog").dialog({});
					$("#dialog").html("");
					//                    $("#dialog").dialog("close");
					$("#dialog").dialog("distroy");
				} else {
					// showMessagePopup(result['connectionMessage']);
					$('#visionShowConnectionMsg').show();
					$('#visionShowConnectionMsg').html('<p style="color:red">' + result['connectionMessage'] + '</p>');
				}
				// files expand ravi start
				if (typeName != null) {
					var treeItemElement = globalFileTreeItem[typeName];
					if (treeItemElement != null) {
						var $element = $(treeItemElement);
						var children = $element.find('ul:first').children();
						if (children != null && children.length > 0) {
							$.each(children, function(index) {
								$('#savedConnections').jqxTree('removeItem', this)
							})
							$('#savedConnections').jqxTree('addTo', { label: 'dummy', value: "ajax" }, treeItemElement);
							$('#savedConnections').jqxTree('collapseItem', treeItemElement);
							$('#savedConnections').jqxTree('expandItem', treeItemElement);
						}
					}
				}
				//                var treeItemElement = globalFileTreeItem[typeName.toUpperCase()];
				//                var $element = $(treeItemElement);
				//                var children = $element.find('ul:first').children();
				//                $.each(children, function (index) {
				//                    $('#savedConnections').jqxTree('removeItem', this)
				//                })
				//                $('#savedConnections').jqxTree('addTo', {label: 'dummy', value: "ajax"}, treeItemElement);
				//                $('#savedConnections').jqxTree('collapseItem', treeItemElement);
				//                $('#savedConnections').jqxTree('expandItem', treeItemElement);
				// files expand ravi end 


			}
		},
		error: function(e) {
			sessionTimeout(e);
		}

	});
}

function closeEtlConnectionDialog() {
	$("#dialog").html("");
	//    $("#dialog").dialog("close");
	$("#dialog").dialog("destroy");
}

function moveTableColumns(treeId, selectionType) {
	var selection = $("#" + treeId).jqxTreeGrid('getSelection');
	var tableStr = "";
	if (selection != null && selection.length != 0) {
		var rowCount = $('#sqlToTableColumnsTable >tbody >tr').length;
		for (var i = 0; i < selection.length; i++) {
			// get a selected row.
			var selectedRowData = selection[i];
			if (selectedRowData != null && !jQuery.isEmptyObject(selectedRowData)) {
				var connObjStr = selectedRowData['CONNECTION_OBJ']; //CONNECTION_OBJ
				var connObj = {};
				if (connObjStr != null && connObjStr != '') {
					connObj = JSON.parse(connObjStr);
				}
				var toColumnTypeStr = selectedRowData['TO_COLUMN_TYPE']; //CONNECTION_OBJ
				var toColumnTypeObj = {};
				if (toColumnTypeStr != null && toColumnTypeStr != '') {
					toColumnTypeObj = JSON.parse(toColumnTypeStr);
				}
				//conntype
				var toSysType = $("#sqlToDataSourceName").attr("data-tosystype");
				if (toSysType != null && toSysType != '') {
					toSysType = toSysType.toUpperCase();
				}
				var isExistColumn = false;
				if (rowCount != 0) {
					$("#sqlToTableColumnsTable tbody tr").each(function() {
						var tdArray = this.cells;
						if (tdArray != null && tdArray.length != 0) {
							var columnName = $(tdArray[2]).find("input").val();
							if (columnName != null && columnName != '' && columnName == selectedRowData['TABLE_NAME']) {
								isExistColumn = true;
								return false;
							}

						}
					});
				}
				if (!isExistColumn) {
					var toColumnType = "";
					if (toColumnTypeObj != null
						&& !jQuery.isEmptyObject(toColumnTypeObj)
						&& toSysType != null && toSysType != '') {
						toColumnType = toColumnTypeObj[toSysType];
						if (!(toColumnType != null && toColumnType != '')) {
							toColumnType = selectedRowData['COLUMN_TYPE'];
						}
					}
					if (!(toColumnType != null && toColumnType != '')) {
						toColumnType = selectedRowData['COLUMN_TYPE'];
					}
					if (!(toColumnType != null && toColumnType != '')) {
						toColumnType = "";
					}
					if (toSysType == "SQLSERVER") { // praksh MSSQL datatype issue
						//                        toColumnType = toColumnType + "(" + selectedRowData['DATA_LENGTH'] + ")";
						toColumnType = toColumnType;
					}
					var columnName = selectedRowData['TABLE_NAME'];
					if (columnName != null && columnName.indexOf(" AS ") > -1) {
						columnName = columnName.split(" AS ")[1];
					}
					if (columnName != null && columnName != '' && columnName.indexOf(" ") > -1) {
						columnName = columnName.replace(/\s/g, '_');
					}
					tableStr += "<tr>"
						+ "<td width='5%'><img src=\"images/Detele Red Icon.svg\" onclick='deleteSelectedRow(this)'  class=\"visionTdETLIcons\""
						+ " title=\"Delete\" style=\"width:15px;height: 15px;cursor:pointer;\"/>"
						+ "</td>"
						+ "<td width='5%' class=\"sourceJoinColsTd\"><input class='visionCreateTableColInput' type='checkbox'/></td>"
						+ "<td width='20%' class=\"sourceJoinColsTd editable\"><input class='visionCreateTableColInput inputvalue' type='text' value='" + columnName + "'/><span class=\"originalvalue\">" + columnName + "</span></td>"
						+ "<td width='20%' class=\"sourceJoinColsTd dataTypePopup\"><input class='visionCreateTableColInput inputvalue' type='text' value='" + toColumnType + "' /><span class=\"originalvalue\">" + toColumnType + "</span></td>"


						//PKH default value
						+ "<td width='5%' class=\"sourceJoinColsTd\"><input class='visionCreateTableColInput' type='checkbox'/></td>"
						+ "<td width='35%' class=\"editable\"><input type='text' /><span class=\"originalvalue\"></span></td>"
						//PKH default value

						+ "<td width='5%' class=\"sourceJoinColsTd\" style='display:none' >N</td>"
						+ "</tr>";
				}

			}
		}
	}
	$("#sqlToTableColumnsTable tbody").append(tableStr);
	$(".inputvalue").hide();
	var editing = false;
	$(".editable").attr("title", "Double click here to rename the columns");
	$('.editable').on('dblclick', function() {
		var val = $(this).text();
		$(this).find('input').val(val).show().focus();
		$(this).find('.originalvalue').hide();
	});
	$(".dataTypePopup").attr("title", "Double click here to change datatype");
	$('.dataTypePopup').on('dblclick', function() {
		var val = $(this).text();
		$(this).find('input').val(val).show().focus();
		$(this).find('.originalvalue').hide();
		// need to show the popup
		dataTypeDialog(this);
	});
	$('#sqlToTableColumnsTable input').bind('keyup keypress', function(e) {
		var code = e.keyCode || e.which;
		if (editing)
			return editing = false;
		if (code == 27) {
			editing = false;
			$(this).parent().find('.originalvalue').show().focus();
			$(this).parent().find('input[type="text"],select,textarea').hide();
		}

		if (code == 13) {
			editing = false;
			$(this).parent().find('.originalvalue').show().focus();
			$(this).parent().find('input[type="text"],select,textarea').hide();
		}
	});
	$('#sqlToTableColumnsTable input').on('blur', function(e) {
		var nEl = $(this).val();
		$(this).parent().find('.originalvalue').text(nEl).show();
		$(this).parent().find('input[type="text"],select,textarea').hide();
	});
}

function addNewTableRow(fromTrStrDivId, tableId, $this) {
	var trstring = $("#" + fromTrStrDivId).html();
	$("#" + tableId + " tbody").append(trstring);
	$(".inputvalue").hide();
	var editing = false;
	$(".editable").attr("title", "Double click here to rename the columns");
	$(".sqlToTableColumnsDivClass").animate({
		scrollTop: $(".sqlToTableColumnsDivClass").prop("scrollHeight")
	}, 1000);
	$('.editable').on('dblclick', function() {
		var val = $(this).text();
		$(this).find('input').val(val).show().focus();
		$(this).find('.originalvalue').hide();
	});
	$(".dataTypePopup").attr("title", "Double click here to change datatype");
	$('.dataTypePopup').on('dblclick', function() {
		var val = $(this).text();
		$(this).find('input').val(val).show().focus();
		$(this).find('.originalvalue').hide();
		// need to show the popup
		dataTypeDialog(this);
	});
	$('#' + tableId + ' input').bind('keyup keypress', function(e) {
		var code = e.keyCode || e.which;
		if (editing)
			return editing = false;
		if (code == 27) {
			editing = false;
			$(this).parent().find('.originalvalue').show().focus();
			$(this).parent().find('input[type="text"],select,textarea').hide();
		}

		if (code == 13) {
			editing = false;
			$(this).parent().find('.originalvalue').show().focus();
			$(this).parent().find('input[type="text"],select,textarea').hide();
		}
	});
	$('#' + tableId + ' input').on('blur', function(e) {
		var nEl = $(this).val();
		$(this).parent().find('.originalvalue').text(nEl).show();
		$(this).parent().find('input[type="text"],select,textarea').hide();
	});
}
function addNewTableDataRow(fromTrStrDivId, tableId, $this) {
	var trstring = $("#" + fromTrStrDivId).html();
	$("#" + tableId + " tbody").append(trstring);
}

function showMesg(message) {
	if (message != null) {
		$("#dialog").html(message);
		$("#dialog").dialog({
			title: (labelObject['Message'] != null ? labelObject['Message'] : 'Message'),
			modal: true,
			html:true,
			height: 'auto',
			minWidth: 300,
			maxWidth: 300,
			fluid: true,
			buttons: [{
				text: (labelObject['Ok'] != null ? labelObject['Ok'] : 'Ok'),
				click: function() {
					$(this).html("");
					//                        //$(this).dialog("close");
					$(this).dialog("destroy");
				}
			}],
			open: function() {
				$(this).closest(".ui-dialog").css("z-index", "9999")
				$(this).closest(".ui-dialog").find(".ui-button").eq(1).addClass("dialogyes");
				$(".visionHeaderMain").css("z-index", "999");
				$(".visionFooterMain").css("z-index", "999");
			},
			beforeClose: function(event, ui) {
				$(".visionHeaderMain").css("z-index", "99999");
				$(".visionFooterMain").css("z-index", "99999");
			}
		});
	}
}

function addPropsToSQLOp($this, createTableObj, dialogId) {
	showLoader();
	$.ajax({
		type: 'post',
		traditional: true,
		dataType: 'json',
		cache: false,
		url: 'createTableInETL',
		async: true,
		data: {
			createTableObj: JSON.stringify(createTableObj)
		},
		success: function(response) {
			stopLoader();
			if (response != null) {
				$("#dialog").html(response['message']);
				$("#dialog").dialog({
					title: (labelObject['Message'] != null ? labelObject['Message'] : 'Message'),
					modal: true,
					height: 'auto',
					minWidth: 300,
					maxWidth: 'auto',
					fluid: true,
					buttons: [{
						text: (labelObject['Ok'] != null ? labelObject['Ok'] : 'Ok'),
						click: function() {
							if (response['messageFlag']) {
								
                                                            var changedVal = $("#sqlToTableName").val();
                                                            var title = changedVal;
                                                            var selectedOperatorId = $('#' + flowChartWorkSpaceId).flowchart('getSelectedOperatorId');
                                                            var body = $('#' + flowChartWorkSpaceId).flowchart('getOperatorBody', selectedOperatorId);
                                                            var ele = document.createElement('div');
                                                            ele.innerHTML = body;
                                                            $(ele).find('.visionOpLabelDiv').remove();
                                                            body = ele.innerHTML;
                                                            body += '</div><div class="visionOpLabelDiv" title="Double click to Rename" ondblclick="renameOperatorDisplayLabel(\'' + title + '\',this)" style="width:' + (title.length * 5) + 'px;margin-left:' + (((title.length * -5) / 2) + 14) + 'px;">' + title + '</div>'
                                                            $('#' + flowChartWorkSpaceId).flowchart('setOperatorBody', selectedOperatorId, body);
                                                            $("#" + dialogId).html("");
                                                            //                                    $("#" + dialogId).dialog("close");
                                                            $("#" + dialogId).dialog("destroy");

                                                            if (createTableObj['dataSourceName'] == "Current V10"){
                                                                    provideDALAuthorisation(createTableObj['tableName']);
                                                            }
								
							}
							$(this).html("");
							//                                //$(this).dialog("close");
							$(this).dialog("destroy");
						}
					}],
					open: function() {
						$(this).closest(".ui-dialog").css("z-index", "9999");
						$(this).closest(".ui-dialog").find(".ui-button").eq(1).addClass("dialogyes");
						$(".visionHeaderMain").css("z-index", "999");
						$(".visionFooterMain").css("z-index", "999");
					},
					beforeClose: function(event, ui) {
						$(".visionHeaderMain").css("z-index", "99999");
						$(".visionFooterMain").css("z-index", "99999");
					}
				});
			}
		},
		error: function(e) {
			sessionTimeout(e);
		}

	});
}

function connectErpEtlDatabase(type, typeName) {

	var connectionName = $('#ErpEtlDbConnectionName').val();
	if (connectionName != null && connectionName != '') {
		connectionName = $.trim(connectionName);
	}
	var ClientId = $('#ERPEtlClientName').val();
	if (ClientId != null && ClientId != '') {
		ClientId = $.trim(ClientId);
	}
	var hostName = $('#ERPEtlHostName').val();
	if (hostName != null && hostName != '') {
		hostName = $.trim(hostName);
	}
	var userName = $('#ERPEtlUserName').val();
	if (userName != null && userName != '') {
		userName = $.trim(userName);
	}
	var password = $('#ERPEtlPassword').val();
	if (password != null && password != '') {
		password = $.trim(password);
	}
	var LanguageId = $('#ERPEtlLanguageId').val();
	if (LanguageId != null && LanguageId != '') {
		LanguageId = $.trim(LanguageId);
	}
	var ERPSystemId = $('#ERPEtlSystemId').val();
	if (ERPSystemId != null && ERPSystemId != '') {
		ERPSystemId = $.trim(ERPSystemId);
	}
	var ERPEtlGroupServerName = "";
	if ($('#ERPEtlGroupServerName').length > 0) {
		ERPEtlGroupServerName = $('#ERPEtlGroupServerName').val();
		if (ERPEtlGroupServerName != null && ERPEtlGroupServerName != '') {
			ERPEtlGroupServerName = $.trim(ERPEtlGroupServerName);
		}
	}


	var checkedVal = $('#checkBoxChecked').is(':checked');
	var auditId = $('#auditId').val();
	if (!ClientId) {
		$('#ERPEtlClientNameError').html("Please enter ClientId");
	}
	if (!hostName) {
		$('#ERPEtlHostNameError').html("Please enter Host Name");
	}
	if (!userName) {
		$('#ERPEtlUserNameError').html("Please enter Username");
	}
	if (!password) {
		$('#ERPEtlPasswordError').html("Please enter Password");
	}
	if (!LanguageId) {
		$('#ERPEtlLanguageIdError').html("Please enter LanguageId");
	}
	if (!ERPSystemId) {
		$('#ERPEtlSystemIdError').html("Please enter ERPSystemId");
	}

	$('.dataMigrationInputError').hide();
	$('.visionDataMigrationError').hide();
	connectErpEtlDatabaseProcess(connectionName, hostName, ClientId, userName, password, ERPSystemId, typeName, LanguageId, type, ERPEtlGroupServerName);

}
function connectErpEtlDatabaseProcess(connectionName, hostName, ClientId, userName, password, ERPSystemId, selectedDbType, LanguageId, ConnectionType, group) {
	$.ajax({
		type: 'post',
		traditional: true,
		dataType: 'html',
		cache: false,
		url: 'getErpConnectionDetails',
		async: true,
		data: {
			connectionName: connectionName,
			ClientId: ClientId,
			hostName: hostName,
			userName: userName,
			password: password,
			LanguageId: LanguageId,
			ERPSystemId: ERPSystemId,
			checkedVal: true,
			selectedItemLabel: selectedDbType,
			EtlERPFlag: 'Y',
			ConnectionType: ConnectionType,
			group: group

		},
		success: function(response) {
			stopLoader();
			if (response != null) {
				var responseObj = JSON.parse(response);
				if (responseObj != null && responseObj.connectionFlag == 'Y') {
					$('#visionShowErpEtlMsg').show();
					$('#visionShowErpEtlMsg').html('<p style="color:green">' + responseObj['connectionMessage'] + '</p>');
					$("#connectEtlDbTd").html("<input type='button' value='Close' name='Close'  onclick = \"closeEtlConnectionDialog()\" class='visionEtlCloseButton'>");
					// showMessagePopup(result['connectionMessage']);
				} else {
					// showMessagePopup(result['connectionMessage']);
					$('#visionShowErpEtlMsg').show();
					$('#visionShowErpEtlMsg').html('<p style="color:red">' + responseObj['connectionMessage'] + '</p>');
				}
				if (selectedDbType != null) {
					var treeItemElement = globalFileTreeItem[selectedDbType];
					if (treeItemElement != null) {
						var $element = $(treeItemElement);
						var children = $element.find('ul:first').children();
						if (children != null && children.length > 0) {
							$.each(children, function(index) {
								$('#savedConnections').jqxTree('removeItem', this)
							})
							$('#savedConnections').jqxTree('addTo', { label: 'dummy', value: "ajax" }, treeItemElement);
							$('#savedConnections').jqxTree('collapseItem', treeItemElement);
							$('#savedConnections').jqxTree('expandItem', treeItemElement);
						}
					}
				}
				//                var treeItemElement = globalFileTreeItem[selectedDbType.toUpperCase()];
				//                var $element = $(treeItemElement);
				//                var children = $element.find('ul:first').children();
				//                $.each(children, function (index) {
				//                    $('#savedConnections').jqxTree('removeItem', this)
				//                })
				//                $('#savedConnections').jqxTree('addTo', {label: 'dummy', value: "ajax"}, treeItemElement);
				//                $('#savedConnections').jqxTree('collapseItem', treeItemElement);
				//                $('#savedConnections').jqxTree('expandItem', treeItemElement);
				// files expand ravi end 
			}
		},
		error: function(e) {
			sessionTimeout(e);
			stopLoader();
		}

	});
}




function refreshLogFile() {
	//var jobId = $("#currentJobId").val();
	var jobId =  $("#"+flowChartWorkSpaceId).attr("jobid");
	stopLoader();
	var currentProcesslogDate = $("#currentProcesslogDate").val();
	var currentProcesslogIndex = $("#currentProcesslogIndex").val();
	var previsousProcessLogDate;
	$.ajax({
		type: 'post',
		traditional: true,
		dataType: 'html',
		cache: false,
		url: 'refreshProcessLog',
		async: true,
		data: {
			currentProcesslogDate: ((currentProcesslogDate != null && currentProcesslogDate != '') ? currentProcesslogDate : ""),
			currentProcesslogIndex: ((currentProcesslogIndex != null && currentProcesslogIndex != '') ? currentProcesslogIndex : ""),
			jobId: jobId
		},
		success: function(response) {
			if (response != null && response != '') {
				var resultObj = JSON.parse(response);
				if (resultObj != null && !jQuery.isEmptyObject(resultObj)) {
					showRecordCountOnOp(resultObj);
					$("#previousProcessLogIndex").val($("#currentProcesslogIndex").val());
					$("#currentProcesslogIndex").val(resultObj['currentProcesslogIndex']);
					var logTxt = resultObj['logTxt'];
					if (logTxt != null && logTxt != '') {

						console.log("logTxt : " + logTxt);


						if ($("#currentProcesslogIndex").val() != $("#previousProcessLogIndex").val()) {
							if ($("#etlJobProcessingLoaderId").length > 0) {
								$("#processlogTable tr:last").remove();
							}
							$("#processlogTable tbody").append(logTxt);
							var logText = "<tr>"//44warning.png
								+ "<td width='5%'><img src='images/information.gif' style='width:16px;height:16px;padding:2px'></td>"
								+ "<td width='25%'>" + resultObj['currentDate'] + "</td>"
								+ "<td style='width:70%;text-align:-webkit-center;'  ><div id = 'etlJobProcessingLoaderId' class='dot-flashing' ></div></td>"
								+ "</tr>";
							$("#processlogTable tbody").append(logText);
						}
						$("#currentProcesslogDate").val(resultObj['currentProcesslogDate']);
						if (resultObj['processFlag'] == 'N') {
							clearInterval(processLogInterval);
							if ($("#etlJobProcessingLoaderId").length > 0) {
								$("#processlogTable tr:last").remove();
							}
						}


					} else {
						if ($("#etlJobProcessingLoaderId").length > 0) {
							$("#processlogTable tr:last").remove();
						}

						var logText = "<tr>"//44warning.png
							+ "<td width='5%'><img src='images/information.gif' style='width:16px;height:16px;padding:2px'></td>"
							+ "<td width='25%'>" + resultObj['currentDate'] + "</td>"
							+ "<td style='width:70%;text-align:-webkit-center;'  ><div id = 'etlJobProcessingLoaderId' class='dot-flashing' ></div></td>"
							+ "</tr>";
						$("#processlogTable tbody").append(logText);
					}
				} else {

				}
			} else {

			}
		},
		error: function(e) {
			sessionTimeout(e);
			stopLoader();
			if (processLogInterval != null) {
				clearInterval(processLogInterval);
			}
		}

	});
}




function openLogFile() {
	var jobId = $("#currentJobId").val();
	var processLogTable = "<div id='processLogDiv' class='LogTableMain'>"
		+ "<div id=''> "
		+ " <div class='logIconDiv'>"
		+ "<img src=\"images/StopPocessJob.svg\" class=\"visionETLIcons\" title=\"Cancel Job Execution\" "
		+ " style=\"width:15px;height: 15px;cursor:pointer;\""
		+ " onclick='cancellCurrentJob()'/>"
		+ "<img src=\"images/Refresh Icon.svg\" class=\"visionETLIcons\" title=\"Refresh log\" "
		+ " style=\"width:15px;height: 15px;cursor:pointer;margin-left:5px;\""
		+ " onclick='refreshLogFile()'/>"
		+ "</div>"
		+ "</div"
		+ "<input type='hidden' id='currentProcesslogDate'/><input type='hidden' id='currentProcesslogIndex'/><input type='hidden' id='previousProcessLogIndex'/>"//currentProcesslogIndex
		+ "<table id='processlogTable' class='logtable' style='width:100%'>"
		+ "<thead>"
		+ "<tr>"
		+ "<th width='5%'></th>"
		+ "<th width='25%' style='background: #0071c5 none repeat scroll 0 0;color: #FFF;text-align: center;'>Time Stamp</th>"
		+ "<th width='70%' style='background: #0071c5 none repeat scroll 0 0;color: #FFF;text-align: center;'>Message</th>"
		+ "</tr>"
		+ "</thead>"
		+ "<tbody>"
		+ "</tbody>"
		+ "</table>"
		+ "</div>";
	$("#dialogLogFile").html(processLogTable);
	$("#dialogLogFile").dialog({
		title: (labelObject['Log File'] != null ? labelObject['Log File'] : 'Log File'),
		modal: true,
		width: 'auto',
		maxWidth: 500,
		height: 'auto',
		maxHeight: 500,
		position: {
                my: 'right bottom', 
                at: 'right bottom-40', 
                of: window
                },
		fluid: true,
		buttons: [{
			text: (labelObject['Ok'] != null ? labelObject['Ok'] : 'Ok'),
			click: function() {
				if (processLogInterval != null) {
					clearInterval(processLogInterval);
					$(".etlProcessComponentLoader").remove();
				}
				$(this).html("");
				//                    $(this).dialog("close");
				$(this).dialog("destroy");
			}

		}],
		open: function() {
			processLogInterval = setInterval(function() {
				refreshLogFile() // this will run after every 1 seconds
				//refreshOperatorProcessStatus();
			}, 2000);


			$(this).closest(".ui-dialog").find(".ui-button").eq(1).addClass("dialogyes");
			$(".visionHeaderMain").css("z-index", "999");
			$(".visionFooterMain").css("z-index", "999");
			$(".ui-dialog").addClass('visionDMTreePopup');
			//                            $("#dataMigrationTabs").jqxTabs({width: "100%", height: "130px", position: 'top', theme: 'ui-redmond', reorder: true});
			//
			//                            $('#dataMigrationTabs').unbind('selected').on('selected', function (event) {
			//                                $('#iconsdiv').attr('style', 'margin-top:4px !important');
			//                            });
			//                            $("#dataMigrationTabs").jqxTabs({width: "100%", height: "100%", position: 'top', theme: 'ui-redmond', reorder: true});

			if ($("#dialogLogFile").find(".ui-dialog-titlebar").hasClass("maxMinBtns")) {
				$(".maxMinBtns").remove();
				$("#dialogLogFile").closest(".ui-dialog").find(".ui-dialog-titlebar").append('<div class="maxMinBtns" style="display: flex;margin-right:15px;"><button id="maximizeDialog" class="ui-button ui-corner-all ui-widget">⛶</button><button id="minimizeDialog" class="ui-button ui-corner-all ui-widget">-</button></div>');
				}
				else{
                                    $(".maxMinBtns").remove();
                                    $("#dialogLogFile").closest(".ui-dialog").find(".ui-dialog-titlebar").append('<div class="maxMinBtns" style="display: flex;margin-right:15px;"><button id="maximizeDialog" class="ui-button ui-corner-all ui-widget">⛶</button><button id="minimizeDialog" class="ui-button ui-corner-all ui-widget">-</button></div>');
				}
				
				 $("#maximizeDialog").on("click", function() {
				 $("#dialogLogFile").dialog("option", "height", 500);
				         $("#dialogLogFile").dialog("option", "position", { my: "right bottom", at: "right bottom-40", of: window} );
				});
				$("#minimizeDialog").on("click", function() {
				$("#dialogLogFile").dialog("option", "height", 240);
				         $("#dialogLogFile").dialog("option", "position", { my: "right bottom", at: "right bottom-40", of: window} );
				});
		},
		beforeClose: function(event, ui) {

			$(".visionHeaderMain").css("z-index", "99999");
			$(".visionFooterMain").css("z-index", "99999");
		}, close: function(event, ui) {
			if (processLogInterval != null) {
				clearInterval(processLogInterval);
			}
			//                        $(this).html("");
			//                        $(this).dialog("close");
			//                        $(this).dialog("destroy");
		}
	});
}

function recursiveReplaceFont(queryString, replceStr, fontStr) {
	if (queryString != null && queryString != '' && queryString.indexOf(replceStr) > -1) {
		var quotetedStr = "'" + queryString.substring(queryString.indexOf(replceStr) + 1,
			queryString.indexOf(replceStr, queryString.indexOf(replceStr) + 1)) + "'";
		queryString = queryString.replace(quotetedStr, fontStr + quotetedStr + "</font>");
		if (queryString != null && queryString != '' && queryString.indexOf(replceStr) > -1) {
			queryString = recursiveReplaceFont(queryString, replceStr, fontStr);
		}
	}
}

function dataTypeDialog($this) {
	var allDataTypeObjStr = $("#sqlAllDataTypeObj").val();
	if (allDataTypeObjStr != null && allDataTypeObjStr != '') {
		var allDataTypeObj = JSON.parse(allDataTypeObjStr);
		if (allDataTypeObj != null && !jQuery.isEmptyObject(allDataTypeObj)) {
			var toSysType = $("#sqlToDataSourceName").attr("data-tosystype");
			if (toSysType != null && toSysType != '') {
				toSysType = toSysType.toUpperCase();
			}
			var allDataTypeStr = allDataTypeObj[toSysType];
			//dataTypeDialog
			$("#dataTypeDialog").html(allDataTypeStr);
			$("#dataTypeDialog").dialog({
				title: ((labelObject['Data Type'] != null ? labelObject['Data Type'] : 'Data Type') + "(" + toSysType + ")"),
				modal: true,
				height: 'auto',
				minWidth: 700,
				maxWidth: 1000,
				fluid: true,
				buttons: [{
					text: (labelObject['Ok'] != null ? labelObject['Ok'] : 'Ok'),
					click: function() {
						var dataTypeList = $("#dataTypeList").val();
						var dataTypeLength = $("#dataTypeLength").val();
						var dataTypeByteChar = $("#dataTypeByteChar").val();
						var dataTypePrecesion = $("#dataTypePrecesion").val();
						var dataTypeScale = $("#dataTypeScale").val();
						if (dataTypeList != null && dataTypeList != '') {
							var dataType = dataTypeList;
							if (dataTypeLength != null && dataTypeLength != '' && !$("#dataTypeLength").prop('disabled')) {
								dataType += "(" + dataTypeLength;
								if (dataTypeByteChar != null && dataTypeByteChar != '' && !$("#dataTypeByteChar").prop('disabled')) {
									dataType += " " + dataTypeByteChar;
								}
								dataType += ")";
							} else if (dataTypePrecesion != null && dataTypePrecesion != '' && !$("#dataTypePrecesion").prop('disabled')) {
								dataType += "(" + dataTypePrecesion;
								if (dataTypeScale != null && dataTypeScale != '' && !$("#dataTypeScale").prop('disabled')) {
									dataType += " ," + dataTypeScale;
								}
								dataType += ")";
							}
							$($this).find('input').val(dataType);
							$($this).find('span').html(dataType);
							$(this).html("");
							//                                $(this).dialog("close");
							$(this).dialog("destroy");
						}

					}
				},
				{
					text: (labelObject['Cancel'] != null ? labelObject['Cancel'] : 'Cancel'),
					click: function() {
						$(this).html("");
						//                            $(this).dialog("close");
						$(this).dialog("destroy");
						// $("#labeld").empty();

					}

				}],
				open: function() {
					$(this).closest(".ui-dialog").find(".ui-button").eq(1).addClass("dialogyes");
					$(this).closest(".ui-dialog").find(".ui-button").eq(2).addClass("dialogno");
					$(".visionHeaderMain").css("z-index", "999");
					$(".visionFooterMain").css("z-index", "999");
				},
				beforeClose: function(event, ui) {
					$(".visionHeaderMain").css("z-index", "99999");
					$(".visionFooterMain").css("z-index", "99999");
				}
			});
		}
	}
}
function dataTypeChange($this, id) {
	var dataType = $("#" + id).val();
	if (dataType != null && dataType != '') {
		var sysType = $("#" + id).find(':selected').data('sys-type');
		var maxLen = $("#" + id).find(':selected').data('max-len');
		var lengthFlag = $("#" + id).find(':selected').data('length-flag'); //visionDataTypeLength
		var byteCharFlag = $("#" + id).find(':selected').data('byte-char-flag'); //visionDataTypeByteChar
		var precesionFlag = $("#" + id).find(':selected').data('precesion-flag'); //visionDataTypePrecesion
		var scaleFlag = $("#" + id).find(':selected').data('scale-flag'); //visionDataTypeScale
		if (lengthFlag == 'Y') {
			$(".visionDataTypeLength").removeAttr("disabled");
		} else {
			$(".visionDataTypeLength").attr("disabled", "disabled");
		}
		if (byteCharFlag == 'Y') {
			$(".visionDataTypeByteChar").removeAttr("disabled");
		} else {
			$(".visionDataTypeByteChar").attr("disabled", "disabled");
		}
		if (precesionFlag == 'Y') {
			$(".visionDataTypePrecesion").removeAttr("disabled");
		} else {
			$(".visionDataTypePrecesion").attr("disabled", "disabled");
		}
		if (scaleFlag == 'Y') {
			$(".visionDataTypeScale").removeAttr("disabled");
		} else {
			$(".visionDataTypeScale").attr("disabled", "disabled");
		}

	} else {
		$(".visionDataTypeLength").removeAttr("disabled");
		$(".visionDataTypeByteChar").removeAttr("disabled");
		$(".visionDataTypePrecesion").removeAttr("disabled");
		$(".visionDataTypeScale").removeAttr("disabled");
	}
}




function openSavedJob(event, jobId, jobDescr, folderName, folderId) {
	
	$(".etlProcessComponentLoader").remove();
	$(".operatorProcessStatus").remove();
	
	$("#folderNameHidden").val(folderName);
	$("#folderIdHidden").val(folderId);
	$("#currentGroupJobName").val(jobDescr);
	$("#currentJobId").val(jobId);
	$("#currentJobName").val(jobDescr);
	showLoader();
	try {
		var targetDiv = $(event.target).parents('li:first').find("div:first")[0];
		$("#avaialableJobsTree").find(".selectJqxTreeItem").removeClass("selectJqxTreeItem");
		$(targetDiv).addClass("selectJqxTreeItem");
	} catch (e) {
	}

	var data = {
		jobDescr: jobDescr,
		jobId: jobId
	};
	$.ajax({
		type: "post",
		traditional: true,
		dataType: 'json',
		url: 'getSavedJobData',
		cache: false,
		data: data,
		success: function(response) {
			stopLoader();
			switchETLDesignTabs("li_designView", "contentSplitter"); // -----code start
			var flowChartData = JSON.parse(response['flowChartData']);
			//            $("#"+flowChartWorkSpaceId).remove();
			flowChartWorkSpaceId = "workSpace_" + jobId;
			var selectedItemIndex = $('#flowChartTabs').jqxTabs('selectedItem');
			if (selectedItemIndex == null) {
				$("#feedHeader").append('<div id="flowChartTabs"  class="flowChartTabs flowChartHeaderTabs" style="width: 100%;height: 9%;"><ul class=flowChartTabList><li></li></ul><div></div></div>');
				$('#flowChartTabs').jqxTabs({ width: "100%", height: "100%", position: 'top', theme: 'ui-redmond', reorder: true });
				$('#flowChartTabs').jqxTabs('showAllCloseButtons');
				$("#flowChartTabs").find("li.jqx-tabs-title").find("div.jqx-tabs-close-button").css("background-image", "url(images/close.png)");
				$("#flowChartTabs").find("li.jqx-tabs-title-selected-top").find("div.jqx-tabs-close-button").css("background-image", "url(images/close.png)");
				$('#flowChartTabs').jqxTabs('removeAt', 0);
				$('#flowChartTabs').jqxTabs('addFirst', jobDescr, '<div  id="workSpace_' + jobId + '" class="flowchart-example-container" jobId="' + jobId + '" jobName="' + jobDescr + '" folderId= "' + folderId + '" folderName="' + folderName + '" ></div>');
				
				
			
			} else {
				var flowChartIndex = 'workSpace_' + jobId;
				var length = $('#flowChartTabs').jqxTabs('length');
				var openedTab = false;
				for (var i = 0; i < length; i++) {
					var title = $('#flowChartTabs').jqxTabs('getTitleAt', i);
	
					if (title.indexOf(".etl-page-body") > -1){
						title = title.substring(0,title.indexOf(".etl-page-body"));
					}
				
					if (title != null && title == jobDescr) {
						$('#flowChartTabs').jqxTabs('select', i);
						openedTab = true;
						$("#" + flowChartIndex).remove();
						var selectedItemIndex = $('#flowChartTabs').jqxTabs('selectedItem');
						var htmlDiv = '<div  id="workSpace_' + jobId + '" class="flowchart-example-container" jobId="' + jobId + '" jobName="' + jobDescr + '" folderId= "' + folderId + '" folderName="' + folderName + '" ></div>';
						$('#flowChartTabs').jqxTabs('setContentAt', selectedItemIndex, htmlDiv);
						break;
					}
				}
				if (!openedTab) {
					var divStr = ''
					divStr += '<div  style="display: flex;float:left;margin-top:5px;">'
					divStr += '</div>'
					divStr += '<div  id="workSpace_' + jobId + '" class="flowchart-example-container" jobId="' + jobId + '" jobName="' + jobDescr + '" folderId= "' + folderId + '" folderName="' + folderName + '" ></div>';
					divStr += '';
					$('#flowChartTabs').jqxTabs('showAllCloseButtons');
					$("#flowChartTabs").find("li.jqx-tabs-title").find("div.jqx-tabs-close-button").css("background-image", "url(images/close.png)");
					$("#flowChartTabs").find("li.jqx-tabs-title-selected-top").find("div.jqx-tabs-close-button").css("background-image", "url(images/close.png)");
					//                    $('#flowChartTabs').jqxTabs('addLast', jobDescr, divStr);
					var tabsLength = $('#flowChartTabs').jqxTabs('length');

					$('#flowChartTabs').jqxTabs('addAt', tabsLength - 1, jobDescr, divStr);

				}
			}
			
			$('#flowChartTabs').on('selected', function(event) {
				$("#feedContentArea").html("");
				var clickedItem = event.args.item;
				var jobName = $('#flowChartTabs').jqxTabs('getTitleAt', clickedItem);
				var content = $('#flowChartTabs').jqxTabs('getContentAt', clickedItem);
				var workSpaceId = $(content).attr("id");
				if (workSpaceId != null) {
					flowChartWorkSpaceId = workSpaceId;
				}
				if (workSpaceId == null) {
					workSpaceId = $(content).children('div:nth-child(1)').attr("id");
					var childDiv = $(content).children();
					var childDivID = childDiv[0];
					flowChartWorkSpaceId = childDivID['id'];
				}
				if (workSpaceId == null) {
					workSpaceId = $(content).children('div:nth-child(1)').attr("id");
					var childDiv = $(content).children();
					var childDivID = childDiv[1];
					if (childDivID != null) {
						flowChartWorkSpaceId = childDivID['id'];
					}
					if (childDivID == null) {
						var lastChildId = $(content).children().last();
						var getIdDiv = lastChildId[0];
						var childId = getIdDiv['lastChild'];
						flowChartWorkSpaceId = childId['id'];
					}
				}
				var jobId = flowChartWorkSpaceId.substring(10, 100);
				var jobName = $('#flowChartTabs').jqxTabs('getTitleAt', clickedItem);
				$('#currentJobName').val(jobName);
				$("#currentJobId").val(jobId);
				var divHiddenFileds = $('#' + flowChartWorkSpaceId).find('input[type="hidden"]')
				var id = divHiddenFileds[0].id;
				var name = divHiddenFileds[1].id;
				var folderId = $("#" + id).val();
				var folderName = $("#" + name).val();
				$("#folderIdHidden").val(folderId);
				$("#folderNameHidden").val(folderName);
				
				
				/*$("#flowChartTabs").find("li").find("style").remove();
		var lisel = $("#flowChartTabs").find("li.jqx-tabs-title-selected-top");
		var width = $("#flowChartTabs").find("li.jqx-tabs-title-selected-top").width();
		$("#flowChartTabs").find("li.jqx-tabs-title-selected-top").append('<style>.etl-page-body #flowChartTabs .jqx-tabs-title-selected-top::after{margin-left:'+(width+8)+'px !important;}</style>');
*/
			});
			$('#' + flowChartWorkSpaceId).flowchart({
				linkWidth: 2,
				defaultSelectedLinkColor: '#000055',
				grid: 10,
				distanceFromArrow: 0,
				multipleLinksOnInput: true,
				multipleLinksOnOutput: true,
				defaultSelectedLinkColor: 'red',
				onOperatorContextMenu: function(operatorId) {
					console.log("operatorId:::" + operatorId);
					openOpeartorContextMenu(operatorId);
					return true;
				},
			});
			
			initialiseMouseSelection();
			
			var count = 0;
			var OperatorsData = {};
			var linksData = {};
			try {
				for (var key in flowChartData.operators) {

					OperatorsData[count] = flowChartData.operators[key];
					for (var i in flowChartData.links) {
						if (parseInt(key) == flowChartData.links[i].fromOperator) {
							flowChartData.links[i].fromOperator = count;
						}
						if (parseInt(key) == flowChartData.links[i].toOperator) {
							flowChartData.links[i].toOperator = count;
						}

					}

					count = count + 1;
				}
				for (var key in OperatorsData) {
					$("#workSpace_" + jobId).flowchart('addOperator', OperatorsData[key]);
				}
			} catch (e) {
			}



			var count = 0;
			//   try {

			for (var key in flowChartData.links) {

				linksData[count] = flowChartData.links[key];
				count = count + 1;
			}
			for (var key in linksData) {
				$("#workSpace_" + jobId).flowchart('addLink', linksData[key]);
			}

			$(".flowchart-operator-connector-label").hide();
			$(".flowchart-operator-title").hide();
			$(".visionMapOperator").removeClass("visionOpLabelDiv");
			// $('#'+flowChartWorkSpaceId).flowchart('setData', flowChartData);
			$("#dataMigrationTabs").remove();
			$("#normalizeOptionsTabs").remove(); // ravi normalise
			$("#deNormalizeOptionsTabs").remove();
			var mapIcons = $(".visionMapOperator");
			$.each(mapIcons, function(index) {
				$(this).attr('job-id', jobId);
				$(this).attr('job-name', jobDescr);
			});
			//$("[title='Update']").attr("onclick","updateJob('"+jobId+"','"+jobDescr+"')");

			$('#dataMigrationTabs :input').keyup(function(event) {
				if (event.target.nodeName == 'INPUT') {
					var $this = $(event.target);
					$this.attr("value", event.target.value);
					$this.attr("title", event.target.value);
					$this.val(event.target.value);
				}

			});
			previousOperatorId = null;
			prevTargetOperatorId = null;
			trfmRulesChanged = false;
			$("#emptyJobName").val(""); // ------------------code start emptyJob
			$("#emptyJobId").val("");
			$("#currentTrnsOpId").val(""); // ravi updated code changes

			$(".visionCountLabelsDiv").remove();
			//            var htmlDiv = $('#'+flowChartWorkSpaceId).html();
			////            $("#flowChartTabs").append();
			//            $("#flowChartTabs").append(htmlDiv);
		},
		error: function(e) {
			sessionTimeout(e);
		}
	
	});
	
}

function rightClickProcessJob(jobId) {
	showLoader();
	$("#currentJobId").val(jobId);
	$("#currentJobName").val("");
	$.ajax({
		type: "post",
		traditional: true,
		dataType: 'html',
		cache: false,
		url: "getJobTransformationRules",
		data: {
			jobId: jobId,
		},
		success: function(response) {
			showLoader();
			try {
				response = JSON.parse(response);
			} catch (e) {
			}

			var processJobData = JSON.parse(response['processJobDataObj']);
			processJobData['mappedData'] = response['mappedObjectData'];
			processJobData['jobId'] = jobId;
			$.ajax({
				type: 'post',
				traditional: true,
				dataType: 'html',
				cache: false,
				url: 'processETLData',
				async: true,
				data: processJobData,
				success: function(response) {
					stopLoader();
					try {
						$("#currentJobId").val(response['jobId']);
						$("#currentJobName").val(response['jobName']);
					} catch (e) {
					}
					openLogFile();
				},
				error: function(e) {
					sessionTimeout(e);
					stopLoader();
					if (processLogInterval != null) {
						clearInterval(processLogInterval);
					}
				}

			});
		}

	});
}

function deleteJob(jobId) {
	
	$("#dialog").html("Are you sure you want to delete the Job ??");
	$("#dialog").dialog({
		title: (labelObject['Confirmation'] != null ? labelObject['Confirmation'] : 'Confirmation'),
		modal: true,
		height: 'auto',
		minWidth: 300,
		maxWidth: 'auto',
		fluid: true,
		buttons: [{
			text: (labelObject['Yes'] != null ? labelObject['Yes'] : 'Yes'),
			click: function() {

				$(this).html("");
				//                    $(this).dialog("close");
				$(this).dialog("destroy");
				showLoader();
				$.ajax({
					type: "post",
					traditional: true,
					dataType: 'html',
					cache: false,
					url: "deleteJob",
					data: {
						jobId: jobId,
					},
					success: function(response) {
						stopLoader();
						try {
							response = JSON.parse(response);
						} catch (e) {
						}
						var message = response['message'];
						showMesg(message);
                                                
						var parentfolderid = $("#etlSavedJobsOptionsRefreshIcon").attr("parentfolderid");
                                                var parentfoldername = $("#etlSavedJobsOptionsRefreshIcon").attr("parentfoldername");
                                                var folderid = $("#etlSavedJobsOptionsRefreshIcon").attr("folderid");
                                                var foldername = $("#etlSavedJobsOptionsRefreshIcon").attr("foldername");

                                                showSavedJobs(parentfolderid, parentfoldername, folderid, foldername, "ETL")   ;

					},
					error: function(e) {
						sessionTimeout(e);
					}

				});
			}
		},
		{
			text: (labelObject['No'] != null ? labelObject['No'] : 'No'),
			click: function() {
				$(this).html("");
				//                    //$(this).dialog("close");
				$(this).dialog("destroy");
				// $("#labeld").empty();

			}

		}],
		open: function() {
			$(this).closest(".ui-dialog").find(".ui-button").eq(1).addClass("dialogyes");
			$(this).closest(".ui-dialog").find(".ui-button").eq(2).addClass("dialogno");
			$(".visionHeaderMain").css("z-index", "999");
			$(".visionFooterMain").css("z-index", "999");
		},
		beforeClose: function(event, ui) {
			$(".visionHeaderMain").css("z-index", "99999");
			$(".visionFooterMain").css("z-index", "99999");
		}
	});
}

function showFileNamePopup($this, fileType) {
	showLoader();
	var selectedOperatorId = $('#' + flowChartWorkSpaceId).flowchart('getSelectedOperatorId');
	var selectedFileOperatorData = $('#' + flowChartWorkSpaceId).flowchart('getOperatorData', selectedOperatorId);
	var getLinksTo = $('#' + flowChartWorkSpaceId).flowchart('getLinksTo', selectedOperatorId);
	var fileName = selectedFileOperatorData['userFileName'];
	if (!(fileName != null && fileName != '')) {
		fileName = '';
	}
	var fileNameDiv = "<div><input type='text' placeholder='Enter File name' id='targetFileName' value='" + fileName + "'/></div>";
	$("#dialog").html(fileNameDiv);
	$("#dialog").dialog({
		title: (labelObject['File Name'] != null ? labelObject['File Name'] : 'File Name'),
		modal: true,
		height: 'auto',
		minWidth: 300,
		maxWidth: 'auto',
		fluid: true,
		buttons: [{
			text: (labelObject['Ok'] != null ? labelObject['Ok'] : 'Ok'),
			click: function() {
				var targetFileName = $("#targetFileName").val();
				if (targetFileName != null && targetFileName != '') {
					fileType = "." + fileType;
					if (targetFileName.toLowerCase().indexOf(fileType) == -1) {
						targetFileName += fileType;
					}
					selectedFileOperatorData['userFileName'] = targetFileName;
					operatorDoublClick = true;
					$('#' + flowChartWorkSpaceId).flowchart('setOperatorData', selectedOperatorId, selectedFileOperatorData);
					$(".flowchart-operator-connector-label").hide();
					$(".flowchart-operator-title").hide();
					operatorDoublClick = false;
				}
				$(this).html("");
				//$(this).dialog("close");
				$(this).dialog("destroy");
			}
		}],
		open: function() {
			stopLoader();
			$(this).closest(".ui-dialog").find(".ui-button").eq(1).addClass("dialogyes");
			$(this).closest(".ui-dialog").find(".ui-button").eq(2).addClass("dialogno");
			$(".visionHeaderMain").css("z-index", "999");
			$(".visionFooterMain").css("z-index", "999");
		},
		beforeClose: function(event, ui) {
			$(".visionHeaderMain").css("z-index", "99999");
			$(".visionFooterMain").css("z-index", "99999");
		}
	});
}
function showMesgContinue(message, processFlag) {
	if (processFlag) {
		message = message + "  Press Ok to process Job"
	}
	if (message != null) {
		$("#dialog").html(message);
		$("#dialog").dialog({
			title: (labelObject['Message'] != null ? labelObject['Message'] : 'Message'),
			modal: true,
			height: 'auto',
			minWidth: 300,
			maxWidth: 'auto',
			fluid: true,
			buttons: [{
				text: (labelObject['Ok'] != null ? labelObject['Ok'] : 'Ok'),
				click: function() {
					$(this).html("");
					//$(this).dialog("close");
					$(this).dialog("destroy");
					if (processFlag) {
						processJob();
					}

				}
			}],
			open: function() {
				$(this).closest(".ui-dialog").find(".ui-button").eq(1).addClass("dialogyes");
				$(".visionHeaderMain").css("z-index", "999");
				$(".visionFooterMain").css("z-index", "999");
			},
			beforeClose: function(event, ui) {
				$(".visionHeaderMain").css("z-index", "99999");
				$(".visionFooterMain").css("z-index", "99999");
			}
		});
	}
}


function askSaveJobConfirmation() {
	

	if (trfmRulesChanged) {
		$("#dialog").html(labelObject['Do you want to save job before processing'] != null ? labelObject['Do you want to save job before processing'] : 'Do you want to save job before processing');
		$("#dialog").dialog({
			title: (labelObject['Confirm'] != null ? labelObject['Confirm'] : 'Confirm'),
			modal: true,
			height: 'auto',
			minWidth: 300,
			maxWidth: 'auto',
			fluid: true,
			buttons: [{
				text: (labelObject['Yes'] != null ? labelObject['Yes'] : 'Yes'),
				click: function() {
					$(this).html("");
					//$(this).dialog("close");
					$(this).dialog("destroy");
					trfmRulesChanged = true;
					getAllMappedData("Y");
				}
			},
			{
				text: (labelObject['No'] != null ? labelObject['No'] : 'No'),
				click: function() {
					$(this).html("");
					//$(this).dialog("close");
					$(this).dialog("destroy");
					processJob();
				}
			}],
			open: function() {
				$(this).closest(".ui-dialog").find(".ui-button").eq(1).addClass("dialogyes");
				$(this).closest(".ui-dialog").find(".ui-button").eq(2).addClass("dialogno");
				$(".visionHeaderMain").css("z-index", "999");
				$(".visionFooterMain").css("z-index", "999");
			},
			beforeClose: function(event, ui) {
				$(".visionHeaderMain").css("z-index", "99999");
				$(".visionFooterMain").css("z-index", "99999");
			}
		});
	} else {
		processJob();
	}

}
function viewConnection(connectonName) {
	/*var selectedItem = $("#savedConnections").jqxTree('getSelectedItem');
	var connectonName = selectedItem.value;
	var parentEventItem = selectedItem.parentElement.parentElement.parentElement;
	var selectedParentItem = $('#savedConnections').jqxTree('getItem', parentEventItem);
	var dBType = selectedParentItem['value'];*/
	//    if (connectonName == "Current_V10") {
	//        var connectionObj = savedDBData['Current_V10'];
	//
	//    }


	$.ajax({
		type: 'post',
		traditional: true,
		dataType: 'html',
		cache: false,
		url: 'getConnDetails',
		async: true,
		data: {
			connectonName: connectonName,
			//            connectionObj: JSON.stringify(connectionObj)
		},
		success: function(response) {
			stopLoader();
			if (response != null) {
				//var responseObj = JSON.parse(response);
				$("#dialog1").html(response);
				$("#dialog1").dialog({
					title: (labelObject['View Connection'] != null ? labelObject['View Connection'] : 'View Connection'),
					modal: true,
					height: 'auto',
					minWidth: 500,
					maxWidth: 'auto',
					fluid: true,
					buttons: [],
					open: function() {
						$(this).closest(".ui-dialog").find(".ui-button").eq(1).addClass("dialogyes");
						$(".visionHeaderMain").css("z-index", "999");
						$(".visionFooterMain").css("z-index", "999");
					},
					beforeClose: function(event, ui) {
						$(".visionHeaderMain").css("z-index", "99999");
						$(".visionFooterMain").css("z-index", "99999");
					}
				});
			}
		},
		error: function(e) {
			sessionTimeout(e);
		}

	});
}

function updateConnection(auditId, dbType) {
	var data = {}
	if (dbType == "DB" || dbType == "Oracle_ERP") {
		data = {
			connectionName: $("#connectionNameEtl").val(),
			hostName: $("#hostNameEtl").val(),
			port: $("#portEtl").val(),
			userName: $("#userNameEtl").val(),
			password: $("#passwordEtl").val(),
			serviceName: $("#serviceNameEtl").val(),
			serviceName: $("#serviceNameEtl").val(),
			dbType: dbType,
			auditId: auditId,
		}
	} else if (dbType == "ERP") {
		data = {
			connectionName: $("#erpConnectionNameEtl").val(),
			ClientId: $("#erpClientEtl").val(),
			hostName: $("#erpHostNameEtl").val(),
			userName: $("#erpUserNameEtl").val(),
			password: $("#erpPasswordEtl").val(),
			LanguageId: $("#erpLanguageIdEtl").val(),
			ERPSystemId: $("#erpSystemIdEtl").val(),
			dbType: dbType,
			auditId: auditId,
		}
	}
	$.ajax({
		type: 'post',
		traditional: true,
		dataType: 'html',
		cache: false,
		url: 'updateConnDetails',
		async: true,
		data: data,
		success: function(response) {
			stopLoader();
			if (response != null) {
				//var responseObj = JSON.parse(response);
				showMesg(response);
			}
		},
		error: function(e) {
			sessionTimeout(e);
		}

	});
}

function deleteFile(fileDataObjStr) {

	if (fileDataObjStr != null && fileDataObjStr != '') {
		var fileDataObj = JSON.parse(fileDataObjStr);
		if (fileDataObj != null) {
			var filePath = fileDataObj['filePath'];
			filePath = filePath.replaceAll('###', '\\');
			filePath = filePath.replaceAll('#$#', ' ');
			var fileName = fileDataObj['fileName'];
			if (fileName == null || fileName == "null") {
				fileName = filePath.substring(filePath.lastIndexOf('\\') + 1);
			}
			var fileType = fileDataObj['fileType'];

			$("#dialog").html(labelObject['Are you sure you want to delete file?'] != null ? labelObject['Are you sure you want to delete file?'] : 'Are you sure you want to delete file?');
			$("#dialog").dialog({
				title: (labelObject['Confirmation'] != null ? labelObject['Confirmation'] : 'Confirmation'),
				modal: true,
				height: 'auto',
				minWidth: 300,
				maxWidth: 'auto',
				fluid: true,
				buttons: [{
					text: (labelObject['Yes'] != null ? labelObject['Yes'] : 'Yes'),
					click: function() {
						$(this).html("");
						//$(this).dialog("close");
						$(this).dialog("destroy");
						$.ajax({
							type: 'post',
							traditional: true,
							dataType: 'html',
							cache: false,
							url: 'deleteFile',
							async: true,
							data: {
								fileName: fileName,
								filePath: filePath
							},
							success: function(response) {
								stopLoader();
								if (response.indexOf("Deleted Succesfully") > 0) {
									$("#savedConnections").jqxTree('removeItem', selectedItem);
								}

								if (response != null) {
									//var responseObj = JSON.parse(response);
									showMesg(response);
								}


							},
							error: function(e) {
								sessionTimeout(e);
							}

						});
					}
				},
				{
					text: (labelObject['No'] != null ? labelObject['No'] : 'No'),
					click: function() {
						$(this).html("");
						//$(this).dialog("close");
						$(this).dialog("destroy");
					}
				}],
				open: function() {
					$(this).closest(".ui-dialog").find(".ui-button").eq(1).addClass("dialogyes");
					$(this).closest(".ui-dialog").find(".ui-button").eq(2).addClass("dialogno");
					$(".visionHeaderMain").css("z-index", "999");
					$(".visionFooterMain").css("z-index", "999");
				},
				beforeClose: function(event, ui) {
					$(".visionHeaderMain").css("z-index", "99999");
					$(".visionFooterMain").css("z-index", "99999");
				}
			});
		}
	}


}


function deleteConnection(connectionName) { // ravi updated code changes
	/*if (auditId == null) {
		var selectedItem = $("#savedConnections").jqxTree('getSelectedItem');
		var connectionName = selectedItem.label;
	}*/
	$("#dialog").html(labelObject['Are you sure you want to delete connection?'] != null ? labelObject['Are you sure you want to delete connection?'] : 'Are you sure you want to delete connection?');
	$("#dialog").dialog({
		title: (labelObject['Confirmation'] != null ? labelObject['Confirmation'] : 'Confirmation'),
		modal: true,
		height: 'auto',
		minWidth: 300,
		maxWidth: 'auto',
		fluid: true,
		buttons: [{
			text: (labelObject['Yes'] != null ? labelObject['Yes'] : 'Yes'),
			click: function() {
				$(this).html("");
				//$(this).dialog("close");
				$(this).dialog("destroy");
				$.ajax({
					type: 'post',
					traditional: true,
					dataType: 'JSON',
					cache: false,
					url: 'deleteDatabaseDetails',
					async: true,
					data: {
						//auditId: auditId,
						connectionName: connectionName
					},
					success: function(response) {
						stopLoader();
						if (response != null) {
							//                                var responseObj = JSON.parse(response);
							showMesg(response['message']);
							if (response['deleteSucessful'] == "Y") {
								$('#savedConnections').jqxTree("removeItem", selectedItem);
								$("#savedConnections").jqxTree("refresh");
							}
						}
					},
					error: function(e) {
						sessionTimeout(e);
					}

				});
			}
		},
		{
			text: (labelObject['No'] != null ? labelObject['No'] : 'No'),
			click: function() {
				$(this).html("");
				//$(this).dialog("close");
				$(this).dialog("destroy");
			}
		}],
		open: function() {
			$(this).closest(".ui-dialog").find(".ui-button").eq(1).addClass("dialogyes");
			$(this).closest(".ui-dialog").find(".ui-button").eq(2).addClass("dialogno");
			$(".visionHeaderMain").css("z-index", "999");
			$(".visionFooterMain").css("z-index", "999");
		},
		beforeClose: function(event, ui) {
			$(".visionHeaderMain").css("z-index", "99999");
			$(".visionFooterMain").css("z-index", "99999");
		}
	});
}

function validateQuery() {
	showLoader();
	var selectQuery = $("#generatedTotalQuery").val();
	if (selectQuery != null && selectQuery != '') {
		$.ajax({
			type: "post",
			traditional: true,
			dataType: 'json',
			url: "validateSQLQuery",
			cache: false,
			data: {
				query: selectQuery
			},
			success: function(data, status, xhr) {
				stopLoader();
				if (data != null && !jQuery.isEmptyObject(data)) {
					showMesg(data['message']);
				}
			},
			error: function(e) {
				console.log(e);
				sessionTimeout(e);
				stopLoader();
			}
		});
	} else {
		showMesg("Query Empty");
	}
}

function viewFunQuery(tableId, selectedRowData) {
	var selectedFunctionName = selectedRowData['FUN_NAME'];
	var functionFormObj = {};
	var funStr = "";
	functionFormObj['functionName'] = selectedFunctionName;
	var rowCount = $('#' + tableId + ' tr').length;
	var funLvlType = selectedRowData['FUN_LVL_TYPE']; //
	if (funLvlType == 'MULTI_COLUMNS') {
		funStr += "" + selectedFunctionName + "";
	} else {

		funStr += "" + selectedFunctionName + "(";
	}
	var loopCount = 0;
	$("#" + tableId + " tr").each(function() {
		var tdArray = this.cells;
		if (tdArray != null && tdArray.length != 0) {
			var funFormLabel = $(tdArray[0]).text();
			var funValue = $(tdArray[1]).find("input").val();
			var funValueId = $(tdArray[1]).find("input").attr("id");
			if (funValue != null && funValue != '') {
				var trimVal = $.trim(funValue);
				if (trimVal.length > 0) {
					funValue = trimVal;
				}
				//                funValue = $.trim(funValue);
			}
			if (funValueId != null && funValueId != '') {
				var trimVal = $.trim(funValueId);
				if (trimVal.length > 0) {
					funValueId = trimVal;
				}
				//                funValueId = $.trim(funValueId);
			}
			funStr += "'" + funValue + "'";
			functionFormObj[funValueId] = funValue;
			if (loopCount != parseInt(rowCount) - 1) {
				funStr += ",";
			}
			loopCount++;
		}
	});
	if (funLvlType == 'MULTI_COLUMNS') {
		funStr += " END ";
	} else {

		funStr += ")";
	}
	console.log("funStr::" + funStr);
}

function viewSQLEditor(connectionName) {
	var timeOut;
	var currentIndex = $('#editorViewDiv').attr("display")
	if (!$('#editorViewDiv').is(":visible")) {
		switchETLDesignTabs('li_SQLEditor', 'editorViewDiv');
		timeOut = 1100;
		showLoader();
	} else {
		timeOut = 1;
	}
	setTimeout(function() {


		var length = $('#editorViewDiv').jqxTabs('length');
		var title = connectionName + ".Editor-";
		var lastSeq = 1;
		if (length != null && length != '' && parseInt(length) > 0) {
			for (var i = 0; i < parseInt(length); i++) {
				var titleText = $('#editorViewDiv').jqxTabs('getTitleAt', i);
				if (titleText != null && titleText != '' && titleText.indexOf(connectionName) > -1) {
					var editorStr = titleText.split("-")[1];
					if (editorStr != null && editorStr != '' && $.trim(editorStr)) {
						lastSeq = (parseInt(editorStr) + 1);
					}
				}
			}
		}
		var divId = connectionName.replace(" ", "_") + "_Editor_" + lastSeq;
		title = connectionName + ".Editor-" + lastSeq;
		
		
		var sqlIcons =  "<div id='"+divId+"_sqlIconsdiv' style='float: left;'>"
					 + "<img src='images/Refresh Icon.svg' class='visionETLIcons' title='Refresh' style='width:15px;height: 15px;cursor:pointer;'"
					 + "'/>"
					 + " <img id='" + divId + "_scriptsExecute'  onclick=executeEditorScripts('editorViewDiv');  src='images/Script_execution_icon-06.svg' class='visionETLIcons'  style='width:18px;height: 18px;cursor:pointer;margin-left:3px'/>"
			        + " <span style='cursor:pointer;float:right;margin-left:5px' onclick=addingConnectionSQL()><i class=\"fa fa-plus-square-o\" style=\"font-size:18px;color:blue\"></i></span>"
			        + "</div>";
					 
		
					 
		var divCode = ''
			+ '<div id="' + divId + '_Main_1" >'
			+  sqlIcons
			+ '<div id="' + divId + '" class="' + divId + ' etlSQLEditior"></div>'
			+'</div>'
			+ '<div id="' + divId + '_GRID_DIV" class="' + divId + '_GRID_DIV">'
			+ '<div id="' + divId + '_GRID" class="' + divId + '_GRID"></div>'
			+ '</div>';
			
		/*var divCode = + "<div id='"+divId+"_Main_1'>"
                    
					 + "<div id='"+divId+"_sqlIconsdiv' style='float: left;'>"
					 + "<img src='images/Refresh Icon.svg' class='visionETLIcons' title='Refresh' style='width:15px;height: 15px;cursor:pointer;'"
					 + "'/>"
					 + " <img id='"+divId+"_scriptsExecute'  onclick=executeEditorScripts('editorViewDiv');  src='images/Script_execution_icon-06.svg' class='visionETLIcons'  style='width:18px;height: 18px;cursor:pointer;float:right'/>"
					 + ""
					 + "</div>"
 
                    + "<div id='"+divId+"' class='etlSQLEditior' >"
                   

					+ "</div>"
                    + "</div>"
                    + "<div id='"+divId+"'_1_GRID_DIV' >"
                    + "<div id='"+divId+"'_1_GRID' ></div>"
                    + "</div>";*/
               
		$('#editorViewDiv').jqxTabs('addLast', title, divCode);
		$("#" + divId+"_Main_1").parent().attr("id", divId + "_splitter");
		$("#" + divId + "_splitter").prepend();
		// $("."+divId).parent().attr("data-connction-name", connectionName);
		// $("."+divId).remove();
		$("#" + divId).attr("data-connction-name", connectionName);
		$('#editorViewDiv').jqxTabs('select', parseInt(length));
		$('#editorViewDiv').jqxTabs('ensureVisible', -1);
		$('#' + divId + '_splitter').jqxSplitter({
			width: '100%', height: '100%',
			orientation: 'horizontal',
			panels: [{ size: "50%", min: 50 }, { min: 50, size: "50%" }]
		});
		var sqlMainEditor = ace.edit(divId, {
			mode: "ace/mode/sql",
			// enableBasicAutocompletion: true, // the editor completes the statement when you hit Ctrl + Space
			// showPrintMargin: true, // hides the vertical limiting strip
			fontSize: "100%", // ensures that the editor fits in the environment
			minLines: 5,
			maxLines: 20,
			wrap: true,
			autoScrollEditorIntoView: true
		});
                
                 $("#"+divId).find(".ace_content").on("mousedown",function(mdevent){
                                       
                        if ( mdevent.ctrlKey ) {
                            var  text = sqlMainEditor.getSelectedText();
                            if (text!=null && text!="") {
                                var columnsObj = globalTreeObj['treeColumnObj'];
                                var extTreeParams = $("#extTreeParams").val();

                                var data = {
                                        parentkey: text.toUpperCase(),
                                        treeId: globalTreeObj['treeId'],
                                        level: '5',
                                        extTreeParams: {},
                                        columnsObj: JSON.stringify(columnsObj),
                                        connectionObj: JSON.stringify(savedDBData[connectionName]),
                                        startIndex: 0,
                                        endIndex: 50,
                                        DBValue: connectionName,
                                        tableName: text.toUpperCase()
                                };

                                viewTableDataGrid(data);
                            }


                        }

                    });
                
                $("#"+divId).on("keydown",function(event){
                    if(  event.ctrlKey && event.which === 13  ) {
                        console.log('you pressed ctrlKey+Enter');
                         executeEditorScripts("editorViewDiv");
                    }
                })
                
		// var sqlMainEditor = ace.edit(divId);
		// sqlMainEditor.setOptions({
		// enableBasicAutocompletion: true, // the editor completes the statement when you hit Ctrl + Space
		// showPrintMargin: false, // hides the vertical limiting strip
		// fontSize: "100%" // ensures that the editor fits in the environment
		// });
		// sqlMainEditor.getSession().setMode("ace/mode/sql");

		stopLoader();
	}, timeOut)
}

function executeEditorScripts(tabId) {
	var script = "";
	var divId = "";
	var tabIndex = $("#" + tabId).jqxTabs("val");
	var content = $("#" + tabId).jqxTabs('getContentAt', parseInt(tabIndex));
	if (content != null) {
		var spliterIdDiv = content['0'];
		if (spliterIdDiv != null) {
			var spliterId = spliterIdDiv.id;
			console.log(spliterId);
			if (spliterId != null && spliterId != '') {
				divId = spliterId.replace("_splitter", "");
			}
		} else {
			var spliterId = content.id;
			console.log(spliterId);
			if (spliterId != null && spliterId != '') {
				divId = spliterId.replace("_splitter", "");
			}

		}

	}

	var sqlMainEditor = sqlMainEditor = ace.edit(divId);
	var script = sqlMainEditor.getSelectedText();
	if (script == "") {
            script = String(sqlMainEditor.getSession().getValue());
	}

	console.log("data:::" + script);
	if (script != null
		&& $.trim(script) != null
		&& $.trim(script) != ''
		&& $.trim(script) != 'null'
		&& $.trim(script.replace(/[\t\n]+/g, ' ')) != null
		&& $.trim(script.replace(/[\t\n]+/g, ' ')) != ''
		&& $.trim(script.replace(/[\t\n]+/g, ' ')) != 'null'
	) {
		var connectionName = $("#" + divId).attr("data-connction-name");
		$.ajax({
			type: "post",
			traditional: true,
			dataType: 'json',
			url: "executeSQLQuery",
			cache: false,
			data: {
				script: script,
				connectionName: connectionName
			},
			success: function(response, status, xhr) {
				stopLoader();
				if (response != null && !jQuery.isEmptyObject(response)) {
					if (response['selectFlag']) {
						showExecutionResults(script, connectionName, response, divId)
					} else {
						$("#dialog").html(response['message']);
						$("#dialog").dialog({
							title: (labelObject['Message'] != null ? labelObject['Message'] : 'Message'),
							modal: true,
							height: 'auto',
							minWidth: 300,
							maxWidth: 'auto',
							fluid: true,
							buttons: [{
								text: (labelObject['Ok'] != null ? labelObject['Ok'] : 'Ok'),
								click: function() {
									$(this).html("");
									//$(this).dialog("close");
									$(this).dialog("destroy");
								}
							}],
							open: function() {
								$(this).closest(".ui-dialog").find(".ui-button").eq(1).addClass("dialogyes");
								$(".visionHeaderMain").css("z-index", "999");
								$(".visionFooterMain").css("z-index", "999");
							},
							beforeClose: function(event, ui) {
								$(".visionHeaderMain").css("z-index", "99999");
								$(".visionFooterMain").css("z-index", "99999");
							}
						});
					}

				}
			},
			error: function(e) {
				console.log(e);
				sessionTimeout(e);
				stopLoader();
			}
		});
	} else {
		showMesg("No scripts/query to be run");
	}
}

function showExecutionResults(script, connectionName, resultObj, divId) {
	showLoader();
	var gridId = divId + "_GRID";
	try {
		$("#" + gridId).jqxGrid("destroy");
	} catch (e) {
	}
	$("#" + gridId).remove();
	$("#" + gridId + "_DIV").html("<div id='" + gridId + "'></div>");
	var gridObj = resultObj['gridObject'];
	var gridPropObj = {};
	gridPropObj = gridObj.gridProperties;
	gridPropObj.columns = gridObj.columns;
	var columns = gridObj.columns;
	var source =
	{
		type: 'POST',
		//                                                async: false,
		datatype: "json",
		datafields: gridObj['datafields'],
		data: {
			columnList: JSON.stringify(gridObj['columnList']),
			script: script,
			connectionName: connectionName
		},
		url: 'showExecutionQueryResults',
		cache: false,
		root: 'Rows',
		processdata: function(data) {

		},
		beforeSend: function() {
			showLoader();
		}, loadError: function(xhr, status, error) {
			stopLoader();
		}, loadComplete: function(data) {
			stopLoader();
			//$("#div_" + tableName).jqxGrid('hiderowdetails', 0);
			//$("#row0div_" + tableName).hide();

		},
		beforeprocessing: function(data) {

			if (data[0] != null) {
				source.totalrecords = data[0].TotalRows;
			} else {
				source.totalrecords = 0;
			}
			stopLoader();
		},
		sort: function() {
			//                                                $("#" + gridResultObj['gridId'] + "_sort_columns").remove();
			$("#" + gridId).jqxGrid('updatebounddata', 'sort');
			try {
				$("#" + gridId).jqxGrid('clearselection');
			} catch (e) {
			}
			stopLoader();
		},
		filter: function() {

			$("#" + gridId).jqxGrid('updatebounddata', 'filter');
			try {
				$("#" + gridId).jqxGrid('clearselection');
			} catch (e) {
			}
			stopLoader();
		}


	};
	var dataAdapter = new $.jqx.dataAdapter(source);
	//    gridPropObj.source = dataAdapter;
	//    for (var i = 0; i < gridPropObj.columns.length; i++) {
	//        if (gridPropObj.columns [i].cellsrenderer != null) {
	//            gridPropObj.columns [i].cellsrenderer = eval(gridPropObj.columns [i].cellsrenderer);
	//        }
	//        if (gridPropObj.columns[i].rendered != null) {
	//            gridPropObj.columns[i].rendered = eval('(' + gridPropObj.columns[i].rendered + ')');
	//        }
	//        if (gridPropObj.columns[i].createeditor != null) {
	//            gridPropObj.columns[i].createeditor = eval('(' + gridPropObj.columns[i].createeditor + ')');
	//        }
	//        if (gridPropObj.columns[i].initeditor != null) {
	//            gridPropObj.columns[i].initeditor = eval('(' + gridPropObj.columns[i].initeditor + ')');
	//        }
	//        if (gridPropObj.columns[i].geteditorvalue != null) {
	//            gridPropObj.columns[i].geteditorvalue = eval('(' + gridPropObj.columns[i].geteditorvalue + ')');
	//        }
	//        if (gridPropObj.columns[i].cellvaluechanging != null) {
	//            gridPropObj.columns[i].cellvaluechanging = eval('(' + gridPropObj.columns[i].cellvaluechanging + ')');
	//        }
	//        if (gridPropObj.columns[i].cellbeginedit != null) {
	//            gridPropObj.columns[i].cellbeginedit = eval('(' + gridPropObj.columns[i].cellbeginedit + ')');
	//        }
	//    }
	//    if (gridPropObj.rendergridrows != null && gridPropObj.rendergridrows != "") {
	//        gridPropObj.rendergridrows = eval('(' + gridPropObj.rendergridrows + ')');
	//    }

	$('#' + gridId).jqxGrid(
		{
			width: "100%",
			height: "90%",
			//                theme: 'energyblue',
			autoshowloadelement: false,
			source: dataAdapter,
			pageable: true,
			pagesize: 50,
			showfilterrow: true,
			filterable: true,
			sortable: true,
			virtualmode: true,
			pagesizeoptions: ['50', '100', '500', '1000', '5000', '10000', '50000'],
			rendergridrows: function(params) {
				return params.data;
			},
                        handlekeyboardnavigation: function(event){
                                var position = $('#'+gridId).jqxGrid('scrollposition');
                                var left = position.left;
                                var key = event.charCode ? event.charCode : event.keyCode ? event.keyCode : 0;
                                var position = $('#'+gridId).jqxGrid('scrollposition');
                                if (key == 37) {
                                    console.log('Pressed Left Key.' );
                                    $('#'+gridId).jqxGrid('scrolloffset', 0,left-20);
                                    return true;
                                 }
                                else if (key == 39) {
                                   console.log('Pressed Right Key.');
                                   $('#'+gridId).jqxGrid('scrolloffset', 0,left + 20);
                                   return true;
                                }
                           },
			columnsresize: true,
			columns: columns
		});
	$('#' + gridId).on('celldoubleclick', function(event) {
		var args = event.args;
		var dataField = args.datafield;
		var dataField1 = args.text;
		var rowIndex = args.rowindex;
		var cellValue = args.value;
		var column = $('#' + gridId).jqxGrid('getcolumn', event.args.datafield).text;
		popupedit(column, cellValue);
	});
	//    $('#' + gridId).jqxGrid(gridPropObj);

}

function createNewJob() {

	//    var selectedItem = $('#avaialableJobsTree').jqxTree('selectedItem');
	//    var selectedItemElement = selectedItem.element;
	//    var parentFolderId = $($(selectedItemElement).find('div.visionEtlTreeFolders')[0]).attr("id");
	//    var folderValue = selectedItem.label;
	//    var treeLevel = selectedItem.level;
	//    var folderObj = {};
	//    folderObj['parentFolder'] = folderValue;
	//    folderObj['parentFolderId'] = parentFolderId;
	//    folderObj['treeLevel'] = parseInt(treeLevel);
	var jobId = genHexString(32);
	$("#currentJobId").val(jobId);
	$("#currentJobName").val("");
	//    var flowChartId = 'flowchartworkSourcesspace';
	var flowChartId = 'workSpace_' + jobId;
	flowChartWorkSpaceId = flowChartId;
	//    $("#" + flowChartId).remove;
	var selectedItemIndex = $('#flowChartTabs').jqxTabs('selectedItem');
	var tabName = "New Tab";
	if (selectedItemIndex == null) {
		$("#feedHeader").append('<div id="flowChartTabs"  class="flowChartTabs flowChartHeaderTabs" style="width: 100%;height: 9%;"><ul class=flowChartTabList><li></li></ul><div></div></div>');
		$('#flowChartTabs').jqxTabs({ width: "100%", height: "100%", position: 'top', theme: 'ui-redmond', reorder: true });
		$('#flowChartTabs').jqxTabs('showAllCloseButtons');
		$("#flowChartTabs").find("li.jqx-tabs-title").find("div.jqx-tabs-close-button").css("background-image", "url(images/close.png)");
		$("#flowChartTabs").find("li.jqx-tabs-title-selected-top").find("div.jqx-tabs-close-button").css("background-image", "url(images/close.png)");
		$('#flowChartTabs').jqxTabs('removeAt', 0);
		$('#flowChartTabs').jqxTabs('addFirst', tabName, '<div  id="' + flowChartWorkSpaceId + '" jobid="' + jobId + '" class="flowchart-example-container"></div>');
		//        $('#flowChartTabs').jqxTabs('addLast', tabName, '<div  id="' + flowChartWorkSpaceId + '" jobid="' + jobId + '" class="flowchart-example-container"></div>');
	} else {

		//        var length = $('#flowChartTabs').jqxTabs('length');
		//        var openedTab = false;
		//        for (var i = 0; i < length; i++) {
		//            var title = $('#flowChartTabs').jqxTabs('getTitleAt', i);
		//            if (title != null && title == tabName) {
		//                $('#flowChartTabs').jqxTabs('select', i);
		//                openedTab = true;
		//                $("#" + flowChartId).remove();
		//                var selectedItemIndex = $('#flowChartTabs').jqxTabs('selectedItem');
		//                var htmlDiv = '<div  id="flowchartworkSourcesspace" class="flowchart-example-container"></div>';
		//                $('#flowChartTabs').jqxTabs('setContentAt', selectedItemIndex, htmlDiv);
		//                break;
		//            }
		//        }
		//        if (!openedTab) {
		var divStr = ''
		divStr += '<div  style="display: flex;float:left;margin-top:5px;">'
		divStr += '</div>'
		divStr += '<div  id="' + flowChartWorkSpaceId + '" jobid="' + jobId + '"  class="flowchart-example-container"></div>'
		divStr += '';
		$('#flowChartTabs').jqxTabs('showAllCloseButtons');
		$("#flowChartTabs").find("li.jqx-tabs-title").find("div.jqx-tabs-close-button").css("background-image", "url(images/close.png)");
		$("#flowChartTabs").find("li.jqx-tabs-title-selected-top").find("div.jqx-tabs-close-button").css("background-image", "url(images/close.png)");
		var tabsLength = $('#flowChartTabs').jqxTabs('length');

		$('#flowChartTabs').jqxTabs('addAt', tabsLength - 1, tabName, divStr);
		//        $('#flowChartTabs').jqxTabs('addLast', tabName, divStr);

	}

	$("#" + flowChartWorkSpaceId).flowchart({
		linkWidth: 2,
		defaultSelectedLinkColor: '#000055',
		grid: 10,
		distanceFromArrow: 0,
		//                defaultOperatorClass:'VisionWorkFlowTest',
		//                multipleLinksOnInput: true,
		//                multipleLinksOnOutput: true,
		defaultSelectedLinkColor: 'red',
		onOperatorContextMenu: function(operatorId) {
			console.log("operatorId:::" + operatorId);
			openOpeartorContextMenu(operatorId);
			return true;
		},
	});
	initialiseMouseSelection();
	

	//   $("#" + flowChartWorkSpaceId).flowchart({
	//        linkWidth: 2,
	//        defaultSelectedLinkColor: '#000055',
	//        grid: 10,
	//        distanceFromArrow: 0,
	//        multipleLinksOnInput: true,
	//        multipleLinksOnOutput: true,
	//        defaultSelectedLinkColor: 'red',
	//        onOpeartorContextMenu: function (operatorId) {
	//            console.log("operatorId:::" + operatorId);
	//            openOpeartorContextMenu(operatorId);
	//            return true;
	//        },
	//    });
	//    $('#' + flowChartWorkSpaceId).flowchart({
	//             onLinkCreate: function (linkId, linkData) {
	//
	//            var fromOperatorId = linkData['fromOperator'];
	//            var fromOperatorData = $("#" + flowChartWorkSpaceId).flowchart('getOperatorData', fromOperatorId);
	//            var toOperatorId = linkData['toOperator'];
	//            var toOperatorData = $("#" + flowChartWorkSpaceId).flowchart('getOperatorData', toOperatorId);
	//            if (toOperatorData['component'] == 'Y' && toOperatorData['iconType'] != 'OUTPUT') {
	//                toOperatorData['tableName'] = "ZZ_TEMP_" + toOperatorData['timeStamp'];
	//                toOperatorData['statusLabel'] = toOperatorData['tableName'];
	//                toOperatorData['tableNameLabel'] = toOperatorData['iconType'] + "_OUTPUT_" + toOperatorData['operatorId'];
	//                if (toOperatorData['connObj'] == null) {
	//                    toOperatorData['connObj'] = savedDBData["Current_V10"];
	//                }
	//            }
	//
	//            $("#" + flowChartWorkSpaceId).flowchart('setOperatorData', toOperatorId, toOperatorData);
	//            //            setToOpDblCLickFuncName(fromOperator, toOperator);
	//            return true;
	//        },
	//        onLinkDelete: function (linkId, linkData) {
	//
	//            return true;
	//        },
	//        onOperatorCreate: function (operatorId, operatorData, fullElement) {
	//            var flowchartData = $('#' + flowChartWorkSpaceId).flowchart('getData');
	//            var flowchartOperatorTypes = flowchartData['operatorTypes'];
	//            var keys = Object.keys(flowchartOperatorTypes);
	//            if (keys.indexOf("OPERATORCREATE_" + operatorId) == -1) {
	//                flowchartOperatorTypes["OPERATORCREATE_" + operatorId] = operatorData;
	//                flowchartData['operatorTypes'] = flowchartOperatorTypes;
	//                $.each(flowchartData['operators'], function (k, v) {
	//                    delete flowchartOperatorTypes['OPERATORDELETE_' + k];
	//                })
	//                if (flowchartData['operators'] != null && !jQuery.isEmptyObject(flowchartData['operators'])) {
	//                    $('#' + flowChartWorkSpaceId).flowchart('setData', flowchartData);
	//                }
	//
	//            }
	//
	//            return true;
	//        },
	//        onOperatorDelete: function (operatorId) {
	//            var operatorData = $('#' + flowChartWorkSpaceId).flowchart('getOperatorData', parseInt(operatorId));
	//            var flowchartData = $('#' + flowChartWorkSpaceId).flowchart('getData');
	//            var flowchartOperatorTypes = flowchartData['operatorTypes'];
	//            flowchartOperatorTypes["OPERATORDELETE_" + operatorId] = operatorData;
	//            flowchartData['operatorTypes'] = flowchartOperatorTypes;
	////                                $.each(flowchartData['operators'], function(k, v){
	////                                delete flowchartOperatorTypes['OPERATORDELETE_' + k];
	////                                })
	//            if (flowchartData['operators'] != null && !jQuery.isEmptyObject(flowchartData['operators'])) {
	//
	//                $('#' + flowChartWorkSpaceId).flowchart('setData', flowchartData);
	//            }
	//            return true;
	//        },
	//        onAfterChange: function (changeType) {
	//
	//            if (!operatorDoublClick) {
	//                trfmRulesChanged = true;
	//                console.error("trfmRulesChanged : " + trfmRulesChanged);
	//                return true;
	//            }
	//        },
	//        onOperatorSelect: function (changeType) {
	//            $(document).find("input").blur();
	//            return true;
	//        },
	//        onLinkSelect: function (changeType) {
	//            $(document).find("input").blur();
	//            return true;
	//        }
	//    });

	//    refreshMappingArea();

	$("#dataMigrationTabs").remove();
	$("#normalizeOptionsTabs").remove();
	$("#deNormalizeOptionsTabs").remove();
	previousOperatorId = null;
	prevTargetOperatorId = null;
	trfmRulesChanged = false;
}

function renameJob(jobId, jobName) {
	var inputHtml = "<input id='renameJobId' class='visionRenameJob' value='" + jobName + "' />"
	$("#dialog").html(inputHtml);
	$("#dialog").dialog({
		title: (labelObject['Rename'] != null ? labelObject['Rename'] : 'Rename'),
		modal: true,
		height: 'auto',
		minWidth: 300,
		maxWidth: 'auto',
		fluid: true,
		buttons: [{
			text: (labelObject['Ok'] != null ? labelObject['Ok'] : 'Ok'),
			click: function() {
				var newjobDesc = $("#renameJobId").val();
				showLoader();
				$(this).html("");
				//$(this).dialog("close");
				$(this).dialog("destroy");

				$.ajax({
					type: 'post',
					traditional: true,
					dataType: 'html',
					cache: false,
					url: 'renameJob',
					async: true,
					data: {
						jobName: newjobDesc,
						jobId: jobId
					},
					success: function(response) {
						stopLoader();
						if (response != null) {
							
                                                        var parentfolderid = $("#etlSavedJobsOptionsRefreshIcon").attr("parentfolderid");
                                                        var parentfoldername = $("#etlSavedJobsOptionsRefreshIcon").attr("parentfoldername");
                                                        var folderid = $("#etlSavedJobsOptionsRefreshIcon").attr("folderid");
                                                        var foldername = $("#etlSavedJobsOptionsRefreshIcon").attr("foldername");
                                                        showSavedJobs(parentfolderid, parentfoldername, folderid, foldername, "ETL")   ;

							$("#dialog").html(response);
							$("#dialog").dialog({
								title: (labelObject["Message"] != null ? labelObject["Message"] : "Message"),
								modal: true,
								height: 'auto',
								minWidth: 300,
								maxWidth: 1000,
								fluid: true,
								buttons: [{
									text: (labelObject['Ok'] != null ? labelObject['Ok'] : 'Ok'),
									click: function() {
										
                                                                               
                                                                                $(this).html("");
										//$(this).dialog("close");
										$(this).dialog("destroy");
									}
								}],
								open: function() {
									$(this).closest(".ui-dialog").find(".ui-button").eq(1).addClass("dialogyes");
									$(".visionHeaderMain").css("z-index", "999");
									$(".visionFooterMain").css("z-index", "999");
								},
								beforeClose: function(event, ui) {
									$(".visionHeaderMain").css("z-index", "99999");
									$(".visionFooterMain").css("z-index", "99999");
								}
							});
						}
					},
					error: function(e) {
						sessionTimeout(e);
						stopLoader();
					}

				});
			}
		}
		],
		open: function() {
			$(this).closest(".ui-dialog").find(".ui-button").eq(1).addClass("dialogyes");
			$(this).closest(".ui-dialog").find(".ui-button").eq(2).addClass("dialogno");
			$(".visionHeaderMain").css("z-index", "999");
			$(".visionFooterMain").css("z-index", "999");
		},
		beforeClose: function(event, ui) {
			$(".visionHeaderMain").css("z-index", "99999");
			$(".visionFooterMain").css("z-index", "99999");
		}
	});
}

function copyJob(jobId) {

	$("#dialog").html(labelObject['Do you want Copy this Job?'] != null ? labelObject['Do you want Copy this Job?'] : 'Do you want Copy this Job?');
	$("#dialog").dialog({
		title: (labelObject['Confirm'] != null ? labelObject['Confirm'] : 'Confirm'),
		modal: true,
		height: 'auto',
		minWidth: 300,
		maxWidth: 'auto',
		fluid: true,
		buttons: [{
			text: (labelObject['Yes'] != null ? labelObject['Yes'] : 'Yes'),
			click: function() {
				$(this).html("");
				//$(this).dialog("close");
				$(this).dialog("destroy");
				var response = "<div id='textReason'> <table> <td><input id='selectFolderName' style='width: 250px;' class='visionDSMappingInput' type='text' value='Saved Jobs' folderId='C8DE75F32D56288CE0554B610B40A4A3'  readonly='true'><img src='images/tree_icon.svg' class='visionETLColMapImage'  onclick='selectFolder(this)' style=''> </td></table>";
				//UK folder
				response += "<textarea id='reasonId' class='visionDeleteReason'></textarea><br>\n\
                        </div>";
				response += "<div id='dailog_error_id' style='display:none;color:red'>" + (labelObject['Please give any Job Name'] != null ? labelObject['Please give new Job Name'] : 'Please give new Job Name') + "</div>";
				$("#dialog").html(response);
				$("#dialog").dialog({
					title: (labelObject['Job Name'] != null ? labelObject['Job Name'] : 'Job Name'),
					modal: true,
					height: 'auto',
					minWidth: 300,
					maxWidth: 'auto',
					fluid: true,
					buttons: [{
						text: (labelObject['Ok'] != null ? labelObject['Ok'] : 'Ok'),
						click: function() {
							//                                    var jobName = $("#reasonId").val();
							//                                    if (jobName != null && jobName != '') {
							//                                        $("#dailog_error_id").hide();
							//                                        $(this).html("");
							//                                        //$(this).dialog("close");
							//                                        $(this).dialog("destroy");
							//                                        //saveJob(jobName, data, processJobData);
							//                                        copyProcessJob(jobId, jobName);
							//                                    } else {
							//                                        $("#dailog_error_id").show();
							//                                    }


							var jobName = $("#reasonId").val();
							var folderName = $("#selectFolderName").val(); //UK folder
							var folderId = $("#selectFolderName").attr("folderId"); //UK folder

							$("#folderNameHidden").val(folderName);
							$("#folderIdHidden").val(folderId);
							if (jobName != null && jobName != '') {
								$("#dailog_error_id").hide();
								$(this).html("");
								//$(this).dialog("close");
								$(this).dialog("destroy");
								copyProcessJob(jobName, jobId, folderName, folderId);
							} else {
								$("#dailog_error_id").show();
							}

						}
					},
					{
						text: (labelObject['Cancel'] != null ? labelObject['Cancel'] : 'Cancel'),
						click: function() {
							$(this).html("");
							//$(this).dialog("close");
							$(this).dialog("destroy");
							// $("#labeld").empty();

						}

					}],
					open: function() {
						$(this).closest(".ui-dialog").find(".ui-button").eq(1).addClass("dialogyes");
						$(this).closest(".ui-dialog").find(".ui-button").eq(2).addClass("dialogno");
						$(".visionHeaderMain").css("z-index", "999");
						$(".visionFooterMain").css("z-index", "999");
					},
					beforeClose: function(event, ui) {
						$(".visionHeaderMain").css("z-index", "99999");
						$(".visionFooterMain").css("z-index", "99999");
					}
				});
			}
		},
		{
			text: (labelObject['No'] != null ? labelObject['No'] : 'No'),
			click: function() {
				$(this).html("");
				//$(this).dialog("close");
				$(this).dialog("destroy");
			}
		}],
		open: function() {
			$(this).closest(".ui-dialog").find(".ui-button").eq(1).addClass("dialogyes");
			$(this).closest(".ui-dialog").find(".ui-button").eq(2).addClass("dialogno");
			$(".visionHeaderMain").css("z-index", "999");
			$(".visionFooterMain").css("z-index", "999");
		},
		beforeClose: function(event, ui) {
			$(".visionHeaderMain").css("z-index", "99999");
			$(".visionFooterMain").css("z-index", "99999");
		}
	});
}



function copyProcessJob(jobName, jobId, folderName, folderId) {
	showLoader();
	var jobDetails = {};

	jobDetails['jobType'] = "ETL";
	if (globalETLLoadMenu == "NIMIC") {
		jobDetails['jobType'] = "NIMIC";
	}
	$.ajax({
		type: 'post',
		traditional: true,
		dataType: 'html',
		cache: false,
		url: 'copyJob',
		async: true,
		data: {
			jobName: jobName,
			jobId: jobId,
			folderName: folderName,
			folderId: folderId,
			jobDetails: JSON.stringify(jobDetails)
		},
		success: function(response) {
			stopLoader();
			if (response != null) {
				
                            var parentfolderid = $("#etlSavedJobsOptionsRefreshIcon").attr("parentfolderid");
                            var parentfoldername = $("#etlSavedJobsOptionsRefreshIcon").attr("parentfoldername");
                            var folderid = $("#etlSavedJobsOptionsRefreshIcon").attr("folderid");
                            var foldername = $("#etlSavedJobsOptionsRefreshIcon").attr("foldername");

                            showSavedJobs(parentfolderid, parentfoldername, folderid, foldername, "ETL")   ;

				//var responseObj = JSON.parse(response);
				$("#dialog").html(response);
				$("#dialog").dialog({
					title: (labelObject["Message"] != null ? labelObject["Message"] : "Message"),
					modal: true,
					height: 'auto',
					minWidth: 300,
					maxWidth: 1000,
					fluid: true,
					buttons: [{
						text: (labelObject['Ok'] != null ? labelObject['Ok'] : 'Ok'),
						click: function() {
							$(this).html("");
							//$(this).dialog("close");
							$(this).dialog("destroy");
						}
					}],
					open: function() {
						$(this).closest(".ui-dialog").find(".ui-button").eq(1).addClass("dialogyes");
						$(".visionHeaderMain").css("z-index", "999");
						$(".visionFooterMain").css("z-index", "999");
					},
					beforeClose: function(event, ui) {
						$(".visionHeaderMain").css("z-index", "99999");
						$(".visionFooterMain").css("z-index", "99999");
					}
				});
			}
		},
		error: function(e) {
			sessionTimeout(e);
			stopLoader();
		}

	});
}
function mapAllColumns(event, $this, toIconType) {
	var data = [];
	var dataStr = $("#fromTableColsArray_hidden").val();
	if (dataStr != null && dataStr != '') {
		data = JSON.parse(dataStr);
	}
	var toTableColsArrayStr = $("#toTableColsArray_hidden").val();
	var currentTrnsOpId = $("#currentTrnsOpId").val();
	//    var toConnObj = JSON.parse($("#toConnObjPK").val());//PKH PKIcon
	$.ajax({
		datatype: "json",
		type: "post",
		traditional: true,
		url: 'allColMappingForm',
		cache: false,
		data: {
			toTableColsArrayStr: toTableColsArrayStr,
			fromTableColsArrayStr: dataStr,
			toIconType: toIconType
		},
		success: function(response, status, xhr) {
			stopLoader();
			$("#columnSQLMappingDialog").html(response['sqlPopupDiv']);
			$("#columnSQLMappingDialog").dialog({
				title: (labelObject['Column Mapping'] != null ? labelObject['Column Mapping'] : 'Column Mapping'),
				modal: true,
				width: parseInt(screen.width) - 100,
				maxWidth: parseInt(screen.width) - 100,
				height: 400,
				maxHeight: 1000,
				fluid: true,
				buttons: [{
					text: (labelObject['Ok'] != null ? labelObject['Ok'] : 'Ok'),
					click: function() {
						var theadLength = $('#sourceDestColsTableId >thead >tr >th').length;
						var length = $('#sqlToTableColumnsTable >tbody >tr').length;
						if (length != null && parseInt(length) != 0) {
							$('#sqlToTableColumnsTable >tbody >tr').each(function() {
								var tdArray = this.cells;
								if (tdArray != null && tdArray.length != 0) {
									var sourceColumn = $(tdArray[0]).find("input").val();
									var actaulSourceColumn = $(tdArray[0]).find("input").attr("actual-value");
									var columnStr = "";
									var destinationColumn = $(tdArray[1]).find("input").val();
									var actaulDestinationColumn = $(tdArray[1]).find("input").attr("actual-value");
									if (sourceColumn != null && sourceColumn != ''
										&& destinationColumn != null && destinationColumn != '') {
										columnStr = '<tr><td width="1%" class="visionColMappingImgTd1">'
											+ '<img src="images/Detele Red Icon.svg" onclick="deleteSelectedRow(this)" class="visionColMappingImg" title="Delete"'
											+ 'style="width:15px;height: 15px;cursor:pointer;"></td>';
										//                                                    + '<td width="1%" class="visionColMappingImgTd1"><input type="checkbox" class="visionPKSelectCbx" />'
										//                                                    + '</td>'// ravi pk

										//PKH PKIcon
										var destTableColStr = destinationColumn.split(":"); //PKH PKIcon
										var destTableName = [];
										if (destTableColStr != null) {
											destTableName.push(destTableColStr[0]); //PKH PKIcon
										}
										
										var sourceTableName = [];
										var sourceTableColStr = sourceColumn.split(":"); //PKH PKIcon
										if (sourceTableColStr != null) {
											sourceTableName.push(sourceTableColStr[0]); //PKH PKIcon
										}

										columnStr += '<td width="1%" class="visionColMappingImgTd1"><input type="checkbox" class="visionPKSelectCbx" />'
											+ '</td>';
										
										if (theadLength == 8) {
											columnStr += '<td width="1%" class="visionColMappingImgTd1"><input type="checkbox" class="visionUpdateColSelectCbx" />'
											+ '</td>';
										}
										
												
										columnStr += '<td width="19%" style=""><input class="visionColMappingInput" '
											+ 'type="text" tableName=\'' + JSON.stringify(destTableName) + '\' value="' + destinationColumn + '" actual-value="' + actaulDestinationColumn + '" title="' + destinationColumn + '" ' + ((toIconType != null && toIconType != "" && toIconType != 'SQL') ? '' : 'readonly="true"') + ' style="width:84% !important">'
											+ '<img title="Select Column" src="images/tree_icon.svg" '
											+ 'class="visionETLColMapImage " onclick="selectColumn(this,\'' + ((toTableColsArrayStr != null && toTableColsArrayStr != "" && toTableColsArrayStr != "[]") ? 'toColumn' : 'fromColumn') + '\')" style=""></td>'
											+ '<td width="20%"><input class="visionColMappingInput" '
											+ 'type="text" tableName=\'' + JSON.stringify(sourceTableName) + '\' value="' + sourceColumn + '" actual-value="' + actaulSourceColumn + '" title="' + sourceColumn + '" readonly="true" style="width:84% !important">'
											+ '<img title="Select Column" '
											+ 'src="images/tree_icon.svg" class="visionETLColMapImage " onclick="selectColumn(this,\'fromColumn\')" style="">'
											+ '</td>'
											+ '<td width="20%"><input class="visionColMappingTextarea" type="text" value=""></td>'
											+ '<td width="20%" style="display:none;">'
											+ '<input class="visionColMappingTextarea" type="text" value=""></td>'
											+ '<td width="20%"><input class="visionColMappingInput" '
											+ 'type="text" value="" style="width:84% !important">'
											+ '<img title="Select Function" src="images/Fx icon-01.svg" '
											+ 'class="visionETLColMapImage " onclick="selectColumnFun(this,\'fromColumn\')" style=""></td>'
											+ '</tr>';
									}
									//                                         
									if (columnStr != null && columnStr != '') {
										$("#sourceDestColsTableId tbody").append(columnStr);
									}

									try {
										$("#sourceDestColsTableId").colResizable({
											disable: true
										});
										//                                            $("#sourceDestColsTableId").tableDnD({
										//                                                onDragStyle: null,
										//                                                onDropStyle: null,
										//                                                onDragClass: "tDnD_whileDrag",
										//                                            });
									} catch (e) {
									}
									$("#sourceDestColsTableId").colResizable();
									//sourceDestColsTableId
									//                                     var tdOutPutArray =  $("#selectedColumnStr").html().find("tr").cells;


								}
							});
							$("#tabs-1").animate({
								scrollTop: $("#tabs-1").prop("scrollHeight")
							}, 1000);
						}
						$(this).html("");
						//$(this).dialog("close");
						$(this).dialog("destroy");
						//                            $("#sourceDestColsTableId tbody").append(selectedColumnStr);
					}


				}],
				open: function() {
					var source =
					{
						dataType: "json",
						dataFields: [
							{ name: 'id', type: 'string' },
							{ name: 'text', type: 'string' },
							{ name: 'value', type: 'string' },
							{ name: 'icon', type: 'string' },
							{ name: 'parentid', type: 'string' }
						],
						hierarchy:
						{
							keyDataField: { name: 'id' },
							parentDataField: { name: 'parentid' }
						},
						id: 'id',
						localData: data
					};
					var dataAdapter = new $.jqx.dataAdapter(source);
					$("#columnSQLMappingTree").jqxTreeGrid(
						{
							width: "100%",
							source: dataAdapter,
							height: 250,
							sortable: true,
							columnsResize: true,
							columnsReorder: true,
							enableHover: true,
							enableBrowserSelection: true,
							filterable: true,
							icons: true,
							hierarchicalCheckboxes: true,
							pageable: true,
							pagerMode: 'advanced',
							pagerPosition: 'bottom',
							pageSize: 100,
							pageSizeOptions: ['100', '200', '300'],
							//                                theme: 'energyblue',
							selectionMode: 'multipleRows',
							autoShowLoadElement: false,
							rendered: function(type) {
								var sourceColumn = "";
								var gridCells = $('#columnSQLMappingTree').find('.jqx-grid-cell');
								// initialize the jqxDragDrop plug-in. Set its drop target to the second Grid.
								gridCells.jqxDragDrop({
									appendTo: 'body',
									//                                        theme: 'energyblue',
									dragZIndex: 99999,
									dropAction: 'none',
									initFeedback: function(feedback) {
										feedback.height(25);
									},
									dropTarget: $('.visionColMappingInput'),
									revert: true
								});
								gridCells.off('dragStart');
								gridCells.off('dragEnd');
								gridCells.off('dropTargetEnter');
								gridCells.off('dropTargetLeave');
								// disable revert when the dragged cell is over the second Grid.
								gridCells.on('dropTargetEnter', function() {
									gridCells.jqxDragDrop({
										revert: false
									});
								});
								// enable revert when the dragged cell is outside the second Grid.
								gridCells.on('dropTargetLeave', function() {
									gridCells.jqxDragDrop({
										revert: true
									});
								});
								// initialize the dragged object.
								gridCells.on('dragStart', function(event) {

									$(this).jqxDragDrop('data', {
										value: sourceColumn
									});
								});
								// set the new cell value when the dragged cell is dropped over the second Grid.      
								gridCells.on('dragEnd', function(event) {
									var value = $(this).text();
								});
								gridCells.jqxDragDrop({
									onTargetDrop: function(data) {
										var dataa = data;
										var value = this['data']['value'];
										data.val(value);
										data.attr("title", value);
									}
								});
								$('#columnSQLMappingTree').on('rowClick', function(event) {
									var row = event.args.row;
									sourceColumn = row['value'];
									//                                        var parent = event.args.row.parent;
									//                                        var dataField = event.args.dataField;
									//                                        console.log('rowClick: (dataField is: ' +  dataField + ') row: ' + ((row != null) ? 'not null' : 'null') + ' parent: '  + ((parent != null) ? 'not null' : 'null'));
								});
							},
							columns: [
								{ text: 'Table/Column Name', dataField: 'text', width: '100%', filterable: true },
								{ text: 'value', dataField: 'value', hidden: true, width: '30%', filterable: false },
								{ text: 'id', dataField: 'id', hidden: true, width: 160, filterable: false },
								{ text: 'parentid', dataField: 'parentid', hidden: true, width: 160, filterable: false }
							]
						});
					$(this).closest(".ui-dialog").find(".ui-button").eq(1).addClass("dialogyes");
					$(".visionHeaderMain").css("z-index", "999");
					$(".visionFooterMain").css("z-index", "999");
					$(".ui-dialog").addClass('visionDMTreePopup');
				},
				resizeStop: function(event, ui) {
					//   $("#columnSQLMappingTree").jqxTreeGrid( -- 250/350 
					//.visionEtlCreateSQLTable tbody 156/350
					var sizes = ui.size;
					var height = ui.size.height;
					var width = ui.size.width;
					var treeHeight = parseInt(height) - 100;
					var tableHeight = parseInt(height) - 194;
					$("#columnSQLMappingTree").jqxTreeGrid({ height: treeHeight + "px" });
					$(".visionEtlCreateSQLTable tbody").height(tableHeight + "px");
				},
				beforeClose: function(event, ui) {

					$(".visionHeaderMain").css("z-index", "99999");
					$(".visionFooterMain").css("z-index", "99999");
				}, close: function(event, ui) {

					$(this).html("");
					try {
						$("#columnSQLMappingTree").jqxTreeGrid('destroy');
						$("#columnSQLMappingTree").remove();
						$("#treeSearchInputDiv").remove();
					} catch (e) {
					}
				}
			});
		},
		error: function(e) {
			console.log(e);
			sessionTimeout(e);
			stopLoader();
		}
	});
}
function mapTableColumns(treeId, selectionType) {
	var selection = [];
	//    if (selectionType == 'selected') {
	//        selection = $("#" + treeId).jqxTreeGrid('getSelection');
	//    } else {
	//        //selection = $("#" + treeId).jqxTreeGrid('getRows');
	//    }
	var selectionArray = $("#" + treeId).jqxTreeGrid('getSelection');
	if (selectionArray != null && !jQuery.isEmptyObject(selectionArray)) {
		if ($.isArray(selectionArray)) {
			for (var i = 0; i < selectionArray.length; i++) {
				var selectionObj = selectionArray[i];
				if (selectionObj['level'] == 0) {//level
					var allChildRecords = selectionObj['records'];
					if (allChildRecords != null && allChildRecords.length != 0) {
						allChildRecords = allChildRecords.map(function(item) {
							delete item.parent;
							return item;
						});
						Array.prototype.push.apply(selection, allChildRecords);
					}
				} else {
					delete selectionObj.parent;
					selection.push(selectionObj);
				}
                                
			}
			//            console.log("selectionObj:::" + JSON.stringify(selection));
                        if (selectionType == null) {
                            selectionType = "selected";
                        }
		}
	}
	if (true) {
		//    if (selection != null && selection.length != 0) {
		var toTableColsArrayStr = $("#toTableColsArray_hidden").val();
		var dataStr = $("#fromTableColsArray_hidden").val();
		$.ajax({
			datatype: "json",
			type: "post",
			traditional: true,
			url: 'mapTableColumns',
			cache: false,
			data: {
				selection: JSON.stringify(selection),
				toTableColsArrayStr: toTableColsArrayStr,
				fromTableColsArrayStr: dataStr,
				selectionType: selectionType
			},
			success: function(response, status, xhr) {
				stopLoader();
				if (response != null && !jQuery.isEmptyObject(response)) {
					$('#sqlToTableColumnsTable >tbody >tr').remove();
					//                $("#table_of_items tbody tr").remove(); 
					$("#sqlToTableColumnsTable tbody").append(response['columnsStr']);
				}


			},
			error: function(e) {
				console.log(e);
				sessionTimeout(e);
				stopLoader();
			}
		});
	}

}
function connectEtlWSSOAP(type, typeName) {
	//    var selectedDbType = $('#selectedTypeName').val();
	//    var ConnectionEtlType = $('#selectedType').val();
	var wsdlURL = $('#wsdlURL').val();
	if (wsdlURL != null && wsdlURL != '') {
		wsdlURL = $.trim(wsdlURL);
	}
	var endPointURL = $('#endPointURL').val();
	if (endPointURL != null && endPointURL != '') {
		endPointURL = $.trim(endPointURL);
	}

	if (!wsdlURL) {
		$('#wsdlURLError').html("Please enter WSDL URL");
	}
	if (!endPointURL) {
		$('#endPointURLError').html("Please enter End Point URL");
	}
	if (wsdlURL && endPointURL) {
		$('.dataMigrationInputError').hide();
		$('.visionDataMigrationError').hide();
		importSAOPService();
	}


}
function importSAOPService() {
	showLoader();
	var wsdlURL = $('#wsdlURL').val();
	var endPointURL = $('#endPointURL').val();
	$.ajax({
		datatype: "json",
		type: "post",
		traditional: true,
		url: 'importSAOPService',
		cache: false,
		data: {
			wsdlURL: wsdlURL,
			endPointURL: endPointURL
		},
		success: function(response, status, xhr) {
			stopLoader();
			if (response != null && !jQuery.isEmptyObject(response)) {
				if (response['messageFlag']) {
					$("#dialog").html(response['message']);
					$("#dialog").dialog({
						title: (labelObject['SOAP Request'] != null ? labelObject['SOAP Request'] : 'SOAP Request'),
						modal: true,
						width: 800,
						height: 500,
						maxHeight: 1000,
						maxWidth: 1000,
						fluid: true,
						buttons: [{
							text: (labelObject['Ok'] != null ? labelObject['Ok'] : 'Ok'),
							click: function() {
								$(this).html("");
								//$(this).dialog("close");
								$(this).dialog("destroy");
							}
						}],
						open: function() {

							$(this).closest(".ui-dialog").find(".ui-button").eq(1).addClass("dialogyes");
							$(".visionHeaderMain").css("z-index", "999");
							$(".visionFooterMain").css("z-index", "999");
						},
						beforeClose: function(event, ui) {
							$(this).html("");
							//                            //$(this).dialog("close");
							//                            $(this).dialog("destroy");
							$(".visionHeaderMain").css("z-index", "99999");
							$(".visionFooterMain").css("z-index", "99999");
						}
					});
					$('#soapSplitterDiv').jqxSplitter({
						width: '100%', height: '100%',
						orientation: 'vertical',
						panels: [{ size: "50%", min: 50 }, { min: 50, size: "50%" }]
					}
					);
					$('#soapRequestSpliterDiv').jqxSplitter({
						width: '100%', height: '100%',
						orientation: 'horizontal',
						panels: [{ size: "80%", min: 50 }, { min: 50, size: "20%" }]
					});
					//                    $('#soapRequestInput').jqxEditor({
					//                        height: "100%",
					//                                tools: '',
					//                        width: '100%'
					//                    });
					//                    $("#soapRequestInput").val(response['request']);
					//                    $('#soapResponseInput').jqxEditor({
					//                        height: "100%",
					//                                tools: '',
					//                        width: '100%'
					//                    });
				} else {
					$('#visionShowConnectionMsg').show();
					$('#visionShowConnectionMsg').html('<p style="color:red">' + response['message'] + '</p>');
				}
			}


		},
		error: function(e) {
			console.log(e);
			sessionTimeout(e);
			stopLoader();
		}
	});
}
function viewFileData(fileDataObjStr) {
	showLoader();
	if (fileDataObjStr != null && fileDataObjStr != '') {
		var fileDataObj = JSON.parse(fileDataObjStr);
		if (fileDataObj != null) {
			var filePath = fileDataObj['filePath'];
			filePath = filePath.replaceAll('###', '\\');
			filePath = filePath.replaceAll('#$#', ' ');
			var fileName = fileDataObj['fileName'];
			if (fileName == null || fileName == "null") {
				fileName = filePath.substring(filePath.lastIndexOf('\\') + 1);
			}
			var fileType = fileDataObj['fileType'];
			var sheetNo = fileDataObj['sheetNo']; // ravi multiple excelSheets code

			var gridId = ('divGrid-' + fileName.replace(fileType, '').replace('.csv', '')).replace(/\s/g, '');
			gridId = gridId.replace(/\//g, '');
			gridId = gridId.replaceAll(/\./g, '')


			if (sheetNo == null) {


				var contentDivId = ("main_divGrid-" + fileName.replace(fileType, "")).replace(/\s/g, '');
				var selectedItemIndex = $('#dataViewDiv').jqxTabs('selectedItem');
				if (selectedItemIndex != null) {
					var html = $('#dataViewDiv').html();
					if (html.indexOf('"' + contentDivId + '"') > -1
						|| html.indexOf('"' + contentDivId.replace(/\//g, '') + '"') > -1) {
						var length = $('#dataViewDiv').jqxTabs('length');
						for (var i = 0; i < length; i++) {
							var content = $('#dataViewDiv').jqxTabs('getContentAt', i);
							var id = $(content).attr("id");
							if (id == null) {
								id = $(content).children('div:nth-child(2)').attr("id");
							}
							if (id == contentDivId || id == contentDivId.replace(/\//g, '')) {
								switchETLDesignTabs("li_contentView", "dataViewDiv");
								$('#dataViewDiv').jqxTabs('select', i);
								stopLoader()
								break;
							}
						}
						if (sheetNo == null) { // ravi multiple excelSheets code
							stopLoader()
							return false;
						}
						//  return false;
					}

				}
			}
			var data = {
				filePath: filePath,
				fileName: fileName,
				fileType: fileType,
				targetFile: fileDataObj['targetFile'], // ravi etl issues new
				fileHeaders: JSON.stringify(fileDataObj['fileHeaders']), // ravi file headers
				sheetNo: sheetNo, // ravi multiple excelSheets code
				gridId: gridId // ravi multiple excelSheets code
			};
			//            if (fileType.replace(".","").toUpperCase() == "PDF") {
			//                showPdf(filePath, fileName, gridId);
			//                return false;
			//            }
			//            var gridId = ("divGrid-" + filePath.replace(fileType, "").replace(".csv", "")).replace(/\s/g, '');
			//            gridId = gridId.replace(/\//g, '');
			//gridPersonalizeStr

			//data['gridId'] = gridId;
			$.ajax({
				type: "post",
				traditional: true,
				dataType: 'json',
				url: 'getFileObjectMetaData',
				cache: false,
				data: data,
				success: function(response) {
                                        stopLoader();
					if (response != null && !jQuery.isEmptyObject(response)) {
						try {
							if (fileName.indexOf("Rejected_") == 0) {
								$("#dialogLogFile").dialog('close');
							}

						} catch (e) {
						}
						// var responseObj = JSON.parse(response);
						var dataFieldsArray = response['dataFieldsArray'];
						var columnsArray = response['columnsArray'];
						data['columnsArray'] = JSON.stringify(response['columnList']);
					
						var personalizeDivStr = response['gridPersonalizeStr']!=null ? response['gridPersonalizeStr'] : "<div></div>";
						var selectedItemIndex = $('#dataViewDiv').jqxTabs('selectedItem');
						if (sheetNo == null) {
							var divStr = "<div>"
								+ "<div id='personalize_" + gridId + "'>" + personalizeDivStr + "</div>"
								+ "<div id='main_" + gridId + "'>"
								+ "<div id='" + gridId + "'></div>"
								+ "</div>"
								+ "</div>";
							if (selectedItemIndex == null) {
								//$("#designViewTab").jqxTabs('select', 1);
								switchETLDesignTabs("li_contentView", "dataViewDiv");
								$("#dataViewDiv").prepend("<ul></ul>");
								$("#dataViewDiv ul").prepend("<li title='" + fileName + "'>" + fileName + "</li>");
								$("#dataViewDiv").append(divStr);
								$('#dataViewDiv').jqxTabs({ width: "100%", height: "100%", position: 'top', theme: 'ui-redmond', reorder: true });
								$('#dataViewDiv').jqxTabs('showAllCloseButtons');
								$("#dataViewDiv").find("li.jqx-tabs-title").find("div.jqx-tabs-close-button").css("background-image", "url(images/close.png)");
								$("#dataViewDiv").find("li.jqx-tabs-title-selected-top").find("div.jqx-tabs-close-button").css("background-image", "url(images/close.png)");
							
								/*var width = $("#dataViewDiv").find("li.jqx-tabs-title-selected-top").width()
				
								$("#dataViewDiv").find("li").find("style").remove();
								$("#dataViewDiv").find("li.jqx-tabs-title-selected-top").append('<style>.etl-page-body #dataViewDiv .jqx-tabs-title-selected-top::after{margin-left:'+(width+8)+'px !important;}</style>');
					*/
							} else {
								switchETLDesignTabs("li_contentView", "dataViewDiv");
								$('#dataViewDiv').jqxTabs('addLast', fileName, divStr);
							}
						}
						// ravi multiple excelSheets code
						$('#personalize_' + gridId).html(personalizeDivStr);
						$("#navBar_" + gridId).remove();
						var navigationDiv = response['navigationDiv'];
						if (navigationDiv != null && navigationDiv != "") {
							$("#main_" + gridId).append(navigationDiv);
							$("#navBar_" + gridId).jqxNavBar({ height: 20, selectedItem: ((sheetNo != null) ? sheetNo : 0), theme: 'fresh' });
						}

						var source =
						{
							type: 'POST',
							//                                                async: false,
							datatype: "json",
							datafields: dataFieldsArray,
							data: data,
							url: 'getFileObjectData',
							cache: false,
							root: 'Rows',
							processdata: function(data) {


							},
							beforeSend: function() {
								showLoader();
							}, loadError: function(xhr, status, error) {
								$('#dataViewDiv').css("width", "100%");
								stopLoader();
							}, loadComplete: function(data) {
								$('#dataViewDiv').css("width", "100%");
								$("#navBar_" + gridId).show();
								//$("#div_" + tableName).jqxGrid('hiderowdetails', 0);
								//$("#row0div_" + tableName).hide();
								stopLoader();
							},
							beforeprocessing: function(data) {
								if (data != null && data[0] != null) {
									source.totalrecords = data[0].totalrecords;
								} else {
									source.totalrecords = 0;
								}

								stopLoader();
							},
							sort: function() {
								//                                                $("#" + gridResultObj['gridId'] + "_sort_columns").remove();
								$("[id='" + gridId + "']").jqxGrid('updatebounddata', 'sort');
								try {
									$("[id='" + gridId + "']").jqxGrid('clearselection');
								} catch (e) {
								}
								stopLoader();
							},
							filter: function() {

								$("[id='" + gridId + "']").jqxGrid('updatebounddata', 'filter');
								try {
									$("[id='" + gridId + "']").jqxGrid('clearselection');
								} catch (e) {
								}
								stopLoader();
							}


						};
						//                var source =
						//                        {
						//                            localdata: dataArray,
						//                            datatype: "array",
						//                            datafields: dataFieldsArray
						//                        };
						stopLoader();
						var dataAdapter = new $.jqx.dataAdapter(source);
						var headerTooltipRenderer = function(element) {
							$(element).parent().jqxTooltip({
								position: 'mouse',
								//                                theme: 'energyblue',
								position: 'bottom-right',
								showArrow: false, content: $(element).text()
							});
						}
						//                        window.allGridColumns[gridId] = columnsArray;
						var tabHeight = $("#" + gridId).closest(".jqx-tabs-content-element").height();
						$("#" + gridId).jqxGrid(
							{
								width: "100%",
								height: parseInt(tabHeight) * 0.84,
								//                                    theme: 'energyblue',
								autoshowloadelement: false,
								source: dataAdapter,
								pageable: true,
								pagesize: 50,
								showfilterrow: true,
								filterable: true,
								sortable: true,
								virtualmode: true,
								pagesizeoptions: ['50', '100', '500', '1000', '5000', '10000', '50000'],
								enabletooltips: true,
								enablemousewheel: true,
								enablehover: true,
								enablebrowserselection: true,
								selectionmode: 'checkbox',
								rendergridrows: function(params) {
									return params.data;
								},
								columnsresize: true,
								columns: columnsArray
							});
						stopLoader()
						$('#' + gridId).on('celldoubleclick', function(event) {
							var args = event.args;
							var dataField = args.datafield;
							var dataField1 = args.text;
							var rowIndex = args.rowindex;
							var cellValue = args.value;
							var column = $('#' + gridId).jqxGrid('getcolumn', event.args.datafield).text;
							popupedit(column, cellValue);
						});
						$('#dataViewDiv').unbind('selected').on('selected', function(event) {
							
							/*var width = $("#dataViewDiv").find("li.jqx-tabs-title-selected-top").width()
				
							$("#dataViewDiv").find("li").find("style").remove();
							$("#dataViewDiv").find("li.jqx-tabs-title-selected-top").append('<style>.etl-page-body #dataViewDiv .jqx-tabs-title-selected-top::after{margin-left:'+(width+8)+'px !important;}</style>');
							*/
							var $thid = this;
							$('#dataViewDiv').jqxTabs('getContentAt', i);
							//$("#dataViewDiv").find("li.jqx-tabs-title").find("div.jqx-tabs-close-button").css("background-image", "url(images/close.png)");
							//$("#dataViewDiv").find("li.jqx-tabs-title-selected-top").find("div.jqx-tabs-close-button").css("background-image", "url(images/close.png)");
						});
						$('#dataViewDiv').unbind('add').on('add', function(event) {
							$("#dataViewDiv").find("li").find("style").remove();
							$("#dataViewDiv").find("li.jqx-tabs-title").find("div.jqx-tabs-close-button").css("background-image", "url(images/close.png)");
							//                    $("#dataViewDiv").find("li.jqx-tabs-title-selected-top").find("div.jqx-tabs-close-button").css("background-image", "url(images/close.png)");
							setTimeout(function() {
								$("#dataViewDiv").find("li.jqx-tabs-title-selected-top").find("div.jqx-tabs-close-button").css("background-image", "url(images/close.png)");
							}, 100);
							var selectedTabTitle = $("#dataViewDiv").jqxTabs("getTitleAt", event.args.item);
							$("#dataViewDiv").jqxTabs('setTitleAt', event.args.item, selectedTabTitle);
							//                            $("#dataViewDiv").jqxTabs('setTitleAt', event.args.item, selectedTabTitle.split(".")[1]);
							var selectedTabLi = $("#dataViewDiv").find("li.jqx-tabs-title-selected-top");
							selectedTabLi.attr("title", selectedTabTitle);
							
							/*var width = $("#dataViewDiv").find("li.jqx-tabs-title-selected-top").width()
				
							$("#dataViewDiv").find("li").find("style").remove();
							$("#dataViewDiv").find("li.jqx-tabs-title-selected-top").append('<style>.etl-page-body #dataViewDiv .jqx-tabs-title-selected-top::after{margin-left:'+(width+8)+'px !important;}</style>');
					*/
					
						});
						
						
				
						$("#" + gridId + "_personalizeid").toggleClass("ui-icon-triangle-1-s");
						$(document).mouseup(function(e) {
							var container = $("#" + gridId + "_settings_panel");
							var container1 = $(".personaliseoption");
							if ((!container.is(e.target)
								&& container.has(e.target).length === 0)
								&& (!container1.is(e.target)
									&& container1.has(e.target).length === 0)
							) {
								$(container).hide();
								$("#" + gridId + "_personalizeid").toggleClass("ui-icon-triangle-1-s");
							}
						});
						// ravi excel sheet navigation

						$("#navBar_" + gridId).on('change', function() {

							var index = $("#navBar_" + gridId).jqxNavBar('getSelectedIndex');
							if (fileDataObj['sheetNo'] != index) {
								fileDataObj['sheetNo'] = index;
								$('#' + gridId).remove();
								$('#personalize_' + gridId).empty();
								$('#main_' + gridId).append("<div id=" + gridId + "></div>");
								var fileDataObjStr = JSON.stringify(fileDataObj);
								viewFileData(fileDataObjStr)
								$("#navBar_" + gridId).hide();
							}

						});
					} else {
						showMesg("File does not Exsist");
					}
				},
				error: function(e) {
					stopLoader();
					sessionTimeout(e);
				}

			});
		}
	}

}


function uploadColumnMap(event, $this, browseId) {


	//     var csrfToken = $("input[name='_csrf']").val();
	//        if (csrfToken != null && csrfToken != '') {
	//            params['_csrf'] = $("input[name='_csrf']").val();
	//        }
	$("#" + browseId).ajaxfileupload({
		'action': 'uploadColumnMap',
		valid_extensions: ['xls', 'xlsx', 'XLS', 'XLSX'],
		//        headers: {"X-CSRF-TOKEN": $("input[name='_csrf']").val()},
		//        'action': 'importFile?gridId=' + gridId + '&tableName=' + tableName,
		//        params: params,
		//        'action': 'importFile?gridId=' + gridId,
		async: true,
		onStart: function() {
			$("#Loader").css("opacity", "0.99");
			$("#Loader").css("display", "block");
			$("body").css("pointer-events", "none");
			showLoader();
		},
		'onComplete': function(result) {
			$("#importColMapFile").remove();
			$("#colMappinAddIconDiv").append('<input name="importColMapFile" id="importColMapFile" type="file" style="display:none" data-clicked="Y">');
			//            ajaxStop();//30
			$("#Loader").css("display", "none");
			$("body").css("pointer-events", "auto");
			stopLoader();
			if (result != null) {
				var selectedColumnStr = result.message;
				getUploadedColMappings(result.message);
			}

		}
		, onCancel: function() {
			$("#importColMapFile").remove();
			$("#colMappinAddIconDiv").append('<input name="importColMapFile" id="importColMapFile" type="file" style="display:none" data-clicked="Y">');
			$("#Loader").css("display", "none");
			$("body").css("pointer-events", "auto");
			stopLoader();
			//            ajaxStop();//29
		}
		//catch()}
	});
	$("#" + browseId).attr('data-clicked', 'Y');
	$("#" + browseId).click();
}
function getUploadedColMappings(filePath) {
	//getUploadedColMappings

	showLoader();
	$.ajax({
		datatype: "json",
		type: "post",
		traditional: true,
		url: 'getUploadedColMappings',
		cache: false,
		data: {
			filePath: filePath,
			toIconType: ""
		},
		success: function(response, status, xhr) {
			stopLoader();
			if (response != null && !jQuery.isEmptyObject(response)) {
				var selectedColumnStr = response['message'];
				$("#sourceDestColsTableId tbody").append(selectedColumnStr);
				$("#tabs-1").animate({
					scrollTop: $("#tabs-1").prop("scrollHeight")
				}, 1000);
			}


		},
		error: function(e) {
			console.log(e);
			sessionTimeout(e);
			stopLoader();
		}
	});
}

function selectSapTableColumns(dataObj) {

	showLoader();
	$.ajax({
		type: "post",
		traditional: true,
		dataType: 'json',
		url: 'selectSapTableColumns',
		cache: false,
		data: dataObj,
		success: function(response) {
			stopLoader();
			var columns = response.columnsArray;
			var tableStr = '<div class ="visionTablesComboBox">'
			tableStr += '<div class="visionTablesSearchDiv">';
			tableStr += '<input id="searchColumns" class="visionTablesSearchInput" type="text" placeholder="Search Columns.." onkeyup="searchColumns(\'' + dataObj.tableName + '\',\'' + dataObj.DBValue + '\')">'
			tableStr += '<img src="images/crossicon.png" title="Clear Data" onclick="clearColumnInput(\'' + dataObj.tableName + '\',\'' + dataObj.DBValue + '\')" class="visionClearFieldBtn">';
			tableStr += '</div>';
			tableStr += '<div class="visionTablesComboBoxInner" style="display: flex;">'; // ravi sap columns code start

			tableStr += '<div id="sourceFields" class="sourceFields" style="margin-top: 30px;height:272px; width:47.5%;">';
			tableStr += '<div  class="visionTableName" style="position: relative;"><input id="selectAllCheckBoxes"  type="checkbox" > Select All </div>'; // ---- ravi edit for checkboxes

			for (var i = 0; i < columns.length; i++) {
				tableStr += '<div id="' + columns[i] + '" class="visionTableName" title="' + columns[i] + '"  style="position: relative;"><input class="visionTableNameChbx" type="checkbox" > ' + columns[i] + '<img src="images/crossicon.png" title="Clear Data" onclick="moveColumnToSource(' + columns[i] + ')" class="visionCloseDestTableBtn"></div>';
			}

			tableStr += '</div>';
			tableStr += '<div class="visionNavigateButtonDiv" style="width:5%;margin-top: 162px;"><input onclick="moveSapTableColumns()" type="button" value=">" class="sqlMoveButtons"/></div>';
			tableStr += '<div id="destinationFields" class="destinationFields" style="width:47.5%; margin-left: 0px;"></div>';
			tableStr += '</div>';
			$("#logoutDailog").html(tableStr);
			$("#logoutDailog").dialog({
				title: (labelObject['Select Columns'] != null ? labelObject['Select Columns'] : 'Select Columns'),
				modal: true,
				height: 'auto',
				minWidth: '650',
				maxWidth: 'auto',
				fluid: true,
				buttons: [{
					text: (labelObject['Ok'] != null ? labelObject['Ok'] : 'Ok'),
					click: function() {

						var selectedColumnsArray = [];
						var checkedColumns = $("#destinationFields div");
						if (checkedColumns.length == 0) {
							showMesg("Destination Columns Empty!");
							return false;
						}
						$.each(checkedColumns, function(index) {
							var value = this.textContent.trim(); // ravi sap table issue
							selectedColumnsArray.push(value);
						});
						//                            if (selectedColumnsArray.length > 50) {
						//                                showMesg("Max Select Columns limit exceeds.Please select less than 50 Columns");
						//                                return false;
						//                            }

						dataObj['selectSapTableColumns'] = JSON.stringify(selectedColumnsArray);
						viewTableDataGrid(dataObj);
						$(this).html("");
						//$(this).dialog("close");
						$(this).dialog("destroy");
					}
				}],
				open: function() {
					$(this).closest(".ui-dialog").find(".ui-button").eq(1).addClass("dialogyes");
					$(".visionHeaderMain").css("z-index", "999");
					$(".visionFooterMain").css("z-index", "999");
					//                        $(".visionTableNameChbx").change(function(){
					//                            if ($(this).prop("checked")){
					//                               $(this).parent('div').addClass("multipleSelect");
					//                            }
					//                        });

					$("#selectAllCheckBoxes").click(function() {
						//                      $(".visionTableNameChbx").prop('checked', $(this).prop('checked'));



						if ($(this).prop("checked")) {
							$(".visionTableNameChbx").each(function(i) {
								if (true) {
									//                                if (i < 50) {
									$(this).prop('checked', true)
									$(this).parent('div').addClass("multipleSelect");
								} else {
									$(this).prop('checked', false)
									$(this).parent('div').removeClass("multipleSelect");
								}

							});
						}
						if (!$(this).prop("checked")) {
							$(".visionTableNameChbx").prop('checked', $(this).prop('checked'));
							$(".visionTableNameChbx").parent('div').removeClass("multipleSelect");
						}

					});
					$(".visionTableNameChbx").change(function() {

						var selectedLength = $(".sourceFields").find(".multipleSelect").length;
						if (selectedLength < 50) {
							$("#selectAllCheckBoxes").prop("checked", false);
							if (!$(this).prop("checked")) {
								$(this).parent('div').removeClass("multipleSelect");
							}
							if ($(this).prop("checked")) {
								$(this).parent('div').addClass("multipleSelect");
							}
						} else {

							if (!$(this).prop("checked")) {

								$(this).prop("checked", false);
								$(this).parent('div').removeClass("multipleSelect");
								$("#selectAllCheckBoxes").prop("checked", false);
							}
							if ($(this).prop("checked")) {
								showMesg("Cannot select more than 50");
								$(this).prop("checked", false);
								$(this).parent('div').removeClass("multipleSelect");
							}

						}

					});
					dragColumns();
				},
				beforeClose: function(event, ui) {
					$(".visionHeaderMain").css("z-index", "99999");
					$(".visionFooterMain").css("z-index", "99999");
				}
			});
		},
		error: function(e) {
			sessionTimeout(e);
		}
	})
}
function refreshTableGrid(gridId) {

	try {
		showLoader();
		updateDataInfo = {};
		$('#' + gridId).jqxGrid('updatebounddata');
		$("#" + gridId).jqxGrid('clearselection');
		$("#" + gridId).jqxGrid('clearfilters');
		$("#" + gridId).jqxGrid({ virtualmode: true });
		//      ss$("#" + gridId).jqxGrid('updatebounddata', 'cells');


		stopLoader();
	} catch (e) {

		var error = e;
		stopLoader();
	}
}

function viewTableDataGrid(data) {
	showLoader();
        var whereClause = data['whereClause']!=null? data['whereClause'] : '';
	var DBValue = data.DBValue;
	var tableName = data.tableName;
	//    var gridId = ("divGrid" + DBValue + "-" + tableName).replace(/\s/g, '');
	var gridId = ("divGrid-" + DBValue + "-" + tableName).replace(/\s/g, ''); // ravi updated code changes
	gridId = gridId.replace(/\//g, '');
	data['gridId'] = gridId;
        var connObj = data['connectionObj'];
        var accessName = '';
        if (connObj!=null){
            //connObj = JSON.parse(connObj);
            //accessName = connObj['CONN_DB_NAME'];
        }
        var tableData = data;
	$.ajax({
		type: "post",
		traditional: true,
		dataType: 'json',
		url: 'getSchemaObjectMetaData',
		cache: false,
		data: data,
		success: function(response) {
			stopLoader();
			if (response != null && !jQuery.isEmptyObject(response)) {
				// var responseObj = JSON.parse(response);
				var dataArray = response['dataArray']!=null ? response['dataFieldsArray'] : [];
				var dataFieldsArray = response['dataFieldsArray']!=null ? response['dataFieldsArray'] : [] ;
				var columnsArray = response['columnsArray']!=null ? response['columnsArray'] : [] ;
				data['columnsArray'] = JSON.stringify(response['columnList']);
				var totalCount = response['totalCount'];
				var personalizeDivStr = response['gridPersonalizeStr']!=null ? response['gridPersonalizeStr'] : "<div></div>";
				var selectedItemIndex = $('#dataViewDiv').jqxTabs('selectedItem');
                                
                               
				if (selectedItemIndex == null) {
					//$("#designViewTab").jqxTabs('select', 1);
					switchETLDesignTabs("li_contentView", "dataViewDiv");
					var selectTag = "<select id='export" + gridId.trim() + "' onchange=getImportType('" + gridId.trim() + "')><option value=''>Select</option><option value='xls'>Excel</option><option value='csv'>csv</option><option value='xml'>xml</option><option value='json'>json</option></select>";
					$("#dataViewDiv").prepend("<ul></ul>");
					$("#dataViewDiv ul").prepend("<li title='" + DBValue + "." + tableName + "'>" + DBValue + "." + tableName + "</li>");
					var divStr = "<div>";
					divStr += "<div style='display: flex;float:left;margin-top:5px;'>";
					divStr += "<img src='images/Refresh-Icon.svg' style='width:22px;height:18px;cursor:pointer;padding-left:3px;margin-right:5px;' onclick=refreshTableGrid('" + gridId + "') title='Refresh'>"
					divStr += "<img id ='editTableIcon_" + gridId + "' src='images/edit_table.svg' style='width:22px;height: 18px;cursor:pointer;padding-left:3px;margin-right:5px;' onclick=showEditTableOptions('" + gridId + "') title='Edit Table'>"
					divStr += "<img class='visionEditOptions_" + gridId + "' src='images/add_icon.svg' style='display:none; width:22px;height: 18px;cursor:pointer;padding-left:3px;margin-right:5px;' onclick=addRecordToTable('" + gridId + "','" + data.DBValue + "','" + data.tableName + "','" + data.connectionObj + "',0,{}) title='Insert Record'>"
					divStr += "<img class='visionEditOptions_" + gridId + "'  src='images/update_icon.svg' style='display:none; width:22px;height: 18px;cursor:pointer;padding-left:3px;margin-right:5px;' onclick=commitChangesInTable('" + gridId + "','" + data.DBValue + "','" + data.tableName + "','" + data.connectionObj + "') title='Commit'>"
					divStr += "<img class='visionEditOptions_" + gridId + "'  src='images/delete_icon.svg' style='display:none; width:22px;height: 18px;cursor:pointer;padding-left:3px;margin-right:5px;' onclick=deleteRecordsInTable('" + gridId + "','" + data.DBValue + "','" + data.tableName + "','" + data.connectionObj + "') title='Delete'>"
					divStr += "<img class='visionEditOptions_" + gridId + "' src='images/delete_undelete.svg' style='display:none; width:22px;height: 18px;cursor:pointer;padding-left:3px;margin-right:5px;' onclick=truncateTable('" + gridId + "','" + data.DBValue + "','" + data.tableName + "','" + data.connectionObj + "') title='Truncate'>"
					divStr += "<div id='exportDropdown" + gridId.trim() + "' class='exportDropdown visionSearchExport visionETLExportTable visionSearchExportDiv' style='vertical-align: bottom; display: flex; padding-top: 8px;margin-top:-8px;'><table style='/*vertical-align: bottom;*/ display: inline-block;width: 40%;' class='visionSearchExportTable'><tbody><tr><td>" + selectTag + "</td></tr></tbody></table> ";
					divStr += "<input title='Export'  id='excelExport" + gridId.trim() + "' onclick=etlGridExport('" + gridId.trim() + "','" + tableName + "') class='etlexportClass visionSearchExportButton visionETLExportButton visionGridExportButton' type='button' disabled=''>";
					//divStr += "<input title='Import'  id='excelImport" + gridId.trim() + "' onclick=finalImport('" + gridId.trim() + "') class='importClass visionSearchImportButton visionETLImportButton visionGridImportButton' type='button' disabled='' style='margin-top: 5px;margin-left:5px;'>";
			
					divStr += "</div>";
					divStr += "<img title='Data Profiling'   id='DHA_" + gridId.trim() + "' onclick=performDataProfiling('" + gridId.trim() + "','" + tableName + "','" + data['connectionObj'] + "') src='images/etl/Data-Profiling.png' class='etlDHAIcon' />";
					divStr += "<img title='Data Cleansing'   id='DC_" + gridId.trim() + "' onclick=performDataCleansing('" + gridId.trim() + "','" + tableName + "','" + data['connectionObj'] + "') src='images/etl/data-cleaning.png' class='etlDHAIcon' />";
					divStr += "<img title='Vendor validation'   id='VV_" + gridId.trim() + "' onclick=performVendorValidation('" + gridId.trim() + "','" + tableName + "','" + data['connectionObj'] + "') src='images/etl/vendor_validation.png' class='etlDHAIcon' />";
					divStr += "<img title='Reference Data Extraction'   id='VV_" + gridId.trim() + "' onclick=performReferenceDataExtraction('" + gridId.trim() + "','" + tableName + "','" + connObj + "') src='images/etl/referenceData.png' class='etlDHAIcon' />";
					divStr += "<img title='Column view'   id='CV_" + gridId.trim() + "' onclick=alterTable('" + DBValue + "','" + tableName + "','" + data['connectionObj'] + "') src='images/etl/column_view.png' class='etlDHAIcon' />";
                                        divStr += "<img title='Script' id='Script_" + gridId.trim() + "' onclick=displayTableScript('" + gridId.trim() + "','" + tableName + "','" + connObj + "') src='images/etl/script.png' class='etlDHAIcon' />";
                                        divStr += "<img title='Query Filter' id='QueryFilter_" + gridId.trim() + "' onclick=queryFilter('" + gridId.trim() + "','" + tableName + "','" + connObj + "','') src='images/Filter.svg' class='etlDHAIcon' whereclause=\""+whereClause+"\" />";
                                        divStr += "<img title='Triggers' id='Triggers_" + gridId.trim() + "' onclick=displayTableTriggers('" + gridId.trim() + "','" + tableName + "','" + connObj + "','T') src='images/etl/triggers.png' class='etlDHAIcon' >";

                                        
                                        divStr += "</div>";
					divStr += personalizeDivStr;
					divStr += "<div id='" + gridId + "'></div>";
					$("#dataViewDiv").append(divStr);
					//                    $("#dataViewDiv").append("<div><div><img src='images/refresh_icon.png' style='width:18px;height: 18px;cursor:pointer;padding-left:3px;' onclick=refreshTableGrid('" + gridId + "') title='Refresh'></div><div id='" + gridId + "'></div>"); // ravi edit for tabs navigation
					$('#dataViewDiv').jqxTabs({ width: "100%", height: "100%", position: 'top', theme: 'ui-redmond', reorder: true });
					$('#dataViewDiv').jqxTabs('showAllCloseButtons');
					//$("#dataViewDiv").find("li.jqx-tabs-title").find("div.jqx-tabs-close-button").css("background-image", "url(images/close.png)");
					//$("#dataViewDiv").find("li.jqx-tabs-title-selected-top").find("div.jqx-tabs-close-button").css("background-image", "url(images/close.png)");
				
					/*	var width = $("#dataViewDiv").find("li.jqx-tabs-title-selected-top").width()
			
					$("#dataViewDiv").find("li").find("style").remove();
					$("#dataViewDiv").find("li.jqx-tabs-title-selected-top").append('<style>.etl-page-body #dataViewDiv .jqx-tabs-title-selected-top::after{margin-left:'+(width+8)+'px !important;}</style>');
					*/
				
				} else {
                                    
					switchETLDesignTabs("li_contentView", "dataViewDiv");
					var selectTag = "<select id='export" + gridId.trim() + "' onchange=getImportType('" + gridId.trim() + "')><option value=''>Select</option><option value='xls'>Excel</option><option value='csv'>csv</option><option value='xml'>xml</option><option value='json'>json</option></select>";
					var divStr = "<div>";
					divStr += "<div style='display: flex;float:left;margin-top:5px;'>";
					divStr += "<img src='images/Refresh-Icon.svg' style='width:22px;height:18px;cursor:pointer;padding-left:3px;margin-right:5px;' onclick=refreshTableGrid('" + gridId + "') title='Refresh'>"
					divStr += "<img id ='editTableIcon_" + gridId + "' src='images/edit_table.svg' style='width:22px;height: 18px;cursor:pointer;padding-left:3px;margin-right:5px;' onclick=showEditTableOptions('" + gridId + "') title='Edit Table'>"
					divStr += "<img class='visionEditOptions_" + gridId + "' src='images/add_icon.svg' style='display:none; width:22px;height: 18px;cursor:pointer;padding-left:3px;margin-right:5px;' onclick=addRecordToTable('" + gridId + "','" + data.DBValue + "','" + data.tableName + "','" + data.connectionObj + "',0,{}) title='Insert Record'>"
					divStr += "<img class='visionEditOptions_" + gridId + "'  src='images/update_icon.svg' style='display:none; width:22px;height: 18px;cursor:pointer;padding-left:3px;margin-right:5px;' onclick=commitChangesInTable('" + gridId + "','" + data.DBValue + "','" + data.tableName + "','" + data.connectionObj + "') title='Commit'>"
					divStr += "<img class='visionEditOptions_" + gridId + "'  src='images/delete_icon.svg' style='display:none; width:22px;height: 18px;cursor:pointer;padding-left:3px;margin-right:5px;' onclick=deleteRecordsInTable('" + gridId + "','" + data.DBValue + "','" + data.tableName + "','" + data.connectionObj + "') title='Delete'>"
					divStr += "<img class='visionEditOptions_" + gridId + "' src='images/delete_undelete.svg' style='display:none; width:22px;height: 18px;cursor:pointer;padding-left:3px;margin-right:5px;' onclick=truncateTable('" + gridId + "','" + data.DBValue + "','" + data.tableName + "','" + data.connectionObj + "') title='Truncate'>"
					divStr += "<div id='exportDropdown" + gridId.trim() + "' class='exportDropdown visionSearchExport visionETLExportTable visionSearchExportDiv' style='vertical-align: bottom; display: flex; padding-top: 8px;margin-top:-8px;'><table style='/*vertical-align: bottom;*/ display: inline-block;width: 40%;' class='visionSearchExportTable'><tbody><tr><td>" + selectTag + "</td></tr></tbody></table> ";
					divStr += "<input title='Export'  id='excelExport" + gridId.trim() + "' onclick=etlGridExport('" + gridId.trim() + "','" + tableName + "') class='etlexportClass visionSearchExportButton visionETLExportButton visionGridExportButton' type='button' disabled=''>";
					//divStr += "<input title='Import'  id='excelImport" + gridId.trim() + "' onclick=finalImport('" + gridId.trim() + "') class='importClass visionSearchImportButton visionETLImportButton visionGridImportButton' type='button' disabled='' style='margin-top: 5px;margin-left:5px;'>";
					
					divStr += "</div>";
					divStr += "<img title='Data Profiling'   id='DHA_" + gridId.trim() + "' onclick=performDataProfiling('" + gridId.trim() + "','" + tableName + "','" + connObj + "') src='images/etl/Data-Profiling.png' class='etlDHAIcon' />";
					divStr += "<img title='Data Cleansing'   id='DC_" + gridId.trim() + "' onclick=performDataCleansing('" + gridId.trim() + "','" + tableName + "','" + connObj + "') src='images/etl/data-cleaning.png' class='etlDHAIcon' />";
					divStr += "<img title='Vendor validation'   id='VV_" + gridId.trim() + "' onclick=performVendorValidation('" + gridId.trim() + "','" + tableName + "','" + connObj + "') src='images/etl/vendor_validation.png' class='etlDHAIcon' />";
					divStr += "<img title='Reference Data Extraction'   id='VV_" + gridId.trim() + "' onclick=performReferenceDataExtraction('" + gridId.trim() + "','" + tableName + "','" + connObj + "') src='images/etl/referenceData.png' class='etlDHAIcon' />";
					divStr += "<img title='Column view'   id='CV_" + gridId.trim() + "' onclick=alterTable('" + DBValue + "','" + tableName + "','" + connObj + "') src='images/etl/column_view.png' class='etlDHAIcon' />";
                                        divStr += "<img title='Script' id='Script_" + gridId.trim() + "' onclick=displayTableScript('" + gridId.trim() + "','" + tableName + "','" + connObj + "') src='images/etl/script.png' class='etlDHAIcon' />";
                                        divStr += "<img title='Query Filter' id='QueryFilter_" + gridId.trim() + "' onclick=queryFilter('" + gridId.trim() + "','" + tableName + "','" + connObj + "','') src='images/Filter.svg' class='etlDHAIcon' whereclause=\""+whereClause+"\" />";
                                        divStr += "<img title='Triggers' id='Triggers_" + gridId.trim() + "' onclick=displayTableTriggers('" + gridId.trim() + "','" + tableName + "','" + connObj + "','T') src='images/etl/triggers.png' class='etlDHAIcon' >";

					divStr += "</div>";
					divStr += personalizeDivStr;
					divStr += "<div id='" + gridId + "'></div>";
                                        
                                        if ( $("#"+gridId).length > 0 ) {
                                            var selectedItem =  $('#dataViewDiv').jqxTabs('selectedItem'); 
                                             $('#dataViewDiv').jqxTabs('setContentAt', selectedItem, divStr); 
                                         } else {
                                             $('#dataViewDiv').jqxTabs('addLast', DBValue + "." + tableName, divStr); // ravi edit for tabs navigation
                                             //                    $('#dataViewDiv').jqxTabs('addLast', DBValue + "." + tableName, '<div><div><img src="images/refresh_icon.png" style="width:18px;height: 18px;cursor:pointer;padding-left:3px;" onclick=refreshTableGrid("' + gridId + '") title="Refresh"></div><div id="' + gridId + '"></div></div>'); // ravi edit for tabs navigation

                                         }
                                   
					
				}
			
				if (jQuery.isEmptyObject(response)) {
					$("#"+gridId).html("<img src='images/etl/ETL_sww_error.jpg' class='etl_sww_error' >");
					return false;
				}
			
				//                new gridjs.Grid({
				//                    columns: ["Name", "Email", "Phone Number"],
				//                    search: true,
				//                    data: [
				//                        ["John", "john@example.com", "(353) 01 222 3333"],
				//                        ["Mark", "mark@gmail.com", "(01) 22 888 4444"],
				//                        ["Eoin", "eoin@gmail.com", "0097 22 654 00033"],
				//                        ["Sarah", "sarahcdd@gmail.com", "+322 876 1233"],
				//                        ["Afshin", "afshin@mail.com", "(353) 22 87 8356"]
				//                    ]
				//                }).render(document.getElementById(gridId));

				
				var changeColorRenderer = function (row, columnfield, value, defaulthtml, columnproperties) {
                               
                                    return '<span style=" color: red;">' + value + '</span>';
                         
                            }
                            
				var headerTooltipRenderer = function(element) {
					$(element).parent().jqxTooltip({
						position: 'mouse',
						//                        theme: 'energyblue',
						position: 'bottom-right',
						showArrow: false, content: $(element).text()
					});
				}
				
				var maskcolumnRenderer = function (row, columnfield, value, defaulthtml, columnproperties) {
							$("#"+gridId).jqxGrid('setcellvalue', row, columnfield, "########");
                   			 return '########';
                            }
                            
                            var clobColumnRenderer = function (row, columnfield, value, defaulthtml, columnproperties) {
					//$("#"+gridId).jqxGrid('setcellvalue', row, columnfield, "########");
                                        value = value.replaceAll("<","&lt");
                                        value = value.replaceAll(">","&gt");
                   			 return  value;
                            }
                          
				var source =
				{
					type: 'POST',
					//                                                async: false,
					datatype: "json",
					datafields: dataFieldsArray,
					data: data,
					url: 'getSchemaObjectData',
					cache: false,
					root: 'Rows',
					processdata: function(data) {
						//                                showLoader();
						data['getOnlyDataArray'] = 'Y';
                                                if (whereClause!=null && whereClause!=''){
                                                    data['whereClause'] = whereClause;
                                                }
                                                
					},
					beforeSend: function() {
						showLoader();
					}, loadError: function(xhr, status, error) {
						stopLoader();
						$('#dataViewDiv').css("width", "100%");
					}, loadComplete: function(data) {
                                                alterTableData = {};
						$('#dataViewDiv').css("width", "100%");
						//$("#div_" + tableName).jqxGrid('hiderowdetails', 0);
						//$("#row0div_" + tableName).hide();
						stopLoader();
//                                                if (data.length < 50) {
//                                                    
//                                                    $('#'+gridId).jqxGrid("pagesize", data.length-1); 
//                                                    
//                                                }
						$("#columntable"+gridId).mousedown(function(event){
							
                                                        var columnName = $(event.target).closest(".jqx-grid-column-header");
                                                        var columnName = $(event.target).closest(".jqx-grid-column-header").children();
                                                        var columnName = $(event.target).closest(".jqx-grid-column-header").children().find('span').text();

                                                        var target = $(event.target);

                                                        var rightClick = isRightClick(event);
                                                        if (rightClick && target != null) {
			
							var menuItems = "<li id='updateColumnUpperCase' >Upper Case</li>";
							 menuItems += "<li id='updateColumnLowerCase' >Lower Case</li>";
							 menuItems += "<li id='updateColumnReplace' >Replace</li>";
                                                         menuItems += "<li id='updateColumnPrefix' >Prefix</li>";
                                                         menuItems += "<li id='updateColumnSuffix' >Suffix</li>";
                                                         menuItems += "<li id='alterTableDropColumn' >Drop Column</li>";
                                                         //menuItems += "<li id='alterTableAddColumn' >Add Column</li>";
							 var menuHeight = 6;
							 
							$("#jqxMenu").remove();
							$(".etl-page-body").append("<div id='jqxMenu'><ul></ul></div>");
							$("#jqxMenu ul").html(menuItems);
							
							var contextMenu = $("#jqxMenu").jqxMenu({
								width: '120px', height: menuHeight * 27.5 + 'px', autoOpenPopup: false, mode: 'popup',
								 theme: 'energyblue'
							});
						
							var scrollTop = $(window).scrollTop();
							var scrollLeft = $(window).scrollLeft();
							contextMenu.jqxMenu('open', parseInt(event.clientX) + 5 + scrollLeft, parseInt(event.clientY) + 5 + scrollTop);
							
							$("#updateColumnUpperCase").click(function(){
								updateColumnFuntion(gridId,columnName, 'upperCase',JSON.stringify(tableData));
							})
							$("#updateColumnLowerCase").click(function(){
								updateColumnFuntion(gridId,columnName,'LowerCase',JSON.stringify(tableData));
							})
							$("#updateColumnReplace").click(function(){
								updateColumnReplace(gridId,columnName,'replaceCase',JSON.stringify(tableData));
							})
                                                        $("#updateColumnPrefix").click(function(){
								updateColumnFuntionPrefixSuffix(gridId,columnName,'Prefix',JSON.stringify(tableData));
							})
                                                        $("#updateColumnSuffix").click(function(){
								updateColumnFuntionPrefixSuffix(gridId,columnName,'Suffix',JSON.stringify(tableData));
							})
                                                        $("#alterTableDropColumn").click(function(){
								alterTableDrop(gridId,columnName, 'Drop',JSON.stringify(tableData));
							})
                                                         $("#alterTableAddColumn").click(function(){
								alterTableAddColumn(gridId,columnName, 'Add',JSON.stringify(tableData));
							})
					
							return false;
							
					}
					
				})
						
					},
					beforeprocessing: function(data) {

						source.totalrecords = data[data.length - 1];
					},
					sort: function() {
						//                                                $("#" + gridResultObj['gridId'] + "_sort_columns").remove();
						$("[id='" + gridId + "']").jqxGrid('updatebounddata', 'sort');
						try {
							$("[id='" + gridId + "']").jqxGrid('clearselection');
						} catch (e) {
						}
						stopLoader();
					},
					filter: function() {

						$("[id='" + gridId + "']").jqxGrid('updatebounddata', 'filter');
						try {
							$("[id='" + gridId + "']").jqxGrid('clearselection');
						} catch (e) {
						}
						stopLoader();
					}
				};
				//                var source =
				//                        {
				//                            localdata: dataArray,
				//                            datatype: "array",
				//                            datafields: dataFieldsArray
				//                        };
				//                window.allGridColumns[gridId] = columnsArray;
				var dataAdapter = new $.jqx.dataAdapter(source);
				var tabHeight = $("#" + gridId).closest(".jqx-tabs-content-element").height();
				
				     for (var i=0; i< columnsArray.length; i++){
                            var datafield = columnsArray[i]['datafield'];
                            if (datafield == 'RECJECTED_RECORD_COMMENTS') {
                                    columnsArray[i]['cellsrenderer'] = changeColorRenderer;
                            }
                            
                            if (columnsArray[i]['cellsrenderer'] == "maskcolumnRenderer"){ 
                                    columnsArray[i]['cellsrenderer'] = maskcolumnRenderer;
                            }
                            if (columnsArray[i]['cellsrenderer'] == "clobColumnRenderer"){ 
                                    columnsArray[i]['cellsrenderer'] = clobColumnRenderer;
                            }
                                        
                       };


				$("[id='" + gridId + "']").jqxGrid(
					{
						width: "100%",
						height: parseInt(tabHeight) * 0.88,
						//                            theme: 'energyblue',
						autoshowloadelement: false,
						source: dataAdapter,
						pageable: true,
						pagesize: 50,
						showfilterrow: true,
						filterable: true,
						sortable: true,
						virtualmode: false,
						pagesizeoptions: ['50', '100', '500', '1000', '5000', '10000', '50000'],
						enabletooltips: true,
						enablemousewheel: true,
						enablehover: true,
						selectionmode: 'checkbox',
                                                handlekeyboardnavigation: function(event){
                                                    
                                                        var position = $('#'+gridId).jqxGrid('scrollposition');
                                                        var left = position.left;
                                                        var key = event.charCode ? event.charCode : event.keyCode ? event.keyCode : 0;
                                                        var position = $('#'+gridId).jqxGrid('scrollposition');
                                                        if (key == 37) {
                                                            console.log('Pressed Left Key.' );
                                                            $('#'+gridId).jqxGrid('scrolloffset', 0,left-20);
                                                            return true;
                                                         }
                                                        else if (key == 39) {
                                                           console.log('Pressed Right Key.');
                                                           $('#'+gridId).jqxGrid('scrolloffset', 0,left + 20);
                                                           return true;
                                                        }
                                                   },
						enablebrowserselection: true,
						rendergridrows: function(params) {
							return params.data;
						},
						columnsresize: true,
						columns: columnsArray,
					});
				//                stopLoader();
                                
                                        var columnsDataTypeObj = response['columnsDataTypeObj'];
                                        var primaryKeysList = response['primaryKeysList'];
                                            if (!($("#" + gridId).hasClass(gridId + "-ColDataTypeClass"))) {
                                                $("#" + gridId).append("<input type='hidden' id='"
                                                        + gridId + "_ColDataType' class='" + gridId + "-ColDataTypeClass' value='" +
                                                        JSON.stringify(columnsDataTypeObj) + "'>");
                                                $("#"+gridId +"_ColDataType").attr("primary-keys-list",JSON.stringify(primaryKeysList));

                                            }

                                
                                $('#' + gridId).on('cellclick', function(event) {
                                    
                                        if (event.args.rightclick) {
                                            globalrightclick = false;
                                            var menuItems = "<li id='duplicateRowButton' >Duplicate Row</li>";
                                            menuItems += "<li id='createInsertQueryButton' >Create Insert Query</li>";
                                            menuItems += "<li id='filterColumnDataButton' >Filter</li>";
                                            var menuHeight = 3;

                                            $("#jqxMenu").remove();
                                            $(".etl-page-body").append("<div id='jqxMenu'><ul></ul></div>");
                                            $("#jqxMenu ul").html(menuItems);
                                            var contextMenu = $("#jqxMenu").jqxMenu({
                                                    width: '120px', height: menuHeight * 27.5 + 'px', autoOpenPopup: false, mode: 'popup',
                                                    //                                    theme: 'energyblue'
                                            }); // ravi start
                                            var scrollTop = $(window).scrollTop();
                                            var scrollLeft = $(window).scrollLeft();
                                            contextMenu.jqxMenu('open', parseInt(event.args.originalEvent.clientX) + 5 + scrollLeft, parseInt(event.args.originalEvent.clientY) + 5 + scrollTop);
                                            //return false;
                                            $("#duplicateRowButton").click(function(evnt){
                                                var args = event.args;
                                                var dataField = args.datafield;
                                                var dataField1 = args.text;
                                                var rowIndex = args.rowindex;
                                                var cellValue = args.value;
                                                var rowData = $('#' + gridId).jqxGrid('getrowdata', rowIndex);
                                                
                                                 delete rowData['ROWNUM'];
                                                delete rowData['uid'];
                                                delete rowData['uniqueid'];
                                                delete rowData['visibleindex'];
                                                delete rowData['boundindex'];
                                             
                                              //$('#'+gridId).jqxGrid({ virtualmode: false}); 
                                               //var commit = $("#" + gridId).jqxGrid('addrow', null, rowData, rowIndex+1);
                                               addRecordToTable(gridId, null, tableName, null, rowIndex, rowData)
                                               // $('#'+gridId).jqxGrid({ virtualmode: true}); 
                                              
                                            })
                                            
                                          $("#createInsertQueryButton").click(function (evnt) {
                           
                           
                                                var args = event.args;
                                            var dataField = args.datafield;
                                            var dataField1 = args.text;
                                            var rowIndex = args.rowindex;
                                            var cellValue = args.value;
                                            var insertQueryList = [];
                                            var excludedQueryList = [];
                                            var selectedrowindexes = $('#' + gridId).jqxGrid('selectedrowindexes');
                                            if (selectedrowindexes.length == 0) {
                                    selectedrowindexes.push(rowIndex);
                                    }

                                    $.each(selectedrowindexes, function (i) {
                                    var rowData = $('#' + gridId).jqxGrid('getrowdata', selectedrowindexes[i]); //rowIndex

                                            var colDataTypes = $("#" + gridId + "_ColDataType").val();
                                            if (colDataTypes != null || colDataTypes != undefined || colDataTypes != '') {
                                    colDataTypes = JSON.parse(colDataTypes);
                                    }
                                    var primaryKeysList = $("#" + gridId + "_ColDataType").attr("primary-keys-list");
                                    if (primaryKeysList != null || primaryKeysList != undefined || primaryKeysList != '') {
                                    primaryKeysList = JSON.parse(primaryKeysList);
                                    }
                                    delete rowData['ROWNUM'];
                                            delete rowData['uid'];
                                            delete rowData['uniqueid'];
                                            delete rowData['visibleindex'];
                                            delete rowData['boundindex'];
                                            delete rowData[tableName + '_HIDDEN'];
                                            //var columns = Object.keys(rowData).join(",");
                                            //var values = Object.values(rowData).join(",");
                                            var excludedRowData = JSON.parse(JSON.stringify(rowData));
                                            $.each(excludedRowData, function(key, value) {
                                              if (value === null) {
                                                delete excludedRowData[key];
                                               }
                                            });
                                            var excludedPkRowData = JSON.parse(JSON.stringify(rowData));
                                            $.each(primaryKeysList, function (p) {
                                                    $.each(Object.keys(excludedPkRowData), function(index, key) {
                                                            if(primaryKeysList[p] == key){
                                                                 delete excludedPkRowData[key];    
                                                            }
                                                    });
                                            });
                                            var excludedNullPkRowData = JSON.parse(JSON.stringify(excludedRowData));
                                            $.each(primaryKeysList, function (p) {
                                                    $.each(Object.keys(excludedNullPkRowData), function(index, key) {
                                                            if(primaryKeysList[p] == key){
                                                                 delete excludedNullPkRowData[key];    
                                                            }
                                                    });
                                            });
                                            var rowDataArr = [];
                                            rowDataArr.push(rowData);
                                            rowDataArr.push(excludedRowData);
                                            rowDataArr.push(excludedPkRowData);
                                            rowDataArr.push(excludedNullPkRowData);
                                            for(var r=0;r<rowDataArr.length;r++){
                                                var columns = Object.keys(rowDataArr[r]).join(",");
                                               var values = Object.values(rowDataArr[r]).map(value => {
                                                const key = Object.keys(rowDataArr[r])[Object.values(rowDataArr[r]).indexOf(value)];
                                                        const dataType = colDataTypes[key];
                                                        if (value == null){
                                                value = 'NULL';
                                                } else {
                                                value = getInsertQueryVal(value, dataType.toUpperCase());
                                                }
                                                return value;
                                                }).join(",");
                                                var query = "INSERT INTO " + tableName + " ( " + columns + " ) values (" + values + ");";
                                                if(r == 0){
                                                    insertQueryList.push("<span class='etl-insert-query' style='display:block;margin-bottom:15px;word-wrap:break-word;word-break:break-all;'>" + query + "</span>"); 
                                                } else if(r==1){
                                                   excludedQueryList.push("<span class='etl-excluded-query' style='display:none;margin-bottom:15px;word-wrap:break-word;word-break:break-all;'>" + query + "</span>"); 
                                                } else if(r==2){
                                                   excludedQueryList.push("<span class='etl-excludedPk-query' style='display:none;margin-bottom:15px;word-wrap:break-word;word-break:break-all;'>" + query + "</span>"); 
                                                } else{
                                                   excludedQueryList.push("<span class='etl-excludedNullPk-query' style='display:none;margin-bottom:15px;word-wrap:break-word;word-break:break-all;'>" + query + "</span>"); 
                                                }
                                            }    

                                    });

                                     var checkBoxDiv = "<div class='etl-checkbox-class'>" 
                                        + "<input id='excludeNullCheckBoxId' type='checkbox' onchange=\"excludeNull('excludeNullCheckBoxId','etl-excluded-query')\"/><label for='excludeNullCheckBoxId'>Exclude Null</label>"
                                        + "<input id='excludePKCheckBoxId' type='checkbox' onchange=\"excludeNull('excludePKCheckBoxId','etl-excludedPk-query')\"/><label for='excludePKCheckBoxId'>Exclude PK</label>"
                                        + "</div>";

                                     var markup = "";
                                                    insertQueryList.forEach((q) => {
                                                      markup +=  q ;
                                                    });
                                                    var excludeQueryDiv = "";
                                                    excludedQueryList.forEach((s) => {
                                                      excludeQueryDiv +=  s ;
                                                    });
                                            $("#dialog").html("<div id='insertQueryListDiv'  >" + checkBoxDiv + "<div id='insertQueryId'>" + markup + excludeQueryDiv + "</div></div>");
                                            $("#dialog").dialog({
                                    title: (labelObject['Message'] != null ? labelObject['Message'] : 'Message'),
                                            modal: true,
                                            html: true,
                                            height: 500,
                                            width: 600,
                                            fluid: true,
                                            buttons: [{
                                            text: (labelObject['Ok'] != null ? labelObject['Ok'] : 'Ok'),
                                                    click: function () {
                                                    $(this).html("");
                                                            //                        //$(this).dialog("close");
                                                            $(this).dialog("destroy");
                                                    }
                                            }],
                                            open: function () {
                                            $(this).closest(".ui-dialog").css("z-index", "9999")
                                                    $(this).closest(".ui-dialog").find(".ui-button").eq(1).addClass("dialogyes");
                                                    $(".visionHeaderMain").css("z-index", "999");
                                                    $(".visionFooterMain").css("z-index", "999");
                                            },
                                            beforeClose: function (event, ui) {
                                            $(".visionHeaderMain").css("z-index", "99999");
                                                    $(".visionFooterMain").css("z-index", "99999");
                                            }
                                    });
                                    })
                                            
                                            $("#filterColumnDataButton").click(function(evnt){
                                                 var args = event.args;
                                                var dataField = args.datafield;
                                                var dataField1 = args.text;
                                                var rowIndex = args.rowindex;
                                                var cellValue = args.value;
                                                
                                                var colDataTypes = $("#" + gridId + "_ColDataType").val();
                                                if (colDataTypes != null || colDataTypes != undefined || colDataTypes != '') {
                                                 colDataTypes = JSON.parse(colDataTypes);
                                                 }
                                                
                                                const dataType = colDataTypes[dataField];
                                                var value = getInsertQueryVal(cellValue,dataType.toUpperCase());
                                                var whereClauseCondition = $("#QueryFilter_"+gridId).attr("whereclause");
                                                if (whereClauseCondition!=null && whereClauseCondition!='' ) {
                                                    whereClauseCondition += " AND "+dataField+" = "+ value;
                                                } else {
                                                    whereClauseCondition = " WHERE " + dataField+" = "+ value;
                                                }
                                                
                                                queryFilter(gridId, tableName, connObj, whereClauseCondition);
                                            })
                                            
                                           
                                        }
					
				});

                                
				$('#' + gridId).on('rowselect', function (event) 
					{
					    // event arguments.
					    var args = event.args;
					    // row's bound index.
					    var rowBoundIndex = args.rowindex;
					    if (rowBoundIndex.length > 1 ) {
						
						var pagesize = $('#' + gridId).jqxGrid('pagesize');
						var itr =0;
						var gridScrollInterval = setInterval(function () {
							
							$('#' + gridId).jqxGrid('ensurerowvisible', itr);
							itr++;
							if (itr == pagesize) {
								clearTimeout(gridScrollInterval);
								gridScrollInterval = null;
								itr = 0;
							}
						}, 10);
						
						}
						
					    // row's data. The row's data object or null(when all rows are being selected or unselected with a single action). If you have a datafield called "firstName", to access the row's firstName, use var firstName = rowData.firstName;
					  //  var rowData = args.row;
					    
					});
							$('#' + gridId).on('cellbeginedit', function(event) {
					//                    var data = $('#' + gridId).jqxGrid('exportdata', 'json');
					//                    data = JSON.parse(data);
					// event arguments.
					var args = event.args;
					// column data field.
					var dataField = event.args.datafield;
					// row's bound index.
					var rowBoundIndex = event.args.rowindex;
					// cell value
					var value = args.value;
					// cell old value.
					var oldvalue = args.oldvalue;
					$('#' + gridId).jqxGrid('selectrow', rowBoundIndex);
					$("#last-edit-datafield").val(dataField);
					$("#last-edit-row").val(rowBoundIndex);
				});
				$('#' + gridId).on('cellendedit', function(event) {

					// event arguments.
					var args = event.args;
					// column data field.
					var dataField = event.args.datafield;
					// row's bound index.
					var rowBoundIndex = event.args.rowindex;
					// cell value
					var value = args.value;
					// cell old value.
					var oldvalue = args.oldvalue;
					// row's data.
					var rowData = args.row;
					//if (rowData[tableName + "_HIDDEN"] == 'UPDATE') {
						if (oldvalue != value) {

							var changeObj = updateDataInfo[rowBoundIndex];
							if (changeObj == null) {
								changeObj = {};
							}
							changeObj[dataField] = oldvalue;
							updateDataInfo[rowBoundIndex] = changeObj;
						}

				//	}

				});
			
				$('#' + gridId).on('cellvaluechanged', function(event) {
					var args = event.args;
					var dataField = args.datafield;
					var dataField1 = args.text;
					var rowIndex = args.rowindex;
					var cellValue = args.value;
					var column = $('#' + gridId).jqxGrid('getcolumn', event.args.datafield).text;
				});
				
				$('#' + gridId).on('celldoubleclick', function(event) {
					var args = event.args;
					var dataField = args.datafield;
					var dataField1 = args.text;
					var rowIndex = args.rowindex;
					var cellValue = args.value;
					var column = $('#' + gridId).jqxGrid('getcolumn', event.args.datafield).text;
                                        cellValue = cellValue.replaceAll("<","&lt");
                                        cellValue = cellValue.replaceAll(">","&gt");
					popupedit(column, cellValue);
				});
                                
                                
				
				$('#dataViewDiv').unbind('selected').on('selected', function(event) {
					
					/*var li = $("#dataViewDiv").find("li.jqx-tabs-title-selected-top");
					var width = $("#dataViewDiv").find("li.jqx-tabs-title-selected-top").width()
				
					$("#dataViewDiv").find("li").find("style").remove();
					$("#dataViewDiv").find("li.jqx-tabs-title-selected-top").append('<style>.etl-page-body #dataViewDiv .jqx-tabs-title-selected-top::after{margin-left:'+(width+8)+'px !important;}</style>');
					*/
					var $thid = this;
					$('#dataViewDiv').jqxTabs('getContentAt', i);
					//$("#dataViewDiv").find("li.jqx-tabs-title").find("div.jqx-tabs-close-button").css("background-image", "url(images/close.png)");
					//$("#dataViewDiv").find("li.jqx-tabs-title-selected-top").find("div.jqx-tabs-close-button").css("background-image", "url(images/close.png)");
				});
				$('#dataViewDiv').unbind('add').on('add', function(event) {
					
					$("#dataViewDiv").find("li").find("style").remove();
					
					$("#dataViewDiv").find("li.jqx-tabs-title").find("div.jqx-tabs-close-button").css("background-image", "url(images/close.png)");
					//                    $("#dataViewDiv").find("li.jqx-tabs-title-selected-top").find("div.jqx-tabs-close-button").css("background-image", "url(images/close.png)");
					setTimeout(function() {
						$("#dataViewDiv").find("li.jqx-tabs-title-selected-top").find("div.jqx-tabs-close-button").css("background-image", "url(images/close.png)");
					}, 100);
					var selectedTabTitle = $("#dataViewDiv").jqxTabs("getTitleAt", event.args.item);
					$("#dataViewDiv").jqxTabs('setTitleAt', event.args.item, selectedTabTitle);
					//                    $("#dataViewDiv").jqxTabs('setTitleAt', event.args.item, selectedTabTitle.split(".")[1]);
					var selectedTabLi = $("#dataViewDiv").find("li.jqx-tabs-title-selected-top");
					selectedTabLi.attr("title", selectedTabTitle);
					var selectedItem = $('#dataViewDiv').jqxTabs('selectedItem'); // ravi edit for tabs issue
					$('#dataViewDiv').jqxTabs('ensureVisible', selectedItem); // ravi edit for tabs issue
					
					/*var width = $("#dataViewDiv").find("li.jqx-tabs-title-selected-top").width()
				
					
					$("#dataViewDiv").find("li.jqx-tabs-title-selected-top").append('<style>.etl-page-body #dataViewDiv .jqx-tabs-title-selected-top::after{margin-left:'+(width+8)+'px !important;}</style>');
					*/
					
				});
				
				
				

				$("#" + gridId + "_personalizeid").toggleClass("ui-icon-triangle-1-s");
				$(document).mouseup(function(e) {
					var container = $("#" + gridId + "_settings_panel");
					var container1 = $(".personaliseoption");
					if ((!container.is(e.target)
						&& container.has(e.target).length === 0)
						&& (!container1.is(e.target)
							&& container1.has(e.target).length === 0)
					) {
						$(container).hide();
						$("#" + gridId + "_personalizeid").toggleClass("ui-icon-triangle-1-s");
					}
				});
				
			} else {
                            showMesg("Object does not exist");
			}
			//            stopLoader();
		},
		error: function(e) {
			stopLoader();
			sessionTimeout(e);
		}

	});
}
function searchColumns(tableName, DBValue) {
	showLoader();
	var connectionObj;
	if (savedDBData != null && !jQuery.isEmptyObject(savedDBData)) {
		var conObj = savedDBData[DBValue];
		if (conObj != null && !jQuery.isEmptyObject(conObj)) {
			connectionObj = conObj;
		}
	}
	var filterColumn = $('#searchColumns').val().toLowerCase();
	$.ajax({
		datatype: "json",
		type: "post",
		traditional: true,
		url: 'selectSapTableColumns',
		cache: false,
		data: {
			filterColumn: filterColumn,
			parentkey: tableName,
			connectionObj: JSON.stringify(connectionObj)

		},
		success: function(response) {
			stopLoader();
			var columns = response.columnsArray;
			var tableStr = "";
			tableStr += '<div  class="visionTableName" style="position: relative;"><input id="selectAllCheckBoxes"  type="checkbox" > Select All </div>'; // ---- ravi edit for checkboxes

			for (var i = 0; i < columns.length; i++) {
				var destination = $("#destinationFields").find("[id=" + columns[i] + "]");
				if (destination.length > 0) {

				} else {
					//tableStr +=  '<div id="'+columns[i]+'" class="visionTableName" title="'+columns[i]+'"  style="position: relative;">'+columns[i]+'<img src="images/crossicon.png" title="Clear Data" onclick="moveToSource('+columns[i]+')" class="visionCloseDestTableBtn"></div>';
					tableStr += '<div id="' + columns[i] + '" class="visionTableName" title="' + columns[i] + '"  style="position: relative;"><input class="visionTableNameChbx" type="checkbox" > ' + columns[i] + '<img src="images/crossicon.png" title="Clear Data" onclick="moveColumnToSource(' + columns[i] + ')" class="visionCloseDestTableBtn"></div>';
				}
			}
			$("#sourceFields").html(tableStr);
			$("#selectAllCheckBoxes").click(function() {
				//                      $(".visionTableNameChbx").prop('checked', $(this).prop('checked'));



				if ($(this).prop("checked")) {
					$(".visionTableNameChbx").each(function(i) {
						if (i < 50) {
							$(this).prop('checked', true)
							$(this).parent('div').addClass("multipleSelect");
						} else {
							$(this).prop('checked', false)
							$(this).parent('div').removeClass("multipleSelect");
						}

					});
				}
				if (!$(this).prop("checked")) {
					$(".visionTableNameChbx").prop('checked', $(this).prop('checked'));
					$(".visionTableNameChbx").parent('div').removeClass("multipleSelect");
				}

			});
			$(".visionTableNameChbx").change(function() {

				var selectedLength = $(".sourceFields").find(".multipleSelect").length;
				if (selectedLength < 50) {
					$("#selectAllCheckBoxes").prop("checked", false);
					if (!$(this).prop("checked")) {
						$(this).parent('div').removeClass("multipleSelect");
					}
					if ($(this).prop("checked")) {
						$(this).parent('div').addClass("multipleSelect");
					}
				} else {

					if (!$(this).prop("checked")) {

						$(this).prop("checked", false);
						$(this).parent('div').removeClass("multipleSelect");
						$("#selectAllCheckBoxes").prop("checked", false);
					}
					if ($(this).prop("checked")) {
						showMesg("Cannot select more than 50");
						$(this).prop("checked", false);
						$(this).parent('div').removeClass("multipleSelect");
					}

				}

			});
			dragColumns()
		},
		error: function(e) {
			console.log(e);
			sessionTimeout(e);
			stopLoader();
		}
	});
}


function clearColumnInput(tableName, DBValue) {
	$("#searchColumns").val('');
	searchColumns(tableName, DBValue);
}
function dragColumns() {


	$("#sourceFields div").draggable({
		revert: "invalid",
		refreshPositions: true,
		cursor: 'move',
		zindex: false,
		opacity: false,
		appendto: "parent",
		helper: function(event) {
			var helperList = $('<ul class="draggable-helper" />');
			if ($(this).is('.multipleSelect')) {
				helperList.append($(this).siblings('.multipleSelect').andSelf().clone());
			} else {
				helperList.append($(this).clone());
			}
			return helperList;
		},
		drag: function(event, ui) {
			ui.helper.addClass("draggableTable");
			var height = ui.helper[0].offsetHeight;
			var dialogHeight = $("#logoutDailog").css("height");
			$("#logoutDailog").css("height", dialogHeight);
			$("#logoutDailog").css("overflow", "inherit");
			$("#destinationFields").css("min-height", "300px");
			$("#destinationFields").css("height", height);
		},
		stop: function(event, ui) {
			// ui.helper.removeClass("draggableTable");
			$("#destinationFields").css("height", "300px");
			$("#logoutDailog").css("height", "auto");
			$("#logoutDailog").css("overflow", "auto");
		}
	});
	$("#destinationFields").droppable({
		revert: "invalid",
		refreshPositions: true,
		cursor: 'move',
		drop: function(event, ui) {
			$("#destinationFields").css("height", "300px");
			$("#logoutDailog").css("height", "auto");
			$("#logoutDailog").css("overflow", "auto");
			if ($("#destinationFields div").length == 0) {
				$("#destinationFields").html("");
			}

			var destinationFieldsLength = $(".destinationFields").find(".visionTableName").length;
			if (destinationFieldsLength < 50) {
				$("#selectAllCheckBoxes").prop("checked", false);
				var items = ui.helper.children();
				$.each(items, function(index) {
					var destinationFieldsLength = $(".destinationFields").find(".visionTableName").length;
					if (destinationFieldsLength < 50) {
						$(this).removeClass("multipleSelect");
						$(this).addClass("droppedTable");
						var droppableId = this.id;
						$("#destinationFields").append($(this));
						$("#sourceFields").find("#" + droppableId).remove();
						$("#" + droppableId).children().show();
						$("#destinationFields").find(".visionTableNameChbx").hide();
					} else {
						return false;
					}
				})
			} else {
				showMesg("Cannot select more than 50 columns");
			}

		}
	});
}

function moveColumnToSource(column) {
	var columnName = column.id;
	$("#sourceFields").append($("#" + columnName));
	$("#" + columnName).find(".visionCloseDestTableBtn").hide();
	$("#" + columnName).find(".visionTableNameChbx").show();
	$("#" + columnName).find(".visionTableNameChbx").prop("checked", false);
	$("#" + columnName).find(".visionTableNameChbx").prop("checked", false);
	$(".visionTableNameChbx").change(function() {
		if (!$(this).prop("checked")) {
			$("#selectAllCheckBoxes").prop("checked", false);
			$(this).parent('div').removeClass("multipleSelect");
		}
		if ($(this).prop("checked")) {
			$(this).parent('div').addClass("multipleSelect");
		}
	});
	dragColumns();
}

/*function scheduleJob(jobId) {
	var jobName = $("#" + jobId).find("span").text();
	console.log("jobName::" + $.trim(jobName));
	if (jobId != null && jobId != ''
		&& jobName != null && jobName != '') {
		jobName = $.trim(jobName);
		var scheduleForm = "<div class='cronStartDateDiv'>"
			+ "<table><tr>"
			+ "<td>Start Date</td>"
			+ "<td><input type='text' id='cronStartDate' readonly='true'  /></td>"
			+ "<td>End Date</td>"
			+ "<td><input type='text' id='cronEndDate' /></td>"
			+ "</tr></table>"
			+ "</div>"
			+ "<div id='cronExpressionDiv' class='cron-builder'></div>"
			+ "<div class='cron-expression'>"
			+ " <p>Cron Expression:<input type='text' id='cronExpression' readonly='true' /></p>"
			+ "</div>";
		$("#logoutDailog").html(scheduleForm);
		$("#logoutDailog").dialog({
			title: (labelObject[jobName] != null ? labelObject[jobName] : jobName),
			modal: true,
			height: 250,
			minWidth: '650',
			maxWidth: 'auto',
			fluid: true,
			buttons: [{
				text: (labelObject['Schedule'] != null ? labelObject['Schedule'] : 'Schedule'),
				click: function() {
					var cronExp = $('#cronExpression').val();
					if (cronExp != null && cronExp != '') {
						
						if (cronExp.lastIndexOf(" ") > -1){
							cronExp = cronExp.substring(0, cronExp.lastIndexOf(" "));
						}
						var cronStartDate = $("#cronStartDate").val();
						var cronEndDate = $("#cronEndDate").val();
						console.log("cronExp:::" + cronExp);
						$(this).html("");
						//$(this).dialog("close");
						$(this).dialog("destroy");
						scheduleProcessJob(cronExp, jobId, jobName, cronStartDate, cronEndDate);
					}


				}
			},
			{
				text: (labelObject['Cancel'] != null ? labelObject['Cancel'] : 'Cancel'),
				click: function() {
					$(this).html("");
					//$(this).dialog("close");
					$(this).dialog("destroy");
				}
			}],
			open: function() {
				$(this).closest(".ui-dialog").find(".ui-button").eq(1).addClass("dialogyes");
				$(this).closest(".ui-dialog").find(".ui-button").eq(2).addClass("dialogno");
				$(".visionHeaderMain").css("z-index", "999");
				$(".visionFooterMain").css("z-index", "999");
				$('#cronExpressionDiv').cronBuilder({
					selectorLabel: "Select time period:  ",
					onChange: function(expression) {
						$('#cronExpression').val(expression);
					}
				});
				$("#cronStartDate").datepicker({
					changeMonth: true,
					changeYear: true,
					dateFormat: "dd-mm-yy",
					showOn: "button",
					buttonImage: 'images/date_picker_icon.png',
					buttonImageOnly: true,
					//                    setDate:new Date()
				});
				$("#cronStartDate").datepicker("setDate", new Date());
				$("#cronStartDate").addClass("ui-datepickerJobSchedule");
				$("#cronEndDate").datepicker({
					changeMonth: true,
					changeYear: true,
					dateFormat: "dd-mm-yy",
					showOn: "button",
					buttonImage: 'images/date_picker_icon.png',
					buttonImageOnly: true
				});
				$("#ui-datepicker-div").addClass("ui-datepickerJobSchedule");
				//                $('#cronExpression').html("");
				//cronExpressionDiv
			},
			beforeClose: function(event, ui) {
				$(".visionHeaderMain").css("z-index", "99999");
				$(".visionFooterMain").css("z-index", "99999");
			}
		});
	}
	// need to open dailog box for Scheduling time
}*/

function scheduleJob(jobId) {
    var jobName = $("#" + jobId).find("span").text();
    console.log("jobName::" + $.trim(jobName));
    if (jobId != null && jobId != ''
            && jobName != null && jobName != '') {
        jobName = $.trim(jobName);
        var scheduleForm = "<div class='cronStartDateDiv'>"
                + "<table><tr>"
                + "<td>Start Date</td>"
                + "<td><input type='text' id='cronStartDate' readonly='true'  /></td>"
                + "<td>End Date</td>"
                + "<td><input type='text' id='cronEndDate' /></td>"
                + "</tr></table>"
                + "</div>"
                + "<div id='cronExpressionDiv' class='cron-builder'></div>"
                + "<div class='cron-expression'>"
                + " <p>Cron Expression:<input type='text' id='cronExpression' readonly='true' /></p>"
                + "</div>"
                + "<div class='scheduleNotificationsDiv' ><input type='checkbox' id='scheduleNotifications' /><span id='scheduleNotificationsSpan' >Enable Notifications</span>"
                + "<input type='text' placeholder='Enter mail ids' id='scheduleNotificationEmailIds' style='display:none;' />"
                + "</div>";
               
        $("#logoutDailog").html(scheduleForm);
        $("#logoutDailog").dialog({
            title: (labelObject[jobName] != null ? labelObject[jobName] : jobName),
            modal: true,
            height: 270,
            minWidth: '650',
            maxWidth: 'auto',
            fluid: true,
            buttons: [{
                    text: (labelObject['Schedule'] != null ? labelObject['Schedule'] : 'Schedule'),
                    click: function () {
                        var cronExp = $('#cronExpression').val();
                        if (cronExp != null && cronExp != '') {
                            cronExp = cronExp.substring(0, cronExp.lastIndexOf(" "));
                            var cronStartDate = $("#cronStartDate").val();
                            var cronEndDate = $("#cronEndDate").val();
                            
                            var notificationEmailIds = $("#scheduleNotificationEmailIds").val();
                            var enableNotifications = $("#scheduleNotifications").val();
                            if ($("#scheduleNotifications").prop("checked") && $("#scheduleNotificationEmailIds").val()== "") {
								showMesg("Provide Email Ids");
								return false;
							} 
                            console.log("cronExp:::" + cronExp);
                            $(this).html("");
                            $(this).dialog("close");
                            $(this).dialog("destroy");
                            scheduleProcessJob(cronExp, jobId, jobName, cronStartDate, cronEndDate, enableNotifications, notificationEmailIds);
                        }


                    }},
                {
                    text: (labelObject['Cancel'] != null ? labelObject['Cancel'] : 'Cancel'),
                    click: function () {
                        $(this).html("");
                        $(this).dialog("close");
                        $(this).dialog("destroy");

                    }}],
            open: function () {
	
                $(this).closest(".ui-dialog").find(".ui-button").eq(1).addClass("dialogyes");
                $(this).closest(".ui-dialog").find(".ui-button").eq(2).addClass("dialogno");
                $(".visionHeaderMain").css("z-index", "999");
                $(".visionFooterMain").css("z-index", "999");
                
                $("#scheduleNotifications").change(function(event) {

					$("#scheduleNotificationEmailIds").val("");
					if ($(this).prop("checked")) {
						$("#scheduleNotificationEmailIds").show();
					} else {
						$("#scheduleNotificationEmailIds").hide();
					}
					
				})
                
                $('#cronExpressionDiv').cronBuilder({
                    selectorLabel: "Select time period:  ",
                    onChange: function (expression) {
                        var getData = expression.join(" ");
                        $('#cronExpression').val(getData);
                    }
                });
                $("#cronStartDate").datepicker({
                    changeMonth: true,
                    changeYear: true,
                    dateFormat: "dd-mm-yy",
                    showOn: "button",
                    buttonImage: 'images/date_picker_icon.png',
                    buttonImageOnly: true,

//                    setDate:new Date()
                });
                $("#cronStartDate").datepicker("setDate", new Date());
                $("#cronStartDate").addClass("ui-datepickerJobSchedule");

                $("#cronEndDate").datepicker({
                    changeMonth: true,
                    changeYear: true,
                    dateFormat: "dd-mm-yy",
                    showOn: "button",
                    buttonImage: 'images/date_picker_icon.png',
                    buttonImageOnly: true
                });
                $("#ui-datepicker-div").addClass("ui-datepickerJobSchedule");
//                $('#cronExpression').html("");
                //cronExpressionDiv
            },
            beforeClose: function (event, ui)
            {
                $(".visionHeaderMain").css("z-index", "99999");
                $(".visionFooterMain").css("z-index", "99999");
            }
        });
    }
    // need to open dailog box for Scheduling time
}


function scheduleProcessJob(cronExp, jobId, jobName, cronStartDate, cronEndDate, enableNotifications, notificationEmailIds) {
	if (cronExp != null && cronExp != ''
		&& jobId != null && jobId != ''
		&& jobName != null && jobName != '') {

		$.ajax({
			datatype: "json",
			type: "post",
			traditional: true,
			url: 'scheduleProcessJob',
			cache: false,
			data: {
				cronExp: cronExp,
				jobId: jobId,
				jobName: jobName,
				cronStartDate: cronStartDate,
				cronEndDate: cronEndDate,
				enableNotifications: enableNotifications,
				notificationEmailIds: notificationEmailIds

			},
			success: function(response) {
				stopLoader();
				var dialogSplitMessage = dialogSplitIconText(response['message'], "Y");
				$("#logoutDailog").html(dialogSplitMessage);
				$("#logoutDailog").dialog({
					title: (labelObject[jobName] != null ? labelObject[jobName] : jobName),
					modal: true,
					height: 'auto',
					minHeight: 'auto',
					minWidth: 370,
					maxWidth: 'auto',
					fluid: true,
					buttons: [{
						text: (labelObject['Ok'] != null ? labelObject['Ok'] : 'Ok'),
						click: function() {
							$(this).html("");
							//$(this).dialog("close");
							$(this).dialog("destroy");
						}
					}],
					open: function() {
						$(this).closest(".ui-dialog").find(".ui-button").eq(1).addClass("dialogyes");
						$(this).closest(".ui-dialog").find(".ui-button").eq(2).addClass("dialogno");
						$(".visionHeaderMain").css("z-index", "999");
						$(".visionFooterMain").css("z-index", "999");
					},
					beforeClose: function(event, ui) {
						$(".visionHeaderMain").css("z-index", "99999");
						$(".visionFooterMain").css("z-index", "99999");
					}
				});
			},
			error: function(e) {
				sessionTimeout(e);
				stopLoader();
			}
		});
	}
}

function loadScheduledJobs() {
    var scheduledTabs = "<div id='scheduledTabs'>"
                        +"<ul><li>ETL Jobs</li><li>Procs</li></ul>"
                        +"<div id='scheduledETLJobs' ></div>"
                        +"<div id='scheduledProcs' ></div>"
                        +"</div>";
                
    $("#scheduledJobs").html(scheduledTabs);
     $('#scheduledTabs').jqxTabs({ width: "100%", height: "100%", position: 'top'}); 
	showLoader();
	$("#scheduledJobsDetails").html("");
       
        $('#scheduledTabs').on('selected', function (event) { 
            var selectedTab = event.args.item;
            if (selectedTab == 0) {
                initializeScheduleJobsTree();
            } else if (selectedTab ==1){
                initializeScheduleProcsTree()
            }
        }); 
         initializeScheduleJobsTree();
        
       
}

function  initializeScheduleJobsTree(){
    showLoader();
    $.ajax({
		datatype: "json",
		type: "post",
		traditional: true,
		url: 'loadScheduledJobs',
		cache: false,
		data: {

		},
		success: function(response) {
			stopLoader();
			if (response != null) {
				var dataArray = response['scheduledJobsArray'];
			}
			var source =
			{
				datatype: "json",
				datafields: [
					{ name: 'id' },
					{ name: 'parentid' },
					{ name: 'text' },
					{ name: 'icon' },
					{ name: 'value' }
				],
				id: 'id',
				icon: 'icon',
				localdata: dataArray
			};
			// create data adapter.
			var dataAdapter = new $.jqx.dataAdapter(source);
			// perform Data Binding.
			dataAdapter.dataBind();
			// get the tree items. The first parameter is the item's id. The second parameter is the parent item's id. The 'items' parameter represents 
			// the sub items collection name. Each jqxTree item has a 'label' property, but in the JSON data, we have a 'text' field. The last parameter 
			// specifies the mapping between the 'text' and 'label' fields.  
			var records = dataAdapter.getRecordsHierarchy('id', 'parentid', 'items', [{ name: 'text', map: 'label' }]);
			//scheduledJobs
			$('#scheduledETLJobs').jqxTree({
				source: records, width: 300,
				toggleMode: 'click',
				//                theme: 'energyblue',
				enableHover: true,
				incrementalSearch: true,
				keyboardNavigation: true
			});
			
			$('#scheduledETLJobs').on('expand', function(event) {
				
			})
			
			$("#scheduledETLJobs").on('mousedown', function(event) {


				var target = $(event.target).parents('li:first')[0];
				var treeItem = $(event.target).closest('.visionETLAvailableJobs');
				var rightClick = isRightClick(event);
				if (rightClick && target != null) {
					$("#scheduledETLJobs").jqxTree('selectItem', target);
					var selectedItem = $('#scheduledETLJobs').jqxTree('getSelectedItem');
					var jobId = selectedItem['value'];
					if (jobId != null
						&& jobId != ''
						&& jobId != 'RUNNING_JOBS'
						&& jobId != 'STOPED_JOBS'
					) {
						var parentListItem = selectedItem.parentElement;
						if (parentListItem != null) {
							var selectedParentItem = $('#scheduledETLJobs').jqxTree('getItem', parentListItem);
							if (selectedParentItem != null && selectedParentItem['value'] == 'RUNNING_JOBS') {
								
								var jobName = $("#" + jobId).find("span").text();
								if (jobName != null && jobName != '') {
									jobName = $.trim(jobName);
								}
								var  folderId =  $('#panelWrapperpanelavaialableJobsTree').find('#'+jobId).closest("ul").siblings("div").find(".visionEtlTreeFolders").attr("id"); 
								var folderName = $("#"+folderId).text();
								var menuItems = "<li onclick=\"openSavedJob(" + true + ",'" + jobId + "','" + jobName +"','" + folderName +"','" + folderId + "')\">Open</li>";
								menuItems += "<li onclick=\"processScheduledJobFlag('" + jobId + "','STOP')\">Stop</li>";
								menuItems += "<li onclick=\"processScheduledJobFlag('" + jobId + "','DELETE')\">Remove</li>";
								var menuHeight = 3;

								$("#jqxMenu").remove();
								$(".etl-page-body").append("<div id='jqxMenu'><ul></ul></div>");
								$("#jqxMenu ul").html(menuItems);
								var contextMenu = $("#jqxMenu").jqxMenu({
									width: '120px', height: menuHeight * 27.5 + 'px', autoOpenPopup: false, mode: 'popup',
									//                                    theme: 'energyblue'
								}); // ravi start
								var scrollTop = $(window).scrollTop();
								var scrollLeft = $(window).scrollLeft();
								contextMenu.jqxMenu('open', parseInt(event.clientX) + 5 + scrollLeft, parseInt(event.clientY) + 5 + scrollTop);
								return false;
							} else if (selectedParentItem != null && selectedParentItem['value'] == 'STOPED_JOBS') {
								var menuItems = "<li onclick=\"processScheduledJobFlag('" + jobId + "','RUN')\">Run</li>";
								menuItems += "<li onclick=\"processScheduledJobFlag('" + jobId + "','DELETE')\">Remove</li>";
								var menuHeight = 2;
								$("#jqxMenu").remove();
								$(".etl-page-body").append("<div id='jqxMenu'><ul></ul></div>");
								$("#jqxMenu ul").html(menuItems);
								var contextMenu = $("#jqxMenu").jqxMenu({
									width: '120px', height: menuHeight * 27.5 + 'px', autoOpenPopup: false, mode: 'popup',
									//                                    theme: 'energyblue'
								}); // ravi start
								var scrollTop = $(window).scrollTop();
								var scrollLeft = $(window).scrollLeft();
								contextMenu.jqxMenu('open', parseInt(event.clientX) + 5 + scrollLeft, parseInt(event.clientY) + 5 + scrollTop);
								return false;
							}
						}


					}

				}

			});
			$("#scheduledETLJobs li").on('dblclick', function(event) {
				var selectedItem = $("#scheduledETLJobs").jqxTree('getSelectedItem');
				var jobId = selectedItem['value'];
				if (jobId != null
					&& jobId != ''
					&& jobId != 'RUNNING_JOBS'
					&& jobId != 'STOPED_JOBS'
				) {
					openSelectedJobLog(jobId);
				}

			});
		},
		error: function(e) {
			sessionTimeout(e);
			stopLoader();
		}
	})
}

function initializeScheduleProcsTree(){
        showLoader();
	$.ajax({
		datatype: "json",
		type: "post",
		traditional: true,
		url: 'loadScheduledProcs',
		cache: false,
		data: {

		},
		success: function(response) {
			stopLoader();
                        var procScheduledArray = response['procScheduledArray'];
                        var source =
                        {
                            datatype: "json",
                            datafields: [
                                { name: 'id' },
                                { name: 'parentid' },
                                { name: 'text' },
                                { name: 'value' }
                            ],
                            id: 'id',
                            localdata: procScheduledArray
                        };
                        // create data adapter.
                        var dataAdapter = new $.jqx.dataAdapter(source);
                        dataAdapter.dataBind();
                        var records = dataAdapter.getRecordsHierarchy('id', 'parentid', 'items', [{ name: 'text', map: 'label'}]);
                        $('#scheduledProcs').jqxTree({ source: records, width: '300px'});
                        
                        $("#scheduledProcs").on('mousedown', function(event) {
				var rightClick = isRightClick(event);
                                var target = $(event.target).parents('li:first')[0];
				if (rightClick && target != null) {
                                    
                                    $("#scheduledProcs").jqxTree('selectItem', target);
					var selectedItem = $('#scheduledProcs').jqxTree('getSelectedItem');
					var connectionObjStr = selectedItem['value'];
					var procName = selectedItem['label'];
                                        if (connectionObjStr != procName){
                                            var menuItems = "<li onclick=stopScheduledProc('" + procName + "','"+connectionObjStr+"') >Stop</li>";
                                            menuItems += "<li onclick=removeScheduledProc('" + procName + "','"+connectionObjStr+"') >Remove</li>";
                                            var menuHeight = 2;
                                            $("#jqxMenu").remove();
                                            $(".etl-page-body").append("<div id='jqxMenu'><ul></ul></div>");
                                            $("#jqxMenu ul").html(menuItems);
                                            var contextMenu = $("#jqxMenu").jqxMenu({
                                                    width: '120px', height: menuHeight * 27.5 + 'px', autoOpenPopup: false, mode: 'popup',
                                                    //                                    theme: 'energyblue'
                                            }); // ravi start
                                            var scrollTop = $(window).scrollTop();
                                            var scrollLeft = $(window).scrollLeft();
                                            contextMenu.jqxMenu('open', parseInt(event.clientX) + 5 + scrollLeft, parseInt(event.clientY) + 5 + scrollTop);
                                            return false;
                                        }
                                        
				}
			});
			
		},
		error: function(e) {
			sessionTimeout(e);
			stopLoader();
		}
	})
}

function processScheduledJobFlag(jobId, jobFlag) {
	showLoader();
	var jobName = $("#" + jobId).find("span").text();
	if (jobName != null && jobName != '') {
		jobName = $.trim(jobName);
	}
	$.ajax({
		datatype: "json",
		type: "post",
		traditional: true,
		url: 'processScheduledJobFlag',
		cache: false,
		data: {
			jobId: jobId,
			jobFlag: jobFlag
		},
		success: function(response) {
			stopLoader();
			var dialogSplitMessage = dialogSplitIconText(response['message'], "Y");
			$("#logoutDailog").html(dialogSplitMessage);
			$("#logoutDailog").dialog({
				title: (labelObject[jobName] != null ? labelObject[jobName] : jobName),
				modal: true,
				height: 'auto',
				minHeight: 'auto',
				minWidth: 370,
				maxWidth: 'auto',
				fluid: true,
				buttons: [{
					text: (labelObject['Ok'] != null ? labelObject['Ok'] : 'Ok'),
					click: function() {
						$(this).html("");
						//$(this).dialog("close");
						$(this).dialog("destroy");
						loadScheduledJobs();
					}
				}],
				open: function() {
					$(this).closest(".ui-dialog").find(".ui-button").eq(1).addClass("dialogyes");
					$(this).closest(".ui-dialog").find(".ui-button").eq(2).addClass("dialogno");
					$(".visionHeaderMain").css("z-index", "999");
					$(".visionFooterMain").css("z-index", "999");
				},
				beforeClose: function(event, ui) {
					$(".visionHeaderMain").css("z-index", "99999");
					$(".visionFooterMain").css("z-index", "99999");
				}
			});
		},
		error: function(e) {
			sessionTimeout(e);
			stopLoader();
		}
	});
}

function isRightClick(event) {
	var rightclick;
	if (!event)
		var event = window.event;
	if (event.which)
		rightclick = (event.which == 3);
	else if (event.button)
		rightclick = (event.button == 2);
	return rightclick;
}

function openSelectedJobLog(jobId) {
	var scheduleTabs = "<div id='jqxScheduleTabs'>"
			+ "    <ul style='margin-left: 20px;'>"
			+ "        <li>Job Schedule Info</li>"
			+ "        <li>Job Schedule Log</li>"
			+ "    </ul>" 
			+ "    <div><div id='jobInfoContent' style='padding:10px;'></div></div>"
			+ "    <div><div id='jobLogContent' style='padding:10px;' ></div></div>"
			+ "</div>";
	$("#scheduledJobsDetails").html(scheduleTabs);
	$('#jqxScheduleTabs').jqxTabs({ width: "100%", height: "100%" });
	
	//setTabStyle('jqxScheduleTabs');
	
	 var jobInfo  = "<div id='jobScheduleInfoOptions' ><img src='images/refresh.png' onclick=openSelectedJobLog('"+jobId+"')></div>"
	 		+"<table id='JobScheduleInfoTable' class='logtable jobScheduleTable' style='width:100%'>"
			+ "<thead>"
			+ "<tr>"
			+ "<th width='5%'></th>"
			+ "<th width='25%' style='background: #0071c5 none repeat scroll 0 0;color: #FFF;text-align: center;'>Parameter</th>"
			+ "<th width='70%' style='background: #0071c5 none repeat scroll 0 0;color: #FFF;text-align: center;'>Value</th>"
			+ "</tr>"
			+ "</thead>"
			+ "<tbody>"
			+ "</tbody>"
			+ "</table>";
	$("#jobInfoContent").html(jobInfo);

	$.ajax({
		type: 'post',
		traditional: true,
		dataType: 'html',
		cache: false,
		url: 'fetchJobScheduleInfo',
		async: false,
		data: {
			jobId: jobId
		},
		success: function(response) {
			if (response != null && response != '') {
				var resultObj = JSON.parse(response);
				if (resultObj != null && !jQuery.isEmptyObject(resultObj)) {
					var index =0;
					$.each(resultObj, function(parameter, value){
						index++;
						var infoTxt = "";
						if (index%2 != 0) {
							infoTxt = "<tr class='scheduleJobInfoTableTrRed' ><td><img src='images/information.gif' style='width:16px;height:16px;padding:2px;'></td>"
										+"<td>"+parameter+"</td><td class='visionETLLogInfo' >"+value+"</td></tr>";
						} else {
							infoTxt = "<tr class='scheduleJobInfoTableTrBlue' ><td><img src='images/information.gif' style='width:16px;height:16px;padding:2px;'></td>"
										+"<td>"+parameter+"</td><td class='visionETLLogInfo' >"+value+"</td></tr>";
						}
						$("#JobScheduleInfoTable tbody").append(infoTxt);
					})
					
				} else {

				}
			} else {

			}
		},
		error: function(e) {
			sessionTimeout(e);
			stopLoader();
			if (processScheduledJobLogInterval != null) {
				clearInterval(processScheduledJobLogInterval);
			}
		}

	});

	var jobName = $("#" + jobId).find("span").text();
	if (jobName != null && jobName != '') {
		jobName = $.trim(jobName);
	}
	if (jobId != null && jobId != '') {
		var hidden = "<input type='hidden' id='currentProcessJoblogDate'/><input type='hidden' id='currentProcessJoblogIndex'/>";
		hidden += "<table id='processlogJobScheduleTable' class='logtable' style='width:100%'>"
			+ "<thead>"
			+ "<tr>"
			+ "<th width='5%'></th>"
			+ "<th width='25%' style='background: #0071c5 none repeat scroll 0 0;color: #FFF;text-align: center;'>Time Stamp</th>"
			+ "<th width='70%' style='background: #0071c5 none repeat scroll 0 0;color: #FFF;text-align: center;'>Message</th>"
			+ "</tr>"
			+ "</thead>"
			+ "<tbody>"
			+ "</tbody>"
			+ "</table>";
			
		$("#jobLogContent").html(hidden);
		processLogInterval = setInterval(function() {
			refreshScheduledJobLogFile(jobId) // this will run after every 1 seconds
		}, 2000);
	}

}

function refreshScheduledJobLogFile(jobId) {
	stopLoader();
	var currentProcesslogDate = $("#currentProcessJoblogDate").val();
	var currentProcesslogIndex = $("#currentProcessJoblogIndex").val();
	$.ajax({
		type: 'post',
		traditional: true,
		dataType: 'html',
		cache: false,
		url: 'refreshProcessLog',
		async: true,
		data: {
			currentProcesslogDate: ((currentProcesslogDate != null && currentProcesslogDate != '') ? currentProcesslogDate : ""),
			currentProcesslogIndex: ((currentProcesslogIndex != null && currentProcesslogIndex != '') ? currentProcesslogIndex : ""),
			jobId: jobId
		},
		success: function(response) {
			if (response != null && response != '') {
				var resultObj = JSON.parse(response);
				if (resultObj != null && !jQuery.isEmptyObject(resultObj)) {
					$("#currentProcessJoblogIndex").val(resultObj['currentProcesslogIndex']);
					var logTxt = resultObj['logTxt'];
					if (logTxt != null && logTxt != '') {
						$("#processlogJobScheduleTable tbody").append(logTxt);
						$("#currentProcessJoblogDate").val(resultObj['currentProcesslogDate']);
						if (resultObj['processFlag'] == 'N') {
							clearInterval(processScheduledJobLogInterval);
						}
					} else {

					}
				} else {

				}
			} else {

			}
		},
		error: function(e) {
			sessionTimeout(e);
			stopLoader();
			if (processScheduledJobLogInterval != null) {
				clearInterval(processScheduledJobLogInterval);
			}
		}

	});
}

function changeSelectedTableDb(id, index) {
	var joinDBStr = $("#EtlMappingTable").attr("data-join-db");
	if (joinDBStr != null && joinDBStr != '') {
		var joinDB = JSON.parse(joinDBStr);
		if (joinDB != null && !jQuery.isEmptyObject(joinDB)) {
			var tableName = $("#" + id).val();
			var selectedTableDBObj = joinDB[tableName];
			//data-table-db
			$("#" + id).attr("data-table-db", JSON.stringify(selectedTableDBObj));
		}
	}
}
function finalImport(gridId) {
	var typeName = $("#export" + gridId).val();
	var divStr = '<div class="dataMigratorContent"> <div class="visionProgressSteps" style="display: none;"><ul class="visionStepsProgressbar"><li id="connectToDB" class="active"><p class="visionProcessStepsContent">Connect to Database</p></li><li id="fetchTables"><p class="visionProcessStepsContent">Fetch Tables</p> </li><li id="mapColumns"><p class="visionProcessStepsContent">Map Columns</p></li></ul></div><div class="visionProgressFilesSteps"><ul class="visionStepsProgressbar"><li id="uploadFile" class="active"><p class="visionProcessStepsContent">Upload File</p></li><li id="mapFileCols"><p class="visionProcessStepsContent">Map Columns</p> </li></ul></div><div class="visionUploadFileDiv" id="visionUploadDocs"><div id="showFileType" class="visionShowFileType"></div><input type="hidden" id="selectedType" value=""><input type="hidden" id="selectedTypeName" value=""><input type="hidden" id="savedConnectionList" value=""><input type="hidden" value="" id="dbDetails"><input type="hidden" value="" id="auditId"><div id="visionDMFileUploadDiv" class="visionDMFileUploadDiv"><input type="file" name="importDMFile" id="importDMFile" class="visionDMFilesInput"><div class="visionDMFileUploadclass" id="visionDmFileUpload"><p class="VisionDMUploadFileContent">Upload Files Here </p></div> <div id="visionDMFileList"></div><div class="allErrors visionDMFiles" splitcount="0" id="disvisionDMFiles" style="color: red;display:none"></div></div><div id="visionFileMapCols"></div></div><div class="visionDatabaseMain"><div id="showConnectionType" class="visionShowConnectionType"></div><div class="visionConnectToDbDiv" id="visionConnectToDb"><table class="visionDbTable"> <tbody><tr class="visionDbTr"><td class="visionDbTd"> <label class="visionDbLabels">Connection Name</label></td><td class="visionDbTd"> <input type="text" value="" name="ConnectionName" id="DbConnectionName" class="visionInputDbFields"><div class="dataMigrationInputError" id="DbConnectionNameError"></div></td> </tr><tr class="visionDbTr"><td class="visionDbTd"> <label class="visionDbLabels">Host Name</label></td><td class="visionDbTd"> <input type="text" value="" name="HostName" id="DbHostName" class="visionInputDbFields"><div class="dataMigrationInputError" id="DbHostNameError"></div></td></tr><tr class="visionDbTr"><td class="visionDbTd">  <label class="visionDbLabels">Port</label></td><td class="visionDbTd"><input type="text" value="" name="Port" id="DbPort" class="visionInputDbFields"><div class="dataMigrationInputError" id="DbPortError"></div></td></tr><tr class="visionDbTr"><td class="visionDbTd">  <label class="visionDbLabels">Username</label></td><td class="visionDbTd"> <input type="text" value="" name="Username" id="DbUserName" class="visionInputDbFields"><div class="dataMigrationInputError" id="DbUserNameError"></div></td></tr> <tr class="visionDbTr"><td class="visionDbTd">  <label class="visionDbLabels">Password</label></td><td class="visionDbTd">    <input type="password" value="" name="HostName" id="DbPassword" class="visionInputDbFields"><div class="dataMigrationInputError" id="DbPasswordError"></div></td></tr><tr class="visionDbTr"><td class="visionDbTd">  <label class="visionDbLabels">Database/Service Name</label></td><td class="visionDbTd">    <input type="text" value="" name="ServiceName" id="DbServiceName" class="visionInputDbFields"><div class="dataMigrationInputError" id="DbServiceNameError"></div></td></tr><tr class="visionDbTr" style="display:none"><td class="visionDbTd">  <label class="visionDbLabels">Audit Id</label></td><td class="visionDbTd">    <input type="hidden" value="" name="auditId" id="auditId" class="visionInputDbFields"></td></tr><tr class="visionDbTr"><td><input type="checkbox" name="checkBoxDetails" id="checkBoxChecked" value="checked" checked="">Save Details<div class="visionDataMigrationError" style="display:none">Please check the box</div></td></tr><tr class="visionDbTr"><td class="visionDbTd visionDbConnectBtn" id="connectDbTd" colspan="2"><input type="button" value="Connect" name="Connect" onclick="connectDatabase()" class="visionInputDbButton"></td><td class="visionDbTd visionDbSaveBtn" id="saveDbTd" colspan="2" style="display:none"></td></tr></tbody></table></div><div id="fieldChooser" class="visionTablesComboBox" style="display:none"></div><div id="mappingColumns" class="visionColumnsMapping" style="display:none"><div id="showSourceTablesList" class="visionSourceTablesMain"></div><div class="visionMappedTable" id="MappedTable"></div><div class="visionProcessCols"><input type="button" value="Process" name="Process" id="processCols" onclick="fetchSelectedColumns()" class="visionProcessColsBtn"></div></div></div></div>';
	$('#dataMigratorPopup').html(divStr);
	$("#dataMigratorPopup").dialog({
		title: (labelObject['Data Piping'] != null ? labelObject['Data Piping'] : 'Data Piping'),
		modal: true,
		minHeight: 450,
		maxHeight: 600,
		minWidth: 970,
		maxWidth: 1200,
		fluid: true,
		open: function() {
			$(this).closest(".ui-dialog").find(".ui-button").eq(1).addClass("dialogyes");
			$(".visionHeaderMain").css("z-index", "999");
			$(".visionFooterMain").css("z-index", "999");
			//18-02

			$('.visionProgressSteps').hide();
			getDataBase("FILE", typeName.toUpperCase());
			$(".dataMigratorContent").css("width", "87%");
			$(".dataMigratorContent").css("margin-left", "8%");
		},
		beforeClose: function(event, ui) {
			$(".visionHeaderMain").css("z-index", "99999");
			$(".visionFooterMain").css("z-index", "99999");
		},
		close: function(event, ui) {
			try {
				$("#sub-tabs-2").jqxTabs("destroy");
			} catch (e) {
			}
			$(this).html("");
			//$(this).dialog("close");
			$(this).dialog("destroy");
		}

	});
	var fileslist = [];
	$("html").on("dragover", function(e) {
		e.preventDefault();
		e.stopPropagation();
	});
	$("html").on("drop", function(e) {
		e.preventDefault();
		e.stopPropagation();
	});
	$('.visionDMFileUploadclass').on('drop', function(e) {
		$("#wait").css("display", "block");
		console.log("iam in drop functionality");
		var filetype = $('#selectedTypeName').val();
		etlFileImport("Y", filetype);
		//        console.log("i am in drop functionality1" + filename);
	});
	$("#visionDmFileUpload").click(function(e) {
		$("#wait").css("display", "block");
		var filetype = $('#selectedTypeName').val();
		console.log("iam in clickable ");
		etlFileImport("N", filetype);
	});
	$("#visionDMFiles").on('change', function(event) {
		console.log("iam in files change ");
		var filetype = $('#selectedTypeName').val();
		etlFileImport("N", filetype);
	});
}


function getImportType(selectedGridId) {
	getExportType(selectedGridId);
	var importType = $('#export' + selectedGridId).val();
	if (importType.toUpperCase() == 'XLS') {
		$("#excelImport" + selectedGridId).prop("disabled", false);
		$("#excelExport" + selectedGridId).prop("disabled", false);
		// $("#excelImport"+selectedGridId).css('background','url("images/export_as_xlsx_icon_blue.png") 5px center no-repeat rgb(255, 255, 255)');
		//
		//        $("input.importClass").css('background', '#fff url("images/export_as_xlsx_icon_blue.png")  no-repeat 5px center', 'important');
		//        $("input.importClass").hover(
		//                function () {
		//                    $("input.importClass").css('background', '#0071c5 url("images/export_as_xls_white.png")  no-repeat 5px center', 'important');
		//                }, function () {
		//            $("input.importClass").css('background', '#fff url("images/export_as_xlsx_icon_blue.png")  no-repeat 5px center', 'important');
		//        });


	} else if (importType.toUpperCase() == 'CSV') {
		$("#excelImport" + selectedGridId).prop("disabled", false);
		$("#excelExport" + selectedGridId).prop("disabled", false);
		//$("#excelImport"+selectedGridId).css('background','url("images/export_as_csv_icon_blue.png") 5px center no-repeat rgb(255, 255, 255)');
		//        $("input.importClass").css('background', '#fff url("images/export_as_csv_icon_blue.png") no-repeat 5px center');
		//        $("input.importClass").hover(
		//                function () {
		//                    $("input.importClass").css('background', '#0071c5 url("images/export_as_csv_icon_white.png") no-repeat 5px center', 'important');
		//                }, function () {
		//            $("input.importClass").css('background', '#fff url("images/export_as_csv_icon_blue.png") no-repeat 5px center', 'important');
		//        });

	} else if (importType.toUpperCase() == "XML") {
		$("#excelImport" + selectedGridId).prop("disabled", false);
		$("#excelExport" + selectedGridId).prop("disabled", false);
		//        $("input.importClass").css('background', '#fff url("images/import_icon_blue.png") no-repeat 5px center');
		//        $("input.importClass").hover(
		//                function () {
		//                    $("input.importClass").css('background', '#0071c5 url("images/import_icon_white.png") no-repeat 5px center', 'important');
		//                }, function () {
		//            $("input.importClass").css('background', '#fff url("images/import_icon_blue.png") no-repeat 5px center', 'important');
		//        });

	} else {
		$("#excelImport" + selectedGridId).prop("disabled", false);
		$("#excelExport" + selectedGridId).prop("disabled", false);
	}

}


function etlFileImport(draganddropInd, filetype) {

	var validExtension = [];
	labelObject = {};
	try {
		labelObject = JSON.parse($("#labelObjectHidden").val());
	} catch (e) {

	}

	var secretKey = $('meta[name=keygeneration]').attr("content");
	var params = {};
	var gridId = $('#gridIdStr').val();
	var browseId = "#importDMFile";
	var sourceex = $("#" + gridId).jqxGrid('source');
	var dataFeilds = [];
	dataFeilds = sourceex._source.datafields;
	params['gridId'] = $('#gridIdStr').val();
	params['selectedGridId'] = $('#gridIdStr').val();
	params['tableName'] = $('#tableName').val();
	params['selectedFiletype'] = filetype;
	var dataFeildsStr = JSON.stringify(dataFeilds);
	if (dataFeildsStr != null && dataFeildsStr != '' && dataFeildsStr != '{}') {
		dataFeildsStr = CryptoJS.AES.encrypt(dataFeildsStr, secretKey);
		params['dataFeilds'] = dataFeildsStr;
	}


	$(browseId).ajaxfileupload({
		'action': 'importDMFile',
		params: params,
		'onComplete': function(response) {
			$("#Loader").css("display", "none");
			$("body").css({ "pointer-events": "auto" });
			var status = response.status;
			var message = response.message;
			if (message != null && message.indexOf("{") > -1 && message.indexOf("}") > -1) {
				message = message.substring(message.indexOf("{"), message.indexOf("}") + 1);
			}
			message = JSON.parse(message);
			// var tableStr = message.columnStr;
			var tableStr = jQuery('<div />').html(message.columnStr).text();
			var filePath = message.filePath;
			$('#filePathValue').val(filePath);
			var result = message.result;
			if (status == true && result != null && result == "File imported successfully") {
				$("#importDMFile").remove();
				var fileImprtDiv = "<input type='file' name='importDMFile' id='importDMFile' style='display:none'>";
				$("#visionDmFileUpload").parent().append(fileImprtDiv);
				var processBtn = "<input type='button' value= 'process' id= 'processMappedFileCols' onclick = 'processMappedFileCols()' class='visionProcessMappedFileBtn'>";
				$('#visionFileMapCols').html(tableStr + processBtn);
				$('#visionDMFileUploadDiv').hide();
				$('#visionFileMapCols').show();
				$('.visionProgressFilesSteps').show();
				$('#mapFileCols').addClass("active");
				if ($("#dataMigratorTreeDiv").length == 0) { // ravi import
					$(".visionProcessMappedFileBtn").css("margin-right", "47%");
				}

			} else {
				$("#dialog").html(result);
				$("#dialog").dialog({
					modal: true,
					width: 270,
					height: 135,
					fluid: true,
					buttons: {
						Ok: function() {
							//$(this).dialog("close");


						}
					},
					open: function() {
						$(this).closest(".ui-dialog").find(".ui-button").eq(1).addClass("dialogyes");
						$(".visionHeaderMain").css("z-index", "999");
						$(".visionFooterMain").css("z-index", "999");
					},
					beforeClose: function(event, ui) {
						$("#importDMFile").remove();
						var fileImprtDiv = "<input type='file' name='importDMFile' id='importDMFile' style='display:none'>";
						$("#visionDmFileUpload").parent().append(fileImprtDiv);
						$(".visionHeaderMain").css("z-index", "99999");
						$(".visionFooterMain").css("z-index", "99999");
					}
				});
			}
			console.log("On Complete::");
		},
		'onStart': function() {
			$('#Loader').show();
			$("body").css({ "pointer-events": "none" });
			$("#Loader").css("display", "block");
			// $('#message').hide();
		}
	});
	if (draganddropInd == 'N') {
		$("#importDMFile").click();
		//var filename = 
	}
}


function openOpeartorContextMenu(selectedOperatorId) {

	var contentSplitterStyle = $("#contentSplitter").css("display");
	var contentSplitter1Style = $("#contentSplitter1").css("display");
	var $flowchart;
	$flowchart = $('#' + flowChartWorkSpaceId);
	var toOpLinkArray = $flowchart.flowchart('getLinksFrom', selectedOperatorId);
	var fromOpLinkArray = $flowchart.flowchart('getLinksTo', selectedOperatorId);
	console.log("toOpLinkArray:::" + toOpLinkArray);
	console.log("fromOpLinkArray:::" + fromOpLinkArray);
	var selectedOperatorData = $flowchart.flowchart('getOperatorData', selectedOperatorId);
	var iconType = selectedOperatorData["iconType"];
	var dragType = selectedOperatorData["dragType"];
	var operatorType = selectedOperatorData["operatorType"];
	if (dragType == "FILES") {
		dragType = 'File';
	}


	var menuItems = "";
	var menuHeight = 30;
	//    if (operatorType == "predefinedSource") {// ravi predefined start
	//        menuHeight = 30;
	//        menuItems = "<li onclick=setConnectionToOperator(this)>Source Connection</li>";
	//    } else if (operatorType == "predefinedTarget") {
	//        menuHeight = 30;
	//        menuItems = "<li onclick=setConnectionToOperator(this)>Target Connection</li>";
	//
	//    } // ravi predefined  end
	//    else
	if (iconType == 'XLS'
		|| iconType == 'XLSX'
		|| iconType == 'CSV'
		|| iconType == 'XML'
		|| iconType == 'TXT'
		|| iconType == 'JSON'
	) {

		menuItems = "<li onclick=showFileNamePopup(this,'" + iconType + "')>Rename File</li>";
		menuItems += "<li onclick=addHeadersToFile()>Add Headers</li>";
		menuHeight = 56;
		var fileDataObj = {};
		fileDataObj['filePath'] = "V10ETLExport_" + selectedOperatorData['timeStamp'] + "." + iconType.toLowerCase();
		var fileName = ((selectedOperatorData['userFileName'] != null && selectedOperatorData['userFileName'] != 'undefined') ? selectedOperatorData['userFileName'] : fileDataObj['filePath']);
		for (var entitykey in HtmlEntities) {
			var entity = HtmlEntities[entitykey];
			var regex = new RegExp(entitykey, 'g');
			fileName = fileName.replace(regex, entity);
		}


		fileDataObj['fileName'] = fileName;
		fileDataObj['fileType'] = "." + iconType.toLowerCase();
		fileDataObj['targetFile'] = "Y";
		//        if (selectedOperatorData['trfmRules-data'] != null) {
		//            var t_rules = selectedOperatorData['trfmRules-data']
		//            var fileHeaders = t_rules['fileHeaders'];
		//            if (fileHeaders != null && !jQuery.isEmptyObject(fileHeaders)) {
		//                fileDataObj['fileHeaders'] = fileHeaders;
		//                menuItems += "<li onclick=viewFileData('" + JSON.stringify(fileDataObj) + "')>View File Data</li>";
		//                menuHeight = 84;
		//            }
		//
		//        }

		menuItems += "<li onclick=viewFileData('" + JSON.stringify(fileDataObj) + "')>View File Data</li>";
		menuHeight = 84;
		menuItems += "<li onclick=dataProfiling()>Data Profiling</li>";
		menuHeight = 112;
	} else if (iconType == 'OUTPUT') {
		var fileDataObj = {};
		fileDataObj['filePath'] = "V10ETLExport_" + selectedOperatorData['timeStamp'] + ".XLSX";
		var fileName = "OUTPUT_" + selectedOperatorId;
		for (var entitykey in HtmlEntities) {
			var entity = HtmlEntities[entitykey];
			var regex = new RegExp(entitykey, 'g');
			fileName = fileName.replace(regex, entity);
		}
		fileDataObj['fileName'] = fileName;
		fileDataObj['fileType'] = ".XLSX";
		//        fileDataObj['fileType'] = ".XLSX";
		fileDataObj['targetFile'] = "Y";
		menuItems += "<li onclick=viewFileData('" + JSON.stringify(fileDataObj) + "')>View Data</li>";
		menuHeight = 30;
	} else if (iconType == 'REJECTED') {
		/*var fileDataObj = {};
		fileDataObj['filePath'] = "V10ETLExport_" + selectedOperatorData['timeStamp'] + ".XLSX";
		var fileName = "REJECTED_" + selectedOperatorId;
		for (var entitykey in HtmlEntities) {
			var entity = HtmlEntities[entitykey];
			var regex = new RegExp(entitykey, 'g');
			fileName = fileName.replace(regex, entity);
		}
		fileDataObj['fileName'] = fileName;
		fileDataObj['fileType'] = ".XLSX";
		//        fileDataObj['fileType'] = ".XLSX";
		fileDataObj['targetFile'] = "Y";
		menuItems += "<li onclick=viewFileData('" + JSON.stringify(fileDataObj) + "')>View Data</li>";
		menuHeight = 30;*/
		
		var connectionObj = selectedOperatorData['connObj'];
			menuItems += "<li onclick=viewTableData('" + connectionObj['CONNECTION_NAME'] + "','" + $.trim(selectedOperatorData.statusLabel) + "'," + JSON.stringify(connectionObj) + ")>View Data</li>";
			menuHeight = 30;
			
	} else if (iconType == 'CUBE') {

		menuItems = "<li onclick=setCubeConnection(this,'FACT')>FACTS</li>";
		menuItems += "<li onclick=setCubeConnection(this,'DIMENSION')>DIMENSIONS</li>";
		menuItems += "<li onclick=setCubeConnection(this,'AGGREGATE')>AGGREGATES</li>";
		menuHeight = 84;
	} else if (iconType == 'SQL') {
		menuItems = "<li onclick=showSQLPopup(this)>Create Table</li>";
		if (dragType == "Table") {
			var connectionObj = selectedOperatorData['connObj'];
			menuItems += "<li onclick=viewTableData('" + connectionObj['CONNECTION_NAME'] + "','" + $.trim(selectedOperatorData.statusLabel) + "'," + JSON.stringify(connectionObj) + ")>View Data</li>";
			menuHeight = 56;
			menuItems += "<li onclick=alterTable('" + connectionObj['CONNECTION_NAME'] + "','" + $.trim(selectedOperatorData.statusLabel) + "'," + JSON.stringify(connectionObj) + ")>Alter Table</li>";
			menuHeight = 84;
			menuItems += "<li onclick='setDatabaseConnection(\"DB\")'>Set Connection</li>";
			menuHeight = 112;
			menuHeight = menuHeight + 30;
			menuItems += "<li onclick=changeConnection('" + connectionObj['CONN_CUST_COL1'] + "','" + connectionObj['CONNECTION_NAME'] + "')>Change Connection</li>";
			menuItems += "<li onclick=advancedOptions('" + connectionObj['CONNECTION_NAME'] + "','" + $.trim(selectedOperatorData.statusLabel) + "'," + JSON.stringify(connectionObj) + ")>Adv Options</li>";
			menuHeight += menuHeight + 30;
		}
	} else if (iconType == "FILE" && dragType == null) {

		menuItems = "<li onclick=setFilePath()>Set File Path</li>";
		menuHeight = 30;
	} else if (dragType == "Table") {
		var connectionObj = selectedOperatorData['connObj'];
		menuHeight = 30;
		menuItems = "<li onclick=viewTableData('" + connectionObj['CONNECTION_NAME'] + "','" + $.trim(selectedOperatorData.statusLabel) + "'," + JSON.stringify(connectionObj) + ")>View Data</li>";
		if (connectionObj['CONN_CUST_COL1'] == "SAP_HANA" || connectionObj['CONN_CUST_COL1'] == "SAP_ECC") {

			menuItems += "<li onclick='sapTableOptions()'>Options</li>";
			menuHeight = 56;
			menuHeight = menuHeight + 30;
			menuItems += "<li onclick=changeConnection('" + connectionObj['CONN_CUST_COL1'] + "','" + connectionObj['CONNECTION_NAME'] + "')>Change Connection</li>";
		} else {

			menuItems += "<li onclick=alterTable('" + connectionObj['CONNECTION_NAME'] + "','" + $.trim(selectedOperatorData.statusLabel) + "'," + JSON.stringify(connectionObj) + ")>Alter Table</li>";
			menuItems += "<li onclick='setDatabaseConnection(\"DB\")'>Set Connection</li>";
			menuHeight = 84;
			menuHeight = menuHeight + 30;
			menuItems += "<li onclick=changeConnection('" + connectionObj['CONN_CUST_COL1'] + "','" + connectionObj['CONNECTION_NAME'] + "')>Change Connection</li>";
		}
		
		menuItems += "<li onclick=advancedOptions('" + connectionObj['CONNECTION_NAME'] + "','" + $.trim(selectedOperatorData.statusLabel) + "'," + JSON.stringify(connectionObj) + ")>Adv Options</li>";
		menuHeight += menuHeight + 30;

		//        menuHeight = 56;

	} else if (iconType == "PIVOT" && dragType == null) {

		menuItems = "<li onclick=viewTableData()>View Data</li>";
		menuHeight = 30;
	} else if (iconType == "UNPIVOT" && dragType == null) {

		menuItems = "<li onclick=viewTableData()>View Data</li>";
		menuHeight = 30;
	} else if (dragType == "File" || dragType == "FILE") {
		var connectionObj = selectedOperatorData['connObj'];
		var fileObj = {};
		var filePath = connectionObj['filePath'];
		filePath = filePath.replaceAll('\\', '###');
		filePath = filePath.replaceAll(' ', '#$#');
		if (filePath != null && filePath.lastIndexOf("\\") > -1) {
			filePath = filePath.substring(filePath.lastIndexOf("\\") + 1);
		}

		//        fileObj['fileType'] = connectionObj['fileType'];
		var filename = (connectionObj['fileName']);
		var fileType = "." + filename.substr((filename.lastIndexOf('.') + 1));
		fileObj['fileType'] = fileType;
		for (var entitykey in HtmlEntities) {
			var entity = HtmlEntities[entitykey];
			var regex = new RegExp(entitykey, 'g');
			filename = filename.replace(regex, entity);
		}

		fileObj['fileName'] = filename;
		fileObj['filePath'] = filePath;
		menuItems = "<li onclick=viewFileData('" + JSON.stringify(fileObj) + "')>View File Data</li>";
		if (iconType == "FILE") {
			menuItems += "<li onclick=setFilePath()>Set File Path</li>";
			menuHeight = 56;
		}
		if (fileType.toUpperCase() == ".PDF") {
			menuItems += "<li onclick=pdfToHTML('" + JSON.stringify(fileObj) + "')>View as HTML</li>";
			menuHeight = menuHeight + 30;
		}
		menuItems += "<li onclick=setFileDataType('" + JSON.stringify(fileObj) + "')>Set Data Type</li>";
		menuHeight = menuHeight + 30;
	}  // pre job post job 
	else if (iconType == "MAP") {
		menuItems += "<li id='PREJOB' onclick=jobExecuteType(this)>Pre Job</li>";
		menuItems += "<li id='POSTJOB' onclick=jobExecuteType(this)>Post Job</li>";
		menuItems += "<li id='REMOVEJOB' onclick=jobExecuteType(this)>Remove Job</span></li>";
		menuItems += "<li id='PARALLELJOB' onclick=jobExecuteType(this)>Parallel Job</span></li>";
		menuItems += "<li id='mapExecutionNo' onclick=setMapSeqNo(this)>Set Map No</span></li>";
		menuHeight = 130;
	} else if (iconType == "GROUP_JOB") {
		menuItems += "<li id='GROUP_JOB' onclick=selectGroupJob(this)>Select Job</li>";
		//        menuItems += "<li id='designJob' onclick=designJobInPopup(this)>Design Job</li>";
		menuItems += "<li  onclick=showChildJob('" + selectedOperatorId + "')>Show Job</li>";
		menuItems += " <li>Process Type"
			+ "  <ul>"
			+ "<li id='PREJOB' onclick=jobExecuteType(this)>Pre Job</li>"
			+ "<li id='POSTJOB' onclick=jobExecuteType(this)>Post Job</li>"
			+ "<li id='PARALLELJOB' onclick=jobExecuteType(this)>Parallel Job</li>"
			+ "<li id='REMOVEJOB' onclick=jobExecuteType(this)>Remove Job</li>"
			+ " </ul>"
			+ " </li>"
			+ "<li id='onJobSuccess' onclick=selectJobOnJobSuccess(this)>On Success</span></li>"
			+ "<li id='onJobFail' onclick=selectJobOnJobFail(this)>On Fail</span></li>";
		menuHeight = 140;
		//        if (selectedOperatorData['onSuccessExecute'] == null && selectedOperatorData['onFailExecute'] == null) {
		menuItems += "<li id='mapExecutionNo' onclick=setMapSeqNo(this)>Set Map No</span></li>";
		menuHeight = 170;
		//        }

	} else if (iconType == "QUERY") {
		menuItems += "<li onclick='setDBConnection(this,\"ALL_SCHEMA\",\"Data Source\")'>Set Connection</li>";
		menuHeight = 30;
	} else if (iconType == "RDBMS_TABLE") {
		menuItems += "<li onclick='setDatabaseConnection(\"DB\")'>Set Connection</li>";
		menuHeight = 30;
	} else if (iconType == "ERP_TABLE") {
		menuItems += "<li onclick='setDatabaseConnection(\"ERP\")'>Set Connection</li>";
		menuHeight = 30;
	} else if (iconType == "FILTER") {
		menuItems += "<li onclick='setLinkToRejectedRecordsOp()'>Rejected Records</li>";
		menuHeight = 30;
	} else if (iconType == "UNIQUE") {
		menuItems += "<li onclick='setLinkToRejectedRecordsOp()'>Rejected Records</li>";
		menuHeight = 30;
	}

	menuItems += "<li onclick='setExecutionSequence()'>Execution Sequence</li>";
	menuHeight = menuHeight + 30;
	if (menuItems != "") {
		$("#jqxMenu").remove();
		$(".etl-page-body").append("<div id='jqxMenu'><ul></ul></div>");
		$("#jqxMenu ul").html(menuItems);
		var contextMenu = $("#jqxMenu").jqxMenu({
			width: '140px', height: menuHeight + 'px', autoOpenPopup: false, mode: 'popup',
			//            theme: 'energyblue'
		}); // ravi start
		var scrollTop = $(window).scrollTop();
		var scrollLeft = $(window).scrollLeft();
		//need add these line
		var operatorData = $('#' + flowChartWorkSpaceId).flowchart('getOperatorData', selectedOperatorId);
		var idValue = operatorData['executeType'];
		if (idValue != null && idValue != '' && idValue != undefined) {
			$("#" + idValue).prepend("&#10004;" + " ");
		}
		//upto here
		contextMenu.jqxMenu('open', parseInt(event.clientX) + 5 + scrollLeft, parseInt(event.clientY) + 5 + scrollTop);
		return false;
	}

	//    if (menuItems != "") {
	//        $("#jqxMenu").remove();
	//        $(".etl-page-body").append("<div id='jqxMenu'><ul></ul></div>");
	//        $("#jqxMenu ul").html(menuItems);
	//        var contextMenu = $("#jqxMenu").jqxMenu({width: '180px', height: menuHeight + 'px', autoOpenPopup: false, mode: 'popup', theme: 'energyblue'}); // ravi start
	//
	//        var scrollTop = $(window).scrollTop();
	//        var scrollLeft = $(window).scrollLeft();
	//
	//        contextMenu.jqxMenu('open', parseInt(event.clientX) + 5 + scrollLeft, parseInt(event.clientY) + 5 + scrollTop);
	//        return false;
	//    }
}



function cancellCurrentJob() {
	var jobId = $("#currentJobId").val();
	$.ajax({
		type: 'post',
		traditional: true,
		dataType: 'html',
		cache: false,
		url: 'cancellProcessJob',
		async: true,
		data: {
			jobId: jobId
		},
		success: function(response) {
			stopLoader();
		},
		error: function(e) {
			stopLoader();
			sessionTimeout(e);
		}

	});
}

function disableDdw($this, id) {
	var operator = $($this).val();
	var tr = $this.closest("tr");
	var tdArray = tr.cells;
	if (tdArray != null && tdArray.length != 0) {
		if (operator == 'IS' || operator == 'IS NOT') {
			$(tdArray[3]).find("input").val("NULL");
			$(tdArray[3]).find("input").attr('readonly', 'true');
		} else {
			$(tdArray[3]).find("input").val("");
			//            $(tdArray[3]).find("input").attr('readonly', 'false');
			$(tdArray[3]).find("input").removeAttr('readonly');
		}
	}

}

function addHeadersToFile() {
	var selectedOperatorId = $('#' + flowChartWorkSpaceId).flowchart('getSelectedOperatorId');
	var selectedOperatorData = $('#' + flowChartWorkSpaceId).flowchart('getOperatorData', selectedOperatorId);
	var t_Rules = selectedOperatorData['trfmRules-data'];
	if (t_Rules != null) {
		var inputFields_Obj = t_Rules['fileHeaders'];
	}
	var headersTr = "";
	if (inputFields_Obj != null && !jQuery.isEmptyObject(inputFields_Obj)) {
		var inputFields_ObjLen = Object.keys(inputFields_Obj).length;
		for (var i = 1; i <= inputFields_ObjLen; i++) {
			headersTr += '<td width="6.5%"><img src="images/Detele Red Icon.svg" onclick="deleteSelectedRow(this)" class="visionColMappingImg" title="Delete" style="width:15px;height: 15px;cursor:pointer;"></td>\n\
                            <td width="6.5%">' + i + '</td>\n\
                            <td width="87%" class="visionFileHeaderNameTd"><input class="visionFileHeaderNameInput" type="text" value="' + inputFields_Obj[i] + '" style="width:97%" ></td></tr>';
		}
	} else {
		headersTr += '<td width="6.5%"><img src="images/Detele Red Icon.svg" onclick="deleteSelectedRow(this)" class="visionColMappingImg" title="Delete" style="width:15px;height: 15px;cursor:pointer;"></td>\n\
                     <td width="6.5%">1</td>\n\
                     <td width="87%" class="visionFileHeaderNameTd"><input class="visionFileHeaderNameInput" type="text" value="" style="width:97%" ></td></tr>';
	}


	var divStr = '<div class="visionETLaddheader">\n\
                  <div class="visionEtlAddIconDiv"><img data-trstring="" src="images/Add icon.svg" id="visionEtlAddRowIcon" class="visionHeaderEtlAddRowIcon" title="Add new Headers" onclick="addNewFileHeader(event,id,this)" style="width:15px;height: 15px;cursor:pointer;"></div><div class="visionEtlFileHeaderTablesDiv">\n\
                  <table id="fileColumnHeadersTable" class="visionEtlFileHeaderTable" style="width: 100%;" border="1"><thead><tr>\n\
                    <th width="6.5%" class="" style="background: #0071c5 none repeat scroll 0 0;color: #FFF;text-align: center"></th>\n\
                    <th width="6.5%" class="" style="background: #0071c5 none repeat scroll 0 0;color: #FFF;text-align: center"></th>\n\
                    <th width="87%" class="" style="background: #0071c5 none repeat scroll 0 0;color: #FFF;text-align: center">Header Name</th></tr></thead>\n\
                  <tbody><tr>';
	divStr += headersTr;
	divStr += '</tbody></table></div></div>';
	$("#dialog").html(divStr);
	$("#dialog").dialog({
		title: (labelObject['Add File Headers'] != null ? labelObject['Add File Headers'] : 'Add File Headers'),
		modal: true,
		width: 300,
		fluid: true,
		buttons: [{
			text: (labelObject['Ok'] != null ? labelObject['Ok'] : 'Ok'),
			click: function() {
				if (selectedOperatorData['trfmRules-data'] == null) {
					selectedOperatorData['trfmRules-data'] = {};
				}
				var tRules = selectedOperatorData['trfmRules-data'];
				var inputFieldsObj = {};
				var inputFieldsObjLength = Object.keys(inputFieldsObj).length;
				$(".visionFileHeaderNameInput").each(function(index) {
					if (this.value != null && this.value != '' && this.value != 'undefined') {

						inputFieldsObj[inputFieldsObjLength + index + 1] = this.value;
					}
				});
				tRules['fileHeaders'] = inputFieldsObj;
				selectedOperatorData['trfmRules-data'] = tRules;
				var fileType = "." + selectedOperatorData['iconType'];
				var imageIcon = "";
				if (fileType == '.xls'
					|| fileType == '.xlsx'
					|| fileType == '.XLS'
					|| fileType == '.XLSX'
				) {
					imageIcon = "images/XLSX-Icon.svg"
				} else if (fileType == '.xml'
					|| fileType == '.XML') {
					imageIcon = "images/XML-Icon.svg";
				} else if (fileType == '.CSV'
					|| fileType == '.csv') {
					imageIcon = "images/CSV-Icon.svg";
				} else if (fileType == '.JSON'
					|| fileType == '.json') {
					imageIcon = "images/JSON_Icon.svg";
				}

				selectedOperatorData['imageIcon'] = imageIcon;
				$('#' + flowChartWorkSpaceId).flowchart('setOperatorData', selectedOperatorId, selectedOperatorData);
				if ($("#dataMigrationTabs").length > 0) {
					viewTrfmRules(); // ravi updated code changes
				}

				$(this).html("");
				//$(this).dialog("close");
				$(this).dialog("destroy");
			}
		}],
		open: function() {
			$(this).closest(".ui-dialog").find(".ui-button").eq(1).addClass("dialogyes");
			$(".visionHeaderMain").css("z-index", "999");
			$(".visionFooterMain").css("z-index", "999");
			$(".ui-dialog").addClass('visionDMTreePopup');
			$("#dataMigrationTabs").jqxTabs({ theme: 'ui-redmond' });
		},
		beforeClose: function(event, ui) {
			$(".visionHeaderMain").css("z-index", "99999");
			$(".visionFooterMain").css("z-index", "99999");
		}, close: function(event, ui) {

			$(this).html("");
			//$(this).dialog("close");
			$(this).dialog("destroy");
		}
	});
}

function addNewFileHeader(event, id, $this) {
	var rowIndex = $("#fileColumnHeadersTable tr:last")[0].rowIndex;
	rowIndex = rowIndex + 1;
	var newRow = '<tr><td width="6.5%"><img src="images/Detele Red Icon.svg" onclick="deleteSelectedRow(this)" class="visionColMappingImg" title="Delete" style="width:15px;height: 15px;cursor:pointer;"></td>\n\
                <td width="6.5%">' + rowIndex + '</td>\n\
                <td width="87%" class="visionFileHeaderNameTd"><input class="visionFileHeaderNameInput" type="text" value="" style="width:97%";></td></tr>'
	$('#fileColumnHeadersTable tr:last').after(newRow);
}

function deleteAllTableTrs(tableId) {
	$("#" + tableId + " > tbody").empty();
	try {
		$("#mainSplitter").resize();
	} catch (e) {
	}
}
function moveSapTableColumns() {
	//  $("#sourceFields").find(".multipleSelect").appendTo(".destinationFields ");
	var destinationFieldsLength = $(".destinationFields").find(".visionTableName").length;
	if (destinationFieldsLength < 50) {
		$("#selectAllCheckBoxes").prop("checked", false);
		$("#sourceFields").find(".multipleSelect").each(function() {
			var destinationFieldsLength = $(".destinationFields").find(".visionTableName").length;
			$(this).appendTo(".destinationFields");
			$(this).children().show();
			$(this).find(".visionTableNameChbx").hide();
			//            if (destinationFieldsLength < 50) {
			//                $(this).appendTo(".destinationFields");
			//                $(this).children().show();
			//                $(this).find(".visionTableNameChbx").hide();
			//            } else {
			//                return false;
			//            }

		});
	} else {
		showMesg("Cannot select more than 50 columns");
	}

}

function slideSettingsETL(gridId) {
	//  $("#settings_panel").toggle(100)
	$('#' + gridId + '_settings_panel').toggle('slide', { direction: 'right' }, 500);
	$("#" + gridId + "_personalizeid").toggleClass("ui-icon-triangle-1-s");
	//  var slideSettingsInd = $("#accordion").attr("data-slidesettingsind");
	//    if (slideSettingsInd == 'N') {
	//         $("#accordion").attr("data-slidesettingsind","Y");
	//        getPersonalizationData();
	//    }

	//$('#showcriteria').toggle();
}
function updateETLPersonalize(id) {
	var columnName = $("#" + id).attr("data-colname");
	var type = $("#" + id).attr("data-type");
	var gridId = $("#" + id).attr("data-gridid");
	if (type == 'display') {
		try {

			if ($("#" + id).is(':checked')) {
				$('#' + gridId).jqxGrid('showcolumn', columnName);
			} else {
				$('#' + gridId).jqxGrid('hidecolumn', columnName);
			}

		} catch (e) {

		}
	} else if (type == 'pinned') {
		try {

			if ($("#" + id).is(':checked')) {
				$('#' + gridId).jqxGrid('pincolumn', columnName);
			} else {
				$('#' + gridId).jqxGrid('unpincolumn', columnName);
			}

		} catch (e) {

		}
	}
}

function setConnectionToOperator(_this) {
	$("#dialog").html(tabsDiv);
	$("#dialog").dialog({
		title: (labelObject['Transformation Rules'] != null ? labelObject['Transformation Rules'] : 'Transformation Rules'),
		modal: true,
		width: 1000,
		height: 'auto',
		fluid: true,
		open: function() {
			$(this).closest(".ui-dialog").find(".ui-button").eq(1).addClass("dialogyes");
			$(".visionHeaderMain").css("z-index", "999");
			$(".visionFooterMain").css("z-index", "999");
			$(".ui-dialog").addClass('visionDMTreePopup');
			$("#dataMigrationTabs").jqxTabs({ theme: 'ui-redmond' });
		},
		beforeClose: function(event, ui) {
			$(".visionHeaderMain").css("z-index", "99999");
			$(".visionFooterMain").css("z-index", "99999");
		}, close: function(event, ui) {

			$(this).html("");
			//$(this).dialog("close");
			$(this).dialog("destroy");
		}
	});
}

function viewPredefinedTrfmRules() {

	var flowChartData = $('#' + flowChartWorkSpaceId).flowchart('getData');
	var operators = flowChartData['operators'];
	var trfmRulesId = "";
	var jobId = "";
	var jobName = "";
	$.each(operators, function(indx) {
		if (this['targetOperator'] == 'Y') {
			trfmRulesId = this['trfmRulesId'];
			jobId = this['jobId'];
			jobName = this['jobName'];
		}
	})

	showLoader();
	$.ajax({
		type: 'post',
		traditional: true,
		dataType: 'html',
		cache: false,
		url: 'fetchTransformationRules',
		async: true,
		data: {
			trfmRulesId: trfmRulesId,
			jobId: jobId,
			jobName: jobName
		},
		success: function(response) {
			stopLoader();
			if (response != null) {
				$('.visionTablesComboBox').hide();
				$('.visionUploadFileDiv').hide();
				$('.visionConnectToDbDiv').hide();
				$('#visionERPMain').hide();
				var response = JSON.parse(response);
				if (response != null && response.connectionFlag == 'Y') {
					$("#feedContentArea").html(response['tabsString']);
					$("#dataMigrationTabs").jqxTabs({ width: "100%", height: "130px", position: 'top', theme: 'ui-redmond', reorder: true });
					$('#dataMigrationTabs').unbind('selected').on('selected', function(event) {
						$('#iconsdiv').attr('style', 'margin-top:4px !important');
						// scroll bar issue fixed by SHI
						var feedContentAreaHeight = $("#feedContentArea").height();
						//                    $("#dataMigrationTabs").jqxTabs({height:feedContentAreaHeight})
						var tbodyHeight = feedContentAreaHeight - 90;
						$(".visionColMappScrollDiv1").css("max-height", tbodyHeight);
						$(".visionEtlJoinClauseTablesDiv").css("max-height", tbodyHeight);
						//                                $(".visionEtlMappingTablesDiv").css("max-height", parseInt(feedContentAreaHeight) - 130);
						$(".visionEtlJoinClauseTablesDivScroll").css("max-height", parseInt(feedContentAreaHeight) - 105);
						$(".visionSqlViewQuery1").css("max-height", parseInt(feedContentAreaHeight) - 67);
						$(".visionEtlJoinrClauseTablesDiv").css("max-height", parseInt(feedContentAreaHeight) - 130);
						$(".visionEtlwhereClauseTablesDiv").css("max-height", parseInt(feedContentAreaHeight) - 69);
						var joinTablesHeight = $(".visionEtlJoinrClauseTablesDiv").height();
						$(".viewJoinQueryOuterDivClass").css("max-height", parseInt(feedContentAreaHeight) - (parseInt(joinTablesHeight) + 82));
						// scroll bar issue fixed by SHI
						//end code
					});
					//                        $("#dataMigrationTabs").jqxTabs({width: "100%", height: "100%", position: 'top', theme: 'ui-redmond', reorder: true});
					var columnStr = response['columnMapping'];
					$("#toConnObjPK").val(JSON.stringify(response['toTablePKColumnList'])); //PKH PKIcon
					var selectedJoinTables = response['selectedJoinTables'];
					$('#tabs-1').html(columnStr);
					$('#tabs-1').append("<div id='selectedColumnStr' style='display:none'></div>");
					$("#toTableColsArray_hidden").remove();
					$("#fromTableColsArray_hidden").remove();
					var hiddenData = "<input type='hidden' id='toTableColsArray_hidden'/><input type='hidden' id='fromTableColsArray_hidden'/>";
					$('#tabs-1').append(hiddenData);
					$("#toTableColsArray_hidden").val(JSON.stringify(response['toTableColsArray']));
					$("#fromTableColsArray_hidden").val(JSON.stringify(response['fromTableColsArray']));
					$('#tabs-2').html(selectedJoinTables);
					$('#mapColumns').addClass("active");
					$('.visionProgressFilesSteps').hide();
					$("#selectedColumnStr").html(response['colMapTrString']); //colMapTrString
					var selectedTableWhereClause = response['selectedTableWhereClause'];
					if (selectedTableWhereClause != null) {
						var hiddenDataWhere = "<input type='hidden' id='whereClauseTableColsArray_hidden'/><input type='hidden' id='currentClauseMapId'/>"
							+ "<div id='wherClauseTrString' style='display:none;'></div><div id='wherClauseColsString' style='display:none;'></div>";
						$('#tabs-3').html(selectedTableWhereClause['whereClauseCondition'] + hiddenDataWhere); //whereClauseCondition
						$("#whereClauseTableColsArray_hidden").val(JSON.stringify(selectedTableWhereClause['fromTableColsArray']));
					}
					var selectedTableOrderGroupClause = response['selectedTableOrderGroupClause'];
					if (selectedTableOrderGroupClause != null) {
						var hiddenDataOrderBy = ""
							+ "<div id='orderClauseTrString' style='display:none;'></div>";
						$('#tabs-4').html(selectedTableOrderGroupClause['orderByCondition'] + hiddenDataOrderBy); //
						var hiddenDataGroupBy = ""
							+ "<div id='groupClauseTrString' style='display:none;'></div>";
						$('#tabs-5').html(selectedTableOrderGroupClause['groupByCondition'] + hiddenDataGroupBy); //
						$("#groupClauseTrString").html(selectedTableOrderGroupClause['groupByTrString']);
						$("#orderClauseTrString").html(selectedTableOrderGroupClause['orderByTrString']);
					}
					// sql Editor
					//                        var sqlEditor = ace.edit("tabs-6");
					//                        sqlEditor.setOptions({
					//                            enableBasicAutocompletion: true, // the editor completes the statement when you hit Ctrl + Space
					//                            showPrintMargin: false, // hides the vertical limiting strip
					//                            fontSize: "100%" // ensures that the editor fits in the environment
					//                        });
					//
					//                        sqlEditor.getSession().setMode("ace/mode/sql");
					// scroll bar issue fixed by SHI
					var feedContentAreaHeight = $("#feedContentArea").height();
					if ($('#dataMigrationTabs').length) {
						$("#dataMigrationTabs").jqxTabs({ height: feedContentAreaHeight });
					}
					//                            $("#dataMigrationTabs").jqxTabs({height: feedContentAreaHeight})
					var tbodyHeight = feedContentAreaHeight - 90;
					$(".visionColMappScrollDiv1").css("max-height", tbodyHeight);
					$(".visionEtlJoinClauseTablesDiv").css("max-height", tbodyHeight);
					//                            $(".visionEtlMappingTablesDiv").css("max-height", parseInt(feedContentAreaHeight) - 130);
					$(".visionEtlJoinClauseTablesDivScroll").css("max-height", parseInt(feedContentAreaHeight) - 105);
					$(".visionSqlViewQuery1").css("max-height", parseInt(feedContentAreaHeight) - 67);
					$(".visionEtlJoinrClauseTablesDiv").css("max-height", parseInt(feedContentAreaHeight) - 130);
					$(".visionEtlwhereClauseTablesDiv").css("max-height", parseInt(feedContentAreaHeight) - 69);
					var joinTablesHeight = $(".visionEtlJoinrClauseTablesDiv").height();
					$(".viewJoinQueryOuterDivClass").css("max-height", parseInt(feedContentAreaHeight) - (parseInt(joinTablesHeight) + 82));
					// scroll bar issue fixed by SHI
					$("#dataMigrationTabs").change(function(event) {
						trfmRulesChanged = true;
					});
					if (response['uniqueRowsFlag'] == "Y") {
						$("#distinctRowsInput").prop("checked", true);
					}

					if (response['showRejectedRecords'] == "Y") {
						$("#showRejectedRecords").prop("checked", true);
					}


					$("#rowsCountFromInput").val(response['minRows']);
					$("#rowsCountToInput").val(response['maxRows']);
					if (response['operatorType'] != null && response['operatorType'] != '') {
						$("#operatorType").val(response['operatorType']);
					}

					//                        //importColMapFile
					//                        var fileslist = [];
					//                        $("#importColMapFile").on('change', function (event) {
					//                            console.log("iam in files change ");
					//                           fileslist  = event.target.files;
					//                            srsFileNames(fileslist);
					//
					//                        });
					$(".visionETLColMapImage").mousedown(function(event) {
						treeIconClickEvent = event;
					});
					try {
						$("#sourceDestColsTableId").colResizable({
							disable: true
						});
					} catch (e) {
					}
					$("#sourceDestColsTableId").colResizable();
					$('#dataMigrationTabs').on('selected', function(event) {
						var selectedTab = event.args.item;
						if (selectedTab == '0' || selectedTab == 0) {// mapping
							try {
								$("#sourceDestColsTableId").colResizable({
									disable: true
								});
							} catch (e) {
							}
							$("#sourceDestColsTableId").colResizable();
						} else if (selectedTab == '1' || selectedTab == 1) {// join
							try {
								$("#EtlMappingTable").colResizable({
									disable: true
								});
							} catch (e) {
							}
							$("#EtlMappingTable").colResizable();
						} else if (selectedTab == '2' || selectedTab == 2) {//where clause
							try {
								$("#selectedTables").colResizable({
									disable: true
								});
							} catch (e) {
							}
							$("#selectedTables").colResizable();
						} else if (selectedTab == '3' || selectedTab == 3) {//order clause
							try {
								$("#fromTablesOrderCauseTable").colResizable({
									disable: true
								});
							} catch (e) {
							}
							$("#fromTablesOrderCauseTable").colResizable();
						} else if (selectedTab == '4' || selectedTab == 4) {//group clause
							try {
								$("#fromTablesGroupCauseTable").colResizable({
									disable: true
								});
							} catch (e) {
							}
							$("#fromTablesGroupCauseTable").colResizable();
						}
					});
				} else {
					stopLoader();
					showMessagePopup(response.connectionMessage);
				}


			}
		},
		error: function(e) {
			stopLoader();
			sessionTimeout(e);
		}

	});
}

function processPredefinedJob(flowChartData) {
	showLoader();
	$.ajax({
		type: 'post',
		traditional: true,
		dataType: 'json',
		cache: false,
		url: 'processPredefinedJob',
		async: true,
		data: {
			flowChartData: flowChartData,
		},
		success: function(response) {
			stopLoader();
			if (response != null) {

				$("#dialog").html(response['tableStr']);
				$("#dialog").dialog({
					title: (labelObject['Message'] != null ? labelObject['Message'] : 'Message'),
					modal: true,
					width: 600,
					height: 'auto',
					fluid: true,
					open: function() {
						$(this).closest(".ui-dialog").find(".ui-button").eq(1).addClass("dialogyes");
						$(".visionHeaderMain").css("z-index", "999");
						$(".visionFooterMain").css("z-index", "999");
						$(".ui-dialog").addClass('visionDMTreePopup');
						$("#dataMigrationTabs").jqxTabs({ theme: 'ui-redmond' });
					},
					beforeClose: function(event, ui) {
						$(".visionHeaderMain").css("z-index", "99999");
						$(".visionFooterMain").css("z-index", "99999");
					}, close: function(event, ui) {

						$(this).html("");
						//$(this).dialog("close");
						$(this).dialog("destroy");
					}
				});
			}
		},
		error: function(e) {
			stopLoader();
			sessionTimeout(e);
		}

	});
}

function jobExecuteType($this) {

	var selectedOperatorId = $('#' + flowChartWorkSpaceId).flowchart('getSelectedOperatorId');
	var selectedOperatorData = $('#' + flowChartWorkSpaceId).flowchart('getOperatorData', selectedOperatorId);
	if ($this.id == 'PREJOB' && $this.id != null && $this.id != undefined && $this.id != '') {

		var data = $('#' + flowChartWorkSpaceId).flowchart('getFlowchartDataConnectedtoOP', selectedOperatorId);
		var subJobId = genHexString(32);
		$.each(data['operators'], function(key, value) {
			if (this.iconType == 'MAP' || this.iconType == 'GROUP_JOB') {
				this['subJobId'] = subJobId;
				this['executeType'] = 'PREJOB';
				var body = $('#' + flowChartWorkSpaceId).flowchart('getOperatorBody', (this['operatorId']));
				var ele = document.createElement('div');
				ele.innerHTML = body;
				$(ele).find('.visionJobExecuteType').remove();
				$(ele).children('div:nth-child(1)').append("<span class='visionJobExecuteType'>PREJOB</span>");
				this['properties']['body'] = $(ele).html();
				$('#' + flowChartWorkSpaceId).flowchart('setOperatorData', parseInt(this['operatorId']), this);
			}
		})
	}
	if ($this.id == 'POSTJOB' && $this.id != null && $this.id != undefined && $this.id != '') {
		var data = $('#' + flowChartWorkSpaceId).flowchart('getFlowchartDataConnectedtoOP', selectedOperatorId);
		var subJobId = genHexString(32);
		$.each(data['operators'], function(key, value) {
			if (this.iconType == 'MAP' || this.iconType == 'GROUP_JOB') {
				this['subJobId'] = subJobId;
				this['executeType'] = 'POSTJOB';
				var body = $('#' + flowChartWorkSpaceId).flowchart('getOperatorBody', (this['operatorId']));
				var ele = document.createElement('div');
				ele.innerHTML = body;
				$(ele).find('.visionJobExecuteType').remove();
				$(ele).children('div:nth-child(1)').append("<span class='visionJobExecuteType'>POSTJOB</span>");
				this['properties']['body'] = $(ele).html();
				$('#' + flowChartWorkSpaceId).flowchart('setOperatorData', parseInt(this['operatorId']), this);
			}
		})
	}
	if ($this.id == 'PARALLELJOB' && $this.id != null && $this.id != undefined && $this.id != '') {

		var data = $('#' + flowChartWorkSpaceId).flowchart('getFlowchartDataConnectedtoOP', selectedOperatorId);
		var subJobId = genHexString(32);
		$.each(data['operators'], function(key, value) {
			if (this.iconType == 'MAP' || this.iconType == 'GROUP_JOB') {
				this['subJobId'] = subJobId;
				this['executeType'] = 'PARALLELJOB';
				var body = $('#' + flowChartWorkSpaceId).flowchart('getOperatorBody', (this['operatorId']));
				var ele = document.createElement('div');
				ele.innerHTML = body;
				$(ele).find('.visionJobExecuteType').remove();
				$(ele).children('div:nth-child(1)').append("<span class='visionJobExecuteType'>PARALLELJOB</span>");
				this['properties']['body'] = $(ele).html();
				$('#' + flowChartWorkSpaceId).flowchart('setOperatorData', parseInt(this['operatorId']), this);
			}
		})
		$("#parallelJobsDiv").append("<input type='hidden' id='parallelJob_" + selectedOperatorData['operatorId'] + "' value='" + JSON.stringify(data) + "' />");
	}
	if ($this.id == 'REMOVEJOB' && $this.id != null && $this.id != undefined && $this.id != '') {
		var data = $('#' + flowChartWorkSpaceId).flowchart('getFlowchartDataConnectedtoOP', selectedOperatorId);
		$.each(data['operators'], function(key, value) {
			if (this.iconType == 'MAP' || this.iconType == 'GROUP_JOB') {

				this['executeType'] = '';
				var body = $('#' + flowChartWorkSpaceId).flowchart('getOperatorBody', (this['operatorId']));
				var ele = document.createElement('div');
				ele.innerHTML = body;
				$(ele).find('.visionJobExecuteType').remove();
				this['properties']['body'] = $(ele).html();
				$('#' + flowChartWorkSpaceId).flowchart('setOperatorData', parseInt(this['operatorId']), this);
			}
		})
	}
}


function setMapSeqNo($this) {

	var labelObject = {};
	$("#dialog").html("<Span>Set map execution seq no</span><br><input type='text' id='mapExecutionSeqId'/>");
	$("#dialog").dialog({
		title: (labelObject['Message'] != null ? labelObject['Message'] : 'Message'),
		modal: true,
		width: 300,
		height: 135,
		fluid: true,
		buttons: [{
			text: (labelObject['Ok'] != null ? labelObject['Ok'] : 'Ok'),
			click: function() {
				var mapSeqNo = $("#mapExecutionSeqId").val();
				var selectedOperatorId = $('#' + flowChartWorkSpaceId).flowchart('getSelectedOperatorId');
				var selectedOperatorData = $('#' + flowChartWorkSpaceId).flowchart('getOperatorData', selectedOperatorId);
				selectedOperatorData['mapExecutionSeqNo'] = parseInt(mapSeqNo);
				$('#' + flowChartWorkSpaceId).flowchart('setOperatorData', selectedOperatorId, selectedOperatorData);
				$(this).html("");
				//$(this).dialog("close");
				$(this).dialog("destroy");
			}

		}],
		open: function() {
			var selectedOperatorId = $('#' + flowChartWorkSpaceId).flowchart('getSelectedOperatorId');
			var selectedOperatorData = $('#' + flowChartWorkSpaceId).flowchart('getOperatorData', selectedOperatorId);
			if (selectedOperatorData != null) {
				var mapExecutionSeqNo = selectedOperatorData['mapExecutionSeqNo'];
				if (mapExecutionSeqNo != null) {
					$("#mapExecutionSeqId").val(mapExecutionSeqNo);
				}
			}
			selectedOperatorData['mapExecutionSeqNo'] = $("#mapExecutionSeqId").val();
			$('#' + flowChartWorkSpaceId).flowchart('setOperatorData', selectedOperatorData);
			$(this).closest(".ui-dialog").find(".ui-button").eq(1).addClass("dialogyes");
			$(".visionHeaderMain").css("z-index", "999");
			$(".visionFooterMain").css("z-index", "999");
		},
		beforeClose: function(event, ui) {
			$(".visionHeaderMain").css("z-index", "99999");
			$(".visionFooterMain").css("z-index", "99999");
		}
	});
}

function stopAllJobs() {
	var labelObject = {};
	$("#dialog").html("Are you sure you want to cancel all running jobs?");
	$("#dialog").dialog({
		title: (labelObject['Confirm'] != null ? labelObject['Confirm'] : 'Confirm'),
		modal: true,
		width: 300,
		height: 135,
		fluid: true,
		buttons: [{
			text: (labelObject['Yes'] != null ? labelObject['Yes'] : 'Yes'),
			click: function() {
				$.ajax({
					type: 'post',
					traditional: true,
					dataType: 'json',
					cache: false,
					url: 'cancellAllRunningJobs',
					async: true,
					data: {

					},
					success: function(response) {
						stopLoader();
					},
					error: function(e) {
						stopLoader();
						sessionTimeout(e);
					}

				});
				$(this).html("");
				//$(this).dialog("close");
				$(this).dialog("destroy");
			}

		}, {
			text: (labelObject['No'] != null ? labelObject['No'] : 'No'),
			click: function() {

				$(this).html("");
				//$(this).dialog("close");
				$(this).dialog("destroy");
			}

		}],
		open: function() {

			$(this).closest(".ui-dialog").find(".ui-button").eq(1).addClass("dialogyes");
			$(".visionHeaderMain").css("z-index", "999");
			$(".visionFooterMain").css("z-index", "999");
		},
		beforeClose: function(event, ui) {
			$(".visionHeaderMain").css("z-index", "99999");
			$(".visionFooterMain").css("z-index", "99999");
		}
	});
}

function selectColumnFunForm($this, tableColType) {
	//    showLoader();
	labelObject = {};
	try {
		labelObject = JSON.parse($("#labelObjectHidden").val());
	} catch (e) {

	}
	var selectedRowData = "";
	//dddw
	// prepare the data
	var data = [];
	var dataStr = $("#functionNameObj").val();
	if (dataStr != null && dataStr != '') {
		data = JSON.parse(dataStr);
		var source =
		{
			dataType: "json",
			dataFields: [
				{ name: "FUN_ID", type: "string" },
				{ name: "FUN_DISP_NAME", type: "string" },
				{ name: "FUN_DESCR", type: "string" },
				{ name: "FUN_NAME", type: "string" },
				{ name: "HL_FUN_ID", type: "string" },
				{ name: "FUN_FORM_ID", type: "string" },
				{ name: "FUN_LVL_TYPE", type: "string" },
				{ name: "DM_FUN_CUST_COL1", type: "string" },
				{ name: "DM_FUN_CUST_COL2", type: "string" },
				{ name: "ICON_PATH", type: "string" }
			],
			hierarchy:
			{
				keyDataField: { name: 'FUN_ID' },
				parentDataField: { name: 'HL_FUN_ID' }
			},
			id: 'FUN_ID',
			localData: data
		};
		var dataAdapter = new $.jqx.dataAdapter(source);
		// create jqxTreeGrid.

		$("#columnMappingFuncDialog").html("<div id='columnMappingTreeForm' class='columnMappingTree'></div>");
		$("#columnMappingFuncDialog").dialog({
			title: (labelObject['Functions'] != null ? labelObject['Functions'] : 'Functions'),
			modal: true,
			width: 400,
			maxWidth: 1000,
			height: 400,
			fluid: true,
			buttons: [{
				text: (labelObject['Ok'] != null ? labelObject['Ok'] : 'Ok'),
				click: function() {
					var selection = $("#columnMappingTreeForm").jqxTreeGrid('getSelection');
					if (selection != null && selection.length != 0) {
						var selectedRowData = selection[0];
						if (selectedRowData != null
							&& !jQuery.isEmptyObject(selectedRowData)
							&& selectedRowData['HL_FUN_ID'] != null && selectedRowData['HL_FUN_ID'] != '') {
							var source = $("#columnMappingTreeForm").jqxTreeGrid('source');
							$(this).html("");
							//$(this).dialog("close");
							$(this).dialog("destroy");
							openColumnFunctionForm(selection[0], source, $this, tableColType);
						}
					}
				}

			}],
			open: function() {
				$("#columnMappingTreeForm").jqxTreeGrid(
					{
						source: dataAdapter,
						width: "100%",
						height: 300,
						sortable: true,
						columnsResize: true,
						columnsReorder: true,
						enableHover: true,
						enableBrowserSelection: true,
						filterable: true,
						//                            filterMode: 'simple',
						//                        hierarchicalCheckboxes: true,
						pageable: true,
						pagerMode: 'advanced',
						pagerPosition: 'bottom',
						pageSize: 100,
						pageSizeOptions: ['100', '200', '300'],
						//                            theme: 'energyblue',
						selectionMode: 'singleRow',
						autoShowLoadElement: false,
						columns: [
							{ text: 'FUN_ID', dataField: 'FUN_ID', hidden: true, filterable: false },
							{ text: 'Function Name', dataField: 'FUN_DISP_NAME', width: '30%', filterable: true },
							{ text: 'Description', dataField: 'FUN_DESCR', width: '70%', filterable: true },
							{ text: 'value', dataField: 'FUN_NAME', hidden: true, filterable: false },
							{ text: 'HL_FUN_ID', dataField: 'HL_FUN_ID', hidden: true, filterable: false },
							{ text: 'FUN_FORM_ID', dataField: 'FUN_FORM_ID', hidden: true, filterable: false },
							{ text: 'FUN_LVL_TYPE', dataField: 'FUN_LVL_TYPE', hidden: true, filterable: false },
							{ text: 'DM_FUN_CUST_COL1', dataField: 'DM_FUN_CUST_COL1', hidden: true, filterable: false },
							{ text: 'DM_FUN_CUST_COL2', dataField: 'DM_FUN_CUST_COL2', hidden: true, filterable: false },
							{ text: 'ICON_PATH', dataField: 'ICON_PATH', hidden: true, filterable: false }
						]
					});
				$('#columnMappingTreeForm').on('rowDoubleClick', function(event) {
					var args = event.args;
					var selectedRowData = args.row;
					if (selectedRowData != null
						&& !jQuery.isEmptyObject(selectedRowData)
						&& selectedRowData['HL_FUN_ID'] != null && selectedRowData['HL_FUN_ID'] != '') {
						var source = $("#columnMappingTreeForm").jqxTreeGrid('source');
						$("#columnMappingFuncDialog").html("");
						//                        $("#columnMappingFuncDialog").dialog("close");
						$("#columnMappingFuncDialog").dialog("destroy");
						openColumnFunctionForm(selectedRowData, source, $this, tableColType);
					}


				});
				$(this).closest(".ui-dialog").find(".ui-button").eq(1).addClass("dialogyes");
				$(".visionHeaderMain").css("z-index", "999");
				$(".visionFooterMain").css("z-index", "999");
				$(".ui-dialog").addClass('visionDMTreePopup');
				stopLoader();
			},
			beforeClose: function(event, ui) {

				$(".visionHeaderMain").css("z-index", "99999");
				$(".visionFooterMain").css("z-index", "99999");
			}, close: function(event, ui) {

				$(this).html("");
				try {
					$("#columnMappingTreeForm").jqxTreeGrid('destroy');
					$("#columnMappingTreeForm").remove();
					$("#treeSearchInputDiv").remove();
				} catch (e) {
				}

			}

		});
	} else {
		$.ajax({
			type: "post",
			traditional: true,
			url: 'getETLDBFunction',
			cache: false,
			data: {
				selectedRowData: JSON.stringify(selectedRowData)
			},
			success: function(response, status, xhr) {
				//columnMappingFormDialog
				if (response != null && response != '') {
					stopLoader();
					$("#functionNameObj").val(response);
					data = JSON.parse(response);
					var source =
					{
						dataType: "json",
						dataFields: [
							{ name: "FUN_ID", type: "string" },
							{ name: "FUN_DISP_NAME", type: "string" },
							{ name: "FUN_DESCR", type: "string" },
							{ name: "FUN_NAME", type: "string" },
							{ name: "HL_FUN_ID", type: "string" },
							{ name: "FUN_FORM_ID", type: "string" },
							{ name: "FUN_LVL_TYPE", type: "string" },
							{ name: "DM_FUN_CUST_COL1", type: "string" },
							{ name: "DM_FUN_CUST_COL2", type: "string" },
							{ name: "ICON_PATH", type: "string" }
						],
						hierarchy:
						{
							keyDataField: { name: 'FUN_ID' },
							parentDataField: { name: 'HL_FUN_ID' }
						},
						id: 'FUN_ID',
						localData: data
					};
					var dataAdapter = new $.jqx.dataAdapter(source);
					// create jqxTreeGrid.

					$("#columnMappingFuncDialog").html("<div id='columnMappingTreeForm' class='columnMappingTree'></div>");
					$("#columnMappingFuncDialog").dialog({
						title: (labelObject['Functions'] != null ? labelObject['Functions'] : 'Functions'),
						modal: true,
						width: 400,
						maxWidth: 1000,
						height: 400,
						fluid: true,
						buttons: [{
							text: (labelObject['Ok'] != null ? labelObject['Ok'] : 'Ok'),
							click: function() {
								var selection = $("#columnMappingTreeForm").jqxTreeGrid('getSelection');
								if (selection != null && selection.length != 0) {
									var selectedRowData = selection[0];
									if (selectedRowData != null
										&& !jQuery.isEmptyObject(selectedRowData)
										&& selectedRowData['HL_FUN_ID'] != null && selectedRowData['HL_FUN_ID'] != '') {
										var source = $("#columnMappingTreeForm").jqxTreeGrid('source');
										$(this).html("");
										//$(this).dialog("close");
										$(this).dialog("destroy");
										openColumnFunctionForm(selection[0], source, $this, tableColType);
									}
								}
							}

						}],
						open: function() {
							$("#columnMappingTreeForm").jqxTreeGrid(
								{
									source: dataAdapter,
									width: "100%",
									height: 300,
									sortable: true,
									columnsResize: true,
									columnsReorder: true,
									enableHover: true,
									enableBrowserSelection: true,
									filterable: true,
									//                            filterMode: 'simple',
									//                        hierarchicalCheckboxes: true,
									pageable: true,
									pagerMode: 'advanced',
									pagerPosition: 'bottom',
									pageSize: 100,
									pageSizeOptions: ['100', '200', '300'],
									//                                        theme: 'energyblue',
									selectionMode: 'singleRow',
									autoShowLoadElement: false,
									columns: [
										{ text: 'FUN_ID', dataField: 'FUN_ID', hidden: true, filterable: false },
										{ text: 'Function Name', dataField: 'FUN_DISP_NAME', width: '30%', filterable: true },
										{ text: 'Description', dataField: 'FUN_DESCR', width: '70%', filterable: true },
										{ text: 'value', dataField: 'FUN_NAME', hidden: true, filterable: false },
										{ text: 'HL_FUN_ID', dataField: 'HL_FUN_ID', hidden: true, filterable: false },
										{ text: 'FUN_FORM_ID', dataField: 'FUN_FORM_ID', hidden: true, filterable: false },
										{ text: 'FUN_LVL_TYPE', dataField: 'FUN_LVL_TYPE', hidden: true, filterable: false },
										{ text: 'DM_FUN_CUST_COL1', dataField: 'DM_FUN_CUST_COL1', hidden: true, filterable: false },
										{ text: 'DM_FUN_CUST_COL2', dataField: 'DM_FUN_CUST_COL2', hidden: true, filterable: false },
										{ text: 'ICON_PATH', dataField: 'ICON_PATH', hidden: true, filterable: false }
									]
								});
							$('#columnMappingTreeForm').on('rowDoubleClick', function(event) {
								var args = event.args;
								var selectedRowData = args.row;
								var source = $("#columnMappingTreeForm").jqxTreeGrid('source');
								if (selectedRowData != null
									&& !jQuery.isEmptyObject(selectedRowData)
									&& selectedRowData['HL_FUN_ID'] != null && selectedRowData['HL_FUN_ID'] != '') {
									$("#columnMappingFuncDialog").html("");
									//                                    $("#columnMappingFuncDialog").dialog("close");
									$("#columnMappingFuncDialog").dialog("destroy");
									openColumnFunctionForm(selectedRowData, source, $this, tableColType);
								}



							});
							$(this).closest(".ui-dialog").find(".ui-button").eq(1).addClass("dialogyes");
							$(".visionHeaderMain").css("z-index", "999");
							$(".visionFooterMain").css("z-index", "999");
							$(".ui-dialog").addClass('visionDMTreePopup');
							stopLoader();
						},
						beforeClose: function(event, ui) {

							$(".visionHeaderMain").css("z-index", "99999");
							$(".visionFooterMain").css("z-index", "99999");
						}, close: function(event, ui) {

							$(this).html("");
							try {
								$("#columnMappingTreeForm").jqxTreeGrid('destroy');
								$("#columnMappingTreeForm").remove();
								$("#treeSearchInputDiv").remove();
							} catch (e) {
							}

						}

					});
				}


			},
			error: function(e) {
				console.log(e);
				sessionTimeout(e);
				stopLoader();
			}
		});
	}



}

function openColumnFunctionForm(selectedRowData, source, $this, columnType) {

	if (selectedRowData != null
		&& !jQuery.isEmptyObject(selectedRowData)
		&& selectedRowData['HL_FUN_ID'] != null && selectedRowData['HL_FUN_ID'] != '') {
		if (selectedRowData != null
			&& !jQuery.isEmptyObject(selectedRowData)
			&& selectedRowData['FUN_FORM_ID'] != null
			&& selectedRowData['FUN_FORM_ID'] != ''
		) {//FUN_FORM_ID
			var selectedRowDataMain = {};
			var columns = source._source.datafields;
			if (columns != null && columns.length != 0) {
				for (var i = 0; i < columns.length; i++) {
					var columnObj = columns[i];
					selectedRowDataMain[columnObj['name']] = selectedRowData[columnObj['name']];
				}
			}
			var dataFunobjstr = $($this).parents("td").find("input").attr("data-funobjstr");
			$.ajax({
				type: "post",
				traditional: true,
				url: 'getETLOpenFunctionForm',
				cache: false,
				data: {
					selectedRowData: JSON.stringify(selectedRowDataMain),
					dataFunobjstr: dataFunobjstr,
					columnType: columnType
				},
				success: function(data, status, xhr) {
					//columnMappingFormDialog
					if (data != null && data != '') {
						var response = JSON.parse(data);
						if (response['messageFlag']) {
							var sourceTablesArray = $("#sourceTablesArray").val();
							sourceTablesArray = JSON.parse(sourceTablesArray);
							var idValue = Math.floor(Math.random() * 10000);
							var dialogId = 'dialog' + idValue;
							$('<div>').attr('id', dialogId).appendTo('body');
							$("#" + dialogId).html(response['funFormStr'] + "<div id='funOpenFormETLTableTr' style='display:none'></div>");
							$("#" + dialogId).dialog({
								title: (labelObject[selectedRowDataMain['FUN_DISP_NAME'] + ' Form'] != null ? labelObject[selectedRowDataMain['FUN_DISP_NAME'] + ' Form'] : selectedRowDataMain['FUN_DISP_NAME'] + ' Form'),
								modal: true,
								width: 650,
								maxWidth: 1000,
								height: 'auto',
								maxHeight: 1000,
								fluid: true,
								buttons: [{
									text: (labelObject['Ok'] != null ? labelObject['Ok'] : 'Ok'),
									click: function() {



										var selectedFunctionName = selectedRowData['FUN_NAME'];
										if (selectedFunctionName != null && selectedFunctionName != '') {
											selectedFunctionName = $.trim(selectedFunctionName);
										}

										var funStr = "";
										var funActualStr = "";
										funStr += "" + selectedFunctionName + "(";
										funActualStr += "" + selectedFunctionName + "(";
										var rowCount = $('#funOpenFormETLTable tr:visible').length;
										var displayRowCount = $('#funOpenFormETLTable tr:visible').length;
										//                                        $('#myTable tr').length
										var dataFunTables = "";
										var dataFunTablesArr = [];
										var loopCount = 0;
										var columnsList = [];
										$("#funOpenFormETLTable tr:visible").each(function() {
											var tdArray = this.cells;
											if (tdArray != null && tdArray.length != 0) {
												var dataFunTablesStr = $(tdArray[1]).find("input").attr("tablename");
												if (dataFunTablesStr != null && dataFunTablesStr != "") {
													var tableName = JSON.parse(dataFunTablesStr)[0];
													if (dataFunTablesArr.indexOf(tableName) == -1) {
														dataFunTables += "," + JSON.parse(dataFunTablesStr)[0];
													}
													dataFunTablesArr.push(JSON.parse(dataFunTablesStr)[0]);
												}


												var columnsListstr = $(tdArray[1]).find("input").attr("funcolumnslist");
												if (columnsListstr != null && columnsListstr != "" && columnsListstr != "null") {
													columnsList = columnsList.concat(JSON.parse(columnsListstr));
												}


												var funFormLabel = $(tdArray[0]).text();
												var funValue = $(tdArray[1]).find("input").val();
												var funActualValue = $(tdArray[1]).find("input").attr("actual-value");
												if (funValue != null && funValue != '' && funValue != undefined) {
													var trimval = $.trim(funValue)
													if (trimval.length > 0) {
														funValue = trimval;
													}
												}
												if (funActualValue != null && funActualValue != '' && funActualValue != undefined) {
													var trimval = $.trim(funActualValue)
													if (trimval.length > 0) {
														funActualValue = trimval;
													}
												}




												if ($(this).is(":visible")) {
													if (funValue != null
														&& funValue != ''
														&& funValue != undefined && funValue.indexOf(":") > -1) {
														funStr += "" + funValue + "";
														funActualStr += "" + funActualValue + "";
													} else if (funValue != null
														&& funValue != ''
														&& funValue != undefined) {
														funStr += "'" + funValue + "'";
														funActualStr += "'" + funActualValue + "'";
													}
												}


												if (loopCount != parseInt(rowCount) - 1) {

													if ($(this).is(":visible")) {
														if (funValue != null
															&& funValue != ''
															&& funValue != undefined) {
															if (loopCount < parseInt(displayRowCount) - 1) {
																funStr += ",";
																funActualStr += ",";
															}
														} else {
															funStr = funStr.replace(/,(\s+)?$/, '');
															funActualStr = funActualStr.replace(/,(\s+)?$/, '');
														}
													}

												}




												loopCount++;
											}
										});
										funStr += ")";
										funActualStr += ")";
										$($this).parents("td").find("input").attr("funcolumnslist", JSON.stringify(columnsList));
										var input = $($this).parents("td").find("input");
										input.val(funStr);
										input.attr("actual-value", funActualStr);
										$($this).parents("td").find("input").attr("title", funStr);
										var tablesList = $($this).parents("td").find("input").attr("tableName");
										if (tablesList != null && tablesList != "") {
											tablesList = JSON.parse(tablesList);
										} else {
											tablesList = [];
										}

										tablesList.push(dataFunTables.substring(1));
										$($this).parents("td").find("input").attr("tableName", JSON.stringify(tablesList));
										$($this).parents("td").find("input").attr("data-funobjstr", JSON.stringify(functionFormObj));
										//                                            $(this).html("");
										//                                            //$(this).dialog("close");
										//                                            $(this).dialog("destroy");
										$(this).html("");
										try {
											//$(this).dialog("close");
										} catch (e) {
										}
										try {
											$(this).dialog("destroy");
										} catch (e) {
										}

									}

								}],
								open: function() {
									$("#viewFunQuery").click(function() {
										console.log("iam in clickable ");
										viewFunQuery('funOpenFormETLTable', selectedRowData);
									});
									//                                    $("#viewFunQuery")
									$(this).closest(".ui-dialog").find(".ui-button").eq(1).addClass("dialogyes");
									$(".visionHeaderMain").css("z-index", "999");
									$(".visionFooterMain").css("z-index", "999");
									$(".ui-dialog").addClass('visionDMTreePopup');
								},
								beforeClose: function(event, ui) {

									$(".visionHeaderMain").css("z-index", "99999");
									$(".visionFooterMain").css("z-index", "99999");
								}, close: function(event, ui) {
									$(this).html("");
									try {
										//$(this).dialog("close");
									} catch (e) {
									}
									try {
										$(this).dialog("destroy");
									} catch (e) {
									}

								}
							});
							$("#funOpenFormETLTableTr").html(response['addTrString']);
						}

					}


				},
				error: function(e) {
					console.log(e);
					sessionTimeout(e);
					stopLoader();
				}
			});
		} else {
			var selectedFunctionName = selectedRowData['FUN_NAME'];
			var functionFormObj = {};
			functionFormObj['functionName'] = selectedFunctionName;
			functionFormObj['FUN_LVL_TYPE'] = selectedRowData['FUN_LVL_TYPE'];
			functionFormObj['DM_FUN_CUST_COL1'] = selectedRowData['DM_FUN_CUST_COL1'];
			functionFormObj['DM_FUN_CUST_COL2'] = selectedRowData['DM_FUN_CUST_COL2'];
			$($this).parents("td").find("input").val(selectedFunctionName);
			$($this).parents("td").find("input").attr("title", selectedFunctionName);
			$($this).parents("td").find("input").attr("data-funobjstr", JSON.stringify(functionFormObj));
		}
	} else {
		console.log("Please select function name");
	}


}


function openColumnFunctionForm1(selectedRowData, source, $this, columnType) {

	if (selectedRowData != null
		&& !jQuery.isEmptyObject(selectedRowData)
		&& selectedRowData['HL_FUN_ID'] != null && selectedRowData['HL_FUN_ID'] != '') {
		if (selectedRowData != null
			&& !jQuery.isEmptyObject(selectedRowData)
			&& selectedRowData['FUN_FORM_ID'] != null
			&& selectedRowData['FUN_FORM_ID'] != ''
		) {//FUN_FORM_ID
			var selectedRowDataMain = {};
			var columns = source._source.datafields;
			if (columns != null && columns.length != 0) {
				for (var i = 0; i < columns.length; i++) {
					var columnObj = columns[i];
					selectedRowDataMain[columnObj['name']] = selectedRowData[columnObj['name']];
				}
			}
			var dataFunobjstr = $($this).parents("td").find("input").attr("data-funobjstr");
			$.ajax({
				type: "post",
				traditional: true,
				url: 'getETLOpenFunctionForm',
				cache: false,
				data: {
					selectedRowData: JSON.stringify(selectedRowDataMain),
					dataFunobjstr: dataFunobjstr,
					columnType: columnType
				},
				success: function(data, status, xhr) {
					//columnMappingFormDialog
					if (data != null && data != '') {
						var response = JSON.parse(data);
						if (response['messageFlag']) {
							var sourceTablesArray = $("#sourceTablesArray").val();
							sourceTablesArray = JSON.parse(sourceTablesArray);
							var idValue = Math.floor(Math.random() * 10000);
							var dialogId = 'dialog' + idValue;
							$('<div>').attr('id', dialogId).appendTo('body');
							$("#" + dialogId).html(response['funFormStr'] + "<div id='funOpenFormETLTableTr' style='display:none'></div>");
							$("#" + dialogId).dialog({
								title: (labelObject[selectedRowDataMain['FUN_DISP_NAME'] + ' Form'] != null ? labelObject[selectedRowDataMain['FUN_DISP_NAME'] + ' Form'] : selectedRowDataMain['FUN_DISP_NAME'] + ' Form'),
								modal: true,
								width: 650,
								maxWidth: 1000,
								height: 'auto',
								maxHeight: 1000,
								fluid: true,
								buttons: [{
									text: (labelObject['Ok'] != null ? labelObject['Ok'] : 'Ok'),
									click: function() {


										var selectedFunctionName = selectedRowData['FUN_NAME'];
										if (selectedFunctionName != null && selectedFunctionName != '') {
											selectedFunctionName = $.trim(selectedFunctionName);
										}
										var FUN_LVL_TYPE = selectedRowData['FUN_LVL_TYPE'];
										var HL_FUN_ID = selectedRowData['HL_FUN_ID'];
										var functionFormObj = {};
										var funStr = "";
										functionFormObj['functionName'] = selectedFunctionName;
										if (FUN_LVL_TYPE != 'MULTI_COLUMNS') {
											funStr += "" + selectedFunctionName + "(";
										} else {
											funStr += "" + selectedFunctionName + "";
										}
										var mainFunStr = "";
										if (FUN_LVL_TYPE != 'MULTI_COLUMNS') {
											mainFunStr += "" + selectedFunctionName + "(";
										} else {
											mainFunStr += "" + selectedFunctionName + "";
										}
										var rowCount = $('#funOpenFormETLTable tr').length;
										var displayRowCount = $('#funOpenFormETLTable tr:visible').length;
										//                                        $('#myTable tr').length

										var dataFunTables = "";
										var dataFunTablesArr = [];
										var loopCount = 0;
										var multiColumnsObj = {};
										$("#funOpenFormETLTable tr").each(function() {
											var tdArray = this.cells;
											if (tdArray != null && tdArray.length != 0) {
												if (FUN_LVL_TYPE == 'MULTI_COLUMNS') {
													if (loopCount != 0) {
														var multiColsObj = {};
														for (var i = 1; i < tdArray.length; i++) {

															var funValue = $(tdArray[i]).find("input").val();
															if (!(funValue != null && funValue != '' && funValue != 'null')) {
																funValue = $(tdArray[i]).find("select").val();
															}
															if (funValue != null && funValue != '') {
																var trimVal = $.trim(funValue);
																if (trimVal.length > 0) {
																	funValue = trimVal;
																}

															}
															var funValueId = $(tdArray[i]).find("input").attr("id");
															if (!(funValueId != null && funValueId != '' && funValueId != 'null')) {
																funValueId = $(tdArray[i]).find("select").attr("id");
															}
															if (funValueId != null && funValueId != '') {
																var trimVal = $.trim(funValueId);
																if (trimVal.length > 0) {
																	funValueId = trimVal;
																}
																//                                                                    funValueId = $.trim(funValueId);
															}
															if (!(funValue != null
																&& funValue != ''
																&& funValue != undefined
																&& funValue != 'undefined')) {
																funValue = "";
															}
															multiColsObj[funValueId] = funValue;
															funStr += "'" + funValue + "'";
															var isTableColumn = false;
															$.each(sourceTablesArray, function(indx) {
																var currentVal = sourceTablesArray[indx];
																if (funValue != null && funValue.indexOf(currentVal) > -1) {
																	isTableColumn = true;
																}
															})

															if ($(tdArray[i]).is(":visible")) {
																if (funValue != null
																	&& funValue != ''
																	&& isTableColumn ||
																	funValueId == 'CASE_COND'
																	|| funValueId == 'OPERATOR') {
																	mainFunStr += " " + funValue + " ";
																} else if (funValue != null
																	&& funValue != ''
																	&& funValue != undefined) {

																	mainFunStr += " '" + funValue + "' ";
																}

															}
															if (loopCount != parseInt(rowCount) - 1) {
																funStr += ",";
															}
															if (loopCount == 1 && i == 1) {
																functionFormObj['FUN_LVL_TYPE'] = FUN_LVL_TYPE;
															}
														}
														multiColumnsObj[loopCount] = multiColsObj;
													}

												} else {
													var funFormLabel = $(tdArray[0]).text();
													var funValue = $(tdArray[1]).find("input").val();
													var dataFunTablesStr = $(tdArray[1]).find("input").attr("tablename");
													if (dataFunTablesStr != null && dataFunTablesStr != "") {
														var tableName = JSON.parse(dataFunTablesStr)[0];
														if (dataFunTablesArr.indexOf(tableName) == -1) {
															dataFunTables += "," + JSON.parse(dataFunTablesStr)[0];
														}
														dataFunTablesArr.push(JSON.parse(dataFunTablesStr)[0]);
													}
													if (!(funValue != null && funValue != '' && funValue != 'null')) {
														funValue = $(tdArray[1]).find("select").val();
													}
													var funValueId = $(tdArray[1]).find("input").attr("id");
													if (!(funValueId != null && funValueId != '' && funValueId != 'null')) {
														funValueId = $(tdArray[1]).find("select").attr("id");
													}
													if (funValue != null && funValue != '' && funValue != undefined) {
														var trimVal = $.trim(funValue);
														if (trimVal.length > 0) {
															funValue = trimVal;
														}

														//                                                            funValue = $.trim(funValue);
														//                                                            funValue = funValue.replace(":", ".");
													}
													if (funValueId != null && funValueId != '') {
														var trimVal = $.trim(funValueId);
														if (trimVal.length > 0) {
															funValueId = trimVal;
														}

														//                                                            funValueId = $.trim(funValueId);
													}

													funStr += "'" + funValue + "'";
													var isTableColumn = false;
													$.each(sourceTablesArray, function(indx) {
														var currentVal = sourceTablesArray[indx];
														if (funValue != null && funValue.indexOf(currentVal) > -1) {
															isTableColumn = true;
														}
													})

													if ($(this).is(":visible")) {
														if (funValue != null
															&& funValue != ''
															&& isTableColumn) {
															mainFunStr += "" + funValue + "";
														} else if (funValue != null
															&& funValue != ''
															&& funValue != undefined) {
															mainFunStr += "'" + funValue + "'";
														}
													}

													functionFormObj[funValueId] = funValue;
													if (loopCount != parseInt(rowCount) - 1) {
														funStr += ",";
														if ($(this).is(":visible")) {
															if (funValue != null
																&& funValue != ''
																&& funValue != undefined) {
																if (loopCount < parseInt(displayRowCount) - 1) {
																	mainFunStr += ",";
																}
															} else {
																mainFunStr = mainFunStr.replace(/,(\s+)?$/, '');
															}
														}

													}


												}

												loopCount++;
											}
										});
										funStr += ")";
										if (FUN_LVL_TYPE != 'MULTI_COLUMNS') {
											mainFunStr += ")";
										}

										functionFormObj['funStr'] = funStr;
										functionFormObj['mainFunStr'] = mainFunStr;
										functionFormObj['HL_FUN_ID'] = HL_FUN_ID;
										functionFormObj['multiColumnsObj'] = multiColumnsObj;
										var input = $($this).parents("td").find("input");
										input.val(mainFunStr);
										$($this).parents("td").find("input").attr("title", mainFunStr);
										var tablesList = $($this).parents("td").find("input").attr("tableName");
										if (tablesList != null && tablesList != "") {
											tablesList = JSON.parse(tablesList);
										} else {
											tablesList = [];
										}
										tablesList.push(dataFunTables.substring(1));
										$($this).parents("td").find("input").attr("tableName", JSON.stringify(tablesList));
										$($this).parents("td").find("input").attr("data-funobjstr", JSON.stringify(functionFormObj));
										//                                            $(this).html("");
										//                                            //$(this).dialog("close");
										//                                            $(this).dialog("destroy");
										$(this).html("");
										try {
											//$(this).dialog("close");
										} catch (e) {
										}
										try {
											$(this).dialog("destroy");
										} catch (e) {
										}
									}

								}],
								open: function() {
									$("#viewFunQuery").click(function() {
										console.log("iam in clickable ");
										viewFunQuery('funOpenFormETLTable', selectedRowData);
									});
									//                                    $("#viewFunQuery")
									$(this).closest(".ui-dialog").find(".ui-button").eq(1).addClass("dialogyes");
									$(".visionHeaderMain").css("z-index", "999");
									$(".visionFooterMain").css("z-index", "999");
									$(".ui-dialog").addClass('visionDMTreePopup');
								},
								beforeClose: function(event, ui) {

									$(".visionHeaderMain").css("z-index", "99999");
									$(".visionFooterMain").css("z-index", "99999");
								}, close: function(event, ui) {
									$(this).html("");
									try {
										//$(this).dialog("close");
									} catch (e) {
									}
									try {
										$(this).dialog("destroy");
									} catch (e) {
									}

								}
							});
							$("#funOpenFormETLTableTr").html(response['addTrString']);
						}

					}


				},
				error: function(e) {
					console.log(e);
					sessionTimeout(e);
					stopLoader();
				}
			});
		} else {
			var selectedFunctionName = selectedRowData['FUN_NAME'];
			var functionFormObj = {};
			functionFormObj['functionName'] = selectedFunctionName;
			functionFormObj['FUN_LVL_TYPE'] = selectedRowData['FUN_LVL_TYPE'];
			functionFormObj['DM_FUN_CUST_COL1'] = selectedRowData['DM_FUN_CUST_COL1'];
			functionFormObj['DM_FUN_CUST_COL2'] = selectedRowData['DM_FUN_CUST_COL2'];
			$($this).parents("td").find("input").val(selectedFunctionName);
			$($this).parents("td").find("input").attr("title", selectedFunctionName);
			$($this).parents("td").find("input").attr("data-funobjstr", JSON.stringify(functionFormObj));
		}
	} else {
		console.log("Please select function name");
	}


}


function showRecordCountOnOp(resultObj) {
	setTimeout(function() {
		if (resultObj['insertCountObjectsArray'] != null && resultObj['insertCountObjectsArray'].length > 0) {
			var insertCountObjectsArray = resultObj['insertCountObjectsArray'];
			var initialBody = "";
			$.each(insertCountObjectsArray, function(i) {
				var insertCountObj = JSON.parse(insertCountObjectsArray[i]);
				$.each(insertCountObj, function(key, value) {

					var body = $('#' + flowChartWorkSpaceId).flowchart('getOperatorBody', key);
					if (initialBody == "") {
						initialBody = body;
					}
					var elem = document.createElement('div');
					elem.innerHTML = body;
					$(elem).find(".visionCountLabelsDiv").remove();
					body = elem.innerHTML;
					body += "<div class='visionCountLabelsDiv'><div class='visionInsertCountLabelsDiv' style='left:0px;' title='" + value + " records Inserted'><span>&nbsp;" + value + "&nbsp;</span></div></div>";
					$('#' + flowChartWorkSpaceId).flowchart('setOperatorBody', key, body);
				})

			})

		}

		if (resultObj['updateCountObjectsArray'] != null && resultObj['updateCountObjectsArray'].length > 0) {
			var updateCountObjectsArray = resultObj['updateCountObjectsArray'];
			$.each(updateCountObjectsArray, function(i) {
				var updateCountObj = JSON.parse(updateCountObjectsArray[i]);
				$.each(updateCountObj, function(key, value) {

					var body = $('#' + flowChartWorkSpaceId).flowchart('getOperatorBody', key);
					var elem = document.createElement('div');
					elem.innerHTML = body;
					$(elem).find(".visionCountLabelsDiv").remove();
					body = elem.innerHTML;
					body += "<div class='visionCountLabelsDiv'><div class='visionUpdateCountLabelsDiv' style='left:0px;' title='" + value + " records Updated'><span>&nbsp;" + value + "&nbsp;</span></div></div>";
					$('#' + flowChartWorkSpaceId).flowchart('setOperatorBody', key, body);
				})

			})

		}

		if (resultObj['fromTableCountObjectsArray'] != null && resultObj['fromTableCountObjectsArray'].length > 0) {
			var fromTableCountObjectsArray = resultObj['fromTableCountObjectsArray'];
			$.each(fromTableCountObjectsArray, function(i) {
				var fromTableCountObj = JSON.parse(fromTableCountObjectsArray[i]);
				$.each(fromTableCountObj, function(key, value) {

					var body = $('#' + flowChartWorkSpaceId).flowchart('getOperatorBody', key);
					if (body.indexOf("visionSourceCountLabelsDiv") == -1) {
						body += "<div class='visionCountLabelsDiv'><div class='visionSourceCountLabelsDiv' style='left:0px;' title='" + value + "'><span>&nbsp;" + value + "&nbsp;</span></div></div>";
						$('#' + flowChartWorkSpaceId).flowchart('setOperatorBody', key, body);
					}




				})

			})

		}


	}, 0);
}

function selectGroupJob(newJobId) {
    
	$.ajax({
		type: "post",
		traditional: true,
		dataType: 'json',
		url: 'fetchSavedJobs',
		cache: false,
		data: {
			parentFolder: "Saved Jobs",
			parentFolderId: "C8DE75F32D56288CE0554B610B40A4A3"
		},
		success: function(response) {
			ajaxStop();
			 var searchHtml = "<div class='etlSelectJobSearchBar'><input type='text' id='etlSelectJobSearchInput'  placeholder='Search' tabindex='-1'  onkeyup='filterTreeSearch()' /></div>"
                        $("#dialog").html(searchHtml+"<div id='availableJobsPopupId' class='availableJobsPopupIdsearch'></div>");
			$("#dialog").dialog({
				title: (labelObject['Message'] != null ? labelObject['Message'] : 'Message'),
				modal: true,
				width: 300,
				height: 300,
				fluid: true,
				buttons: [{
					text: (labelObject['Ok'] != null ? labelObject['Ok'] : 'Ok'),
					click: function() {
						var selectedItem = $('#avaialableJobsTreePopup').jqxTree('selectedItem');
						var parentLi = selectedItem.parentElement;
						var parentItem = $('#avaialableJobsTreePopup').jqxTree('getItem', parentLi);
						var jobDesc = selectedItem.label;
						var jobId = selectedItem.element.children[0].children[0].id;
						var folderId = parentItem.element.children[1].children[0].id;
						var folderName = parentItem.label;
						var selectedOperatorId = $('#' + flowChartWorkSpaceId).flowchart('getSelectedOperatorId');
						var data = {};
						data = $('#' + flowChartWorkSpaceId).flowchart('getData');
						data['type'] = "GROUPJOB";
						var selectedOperatorData = $('#' + flowChartWorkSpaceId).flowchart('getOperatorData', selectedOperatorId);
						selectedOperatorData['jobId'] = jobId;
						selectedOperatorData['jobDesc'] = jobDesc;
						selectedOperatorData['folderId'] = folderId;
						selectedOperatorData['folderName'] = folderName;
						selectedOperatorData['type'] = "GROUPJOB";
						selectedOperatorData['executeType'] = "";
						$('#' + flowChartWorkSpaceId).flowchart('setOperatorData', selectedOperatorId, selectedOperatorData);
						var body = $('#' + flowChartWorkSpaceId).flowchart('getOperatorBody', selectedOperatorId);
						var title = selectedItem.label;
						var elem = document.createElement('div');
						elem.innerHTML = body;
						$(elem).find(".visionOpLabelDiv").remove();
						body = elem.innerHTML;
						body += '<div class="visionOpLabelDiv" title="Double click to Rename" ondblclick="renameOperatorDisplayLabel(\'' + title + '\',this)" style="width:' + (title.length * 5) + 'px;margin-left:' + (((title.length * -5) / 2) + 14) + 'px;">' + title + '</div>';
						$('#' + flowChartWorkSpaceId).flowchart('setOperatorBody', selectedOperatorId, body);
						console.log("checkedItemsArray::" + selectedItem);
						$(this).html("");
						$(this).dialog("destroy");
						//$(this).dialog("close");
						//                            setGroupJobName(checkedItemsObj);
					}

				}],
				open: function() {
					var availableJobshtmlStr = response['availableJobshtmlStr'];
					if (availableJobshtmlStr != null && availableJobshtmlStr != '') {
						availableJobshtmlStr = availableJobshtmlStr.replace("avaialableJobsTree", "avaialableJobsTreePopup");
						$("#availableJobsPopupId").html(availableJobshtmlStr);
						$('#avaialableJobsTreePopup').jqxTree({ height: '160', width: '98%' });
						//                        var currentJobItem = $("#" + newJobId).parents("li:first").find("div:first")[0];
						$('#avaialableJobsTreePopup').jqxTree('expandItem', $("#avaialableJobsTreePopup")[0]);
						$("#avaialableJobsTreePopup").find(".selectJqxTreeItem").removeClass("selectJqxTreeItem");
						//                        $(currentJobItem).addClass("selectJqxTreeItem");
						$('#avaialableJobsTreePopup').on('expand', function(event) {
							var parentItem = $('#avaialableJobsTreePopup').jqxTree('getItem', event.args.element);
							var $element1 = $(event.args.element);
							var loaderItem1 = null;
							var children = $element1.find('ul:first').children();
							$.each(children, function() {
								var item = $('#avaialableJobsTreePopup').jqxTree('getItem', this);
								loaderItem1 = item;
								$('#avaialableJobsTreePopup').jqxTree('removeItem', loaderItem1.element);
							});
							var selectedItem = $('#avaialableJobsTreePopup').jqxTree('getItem', event.args.element);
							var selectedItemElement = selectedItem.element;
							var parentFolder = selectedItem.label;
							var parentFolderId = $($(selectedItem.element).find('div.visionEtlTreeFolders')[0]).attr("id");
							var level = selectedItem.level;
							//                    if (parentFolder != 'Saved Jobs') {
							$.ajax({
								type: "post",
								traditional: true,
								dataType: 'json',
								url: "getFolderData",
								cache: false,
								data: {
									parentFolder: parentFolder,
									jobType: (globalETLLoadMenu != "") ? globalETLLoadMenu : "ETL",
									parentFolderId: parentFolderId
								},
								success: function(data) {
									if (data != null && data != '' && data != undefined) {
										var availableJobsArray = data['availableJobsArray'];
										var availableFoldersArray = data['availableFoldersArray'];
										if (availableFoldersArray != null && availableFoldersArray.length > 0) {
											for (var i = 0; i < availableFoldersArray.length; i++) {
												var folderString = availableFoldersArray[i];
												try {
													$('#avaialableJobsTreePopup').jqxTree('addTo', {
														html: folderString
													}, selectedItemElement);
												} catch (e) {
													var erroe = e;
												}


											}
											var treeItems = $("#avaialableJobsTreePopup").jqxTree('getItems');
											var childItems = [];
											$.each(treeItems, function(i) {
												if (this['level'] == selectedItem['level'] + 1) {
													var parentFolderItem = $("#avaialableJobsTreePopup").jqxTree('getItem', this.parentElement);
													if (parentFolderItem['label'] == selectedItem['label']) {
														childItems.push(this);
													}
												}
											});
											$.each(childItems, function(i) {
												var childElement = this.element;
												$('#avaialableJobsTreePopup').jqxTree('addTo', { html: "<div>loading...</div>" }, childElement);
											})

										}
										$('#avaialableJobsTreePopup').jqxTree('refresh');
										for (var i = 0; i < availableJobsArray.length; i++) {
											var jobItemString = availableJobsArray[i];
											try {
												$('#avaialableJobsTreePopup').jqxTree('addTo', {
													html: jobItemString
												}, selectedItemElement);
											} catch (e) {
												var erroe = e;
											}

										}
									}
								},
								error: function(e) {
									console.log(e);
									sessionTimeout(e);
									stopLoader();
								}
							});
							//                    }
						});
					}

				},
				beforeClose: function(event, ui) {
					$(".visionHeaderMain").css("z-index", "99999");
					$(".visionFooterMain").css("z-index", "99999");
				}, close: function(event, ui) {

					$(this).html("");
					//$(this).dialog("close");
					$(this).dialog("destroy");
				}
			});
                 $('#avaialableJobsTreePopup').jqxTree('expandAll');
		},
		error: function(e) {
			sessionTimeout(e);
		}
	});
}


var allItems;
var itemselected = false;
  
 function filterTreeSearch() {
        expandAllFolders();
      var list = new Array();
        itemselected = false;
        
        allItems = $('#avaialableJobsTreePopup').jqxTree('getItems');
        var searchText = $('#etlSelectJobSearchInput').val().toUpperCase();
        var $treeWidget = $('#avaialableJobsTreePopup').jqxTree('getInstance');

  $.map(allItems, function (value) {
    if (itemselected == true) return;
 

    if (value.label.toUpperCase().indexOf(searchText) !== -1) {
        var height= 0;
      $.each(allItems, function () {
          
          height += parseInt($(this.element).height());
        if (itemselected == true) return;

        if (this.label.toUpperCase() == value.label.toUpperCase()) { 
            
          $('#avaialableJobsTreePopup').jqxTree('selectItem', this.element); 
          $('#avaialableJobsTreePopup').jqxTree('expandItem', this.element);
          scrollToElement(this.element.id);

          itemselected = true;
        }
      });
      return value;
    }
    return null;
  });
       
   }

function expandAllFolders() {
         $("#avaialableJobsTreePopup").jqxTree('expandAll')
  var $treeContainer = $('#avaialableJobsTreePopup');
  var $treeWidget = $treeContainer.jqxTree('getInstance');

  var allItems = $("#avaialableJobsTreePopup").find("li.jqx-tree-item-li.jqx-disableselect");

  $.each(allItems, function () {
    if (this.hasItems) {
      $treeWidget.expandItem(this.element);
    }
  });
}


function scrollToElement(elementId) {
  var element = document.getElementById(elementId);
  
  if (element) {
    element.scrollIntoView({ behavior: 'smooth', block: 'start' });
  }
}

function selectGroupJob1(newJobId) {

	$.ajax({
		type: "post",
		traditional: true,
		dataType: 'json',
		url: 'fetchJobs',
		cache: false,
		data: {

		},
		success: function(response) {
			ajaxStop();
			var availableJobshtmlStr = response['scheduledJobsArray'];
			var source =
			{
				datatype: "json",
				datafields: [
					{ name: 'id' },
					{ name: 'parentid' },
					{ name: 'text' },
					{ name: 'icon' },
					{ name: 'value' },
					{ name: 'datatype' }
				],
				id: 'id',
				icon: 'icon',
				localdata: availableJobshtmlStr
			};
			var dataAdapter = new $.jqx.dataAdapter(source);
			dataAdapter.dataBind();
			var records = dataAdapter.getRecordsHierarchy('id', 'parentid', 'items', [{ name: 'text', map: 'label' }]);
			$("#dialog").html("<div class='treeSearchInputDiv'>\n\
    <input id='treeSearchValue' type='text' class='treeSearchValueInput' placeholder='Search'/>\n\
    <img id='treeNodeSearchIconId' src='images/icon.png' style='height:12px;width:12px;cursor:pointer;'\n\
 onclick=searchTreeNode('groupJobTree')  /><div id='searchTreeErrorMesg' style='color:red;'>\n\
</div></div>\n\
<div id='groupJobTree' class='columnMappingTree'></div>");
			$('#groupJobTree').jqxTree({
				source: records, width: 300,
				toggleMode: 'click',
				//                theme: 'energyblue',
				enableHover: true,
				incrementalSearch: true,
				keyboardNavigation: true,
				//                        checkboxes: true
			});
			$("#dialog").dialog({
				title: (labelObject['Message'] != null ? labelObject['Message'] : 'Message'),
				modal: true,
				width: 300,
				height: 300,
				fluid: true,
				buttons: [{
					text: (labelObject['Ok'] != null ? labelObject['Ok'] : 'Ok'),
					click: function() {
						var selectedItem = $('#groupJobTree').jqxTree('selectedItem');
						var selectedOperatorId = $('#' + flowChartWorkSpaceId).flowchart('getSelectedOperatorId');
						var data = {};
						data = $('#' + flowChartWorkSpaceId).flowchart('getData');
						data['type'] = "GROUPJOB";
						var selectedOperatorData = $('#' + flowChartWorkSpaceId).flowchart('getOperatorData', selectedOperatorId);
						selectedOperatorData['jobId'] = selectedItem.id;
						selectedOperatorData['jobDesc'] = selectedItem.value;
						selectedOperatorData['type'] = "GROUPJOB";
						selectedOperatorData['executeType'] = "";
						$('#' + flowChartWorkSpaceId).flowchart('setOperatorData', selectedOperatorId, selectedOperatorData);
						var body = $('#' + flowChartWorkSpaceId).flowchart('getOperatorBody', selectedOperatorId);
						var title = selectedItem.value;
						var elem = document.createElement('div');
						elem.innerHTML = body;
						$(elem).find(".visionOpLabelDiv").remove();
						body = elem.innerHTML;
						body += '<div class="visionOpLabelDiv" title="Double click to Rename" ondblclick="renameOperatorDisplayLabel(\'' + title + '\',this)" style="width:' + (title.length * 5) + 'px;margin-left:' + (((title.length * -5) / 2) + 14) + 'px;">' + title + '</div>';
						$('#' + flowChartWorkSpaceId).flowchart('setOperatorBody', selectedOperatorId, body);
						// save all checked items in checkedItems array.

						//                            var checkedItemsObj = {};
						//                            var i = 1;
						//                            $.each(items, function () {
						//                                if (this.checked) {
						//                                    var checkedItems = {};
						//                                    checkedItems['jobName'] = this.label;
						//                                    checkedItems['jobId'] = this.id;
						////                                    checkedItemsArray.push(checkedItems);
						//                                    checkedItemsObj[i] = checkedItems;
						//                                    i++;
						//                                }
						//                            });

						console.log("checkedItemsArray::" + selectedItem);
						$(this).html("");
						$(this).dialog("destroy");
						//$(this).dialog("close");
						//                            setGroupJobName(checkedItemsObj);
					}

				}],
				open: function() {
					$('#groupJobTree').jqxTree({
						source: records, width: 300,
						toggleMode: 'click',
						//                        theme: 'energyblue',
						enableHover: true,
						incrementalSearch: true,
						keyboardNavigation: true,
						//                        checkboxes: true
					});
					//                     $('#groupJobTree').jqxTree({checkboxes: true, source: records, height: '300px', width: '300px' });
					$("#treeSearchValue").keyup(function(event) {
						if (event.keyCode === 13) {
							$("#treeNodeSearchIconId").click();
						}
					});
					$('#groupJobTree').jqxTree('expandItem', $("#groupJobTree").find('li:first')[0]);
				},
				beforeClose: function(event, ui) {
					$(".visionHeaderMain").css("z-index", "99999");
					$(".visionFooterMain").css("z-index", "99999");
				}, close: function(event, ui) {

					$(this).html("");
					//$(this).dialog("close");
					$(this).dialog("destroy");
				}




			});
		},
		error: function(e) {
			sessionTimeout(e);
		}

	});
}

function processGroupJobs(jobId, jobName) {
	showLoader();
	$("#currentJobId").val(jobId);
	//    $("#currentJobName").val("");
	$.ajax({
		type: "post",
		traditional: true,
		dataType: 'html',
		cache: false,
		url: "getJobTransformationRules",
		data: {
			jobId: jobId,
		},
		success: function(response) {
			showLoader();
			try {
				response = JSON.parse(response);
			} catch (e) {
			}

			var processJobData = JSON.parse(response['processJobDataObj']);
			processJobData['mappedData'] = response['mappedObjectData'];
			processJobData['jobId'] = jobId;
			processJobData['type'] = "GroupJob";
			processJobData['jobName'] = jobName;
			$.ajax({
				type: 'post',
				traditional: true,
				dataType: 'html',
				cache: false,
				url: 'processGroupETLData',
				async: true,
				data: processJobData,
				success: function(response) {
					console.log("ended");
					stopLoader();
					try {
						$("#currentJobId").val(response['jobId']);
						$("#currentJobName").val(response['jobName']);
					} catch (e) {
					}
					openLogFile();
				},
				error: function(e) {
					sessionTimeout(e);
					stopLoader();
					if (processLogInterval != null) {
						clearInterval(processLogInterval);
					}
				}

			});
		}

	});
}

function setGroupJobName() {
	var response = "<div id='textReason'>";
	response += "<textarea id='reasonId' class='visionDeleteReason'></textarea></div>";
	response += "<div id='dailog_error_id' style='display:none;color:red'>" + (labelObject['Please give any Job Name'] != null ? labelObject['Please give new Job Name'] : 'Please give new Job Name') + "</div>";
	$("#dialog").html(response);
	$("#dialog").dialog({
		title: (labelObject['Job Name'] != null ? labelObject['Job Name'] : 'Job Name'),
		modal: true,
		height: 'auto',
		minWidth: 300,
		maxWidth: 'auto',
		fluid: true,
		buttons: [{
			text: (labelObject['Ok'] != null ? labelObject['Ok'] : 'Ok'),
			click: function() {
				var jobName = $("#reasonId").val();
				if (jobName != null && jobName != '') {
					$("#dailog_error_id").hide();
					$(this).html("");
					//$(this).dialog("close");
					$(this).dialog("destroy");
					saveGroupJob(jobName);
				} else {
					$("#dailog_error_id").show();
				}

			}
		},
		{
			text: (labelObject['Cancel'] != null ? labelObject['Cancel'] : 'Cancel'),
			click: function() {
				$(this).html("");
				//$(this).dialog("close");
				$(this).dialog("destroy");
				// $("#labeld").empty();

			}

		}],
		open: function() {
			$(this).closest(".ui-dialog").find(".ui-button").eq(1).addClass("dialogyes");
			$(this).closest(".ui-dialog").find(".ui-button").eq(2).addClass("dialogno");
			$(".visionHeaderMain").css("z-index", "999");
			$(".visionFooterMain").css("z-index", "999");
		},
		beforeClose: function(event, ui) {
			$(".visionHeaderMain").css("z-index", "99999");
			$(".visionFooterMain").css("z-index", "99999");
		}
	});
}
function saveGroupJob(jobName) {
	$("#currentGroupJobName").val(jobName);
	var flowChartData = {};
	flowChartData = $('#' + flowChartWorkSpaceId).flowchart('getData');
	var operators = flowChartData.operators;
	var operatorJobId;
	$.each(operators, function(indx) {
		operatorJobId = this['jobId'];
	})
	if (operatorJobId != null && operatorJobId != '' && operatorJobId != 'undefined') {
		var jobDetails = {};
		jobDetails['jobType'] = "ETL";
		jobDetails['jobDetail'] = "GROUP";
		var jobId = $("#currenId").val();
		$.ajax({
			type: "post",
			traditional: true,
			dataType: 'json',
			url: 'saveGroupjob',
			cache: false,
			data: {
				jobName: jobName,
				jobDetails: JSON.stringify(jobDetails),
				jobId: jobId,
				checkedItemsObj: JSON.stringify(flowChartData)

			},
			success: function(response) {
				$("#currentGroupJobName").val(jobName);
				ajaxStop();
				showSavedJobs();
				processJob();
			},
			error: function(e) {
				sessionTimeout(e);
			}

		});
	} else {
		showMesg("Select Job to operator to execute.");
	}

}
function openGroupJobs(event, flowChartData) {
	if (flowChartData != null) {
		$("#" + flowChartWorkSpaceId).remove();
		$("#feedHeader").append('<div  id="flowchartworkSourcesspace" class="flowchart-example-container"></div>');
		$('#' + flowChartWorkSpaceId).flowchart({
			linkWidth: 2,
			defaultSelectedLinkColor: '#000055',
			grid: 10,
			distanceFromArrow: 0,
			multipleLinksOnInput: true,
			multipleLinksOnOutput: true,
			defaultSelectedLinkColor: 'red',
			onOperatorContextMenu: function(operatorId) {
				console.log("operatorId:::" + operatorId);
				openOpeartorContextMenu(operatorId);
				return true;
			},
		});
		
		initialiseMouseSelection();
		
		var count = 0;
		var OperatorsData = {};
		var linksData = {};
		try {
			for (var key in flowChartData.operators) {

				OperatorsData[count] = flowChartData.operators[key];
				//                        for (var i in flowChartData.links) {
				//                            if (parseInt(key) == flowChartData.links[i].fromOperator) {
				//                                flowChartData.links[i].fromOperator = count;
				//                            }
				//                            if (parseInt(key) == flowChartData.links[i].toOperator) {
				//                                flowChartData.links[i].toOperator = count;
				//                            }
				//
				//                        }

				count = count + 1;
			}
			for (var key in OperatorsData) {
				$('#' + flowChartWorkSpaceId).flowchart('addOperator', OperatorsData[key]);
			}
		} catch (e) {
		}

	}

}

//function setExecuteType($this) {
//    var selectedOperatorId = $('#'+flowChartWorkSpaceId).flowchart('getSelectedOperatorId');
//    var selectedOperatorData = $('#'+flowChartWorkSpaceId).flowchart('getOperatorData', selectedOperatorId);
//    if ($this.id == 'PREJOB' && $this.id != null && $this.id != undefined && $this.id != '') {
//        selectedOperatorData['executeType'] = 'PREJOB';
//    }
//    if ($this.id == 'POSTJOB' && $this.id != null && $this.id != undefined && $this.id != '') {
//        selectedOperatorData['executeType'] = 'POSTJOB';
//    }
//    if ($this.id == 'PARALLELJOB' && $this.id != null && $this.id != undefined && $this.id != '') {
//        selectedOperatorData['executeType'] = 'PARALLELJOB';
//    }
//    if ($this.id == 'PARALLELJOB' && $this.id != null && $this.id != undefined && $this.id != '') {
//        selectedOperatorData['executeType'] = 'PARALLELJOB';
//    }
//    if ($this.id == 'REMOVEJOB' && $this.id != null && $this.id != undefined && $this.id != '') {
//        selectedOperatorData['executeType'] = '';
//
//        var body = $('#'+flowChartWorkSpaceId).flowchart('getOperatorBody', selectedOperatorId);
//        var ele = document.createElement('div');
//        ele.innerHTML = body;
//        $(ele).find('.visionJobExecuteType').remove();
//
//        selectedOperatorData['properties']['body'] = $(ele).html();
//    }
//    if ($this.id == 'PREJOB' || $this.id == 'POSTJOB' || $this.id == 'PARALLELJOB' && $this.id != null && $this.id != undefined && $this.id != '') {
//        var body = $('#'+flowChartWorkSpaceId).flowchart('getOperatorBody', selectedOperatorId);
//        var ele = document.createElement('div');
//        ele.innerHTML = body;
//        $(ele).find('.visionOpLabelDiv').remove();
//        $(ele).children('div:nth-child(1)').append("<span class='visionJobExecuteType'>" + $this.id + "</span>");
//        selectedOperatorData['properties']['body'] = $(ele).html();
//
//    }
//    selectedOperatorData['properties']['body'] = body;
//    $('#'+flowChartWorkSpaceId).flowchart('setOperatorData', selectedOperatorId, selectedOperatorData);
//
//}


function executeProcessGroupJob1() {
	showLoader();
	try {
		var flowChartData = $('#' + flowChartWorkSpaceId).flowchart('getData');
	} catch (e) {
	}

	//    $("#currentJobName").val("");
	$.ajax({
		type: "post",
		traditional: true,
		dataType: 'html',
		cache: false,
		url: "ProcessGroupJobData",
		data: {
			groupJobData: JSON.stringify(flowChartData),
			groupJobId: flowChartData['operators'][0]['jobId']
		},
		success: function(response) {
			showLoader();
			try {
				response = JSON.parse(response);
				var jobId = response["jobId"];
				$("#currentJobId").val(jobId);
			} catch (e) {
			}
			openLogFile();
		}

	});
}
function updateGroupJob() {
	ajaxStart();
	var flowChartData = {};
	flowChartData = $('#' + flowChartWorkSpaceId).flowchart('getData');
	var jobId = $("#currentJobId").val();
	if (jobId != null && jobId != '' && jobId != 'undefined') {
		$.ajax({
			type: "post",
			traditional: true,
			dataType: 'json',
			url: 'updateGroupjob',
			cache: false,
			data: {
				jobId: jobId,
				checkedItemsObj: JSON.stringify(flowChartData)
			},
			success: function(response) {
				var message = response.message;
				showMesg(message);
				ajaxStop();
				showSavedJobs();
			},
			error: function(e) {
				sessionTimeout(e);
			}

		});
	} else {
		showMesg("No mapping to save");
	}

}



function deleteRecordsInTable(gridId, dbValue, tableName, connObj) {
	var selectedRowsData = [];
	var indexes = $("#" + gridId).jqxGrid('selectedrowindexes');
	for (var i = 0; i < indexes.length; i++) {
		var data = $("#" + gridId).jqxGrid('getrowdata', indexes[i]);
		selectedRowsData.push(data);
	}

	$.ajax({
		type: "post",
		traditional: true,
		dataType: 'json',
		url: 'deleteRecordsInTable',
		cache: false,
		data: {
			connObj: connObj,
			tableName: tableName,
			selectedRowsData: JSON.stringify(selectedRowsData),
		},
		success: function(response) {
			if (response != null && response != "") {
				var message = response['message'];
				refreshTableGrid(gridId);
				showMesg(message);
			}


		},
		error: function(e) {
			sessionTimeout(e);
		}

	});
}

function truncateTable(gridId, dbValue, tableName, connObj) {
	var confirmMsg = "Are you sure you want to Truncate this table?";
	$("#dialog").html(labelObject[confirmMsg] != null ? labelObject[confirmMsg] : confirmMsg);
	$("#dialog").dialog({
		title: (labelObject['Confirm'] != null ? labelObject['Confirm'] : 'Confirm'),
		modal: true,
		height: 'auto',
		minWidth: 300,
		maxWidth: 300,
		fluid: true,
		buttons: [{
			text: (labelObject['Ok'] != null ? labelObject['Ok'] : 'Ok'),
			click: function() {

				$.ajax({
					type: "post",
					traditional: true,
					dataType: 'json',
					url: 'truncateTableData',
					cache: false,
					data: {
						connObj: connObj,
						tableName: tableName,
					},
					success: function(response) {
						if (response != null && response != "") {
							var message = response['message'];
							showMesg(message);
							$('#' + gridId).jqxGrid({ editable: false });
							refreshTableGrid(gridId);
						}


					},
					error: function(e) {
						sessionTimeout(e);
					}

				});
				$(this).html("");
				//$(this).dialog("close");
				$(this).dialog("destroy");
			}
		},
		{
			text: (labelObject['Cancel'] != null ? labelObject['Cancel'] : 'Cancel'),
			click: function() {
				$(this).html("");
				//$(this).dialog("close");
				$(this).dialog("destroy");
				// $("#labeld").empty();

			}

		}],
		open: function() {
			$(this).closest(".ui-dialog").find(".ui-button").eq(1).addClass("dialogyes");
			$(".visionHeaderMain").css("z-index", "999");
			$(".visionFooterMain").css("z-index", "999");
		},
		beforeClose: function(event, ui) {
			$(".visionHeaderMain").css("z-index", "99999");
			$(".visionFooterMain").css("z-index", "99999");
		}
	});
}

function checkGridLoadComplete(gridId, tableName, rowscount, rowIndex, rowData) {
	var isCompleted = $("#" + gridId).jqxGrid('isBindingCompleted');
	if (isCompleted == false) {
		setTimeout(function() {
			checkGridLoadComplete(gridId, tableName, rowscount, rowIndex, rowData)
		}, 100);
		//        setTimeout(function () {
		//            isCompleted = true;
		//        }, 2000);
	} else {
		$("#" + gridId).jqxGrid('addrow', null, {}, rowIndex);
		$("#" + gridId).jqxGrid('selectrow', rowIndex);
		$("#" + gridId).jqxGrid('setcellvalue', rowIndex, tableName + '_HIDDEN', 'INSERT');
		$("#" + gridId).jqxGrid({
			pageSizeOptions: [rowscount + 1],
		});
	}
}

function addRecordToTable(gridId, dbValue, tableName, connObj, rowIndex, rowData) {
	$('#' + gridId).jqxGrid({ editable: true });
	var rowindexes = $("#" + gridId).jqxGrid('getselectedrowindexes');
	$("#" + gridId).jqxGrid('clearselection');
	$.each(rowindexes, function(i) {
		$("#" + gridId).jqxGrid('selectrow', (rowindexes[i] + 1));
	})

	var datainformation = $("#" + gridId).jqxGrid('getDatainformation');
	var rowscount = datainformation.rowscount;
	var paginginformation = datainformation.paginginformation;
	var pagesize = paginginformation.pagesize;
	if (rowscount <= pagesize) {

		if (rowscount < pagesize) {
			$("#" + gridId).jqxGrid({
				pageSizeOptions: [rowscount],
				virtualmode: false
			});
			try {
				checkGridLoadComplete(gridId, tableName, rowscount, rowIndex, rowData);
			} catch (e) {
				var error = e;
			}




		} else if (rowscount == pagesize) {

			$("#" + gridId).jqxGrid('addrow', null, {}, rowIndex);
			$("#" + gridId).jqxGrid('selectrow', rowIndex);
			$("#" + gridId).jqxGrid('setcellvalue', rowIndex, tableName + '_HIDDEN', 'INSERT');
			$("#" + gridId).jqxGrid({
				pageSize: rowscount,
				pageSizeOptions: [rowscount + 1]
			});
			$("#" + gridId).jqxGrid({
				virtualmode: false
			});
                        
			//            $("#" + gridId).jqxGrid('refreshdata');
		}


	} else {
		$("#" + gridId).jqxGrid('addrow', null, {}, rowIndex);
		$("#" + gridId).jqxGrid('selectrow', rowIndex);
		$("#" + gridId).jqxGrid('setcellvalue', rowIndex, tableName + '_HIDDEN', 'INSERT');
	}
        if (rowData!=null && !jQuery.isEmptyObject(rowData)) {
             $.each(rowData, function(key, val){
                 try{ 
                       $("#" + gridId).jqxGrid('setcellvalue', rowIndex, key, val);
                 } catch(e){}
               
            })
            $("#" + gridId).jqxGrid('setcellvalue', rowIndex, tableName + '_HIDDEN', 'INSERT');
        }
        
	//    $("#" + gridId).jqxGrid('refreshdata');
}

function commitChangesInTable(gridId, dbValue, tableName, connObj) {
	var updateRowsData = [];
	var insertRowsData = [];
	var lasteditdatafield = $("#last-edit-datafield").val();
	var lasteditrow = $("#last-edit-row").val();
	var editable = $("#" + gridId).jqxGrid('endcelledit', lasteditrow, lasteditdatafield, false);
	var rowindexes = $("#" + gridId).jqxGrid('getselectedrowindexes');
	/*for (var i = 0; i < rowindexes.length; i++) {
		var rowData = $("#" + gridId).jqxGrid('getRowData', rowindexes[i]);
		if (rowData[tableName + '_HIDDEN'] == 'UPDATE') {
			updateRowsData.push(rowData);
		} else if (rowData[tableName + '_HIDDEN'] == 'INSERT') {
			insertRowsData.push(rowData);
		}
	}*/
	//var updateColumnIndexes = Object.keys(updateDataInfo);

	for (var i = 0; i < rowindexes.length; i++) {
		var rowData = $("#" + gridId).jqxGrid('getRowData', rowindexes[i]);
		//050123
		//		if (rowData[tableName + '_HIDDEN'] == 'UPDATE') {
		//			updateRowsData.push(rowData);
		//		} else if (rowData[tableName + '_HIDDEN'] == 'INSERT') {
		//			insertRowsData.push(rowData);
		//		}
		if (rowData[tableName + '_HIDDEN'] == 'INSERT') {
			insertRowsData.push(rowData);
		} else { //default to update
			updateRowsData.push(rowData);
//                        if(updateColumnIndexes.includes((rowData['ROWNUM']-1).toString())){
//                            updateRowsData.push(rowData);  
//                        }

		}
	}

	$.ajax({
		type: "post",
		traditional: true,
		dataType: 'json',
		url: 'insertRecordsToTable',
		cache: false,
		data: {
			connObj: connObj,
			tableName: tableName,
			updateRowsData: JSON.stringify(updateRowsData),
			insertRowsData: JSON.stringify(insertRowsData),
			updateDataInfo: JSON.stringify(updateDataInfo),
		},
		success: function(response) {
			if (response != null && response != "") {
				var insertMessage = response['insertMessage'];
				var updateMessage = response['updateMessage'];
				var msg = ((insertMessage != null) ? insertMessage : "") + "\n<br>" + ((updateMessage != null) ? updateMessage : "");
				showMesg(msg);
				//                $('#' + gridId).jqxGrid({editable: false});
				refreshTableGrid(gridId);
			}

			//            $(".visionEditOptions").css("display", "none");
			$("#last-edit-datafield").val("");
			$("#last-edit-row").val("");
		},
		error: function(e) {
			sessionTimeout(e);
		}

	});
	//    $('#' + gridId).jqxGrid({editable: false});
}

function showEditTableOptions(gridId) {
	$(".visionEditOptions_" + gridId).toggle();
	if ($(".visionEditOptions_" + gridId).is(':visible')) {
		$("#editTableIcon_" + gridId).attr("title", "Stop Editing");
		$('#' + gridId).jqxGrid({ editable: true });
	} else {
		$("#editTableIcon_" + gridId).attr("title", "Edit Table");
		$('#' + gridId).jqxGrid({ editable: false });
		refreshTableGrid(gridId);
	}

}

function createNewSaveJobFolder() {
	ajaxStart();
       var folderId = $("#etlSavedJobsOptionsRefreshIcon").attr("folderid");
       var folderName = $("#etlSavedJobsOptionsRefreshIcon").attr("foldername");
	var folderObj = {};
	folderObj['parentFolder'] = folderName;
	folderObj['parentFolderId'] = folderId;
	//folderObj['treeLevel'] = parseInt(treeLevel);
	var jobDetails = {};
	jobDetails['jobType'] = "ETL";
	jobDetails['treeValue'] = "PARENT_ID";
	jobDetails['jobDetail'] = "NewFolder_Name";
	var labelObject = {};
	$("#dialog").html("<Span>New Folder Name</span><br><input  type='text' id='folderName'/>");
	$("#dialog").dialog({
		title: (labelObject['Message'] != null ? labelObject['Message'] : 'Message'),
		modal: true,
		width: 300,
		height: 135,
		fluid: true,
		buttons: [{
			text: (labelObject['Ok'] != null ? labelObject['Ok'] : 'Ok'),
			click: function() {
				var folderName = $("#folderName").val();
				$("#folderNameHidden").val(folderName);
				if (folderName != null && folderName != '' && folderName != undefined) {
					$.ajax({
						type: "post",
						traditional: true,
						dataType: 'json',
						url: "saveFolderName",
						cache: false,
						data: {
							folderName: folderName,
							jobDetails: JSON.stringify(jobDetails),
							folderObj: JSON.stringify(folderObj)
						},
						success: function(response) {
							ajaxStop();
							var message =  response['message'];
                                                        showMesg(message)
                                                        var parentfolderid = $("#etlSavedJobsOptionsRefreshIcon").attr("parentfolderid");
                                                        var parentfoldername = $("#etlSavedJobsOptionsRefreshIcon").attr("parentfoldername");
                                                        showSavedJobs(parentfolderid, parentfoldername, folderId, folderName, "ETL")   ;
							try {
								response = JSON.parse(response);
							} catch (e) {
							}
						}
					});
				}
				$(this).html("");
				//$(this).dialog("close");
				$(this).dialog("destroy");
			}
		}],
		open: function() {
			$(this).closest(".ui-dialog").find(".ui-button").eq(1).addClass("dialogyes");
			$(".visionHeaderMain").css("z-index", "999");
			$(".visionFooterMain").css("z-index", "999");
		},
		beforeClose: function(event, ui) {
			$(".visionHeaderMain").css("z-index", "99999");
			$(".visionFooterMain").css("z-index", "99999");
		}
	});
}

function renameETLFolder(folderId, folderName){
            $("#dialog").html("<input type='text' id='newFolderName' value='' />");
            $("#dialog").dialog({
			title: (labelObject['Rename Folder'] != null ? labelObject['Rename Folder'] : 'Rename Folder'),
			modal: true,
			height: 'auto',
			minWidth: 300,
			maxWidth: 'auto',
			fluid: true,
			buttons: [{
				text: (labelObject['Ok'] != null ? labelObject['Ok'] : 'Ok'),
				click: function() {
                                    var newFolderName = $("#newFolderName").val();
					$.ajax({
						type: "post",
						traditional: true,
						dataType: 'json',
						cache: false,
						url: "renameETLFolder",
						data: {
							folderName: folderName,
							folderId: folderId,
                                                        newFolderName: newFolderName,
							jobType: 'ETL'
						},
						success: function(response) {
							ajaxStop();
							//                                showSavedJobs();
                                                        showMesg(response["result"]);
                                                        
                                                        var parentfolderid = $("#etlSavedJobsOptionsRefreshIcon").attr("parentfolderid");
                                                        var parentfoldername = $("#etlSavedJobsOptionsRefreshIcon").attr("parentfoldername");
                                                        var folderid = $("#etlSavedJobsOptionsRefreshIcon").attr("folderid");
                                                        var foldername = $("#etlSavedJobsOptionsRefreshIcon").attr("foldername");
                                                   
                                                        showSavedJobs(parentfolderid, parentfoldername, folderid, foldername, "ETL")   ;

						}
					});
					$(this).html("");
					//$(this).dialog("close");
					$(this).dialog("destroy");
				}
			}],
			open: function() {
				$(this).closest(".ui-dialog").find(".ui-button").eq(1).addClass("dialogyes");
				$(this).closest(".ui-dialog").find(".ui-button").eq(2).addClass("dialogno");
				$(".visionHeaderMain").css("z-index", "999");
				$(".visionFooterMain").css("z-index", "999");
			},
			beforeClose: function(event, ui) {
				$(".visionHeaderMain").css("z-index", "99999");
				$(".visionFooterMain").css("z-index", "99999");
			}
		});
}

function deleteFolder(folderId, folderName) {
        ajaxStart();
	if (folderName != null && folderName != 'Saved Jobs') {
		$("#dialog").html("Are you sure you want to delete the folder??");
                
		$("#dialog").dialog({
			title: (labelObject['Confirmation'] != null ? labelObject['Confirmation'] : 'Confirmation'),
			modal: true,
			height: 'auto',
			minWidth: 300,
			maxWidth: 'auto',
			fluid: true,
			buttons: [{
				text: (labelObject['Yes'] != null ? labelObject['Yes'] : 'Yes'),
				click: function() {
					$.ajax({
						type: "post",
						traditional: true,
						dataType: 'json',
						cache: false,
						url: "deleteETLFolder",
						data: {
							folderName: folderName,
							folderId: folderId,
							//level: level,
							jobType: 'ETL'
						},
						success: function(response) {
							ajaxStop();
							//                                showSavedJobs();
                                                        var parentfolderid = $("#etlSavedJobsOptionsRefreshIcon").attr("parentfolderid");
                                                        var parentfoldername = $("#etlSavedJobsOptionsRefreshIcon").attr("parentfoldername");
                                                        var folderid = $("#etlSavedJobsOptionsRefreshIcon").attr("folderid");
                                                        var foldername = $("#etlSavedJobsOptionsRefreshIcon").attr("foldername");
                                                   
                                                        showSavedJobs(parentfolderid, parentfoldername, folderid, foldername, "ETL")   ;

						}
					});
					$(this).html("");
					//$(this).dialog("close");
					$(this).dialog("destroy");
				}
			},
			{
				text: (labelObject['No'] != null ? labelObject['No'] : 'No'),
				click: function() {
					$(this).html("");
					//$(this).dialog("close");
					$(this).dialog("destroy");
				}
			}],
			open: function() {
				$(this).closest(".ui-dialog").find(".ui-button").eq(1).addClass("dialogyes");
				$(this).closest(".ui-dialog").find(".ui-button").eq(2).addClass("dialogno");
				$(".visionHeaderMain").css("z-index", "999");
				$(".visionFooterMain").css("z-index", "999");
			},
			beforeClose: function(event, ui) {
				$(".visionHeaderMain").css("z-index", "99999");
				$(".visionFooterMain").css("z-index", "99999");
			}
		});
	} else if (folderName == 'Saved Jobs') {
		showMesg("You can't delete saved jobs folder");
	}
}

function selectFolder($this) {
	$.ajax({
		type: "post",
		traditional: true,
		dataType: 'json',
		url: 'fetchSavedFolders',
		cache: false,
		data: {
			parentFolder: 'Saved Jobs',
			parentId: 'C8DE75F32D56288CE0554B610B40A4A3'
		},
		success: function(response) {
			ajaxStop();
			var availableJobshtmlStr = response['scheduledJobsArray'];
			var source =
			{
				datatype: "json",
				datafields: [
					{ name: 'id' },
					{ name: 'parentid' },
					{ name: 'text' },
					{ name: 'icon' },
					{ name: 'value' },
					{ name: 'datatype' }
				],
				id: 'id',
				icon: 'icon',
				localdata: availableJobshtmlStr
			};
			var dataAdapter = new $.jqx.dataAdapter(source);
			dataAdapter.dataBind();
			var records = dataAdapter.getRecordsHierarchy('id', 'parentid', 'items', [{ name: 'text', map: 'label' }]);
			$("#dialog1").html("<div class='treeSearchInputDiv'>\n\
                            <input id='treeSearchValue' type='text' class='treeSearchValueInput' placeholder='Search'/>\n\
                            <img id='treeNodeSearchIconId' src='images/icon.png' style='height:12px;width:12px;cursor:pointer;'\n\
                            onclick=searchTreeNode('folderTree')  /><div id='searchTreeErrorMesg' style='color:red;'>\n\
                            </div></div>\n\
                            <div id='folderTree' class='columnMappingTree'></div>");
			$("#dialog1").dialog({
				title: (labelObject['Select Folder'] != null ? labelObject['Select Folder'] : 'Select Folder'),
				modal: true,
				width: 300,
				height: 300,
				fluid: true,
				buttons: [{
					text: (labelObject['Ok'] != null ? labelObject['Ok'] : 'Ok'),
					click: function() {
						var selectedItem = $('#folderTree').jqxTree('selectedItem');
						if (selectedItem != null) {
							$($this).parents("td").find("input").val(selectedItem['label']);
							$($this).parents("td").find("input").attr("folderId", selectedItem['value']);
							$($this).parents("td").find("input").attr("title", selectedItem['label']);
						}
						$(this).html("");
						//$(this).dialog("close");
						$(this).dialog("destroy");
					}
				}],
				open: function() {
					$('#folderTree').jqxTree({
						source: records, width: 300,
						toggleMode: 'click',
						//                        theme: 'energyblue',
						enableHover: true,
						incrementalSearch: true,
						keyboardNavigation: true,
					});
					$("#treeSearchValue").keyup(function(event) {
						if (event.keyCode === 13) {
							$("#treeNodeSearchIconId").click();
						}
					});
					$('#folderTree').jqxTree('expandItem', $("#folderTree").find('li:first')[0]);
				},
				beforeClose: function(event, ui) {
					$(".visionHeaderMain").css("z-index", "99999");
					$(".visionFooterMain").css("z-index", "99999");
				}, close: function(event, ui) {
					$(this).html("");
					//$(this).dialog("close");
				}
			});
		},
		error: function(e) {
			sessionTimeout(e);
		}

	});
}


function onSubmitChildJob() {
	var jobId = $('#currentGroupJobId').val();
	var jobDescr = $('#currentSelectedGroupJobName').val();
	$("#avaialableJobsTree").find(".selectJqxTreeItem").removeClass("selectJqxTreeItem");
	$("#" + jobId).parent().addClass("selectJqxTreeItem");
	if (jobId != null && jobId != 'undefined' && jobId != '' && jobDescr != null && jobDescr != 'undefined' && jobId != '') {
		$("#currentJobId").val(jobId);
		$("#currentJobName").val(jobDescr);
		showLoader();
		var data = {
			jobDescr: jobDescr,
			jobId: jobId

		};
		$.ajax({
			type: "post",
			traditional: true,
			dataType: 'json',
			url: 'getSavedJobData',
			cache: false,
			data: data,
			success: function(response) {
				stopLoader();
				//                switchETLDesignTabs('li_ChildJob', 'childJobDiv');

				switchETLDesignTabs("li_designView", "contentSplitter"); // -----code start
				var flowChartData = JSON.parse(response['flowChartData']);
				$("#" + flowChartWorkSpaceId).remove();
				$("#feedHeader").append('<div  id="flowchartworkSourcesspace" class="flowchart-example-container"></div>');
				$('#' + flowChartWorkSpaceId).flowchart({
					linkWidth: 2,
					defaultSelectedLinkColor: '#000055',
					grid: 10,
					distanceFromArrow: 0,
					multipleLinksOnInput: true,
					multipleLinksOnOutput: true,
					defaultSelectedLinkColor: 'red',
					onOperatorContextMenu: function(operatorId) {
						console.log("operatorId:::" + operatorId);
						openOpeartorContextMenu(operatorId);
						return true;
					},
				});
				initialiseMouseSelection();
				
				var count = 0;
				var OperatorsData = {};
				var linksData = {};
				try {
					for (var key in flowChartData.operators) {

						OperatorsData[count] = flowChartData.operators[key];
						for (var i in flowChartData.links) {
							if (parseInt(key) == flowChartData.links[i].fromOperator) {
								flowChartData.links[i].fromOperator = count;
							}
							if (parseInt(key) == flowChartData.links[i].toOperator) {
								flowChartData.links[i].toOperator = count;
							}

						}

						count = count + 1;
					}
					for (var key in OperatorsData) {
						$('#' + flowChartWorkSpaceId).flowchart('addOperator', OperatorsData[key]);
					}
				} catch (e) {
				}



				var count = 0;
				//   try {

				for (var key in flowChartData.links) {

					linksData[count] = flowChartData.links[key];
					count = count + 1;
				}
				for (var key in linksData) {
					$('#' + flowChartWorkSpaceId).flowchart('addLink', linksData[key]);
				}

				$(".flowchart-operator-connector-label").hide();
				$(".flowchart-operator-title").hide();
				$(".visionMapOperator").removeClass("visionOpLabelDiv");
				// $('#'+flowChartWorkSpaceId).flowchart('setData', flowChartData);
				$("#dataMigrationTabs").remove();
				$("#normalizeOptionsTabs").remove();
				$("#deNormalizeOptionsTabs").remove();
				var mapIcons = $(".visionMapOperator");
				$.each(mapIcons, function(index) {
					$(this).attr('job-id', jobId);
					$(this).attr('job-name', jobDescr);
				});
				$('#dataMigrationTabs :input').keyup(function(event) {
					if (event.target.nodeName == 'INPUT') {
						var $this = $(event.target);
						$this.attr("value", event.target.value);
						$this.attr("title", event.target.value);
						$this.val(event.target.value);
					}

				});
				previousOperatorId = null;
				prevTargetOperatorId = null;
				$("#emptyJobName").val("");
				$("#emptyJobId").val("");
				$("#currentTrnsOpId").val("");
			},
			error: function(e) {
				sessionTimeout(e);
			}

		});
	} else {
		showMesg("No job Mapped to these operator");
	}

}

function showChildJob(selectedOperatorId) {
	var jobId;
	var jobDescr;
	var folderName;
	var folderId;
	if (selectedOperatorId != null && selectedOperatorId != '' && selectedOperatorId != undefined) {
		var selectedOperatorData = $("#" + flowChartWorkSpaceId).flowchart('getOperatorData', selectedOperatorId);
		jobId = selectedOperatorData.jobId;
		jobDescr = selectedOperatorData.jobDesc;
		folderName = selectedOperatorData.folderName;
		folderId = selectedOperatorData.folderId;
	}
	$('#currentGroupJobId').val(jobId);
	$('#currentSelectedGroupJobName').val(jobDescr);
	$('#formJobId').val(jobId);
	$('#formJobName').val(jobDescr);
	//    $('#formJobHidden').val('Y');
	//    $('#formJobFlag').val('Y');
	$('#formGlobalTreeObj').val(JSON.stringify(globalTreeObj));
	//    $("#childJobForm").submit();

	//    $("#avaialableJobsTree").find(".selectJqxTreeItem").removeClass("selectJqxTreeItem");
	//    $("#" + jobId).parent().addClass("selectJqxTreeItem");
	//    var getOnclickAttr = $("#" + jobId).parent().children().attr('ondblclick');
	//    var strarray = getOnclickAttr.split(',');
	//    var folderName = strarray[3].replace(/[^a-z0-9\s]/gi, '').replace(/[_\s]/g, '');
	//    var folderId = strarray[4].replace(/[^a-z0-9\s]/gi, '').replace(/[_\s]/g, '');
	//    var folderId = strarray[4].replace('"', '');

	if (jobId != null && jobId != 'undefined' && jobId != '' && jobDescr != null && jobDescr != 'undefined' && jobId != '') {
		$("#currentJobId").val(jobId);
		$("#currentJobName").val(jobDescr);
		showLoader();
		var data = {
			jobDescr: jobDescr,
			jobId: jobId

		};
		$.ajax({
			type: "post",
			traditional: true,
			dataType: 'json',
			url: 'getSavedJobData',
			cache: false,
			data: data,
			success: function(response) {
				stopLoader();
				//                switchETLDesignTabs('li_ChildJob', 'childJobDiv');


				switchETLDesignTabs("li_designView", "contentSplitter"); // -----code start
				var flowChartData = JSON.parse(response['flowChartData']);
				var selectedItemIndex = $('#flowChartTabs').jqxTabs('selectedItem');
				var flowChartIndex = 'workSpace_' + jobId;
				var length = $('#flowChartTabs').jqxTabs('length');
				var openedTab = false;
				for (var i = 0; i < length; i++) {
					var title = $('#flowChartTabs').jqxTabs('getTitleAt', i);
					if (title != null && title == jobDescr) {
						$('#flowChartTabs').jqxTabs('select', i);
						openedTab = true;
						$("#" + flowChartIndex).remove();
						var selectedItemIndex = $('#flowChartTabs').jqxTabs('selectedItem');
						var htmlDiv = '<div  id="workSpace_' + jobId + '" class="flowchart-example-container" jobId="' + jobId + '" jobName="' + jobDescr + '" folderId= "' + folderId + '" folderName="' + folderName + '" ></div>';
						$('#flowChartTabs').jqxTabs('setContentAt', selectedItemIndex, htmlDiv);
						break;
					}
				}
				if (!openedTab) {
					var divStr = ''
					divStr += '<div  style="display: flex;float:left;margin-top:5px;">'
					divStr += '</div>'
					divStr += '<div  id="workSpace_' + jobId + '" class="flowchart-example-container" jobId="' + jobId + '" jobName="' + jobDescr + '" folderId= "' + folderId + '" folderName="' + folderName + '" ></div>';
					divStr += '';
					$('#flowChartTabs').jqxTabs('showAllCloseButtons');
					$("#flowChartTabs").find("li.jqx-tabs-title").find("div.jqx-tabs-close-button").css("background-image", "url(images/close.png)");
					$("#flowChartTabs").find("li.jqx-tabs-title-selected-top").find("div.jqx-tabs-close-button").css("background-image", "url(images/close.png)");
					$('#flowChartTabs').jqxTabs('addLast', jobDescr, divStr);
				}
				flowChartWorkSpaceId = "workSpace_" + jobId;
				
				$("#workSpace_" + jobId).flowchart({
					linkWidth: 2,
					defaultSelectedLinkColor: '#000055',
					grid: 10,
					distanceFromArrow: 0,
					multipleLinksOnInput: true,
					multipleLinksOnOutput: true,
					defaultSelectedLinkColor: 'red',
					onOperatorContextMenu: function(operatorId) {
						console.log("operatorId:::" + operatorId);
						openOpeartorContextMenu(operatorId);
						return true;
					},
				});
				initialiseMouseSelection();
					
				/*$("#workSpace_" + jobId).flowchart({

					onAfterChange: function(changeType) {

						if (!operatorDoublClick) {
							trfmRulesChanged = true;
							console.error("trfmRulesChanged : " + trfmRulesChanged);
							return true;
						}
					}, onOperatorSelect: function(changeType) {
						$(document).find("input").blur();
						return true;
					},
					onLinkSelect: function(changeType) {
						$(document).find("input").blur();
						return true;
					}
				});*/
				var count = 0;
				var OperatorsData = {};
				var linksData = {};
				try {
					for (var key in flowChartData.operators) {

						OperatorsData[count] = flowChartData.operators[key];
						for (var i in flowChartData.links) {
							if (parseInt(key) == flowChartData.links[i].fromOperator) {
								flowChartData.links[i].fromOperator = count;
							}
							if (parseInt(key) == flowChartData.links[i].toOperator) {
								flowChartData.links[i].toOperator = count;
							}

						}

						count = count + 1;
					}
					for (var key in OperatorsData) {
						$("#workSpace_" + jobId).flowchart('addOperator', OperatorsData[key]);
					}
				} catch (e) {
				}



				var count = 0;
				//   try {

				for (var key in flowChartData.links) {

					linksData[count] = flowChartData.links[key];
					count = count + 1;
				}
				for (var key in linksData) {
					$("#workSpace_" + jobId).flowchart('addLink', linksData[key]);
				}

				$(".flowchart-operator-connector-label").hide();
				$(".flowchart-operator-title").hide();
				$(".visionMapOperator").removeClass("visionOpLabelDiv");
				// $('#flowchartworkSourcesspace').flowchart('setData', flowChartData);
				$("#dataMigrationTabs").remove();
				$("#normalizeOptionsTabs").remove();
				$("#deNormalizeOptionsTabs").remove();
				var mapIcons = $(".visionMapOperator");
				$.each(mapIcons, function(index) {
					$(this).attr('job-id', jobId);
					$(this).attr('job-name', jobDescr);
				});
				$('#dataMigrationTabs :input').keyup(function(event) {
					if (event.target.nodeName == 'INPUT') {
						var $this = $(event.target);
						$this.attr("value", event.target.value);
						$this.attr("title", event.target.value);
						$this.val(event.target.value);
					}

				});
				previousOperatorId = null;
				prevTargetOperatorId = null;
				$("#emptyJobName").val("");
				$("#emptyJobId").val("");
				$("#currentTrnsOpId").val("");
				flowChartWorkSpaceId = "workSpace_" + jobId;
			},
			error: function(e) {
				sessionTimeout(e);
			}

		});
	} else {
		showMesg("No job Mapped to these operator");
	}




}

function deleteAllColumns(){
	$("#sqlToTableColumnsTable").find("tbody").find("tr").remove();
}

//function showChildJob(event, selectedOperatorId) {
//    var selectedOperatorData = $('#' + flowChartWorkSpaceId).flowchart('getOperatorData', selectedOperatorId);
//    var jobId = selectedOperatorData.jobId;
//    var jobDescr = selectedOperatorData.jobName;
//    $('#currentGroupJobId').val(jobId);
//    $('#currentSelectedGroupJobName').val(jobDescr);
//    $('#formJobId').val(jobId);
//    $('#formJobName').val(jobDescr);
//    $('#formJobHidden').val('Y');
//    $('#formJobFlag').val('Y');
//    $("#childJobForm").submit();
//
//}


function alterTable(DBValue, parentkey, connectionObj) {
        $("#dialogAlterTable").remove();
        $("#tableAlterDiv").remove();
        $("#etlPageBody").append("<div id='dialogAlterTable'></div>");
        $("#dialogAlterTable").html("");
        $("#dialogAlterTable").dialog({
                title: (labelObject['Alter Table'] != null ? labelObject['Alter Table'] : 'Alter Table'),
                modal: false,
                width: 1013,
                minHeight: 300,
                maxHeight: 400,
                autoheight: true,
                fluid: true,
                
                position: { my: "left+300 top+100", at: "left top", of: window },
                open: function() {

                        alterTableLoadGrid(DBValue, parentkey, connectionObj);

                        $(this).closest(".ui-dialog").find(".ui-button").eq(1).addClass("dialogyes");
                        $(".visionHeaderMain").css("z-index", "999");
                        $(".visionFooterMain").css("z-index", "999");
                },
                beforeClose: function(event, ui) {
                        $(".visionHeaderMain").css("z-index", "99999");
                        $(".visionFooterMain").css("z-index", "99999");
                }
        })
        
        
       
}

function alterTableLoadGrid(DBValue, parentkey, connectionObj){
    
     try {
           connectionObj = JSON.parse(connectionObj);
        } catch (error) {
        }
        
	//    var DBValue;
	var tableName;
	var connName;
	//    var parentkey;
	var extTreeParams = $("#extTreeParams").val();
	var columnsObj = globalTreeObj['treeColumnObj'];
	var target = $("#jqxtabs").find(".visionSelectedObject")[0];
	if (!(parentkey != null && parentkey != '' && DBValue != null && DBValue != '')) {
		if (target != null) {
			tableName = target.textContent.trim();
			var div = $(target).parents('div.visionObjectsListDiv')[0];
			var divId = div.id;
			parentkey = target.textContent.trim().toUpperCase();
			DBValue = divId.split("-")[1];
			var liItems = $("#savedConnections").find("li :contains('" + DBValue + "')");
			$.each(liItems, function(index) {
				var liItem = $('#savedConnections').jqxTree('getItem', this);
				if (liItem != null && liItem.level == 3 && liItem.value == DBValue) {

					var connItem = this.parentElement.parentElement;
					var selectedConnItem = $('#savedConnections').jqxTree('getItem', connItem);
					if (selectedConnItem != null && selectedConnItem.level == 2) {
						connName = selectedConnItem.value;
					}
					stopLoader();
					return false;
				}

			})

		} else {
			var parentItem = $('#savedConnections').jqxTree('getSelectedItem');
			tableName = parentItem.label;
			parentkey = parentItem.value
			var $element = $(parentItem.element);
			var dbItem = parentItem.element.parentElement.parentElement.parentElement.parentElement;
			//var dbItemvalue = parentItem.element.parentElement.parentElement.parentElement.parentElement.children[2].title;

			var selectedDBItem = $('#savedConnections').jqxTree('getItem', dbItem);
			DBValue = selectedDBItem['value'];
			var connItem = dbItem.parentElement.parentElement;
			var selectedConnItem = $('#savedConnections').jqxTree('getItem', connItem);
			if (selectedConnItem.level == 2) {
				connName = selectedConnItem.value;
			}

		}
	}

	if (!(tableName != null && tableName != '')) {
		tableName = parentkey;
	}

	if (connectionObj == null || connectionObj == 'undefined') {
		if (savedDBData != null && !jQuery.isEmptyObject(savedDBData)) {
			var conObj = savedDBData[DBValue];
			if (conObj != null && !jQuery.isEmptyObject(conObj)) {
				connectionObj = conObj;
			}

		}
	}
	showLoader();
	$.ajax({
		type: "post",
		traditional: true,
		dataType: 'json',
		url: 'alterTable',
		cache: false,
		data: {
			tableName: tableName,
			connectionName: DBValue,
			connObj: JSON.stringify(connectionObj)
		},
		success: function(response) {
			stopLoader();
			if (response != null) {

				var dataArray = response['data'];
				var dataTypesList = response['dataTypesList'];
				var pkColsList = response['pkColsList'];
                                
				$("#alterTablePKList").val(pkColsList);
				var divStr = "<div id = 'tableAlterDiv'>"
					+ "<div id='alterTableOptions' class='visionAlterTableOptions' style='display:flex;'>"
					+ "<img class='visionEditOptions' src='images/Refresh-Icon.svg' style='display:block; width:18px;height: 18px;cursor:pointer;padding-left:3px;margin-right:5px;' id='refreshALterTableGrid' title='Refresh'>"
					+ "<img class='visionEditOptions' src='images/add_icon.png' style='display:block; width:18px;height: 18px;cursor:pointer;padding-left:3px;margin-right:5px;' onclick=addRecordToAlterTableGrid() title='Add Column'>"
					+ "<img class='visionEditOptions'  src='images/commit_icon.png' style='display:block; width:18px;height: 18px;cursor:pointer;padding-left:3px;margin-right:5px;' onclick=commitAlterTable('" + tableName + "','" + JSON.stringify(connectionObj) + "') title='Commit'>"
					+ "<img class='visionEditOptions'  src='images/delete_icon.png' style='display:block; width:18px;height: 18px;cursor:pointer;padding-left:3px;margin-right:5px;' onclick=deleteColAlterTable('" + tableName + "','" + JSON.stringify(connectionObj) + "') title='Delete COlumn'>"
					+ "<img class='visionEditOptions'  src='images/etl/script.png' style='display:block; width:18px;height: 18px;cursor:pointer;padding-left:3px;margin-right:5px;' onclick=generateAlterTableQuery('" + tableName + "','" + JSON.stringify(connectionObj) + "') title='Generate Query'>"
                                        +"<img class='visionEditOptions'  src='images/etl/copy.png' style='display:block; width:18px;height: 18px;cursor:pointer;padding-left:3px;margin-right:5px;' onclick=copyColAlterTable() title='Copy Columns'>"
                                        + "</div>"
					+ "<div id='tableAlterGrid'></div>"
					+ "</div>";
                                
                               
                                    
                                    $("#dialogAlterTable").html(divStr);
                                var source =
						{
							localdata: dataArray,
							datatype: "array",
							loadComplete: function(data) {
								//                                        
                                                        alterTableData = {};

							},
							rendered: function() {

							}

						};
						var dataAdapter = new $.jqx.dataAdapter(source);
						var inputRenderer = function(row, columnfield, value, defaulthtml, columnproperties) {//overflow-y:scroll;height:100%;
                                                    var rowData = $("#tableAlterGrid").jqxGrid("getrowdata",row);
                                                   
                                                    if (columnfield == 'columnName') {
								var html = defaulthtml;
								if (value == null || value == "") {
									html = '<input type="text" id="alterTablecolumnName_' + row + '" dataField="' + columnfield + '" initVal="newRow_' + row + '" value="" style="width:100%;height:100%;" >'
								} else {
									html = '<input type="text" id="alterTablecolumnName_' + row + '" dataField="' + columnfield + '" initVal="' + value + '" value="' + value + '" style="width:100%;height:100%;" >'

								}
								return html;
							}
							if (columnfield == 'primaryKey') {
                                                                var tableColumn = rowData['columnName'];
								if (value == "Y") {
									return '<input class="alterTablePrimaryKey" id="alterTablePrimaryKey_' + row + '" tablecolumn="'+tableColumn+'" dataField="' + columnfield + '" type="checkbox" initVal="' + value + '" value="' + value + '" checked>';
								} else {
									return '<input class="alterTablePrimaryKey" id="alterTablePrimaryKey_' + row + '" tablecolumn="'+tableColumn+'" dataField="' + columnfield + '" type="checkbox" initVal="' + value + '" value="' + value + '">';
								}
							}
							if (columnfield == 'columnsize') {
								return '<input id="alterTableColumnSize_' + row + '" dataField="' + columnfield + '" style="width:100%;height:100%;" type="number" initVal="' + value + '" value="' + value + '" min="0" max="4000">';
							}

							if (columnfield == 'precision') {
								return '<input id="alterTablePrecision_' + row + '" dataField="' + columnfield + '" style="width:100%;height:100%;" type="number" initVal="' + value + '" value="' + value + '" min="0" max="38">';
							}
							if (columnfield == 'scale') {
								return '<input id="alterTableScale_' + row + '" dataField="' + columnfield + '" style="width:100%;height:100%;" type="number" initVal="' + value + '" value="' + value + '" min="-84" max="127">';
							}
							if (columnfield == 'notNull') {
								if (value == "NULL") {
									return '<input id="alterTableNotnull_' + row + '" dataField="' + columnfield + '" type="checkbox" initVal="' + value + '" value="' + value + '" >';
								} else {
									return '<input id="alterTableNotnull_' + row + '" dataField="' + columnfield + '" type="checkbox" initVal="' + value + '" value="' + value + '" checked>';
								}
							}
							if (columnfield == 'defaultValue') {
								var html = defaulthtml;
								html = '<input type="text" id="alterTabledefaultVal_' + row + '" dataField="' + columnfield + '" initVal="' + value + '" value="' + value + '" style="width:100%;height:100%;" >'
								return html;
							}

							if (columnfield == 'datatypeName') {
								var valueInCaps = value.toUpperCase();

								var html = defaulthtml;
								html = '<select name="dataTypeNames" id="alterTableDataType_' + row + '" dataField="' + columnfield + '" initVal="' + value + '" style="width:100%;height:100%;" >';
								$.each(dataTypesList, function(i) {
									if (dataTypesList[i] == valueInCaps) {
										html += '<option value="' + dataTypesList[i] + '" selected >' + dataTypesList[i] + '</option>';
									} else {
										html += '<option value="' + dataTypesList[i] + '">' + dataTypesList[i] + '</option>';
									}

								});
								html += '</select>';
								return html;
							}


						}



						var i = 0;
						$("#tableAlterGrid").jqxGrid(
							{
								width: "100%",
								source: source,
								height: "500px",
								editable: true,
								sortable: true,
								columnsResize: true,
								columnsReorder: true,
								enableHover: true,
								enableBrowserSelection: true,
								filterable: true,
								//                                    selectionmode: 'singleRow',
								selectionmode: 'checkbox',
//								handlekeyboardnavigation: function(event) {
//
//									var keyis = event.key;
//									if (keyis.length == 1) {
//										//                                            var value = $(event.target).val();
//										//                                            $(event.target).val(value + keyis);
//										//                                            
//										var cursorPos = $(event.target).prop('selectionStart');
//										var v = $(event.target).val();
//										var textBefore = v.substring(0, cursorPos);
//										var textAfter = v.substring(cursorPos, v.length);
//										$(event.target).val(textBefore + $(this).val() + textAfter);
//										return true;
//									}
//									//                                       
//
//								},
								columns: [
									{ text: 'Column Name', datafield: 'columnName', width: 200, editable: false, cellsrenderer: inputRenderer },
									{ text: 'PK', datafield: 'primaryKey', width: 100, editable: false, cellsrenderer: inputRenderer },
									{
										text: 'Datatype', datafield: 'datatypeName', width: 100, editable: false, cellsrenderer: inputRenderer
										//                                            createeditor: function (row, value, editor) {
										//                                                editor.jqxDropDownList({source: dataTypesList});
										//                                            }
									},
									{ text: 'Size', datafield: 'columnsize', width: 100, editable: false, cellsrenderer: inputRenderer },
									//                                        {text: 'Byte/Char', datafield: 'byteOrChar', width: 100, editable: false, cellsrenderer: inputRenderer},
									{ text: 'Precision', datafield: 'precision', width: 100, editable: false, cellsrenderer: inputRenderer },
									{ text: 'Scale', datafield: 'scale', width: 100, editable: false, cellsrenderer: inputRenderer },
									{ text: 'Not Null', datafield: 'notNull', width: 100, editable: false, cellsrenderer: inputRenderer },
									{ text: 'Default value', datafield: 'defaultValue', width: 200, editable: false, cellsrenderer: inputRenderer },
									{ text: 'alterTableHidden', datafield: 'alterTableHidden', hidden: true },
								]
							});
                                                        
                                               
                                               
						$("[id^=tableAlter]").unbind("change").on("change", function(event) {

							var target = event.target;
							var oldvalue = $(target).attr("initval");
							var value;
							var dataField = $(target).attr("dataField");
							// validations
							var rowIndex = $(target).attr("id").split("_")[1];
							var columnName = $("#alterTablecolumnName_" + rowIndex).attr("initval");
							if (dataField == "datatypeName") {
								value = $(target).val();
								if (value == "NUMBER" || value == "NUMERIC" || value == "DECIMAL") {
									$("#alterTableColumnSize_" + rowIndex).val("");
									$("#alterTableColumnSize_" + rowIndex).attr('readonly', true);
									$("#alterTablePrecision_" + rowIndex).val("");
									$("#alterTablePrecision_" + rowIndex).attr('readonly', false);
									$("#alterTableScale_" + rowIndex).attr('readonly', false);
								}
								if (value == "FLOAT") {
									$("#alterTableColumnSize_" + rowIndex).val("");
									$("#alterTableColumnSize_" + rowIndex).attr('readonly', true);
									$("#alterTablePrecision_" + rowIndex).attr('readonly', false);
									$("#alterTablePrecision_" + rowIndex).val("");
									$("#alterTableScale_" + rowIndex).attr('readonly', true);
								}
								if (value == "INTERGER" || value == "DATE" || value == "LONG" || value == "LONG RAW"
									|| value == "ROWID" || value == "MLSLABEL" || value == "CLOB" || value == "NCLOB"
									|| value == "BLOB" || value == "BFILE" || value == "BINARY_DOUBLE" || value == "BINARY_FLOAT"
									|| value == "URITYPE" || value == "DOUBLE PRECISION" || value == "SMALLINT" || value == "REAL"
									|| value == "URITYPE" || value == "TIMESTAMP") {
									$("#alterTableColumnSize_" + rowIndex).val("");
									$("#alterTableColumnSize_" + rowIndex).attr('readonly', true);
									$("#alterTablePrecision_" + rowIndex).val("");
									$("#alterTablePrecision_" + rowIndex).attr('readonly', true);
									$("#alterTableScale_" + rowIndex).val("");
									$("#alterTableScale_" + rowIndex).attr('readonly', true);
								}
								if (value == "VARCHAR" || value == "VARCHAR2" || value == "CHAR" || value == "NVARCHAR2"
									|| value == "RAW" || value == "CHAR VARYING" || value == "CHARACTER" || value == "CHARACTER VARYING"
									|| value == "NATIONAL CHAR" || value == "NATIONAL CHARACTER" || value == "NATIONAL CHARACTER VARYING"
									|| value == "NCHAR VARYING") {

									$("#alterTableColumnSize_" + rowIndex).attr('readonly', false);
									$("#alterTablePrecision_" + rowIndex).val("");
									$("#alterTablePrecision_" + rowIndex).attr('readonly', true);
									$("#alterTableScale_" + rowIndex).val("");
									$("#alterTableScale_" + rowIndex).attr('readonly', true);
								}
							}

							$("#tableAlterGrid").jqxGrid('endrowedit', rowIndex, false);
							// validations end
							var rowData = $("#tableAlterGrid").jqxGrid('getrowdata', rowIndex);
							var dataFieldsObj = alterTableData[columnName];
							if (dataFieldsObj == null) {
								dataFieldsObj = {};
							}

							if (dataField != null) {
								if (dataField == "columnName") {
									value = $(target).val();
									if (value != null && oldvalue != value) {
										dataFieldsObj[dataField] = value;
										alterTableData[columnName] = dataFieldsObj;
									}
								} else if (dataField == "primaryKey") {
                                                                        var newAlterTableData = JSON.parse(JSON.stringify(alterTableData));
                                                                        $.each(newAlterTableData, function(col, dataObject) {
                                                                             dataObject[dataField] = "N";
                                                                             alterTableData[col] = dataObject;
                                                                        });
                                                                        newAlterTableData = null;
                                                                  
                                                                    $('.alterTablePrimaryKey:checkbox:checked').each(function(i){
                                                                        //var tableColumn = $(this).attr("initval");
                                                                        var tableColumn = $(this).closest(".jqx-grid-cell").prev(".jqx-grid-cell").find("input").val();
                                                                        var dataFieldsObject = alterTableData[tableColumn];
                                                                            if (dataFieldsObject == null) {
                                                                                    dataFieldsObject = {};
                                                                            }
                                                                        dataFieldsObject[dataField] = "Y";
                                                                        alterTableData[tableColumn] = dataFieldsObject;
                                                                    });
                                                                 
									if (jQuery.isEmptyObject(alterTableData)) {
                                                                            var dataObject = {};
                                                                            dataObject[dataField] = "N";
                                                                            alterTableData[columnName] = dataObject;
                                                                        }
                                                                    
								} else if (dataField == "datatypeName" || dataField == "columnsize"
									|| dataField == "byteOrChar" || dataField == "precision" || dataField == "scale") {
									value = $(target).val();
									if (value != null && oldvalue != value) {
										dataFieldsObj['datatypeName'] = $("#alterTableDataType_" + rowIndex).val();
										dataFieldsObj['columnsize'] = $("#alterTableColumnSize_" + rowIndex).val();
										//                                      dataFieldsObj['byteOrChar'] = $("#alterTablebyteOrChar_" + rowIndex).val();
										dataFieldsObj['precision'] = $("#alterTableprecision_" + rowIndex).val();
										dataFieldsObj['scale'] = $("#alterTableScale_" + rowIndex).val();
										alterTableData[columnName] = dataFieldsObj;
									}
								} else if (dataField == "notNull") {
									var checked = $(target).prop("checked");
									if (checked) {
										$(target).val("NOT NUL")
										value = "NOT NULL";
									} else {
										$(target).val("NULL")
										value = "NULL"
									}
									if (value != null && oldvalue != value) {
										dataFieldsObj[dataField] = value;
										alterTableData[columnName] = dataFieldsObj;
									}
								} else if (dataField == "defaultValue") {
									value = $(target).val();
									if (value != null && oldvalue != value) {
										dataFieldsObj[dataField] = value;
										alterTableData[columnName] = dataFieldsObj;
									}
								}





							}

						});
                                                
                                                
                                                
                                                $("#refreshALterTableGrid").click(function(event){
                                                    
                                                    alterTableLoadGrid(DBValue, parentkey, connectionObj)
                                                })
                                                
                                                

                                                
			}




		},
		error: function(e) {
			sessionTimeout(e);
		}

	});
    
}

function addRecordToAlterTableGrid() {
	var rowData = {};
	rowData['alterTableHidden'] = 'INSERT';
	$("#tableAlterGrid").jqxGrid('addrow', null, rowData, 'last');
}

function generateAlterTableQuery(tableName, connectionObj) {

	$.ajax({
		type: 'post',
		traditional: true,
		dataType: 'json',
		cache: false,
		url: 'generateAlterTableQuery',
		async: true,
		data: {
			tableName: tableName,
			connObj: connectionObj,
			alterTableData: JSON.stringify(alterTableData),
			existingPKcols: $("#alterTablePKList").val()
		},
		success: function(response) {
			stopLoader();
			if (response != null && !jQuery.isEmptyObject(response)) {
				if (response['alterTableQueryList']!=null && response['alterTableQueryList'].length >0 ){
                                    var html ="";
                                    $.each(response['alterTableQueryList'], function(i){
                                        html+= "<div>"+this+"</div><br>";
                                    })
                                    
                                    $("#alterTableQueryDialog").remove();
                                    $("body").append("<div id='alterTableQueryDialog' ></div>");
                                    $("#alterTableQueryDialog").html(html);
                
                                    $("#alterTableQueryDialog").dialog({
                                            title: (labelObject['Alter Query'] != null ? labelObject['Alter Query'] : 'Alter Query'),
                                            modal: true,
                                            height: 400,
                                            width: 400,
                                            fluid: true,
                                            buttons: [
                                            {
                                                    text: (labelObject['Ok'] != null ? labelObject['Ok'] : 'Ok'),
                                                    click: function() {
                                                            $(this).html("");
                                                            //$(this).dialog("close");
                                                            $(this).dialog("destroy");
                                                            $("#alterTableQueryDialog").remove();
                                                    }
                                            }],
                                            open: function() {
                                                    $(this).closest(".ui-dialog").find(".ui-button").eq(1).addClass("dialogyes");
                                                    $(this).closest(".ui-dialog").find(".ui-button").eq(2).addClass("dialogno");
                                                    $(".visionHeaderMain").css("z-index", "999");
                                                    $(".visionFooterMain").css("z-index", "999");
                                            },
                                            beforeClose: function(event, ui) {
                                                    $("#alterTableQueryDialog").remove();
                                                    $(".visionHeaderMain").css("z-index", "99999");
                                                    $(".visionFooterMain").css("z-index", "99999");
                                            }
                                    });
                                } else {
                                    showMesg("No changes to Alter");
                                }
                                
			} else {
                            showMesg("No changes to Alter");
                        }
		},
		error: function(e) {
			sessionTimeout(e);
		}

	});
}

function commitAlterTable(tableName, connectionObj) {

	$.ajax({
		type: 'post',
		traditional: true,
		dataType: 'json',
		cache: false,
		url: 'executeAlterTable',
		async: true,
		data: {
			tableName: tableName,
			connObj: connectionObj,
			alterTableData: JSON.stringify(alterTableData),
			existingPKcols: $("#alterTablePKList").val()
		},
		success: function(response) {
			stopLoader();
			if (response != null) {
				//                var responseObj = JSON.parse(response);
				showMesg(response['message']);
				alterTableData = {};
				$("#dialog1").html("");
				//                $("#dialog1").dialog("close");
				$("#dialog1").dialog("destroy");
			}
		},
		error: function(e) {
			sessionTimeout(e);
		}

	});
}

function deleteColAlterTable(tableName, connectionObj) {
	var selectedrowindexes = $('#tableAlterGrid').jqxGrid('selectedrowindexes');
	var selectedColumnsList = [];
	$.each(selectedrowindexes, function(i) {
		var columnName = $("#alterTablecolumnName_" + selectedrowindexes[i]).attr("initval");
		selectedColumnsList.push(columnName);
	})
        showLoader();
	$.ajax({
		type: 'post',
		traditional: true,
		dataType: 'json',
		cache: false,
		url: 'dropColumnAlterTable',
		async: true,
		data: {
			tableName: tableName,
			connObj: connectionObj,
			selectedColumnsList: JSON.stringify(selectedColumnsList)
		},
		success: function(response) {
			stopLoader();
			if (response != null) {
				//                var responseObj = JSON.parse(response);
				showMesg(response['message']);
				alterTableData = {};
				$("#dialog1").html("");
				//                $("#dialog1").dialog("close");
				$("#dialog1").dialog("destroy");
			}
		},
		error: function(e) {
			sessionTimeout(e);
		}

	});
}


function renameOperatorDisplayLabel(title, $this) {
	$("#dialog").html("Rename Display label<br><input id='renameDisplayLabelId' value='"+title+"' />");
	$("#dialog").dialog({
		title: (labelObject['Message'] != null ? labelObject['Message'] : 'Message'),
		modal: true,
		width: 300,
		height: 135,
		fluid: true,
		buttons: [{
			text: (labelObject['Ok'] != null ? labelObject['Ok'] : 'Ok'),
			click: function() {
				var changedVal = $("#renameDisplayLabelId").val();
				var selectedOperatorId = $('#' + flowChartWorkSpaceId).flowchart('getSelectedOperatorId');
				var body = $('#' + flowChartWorkSpaceId).flowchart('getOperatorBody', selectedOperatorId);
				var title = changedVal;
				var elem = document.createElement('div');
				elem.innerHTML = body;
				$(elem).find(".visionOpLabelDiv").remove();
				body = elem.innerHTML;
				body += '<div class="visionOpLabelDiv" title="Double click to Rename" ondblclick="renameOperatorDisplayLabel(\'' + title + '\',this)" style="width:' + (title.length * 5) + 'px;margin-left:' + (((title.length * -5) / 2) + 14) + 'px;">' + title + '</div>';
				$('#' + flowChartWorkSpaceId).flowchart('setOperatorBody', selectedOperatorId, body);
				$(this).html("");
				//$(this).dialog("close");
				$(this).dialog("destroy");
			}

		}],
		open: function() {
			$(this).closest(".ui-dialog").find(".ui-button").eq(1).addClass("dialogyes");
			$(".visionHeaderMain").css("z-index", "999");
			$(".visionFooterMain").css("z-index", "999");
		},
		beforeClose: function(event, ui) {
			$(".visionHeaderMain").css("z-index", "99999");
			$(".visionFooterMain").css("z-index", "99999");
		}
	});
}


function setToOpDblCLickFuncName(fromOperatorId, toOperatorId) {
	var fromOpData = $("#" + flowChartWorkSpaceId).flowchart("getOperatorData", fromOperatorId);
	var toOpData = $("#" + flowChartWorkSpaceId).flowchart("getOperatorData", toOperatorId);
	var fromOpIcon = fromOpData['iconType'];
	if (fromOpIcon == "UNIQUE") {
		setDblCLickFuncNameToOpBody(toOperatorId, toOpData, 'uniqueComponent()')
	} else if (fromOpIcon == "MAP") {
		setDblCLickFuncNameToOpBody(toOperatorId, toOpData, 'viewTrfmRules()')
	}
}

function setDblCLickFuncNameToOpBody(toOperatorId, toOpData, functionName) {
	var body = $("#" + flowChartWorkSpaceId).flowchart("getOperatorBody", toOperatorId);
	$("#tempBodyDiv").remove();
	$('body').append("<div style='display:none;' id='tempBodyDiv'></div>")
	$("#tempBodyDiv").html(body);
	$("#tempBodyDiv").children(0).attr("ondblclick", functionName);
	var newBody = $("#tempBodyDiv").html();
	$('#' + flowChartWorkSpaceId).flowchart('setOperatorBody', toOperatorId, newBody);
	$("#tempBodyDiv").remove();
}

function loadOnScrollDown(event) {
	showLoader();
	var divId = $(event.target).attr("id");
	// filter issue
	var filterDivId = divId.replace("div-", "filter-");
	var filterValue = $("#" + filterDivId).val();
	if (filterValue != null && filterValue != "") {
		filterValue = "%" + filterValue + "%";
	}
	// filter issue
	var value = divId.split("-")[1];
	var parentkey = divId.split("-")[2].toUpperCase();
	;
	var level = '4';
	var arr = $("[id='" + divId + "']").find(".visionObjectNameDiv");
	var startIndex = arr.length + 1;
	var endIndex = arr.length + parseInt($("#treePageSize").val());
	var connectionObj;
	var tableListHtml = '';
	if (savedDBData != null && !jQuery.isEmptyObject(savedDBData)) {
		var conObj = savedDBData[value];
		if (conObj != null && !jQuery.isEmptyObject(conObj)) {
			connectionObj = conObj;
		}

	}
	var item = $("#savedConnections").jqxTree('getSelectedItem');
	//    var url = 'getTreePagingDataOpt';
	var url = 'getETLTreePagingDataOpt';
	if (item != null) {
		var level = item['level'];
		var parentEventItem = item['parentElement'];
		for (var i = level; i > 0; i--) {
			parentEventItem = parentEventItem['parentElement'];
		}
		var selectedItem = $('#savedConnections').jqxTree('getItem', parentEventItem);
		var selectedParentValue = selectedItem['value'];
		if (selectedParentValue != null && selectedParentValue != ''
			&& selectedParentValue != undefined && selectedParentValue == 'ERP') {
			url = 'getTreeErpConnectionDetails';
		}
	}
	var columnsObj = globalTreeObj['treeColumnObj'];
	var extTreeParams = $("#extTreeParams").val();
	var data = {
		parentkey: parentkey,
		treeId: globalTreeObj['treeId'],
		level: level,
		filterValue: filterValue,
		filterCondition: "LIKE",
		extTreeParams: extTreeParams,
		columnsObj: JSON.stringify(columnsObj),
		connectionObj: JSON.stringify(connectionObj),
		startIndex: startIndex,
		endIndex: endIndex
	};
	$.ajax({
		type: "post",
		traditional: true,
		dataType: 'json',
		url: url,
		cache: false,
		data: data,
		success: function(data, status, xhr) {

			$.each(data, function(index) {
				if (this.label == "Show More...") {

				} else {
					tableListHtml += '<div title=' + connectionObj['CONNECTION_NAME'] + ' . ' + this.label + ' class = "visionObjectNameDiv">\n\
                                     <img class="visionTableIcon" src="images/GridDB.svg"/><span> ' + this.label + '</span></div>'
				}
			});
			$("#" + divId + "-div").append(tableListHtml);
			var i = 0;
			var singleSelectedItem;
			$("div.visionObjectNameDiv").click(function(e) {
				if (e.ctrlKey) {
					$(this).toggleClass('selectedTabs', true);
					if (singleSelectedItem !== null && singleSelectedItem !== '' && singleSelectedItem !== undefined) {
						selectedItems[0] = singleSelectedItem;
					}
					selectedItems[i] = $(this).text();
					i++;
				} else {
					$(this).addClass("selectedTabs").siblings().removeClass('selectedTabs');
					singleSelectedItem = $(this).text();
					selectedItems = [];
					if (singleSelectedItem !== null && singleSelectedItem !== '' && singleSelectedItem !== undefined) {
						i = 1;
					} else {
						i = 0;
					}
				}
			});
			$("div.visionObjectNameDiv").draggable({
				cursor: "move",
				opacity: 0.7,
				helper: 'clone',
				//                                appendTo: 'body',
				zIndex: 1000,
				helper: function(event, ui) {
					var $this = $(this);
					var innerText = $this.text();
					var title = innerText;
					var descripttion = $this.attr("title");
					var value = this.parentElement.id.split("-")[1];
					var connectionObj;
					if (savedDBData != null && !jQuery.isEmptyObject(savedDBData)) {
						var conObj = savedDBData[value];
						if (conObj != null && !jQuery.isEmptyObject(conObj)) {
							connectionObj = conObj;
						}

					}

					var operatorData = {
						top: event.screenX,
						left: event.screenY,
						statusLabel: innerText.trim(),
						tableName: innerText.trim(),
						dragType: "Table",
						connObj: connectionObj,
						properties: {
							//body: '<div title="' + innerText + '" class="visionOpLabelDiv">' + innerText + '</div>',

							body: '<div  title="' + title + '" class=""><div><img src="images/GridDB.svg"\n\
                            class="visionOpIcons"  style="width:18px;height: 18px;"/></div></div><div class="visionOpLabelDiv" title="Double click to Rename" ondblclick="renameOperatorDisplayLabel(\'' + title + '\',this)" style="width:' + (title.length * 5) + 'px;margin-left:' + (((title.length * -5) / 2) + 14) + 'px;">' + title + '</div>',
							inputs: {
								input_1: {
									label: '',
									multipleLinks: true
								}
							},
							outputs: {
								output_1: {
									label: '',
								}
							}
						}
					};
					//            var obj = $('#flowchartworkSourcesspace').flowchart('getOperatorElement', operatorData);
					var contentSplitterStyle = $("#contentSplitter").css("display");
					var contentSplitter1Style = $("#contentSplitter1").css("display");
					var $flowchart;
					$flowchart = $('#' + flowChartWorkSpaceId);
					$("#draggableOperatorId").remove();
					var body = '<div id="draggableOperatorId" title="' + connectionObj['CONNECTION_NAME'] + ' . ' + this.label + '" class = "visionObjectNameDiv" style="cursor:pointer">'
						+ '<img class="visionTableIcon" src="images/GridDB.svg"/>'
						+ '<span> ' + innerText + '</span></div>';
					$("body").append(body);
					return $("#draggableOperatorId");
				},
				stop: function(e, ui) {
					var selItems = [];
					if (!(selectedItems != null && selectedItems.length != null && selectedItems.length > 0)) {
						selItems[0] = this.innerText;
					} else {
						selItems = [];
						for (var i = 0; i < selectedItems.length; i++) {
							selItems[i] = selectedItems[i];
						}
					}
					$(".flowchart-operator-connector-label").hide();
					var contentSplitterStyle = $("#contentSplitter").css("display");
					var contentSplitter1Style = $("#contentSplitter1").css("display");
					var $flowchart;
					var $container;
					$flowchart = $('#' + flowChartWorkSpaceId);
					$container = $('#' + flowChartWorkSpaceId);
					//                    var $flowchart = $('#flowchartworkSourcesspace');
					//                    var $container = $('#flowchartworkSourcesspace');
					var elOffset = ui.offset;
					var containerOffset = $container.offset();
					if (elOffset.left > containerOffset.left &&
						elOffset.top > containerOffset.top &&
						elOffset.left < containerOffset.left + $container.width() &&
						elOffset.top < containerOffset.top + $container.height()) {
						var flowchartOffset = $flowchart.offset();
						var relativeLeft = elOffset.left - flowchartOffset.left;
						var relativeTop = elOffset.top - flowchartOffset.top;
						var positionRatio = $flowchart.flowchart('getPositionRatio');
						relativeLeft /= positionRatio;
						relativeTop /= positionRatio;
						elOffset.left = relativeLeft;
						elOffset.top = relativeTop;
					}
					var top = elOffset.top;
					for (var j = 0; j < selItems.length; j++) {
						// ravi start
						trfmRulesChanged = true;
						// ravi end
						var $this = $(this);
						var innerText = selItems[j];
						var title = innerText;
						var value = this.parentElement.id.split("-")[1];
						var connectionObj;
						if (savedDBData != null && !jQuery.isEmptyObject(savedDBData)) {
							var conObj = savedDBData[value];
							if (conObj != null && !jQuery.isEmptyObject(conObj)) {
								connectionObj = conObj;
							}

						}

						var data = {
							top: top,
							left: elOffset.left,
							statusLabel: innerText.trim(),
							tableName: (connectionObj['CONN_CUST_COL1'] != 'SAP_ECC' && connectionObj['CONN_CUST_COL1'] != 'SAP_HANA') ? (connectionObj['CONN_USER_NAME'] + '.' + innerText.trim()) : innerText.trim(),
							//                            tableName: connectionObj['CONN_USER_NAME'] + "." + innerText.trim(),
							dragType: "Table",
							CONNECTION_NAME: connectionObj['CONNECTION_NAME'], //CONNECTION_NAME
							CONN_DB_NAME: connectionObj['CONN_DB_NAME'], //CONN_DB_NAME
							CONN_CUST_COL1: connectionObj['CONN_CUST_COL1'], //CONN_CUST_COL1
							connObj: connectionObj,
							//                statusLabel: innerText,
							properties: {

								//                                title: innerText,
								//  body: '<div  title="' + title + '"  class="visionOpLabelDiv">' + innerText + '</div>',
								body: '<div  title="' + connectionObj['CONNECTION_NAME'] + ' . ' + title + '" class=""><div title="Double Click here to view the Transformations rules(' + connectionObj['CONNECTION_NAME'] + '.' + title + ')" style="cursor:pointer"><img src="images/GridDB.svg"'
									+ 'class="visionOpIcons"  ondblclick=viewTrfmRules()  style="width:18px;height: 18px;padding-top: 6px;"/></div>'

									+ '</div><div class="visionOpLabelDiv" title="Double click to Rename" ondblclick="renameOperatorDisplayLabel(\'' + title + '\',this)" style="width:' + (title.length * 5) + 'px;margin-left:' + (((title.length * -5) / 2) + 14) + 'px;">' + title + '</div>',
								inputs: {
									input_1: {
										label: 'I-MAP',
										multipleLinks: true
									}
								},
								outputs: {
									output_1: {
										label: 'O-MAP',
									}
								}
							}
						};
						var operatorId = $flowchart.flowchart('addOperator', data);
						$(".flowchart-operator-connector-label").hide();
						$(".flowchart-operator-title").hide();
						top = top + 70;
						//                        var component = $(this).attr("component");
						//                        if (component != "Y") {
						//                            inputOutPutPopUp(operatorId);
						//                        }
					}
				}
			});
			stopLoader();
		},
		error: function(e) {
			console.log(e);
			sessionTimeout(e);
			stopLoader();
		}
	});
}


function setDBConnection($this, columnType, titleName, connCustCol2) {
	if (columnType == 'ALL_TABLE' || columnType == 'ALL_SCHEMA') {//ALL_TABLE 
		if (!(titleName != null && titleName != '')) {
			titleName = "Functions";
		}
		$("#columnMappingDialog").html("<div id='columnMappingTree' class='columnMappingTree'></div>");
		$("#columnMappingDialog").dialog({
			title: (labelObject[titleName] != null ? labelObject[titleName] : titleName),
			modal: true,
			width: 400,
			maxWidth: 1000,
			height: 430,
			fluid: true,
			buttons: [{
				text: (labelObject['Ok'] != null ? labelObject['Ok'] : 'Ok'),
				click: function() {
					var selection = $("#columnMappingTree").jqxTreeGrid('getSelection');
					if (selection != null && selection.length != 0) {
						var selectedRowData = selection[0];
						var selectedOperatorId = $('#' + flowChartWorkSpaceId).flowchart('getSelectedOperatorId');
						var selectedOperatorData = $("#" + flowChartWorkSpaceId).flowchart('getOperatorData', selectedOperatorId);
						var connObjStr = selectedRowData['CONNECTION_OBJ'];
						var connObj;
						if (connObjStr != null) {
							connObj = JSON.parse(connObjStr);
							selectedOperatorData['CONNECTION_NAME'] = connObj['CONNECTION_NAME'];
							selectedOperatorData['CONN_DB_NAME'] = connObj['CONN_DB_NAME'];
							selectedOperatorData['CONN_CUST_COL1'] = connObj['CONN_CUST_COL1'];
							delete connObj['CONN_CUST_COL2'];
							delete connObj['CONN_CUST_COL3'];
						}
						selectedOperatorData['queryConnObj'] = connObj;
						selectedOperatorData['connObj'] = savedDBData['Current_V10'];
						selectedOperatorData['tableName'] = "ZZ_TEMP_" + selectedOperatorData['timeStamp'];
						selectedOperatorData['statusLabel'] = "ZZ_TEMP_" + selectedOperatorData['timeStamp'];
						selectedOperatorData['tableNameLabel'] = selectedOperatorData['iconType'] + "_OUTPUT_" + selectedOperatorData['operatorId'];
						$("#" + flowChartWorkSpaceId).flowchart('setOperatorData', selectedOperatorId, selectedOperatorData);
						$(this).html("");
						//                        $("#columnMappingDialog").dialog("close");
						$(this).dialog("destroy");
					}
				}

			}],
			open: function() {
				$("#columnMappingTree").jqxTreeGrid(
					{
						width: "100%",
						virtualModeCreateRecords: function(expandedRecord, done) {
							// expandedRecord is equal to null when the function is initially called, because there is still no record to be expanded.
							// prepare the data
							var source =
							{
								dataType: "json",
								dataFields: [
									{ name: 'CONNECTION_OBJ', type: 'string' },
									{ name: 'TABLE_NAME', type: 'string' },
									{ name: 'CONNECTION_NAME', type: 'string' },
									{ name: 'LEVEL_TYPE', type: 'string' },
									{ name: 'icon', type: 'string' },
									{ name: 'ID', type: 'string' },
									{ name: 'CONNECTION_TYPE', type: 'string' }
								],
								hierarchy:
								{
									keyDataField: { name: 'TABLE_NAME' },
									parentDataField: { name: 'CONNECTION_NAME' }
								},
								id: 'ID',
								url: "getLookupAllTables",
								method: "post",
								data: {
									expandedRecord: JSON.stringify(expandedRecord),
									columnType: columnType,
									connCustCol2: connCustCol2 // ravi predefined connections
								}
							};
							var dataAdapter = new $.jqx.dataAdapter(source,
								{
									formatData: function(data) {
										if (expandedRecord == null) {
											data.$filter = "(CONNECTION_NAME eq null)"
										} else {
											data.$filter = "(CONNECTION_NAME eq " + expandedRecord.TABLE_NAME + ")"
										}
										return data;
									},
									loadComplete: function() {
										done(dataAdapter.records);
										stopLoader();
									},
									loadStart: function() {
										showLoader();
									},
									loadError: function(xhr, status, error) {
										stopLoader();
										done(false);
										throw new Error("Error: " + error.toString());
									}
								}
							);
							dataAdapter.dataBind();
						},
						virtualModeRecordCreating: function(record) {

						},
						height: 350,
						sortable: true,
						columnsResize: true,
						columnsReorder: true,
						enableHover: true,
						enableBrowserSelection: true,
						//                           filterable: true,
						filterable: true,
						//                            filterMode: 'simple',
						icons: true,
						hierarchicalCheckboxes: true,
						pageable: true,
						pagerMode: 'advanced',
						pagerPosition: 'bottom',
						pageSize: 100,
						pageSizeOptions: ['100', '200', '300'],
						//                            theme: 'energyblue',
						selectionMode: 'singleRow',
						autoShowLoadElement: false,
						columns: [
							{ text: 'Table/Schem Name', dataField: 'TABLE_NAME', width: '80%', filterable: true },
							{ text: 'Database Type', dataField: 'CONNECTION_TYPE', width: '30%', filterable: true },
							{ text: 'CONNECTION_NAME', dataField: 'CONNECTION_NAME', hidden: true, width: 160, filterable: false },
							{ text: 'LEVEL_TYPE', dataField: 'LEVEL_TYPE', hidden: true, width: 160, filterable: false },
							{ text: 'ID', dataField: 'ID', hidden: true, width: 160, filterable: false },
							{ text: 'CONNECTION_OBJ', dataField: 'CONNECTION_OBJ', hidden: true, width: 160, filterable: false }
						]
					});
				$('#columnMappingTree').on('rowDoubleClick', function(event) {
					var args = event.args;
					var selectedRowData = args.row;
					var source = $("#columnMappingTree").jqxTreeGrid('source');
					if (selectedRowData != null
						&& !jQuery.isEmptyObject(selectedRowData)
						&& selectedRowData['CONNECTION_NAME'] != null && selectedRowData['CONNECTION_NAME'] != '') {
						$("#columnMappingDialog").html("");
						//                        $("#columnMappingDialog").dialog("close");
						$("#columnMappingDialog").dialog("destroy");
						//                      
						$($this).parents("td").find("input").val(selectedRowData['CONNECTION_NAME'] + "." + selectedRowData['TABLE_NAME']);
						$($this).parents("td").find("input").attr("title", selectedRowData['CONNECTION_NAME'] + "." + selectedRowData['TABLE_NAME']);
						$($this).parents("td").find("input").attr("data-conobjstr", selectedRowData['CONNECTION_OBJ']);
					}
				});
				$(this).closest(".ui-dialog").find(".ui-button").eq(1).addClass("dialogyes");
				$(".visionHeaderMain").css("z-index", "999");
				$(".visionFooterMain").css("z-index", "999");
				$(".ui-dialog").addClass('visionDMTreePopup');
			},
			beforeClose: function(event, ui) {

				$(".visionHeaderMain").css("z-index", "99999");
				$(".visionFooterMain").css("z-index", "99999");
			}, close: function(event, ui) {

				$(this).html("");
				try {
					$("#columnMappingTree").jqxTreeGrid('destroy');
					$("#columnMappingTree").remove();
					$("#treeSearchInputDiv").remove();
				} catch (e) {
				}
			}
		});
	} else if (columnType == 'TO_COLUMN') {
		selectColumn($this, 'toColumn');
	} else if (columnType == 'LOOKUP_TABLE,COLUMN') {

		var lookupTableName = $("#" + columnType.split(",")[0]).val();
		if (lookupTableName != null && lookupTableName != '') {
			lookupTableName = lookupTableName.split(".")[1];
		}
		var connObjStr = $("#" + columnType.split(",")[0]).attr("data-conobjstr");
		$.ajax({
			datatype: "json",
			type: "post",
			traditional: true,
			url: 'getSelectedLookupTableColumns',
			cache: false,
			data: {
				lookupTableName: lookupTableName,
				connObj: connObjStr
			},
			success: function(response, status, xhr) {

				selectColumn($this, columnType, response);
			},
			error: function(e) {
				console.log(e);
				sessionTimeout(e);
				stopLoader();
			}
		});
	} else if (columnType == 'FROM_COLUMN') {
		selectColumn($this, 'fromColumn');
	} else if (columnType == 'CHILD_COLUMN') {
		selectColumn($this, 'childColumn');
	} else if (columnType == 'MASTER_COLUMN') {
		selectColumn($this, 'masterColumn');
	} else if (columnType == 'FROM_WHERE_CLAUSE_COLUMN') {
		selectColumn($this, 'fromWhereClauseColumn');
	}
}


function setDatabaseConnection(dbType) {
	var selectedOperatorId = $('#' + flowChartWorkSpaceId).flowchart('getSelectedOperatorId');
	var selectedOperatorData = $("#" + flowChartWorkSpaceId).flowchart('getOperatorData', selectedOperatorId);
	var connectionsDiv = "<table id='setConnectionsTable'>"
		+ "<tr><td>Connection Type</td><td><div id ='connectionTypeComboBox'></div></td></tr>"
		+ "<tr><td>Connection</td><td><div id ='connectionComboBox'></div></td></tr>"
		+ "<tr><td>Schema Object Type</td><td><div id ='schemaObjectTypesComboBox'></div></td></tr>"
		+ "<tr><td>Schema Object</td><td><div id ='schemaObjectsComboBox'></div></td></tr>"
		+ "</table>"



	$("#etldialog").html(connectionsDiv);
	$("#etldialog").dialog({
		title: (labelObject['Message'] != null ? labelObject['Message'] : 'Set Connection'),
		modal: true,
		height: 'auto',
		minWidth: 300,
		width: 500,
		fluid: true,
		buttons: [{
			text: (labelObject['Ok'] != null ? labelObject['Ok'] : 'Ok'),
			click: function() {
				var connectionName = $("#connectionComboBox").find("input").val();
				var connectionObj = savedDBData[connectionName];
				var schemaObjectType = $("#schemaObjectTypesComboBox").find("input").val();
				var tableName = connectionObj['CONN_USER_NAME'] + "." + $("#schemaObjectsComboBox").find("input").val();
				var statusLabel = $("#schemaObjectsComboBox").find("input").val();
				selectedOperatorData['connObj'] = connectionObj;
				selectedOperatorData['tableName'] = tableName
				selectedOperatorData['dragType'] = 'Table'
				selectedOperatorData['schemaObjectType'] = schemaObjectType
				selectedOperatorData['statusLabel'] = statusLabel
				$("#" + flowChartWorkSpaceId).flowchart('setOperatorData', selectedOperatorId, selectedOperatorData);
				var title = statusLabel;
				var body = $("#" + flowChartWorkSpaceId).flowchart('getOperatorBody', selectedOperatorId);
				var elem = document.createElement('div');
				elem.innerHTML = body;
				$(elem).find(".visionOpLabelDiv").remove();
				body = elem.innerHTML;
				body += '<div class="visionOpLabelDiv" title="Double click to Rename" ondblclick="renameOperatorDisplayLabel(\'' + title + '\',this)" style="width:' + (title.length * 5) + 'px;margin-left:' + (((title.length * -5) / 2) + 14) + 'px;">' + title + '</div>';
				$('#' + flowChartWorkSpaceId).flowchart('setOperatorBody', selectedOperatorId, body);
				$(this).html("");
				//                        //$(this).dialog("close");
				$(this).dialog("destroy");
			}
		}],
		open: function() {
			//                $(".js-example-placeholder-single").select2({
			//                    placeholder: "Select Database",
			//                    allowClear: true
			//                });

			$(".ui-dialog").addClass('setConnectionPopup');
			//            setTimeout(function(){
			$("#connectionTypeComboBox").jqxComboBox({
				source: [''],
				width: '200px',
				animationType: 'slide',
				placeHolder: "Select Connection Type"
			});
			$('#connectionTypeComboBox').on('open', function(event) {
				var inputval = $("#connectionTypeComboBox").find("input").val();
				$.ajax({
					type: "post",
					traditional: true,
					dataType: 'json',
					url: 'getAvaliableConnections',
					cache: false,
					data: {
						connectionType: dbType,
					},
					success: function(response) {

						if (response != null && response != "") {
							var availableConnTypes = [];
							if (dbType == "ERP") {
								var availableConnectionTypesArray = response['availableConnectionTypes'];
								availableConnTypes = availableConnTypes.concat(availableConnectionTypesArray);
							} else if (dbType == "DB") {
								var availableConnectionTypesObj = response['availableConnectionTypes'];
								$.each(availableConnectionTypesObj, function(i) {
									var rowData = availableConnectionTypesObj[i];
									availableConnTypes.push(rowData[5]);
								})
							}

							$("#connectionTypeComboBox").jqxComboBox({ source: availableConnTypes });
							$("#connectionTypeComboBox").find("input").val(inputval);
						}
					},
					error: function(e) {
						console.log(e);
						sessionTimeout(e);
						stopLoader();
					}
				});
			});
			$("#connectionComboBox").jqxComboBox({
				source: [''],
				width: '200px',
				animationType: 'slide',
				placeHolder: "Select Connection"
			});
			$('#connectionComboBox').on('open', function(event) {
				var inputval = $("#connectionComboBox").find("input").val();
				var connectionType = $("#connectionTypeComboBox").find("input").val();
				$.ajax({
					type: "post",
					traditional: true,
					dataType: 'json',
					url: 'getAvaliableSchemas',
					cache: false,
					data: {
						schema: connectionType,
						type: dbType,
						schemaImage: 'images/DM_ORACLE.png'
					},
					success: function(response) {

						if (response != null && response != "") {
							var availableConnections = response['availableConnections'];
							$("#connectionComboBox").jqxComboBox({ source: availableConnections });
							$("#connectionComboBox").find("input").val(inputval);
						}
					},
					error: function(e) {
						console.log(e);
						sessionTimeout(e);
						stopLoader();
					}
				});
			});
			$("#schemaObjectTypesComboBox").jqxComboBox({
				source: [''],
				width: '200px',
				animationType: 'slide',
				placeHolder: "Select Schema Object Type"
			});
			$('#schemaObjectTypesComboBox').on('open', function(event) {
				var inputval = $("#schemaObjectTypesComboBox").find("input").val();
				var dbName = $("#connectionComboBox").find("input").val();
				var connectionType = $("#connectionTypeComboBox").find("input").val();
				$.ajax({
					type: "post",
					traditional: true,
					dataType: 'json',
					url: 'getDatabaseTables',
					cache: false,
					data: {
						dbName: dbName,
						DbType: connectionType,
						schemaType: dbType,
						schemaImage: 'images/DM_ORACLE.png'
					},
					success: function(response) {

						if (response != null && response != "") {
							var availableSchemaObjectTypes = response['availableSchemaObjectTypes'];
							var schemaObjetTypes = [];
							$.each(availableSchemaObjectTypes, function(i) {
								var rowData = availableSchemaObjectTypes[i];
								schemaObjetTypes.push(rowData[0]);
							})
							$("#schemaObjectTypesComboBox").jqxComboBox({ source: schemaObjetTypes });
							$("#schemaObjectTypesComboBox").find("input").val(inputval);
						}
					},
					error: function(e) {
						console.log(e);
						sessionTimeout(e);
						stopLoader();
					}
				});
			});
			//getSelectedDbTables('TABLES','DXP','Oracle','DB')
			$("#schemaObjectsComboBox").jqxComboBox({
				source: [''],
				width: '200px',
				animationType: 'slide',
				placeHolder: "Select Table"
			});
			$('#schemaObjectsComboBox').on('open', function(event) {
				showLoader();
				getSchemaObjectsListforComboBox(0, 50, [], dbType);
			});
			$('#schemaObjectsComboBox').on('select', function(event) {
				var value = event.args.item.label;
				if (value != null && value == "Show More") {
					return false;
					throw new Error("Hover on Show more ");
				}
			});
			$('#dropdownlistArrowschemaObjectsComboBox').on('click', function(event) {

			});
			$("#schemaObjectsComboBox").find("input").on("keyup", function(event) {
				clearTimeout(timeOut);
				timeOut = setTimeout(function() {
					var filterValue = $(event.target).val();
					var inputval = $(event.target).val();
					if (filterValue != null && filterValue != "") {
						filterValue = "%" + filterValue + "%";
					}
					var connectionType = $("#connectionTypeComboBox").find("input").val();
					var connectionName = $("#connectionComboBox").find("input").val();
					var schemaObjectType = $("#schemaObjectTypesComboBox").find("input").val();
					var selectedLevelValue = schemaObjectType;
					var selectConnObj = savedDBData[connectionName];
					var selectedLevel = '4'
					var selectColumnsObj = globalTreeObj['treeColumnObj']
					var selectBoxValue = "LIKE"

					selectedLevelValue = selectedLevelValue.toUpperCase();
					var url;
					if (dbType == "ERP") {
						url = 'getTreeErpConnectionDetails'
					} else {
						url = 'fetchSchemaTables'
					}
					showLoader();
					$.ajax({
						type: "post",
						traditional: true,
						dataType: 'json',
						url: url,
						cache: false,
						data: {
							parentkey: ((selectedLevelValue != null && selectedLevelValue != '') ? selectedLevelValue.toUpperCase() : ""),
							level: selectedLevel,
							columnsObj: JSON.stringify(selectColumnsObj),
							connectionObj: JSON.stringify(selectConnObj),
							filterValue: filterValue,
							filterCondition: selectBoxValue,
							startIndex: 0,
							endIndex: $("#treePageSize").val()
						},
						success: function(data, status, xhr) {
							stopLoader();
							var tableListHtml = "";
							stopLoader();
							var schemaObjectsList = [];
							$.each(data, function(index) {

								var schemaObject = this;
								var schemaObjectName = schemaObject['value'];
								schemaObjectsList.push(schemaObjectName);
							});
							$("#schemaObjectsComboBox").jqxComboBox({ source: schemaObjectsList });
							$("#schemaObjectsComboBox").find("input").val(inputval);
						},
						error: function(e) {
							console.log(e);
							sessionTimeout(e);
							stopLoader();
						}
					});
				}, 1000);
			})

			if (selectedOperatorData != null) {
				var connObj = selectedOperatorData['connObj'];
				if (connObj != null) {
					var connectionType = connObj['CONN_CUST_COL1'];
					var connectionName = connObj['CONNECTION_NAME'];
					$("#connectionTypeComboBox").find("input").val(connectionType);
					$("#connectionComboBox").find("input").val(connectionName);
				}

				var schemaObjectType = selectedOperatorData['schemaObjectType'];
				var tableName = selectedOperatorData['tableName'];
				var statusLabel = selectedOperatorData['statusLabel'];
				$("#schemaObjectTypesComboBox").find("input").val(schemaObjectType);
				$("#schemaObjectsComboBox").find("input").val(statusLabel);
			}

			//            }, 50)

			$(this).closest(".ui-dialog").css("z-index", "9999")
			$(this).closest(".ui-dialog").find(".ui-button").eq(1).addClass("dialogyes");
			$(".visionHeaderMain").css("z-index", "999");
			$(".visionFooterMain").css("z-index", "999");
		},
		beforeClose: function(event, ui) {
			$(".visionHeaderMain").css("z-index", "99999");
			$(".visionFooterMain").css("z-index", "99999");
		}
	});
}

function getSchemaObjectsListforComboBox(startIndex, endIndex, schemaObjectsList, dbType) {
	var schemaObjectsList = [];
	var inputval = $("#schemaObjectsComboBox").find("input").val();
	var connectionType = $("#connectionTypeComboBox").find("input").val();
	var connectionName = $("#connectionComboBox").find("input").val();
	var schemaObjectType = $("#schemaObjectTypesComboBox").find("input").val();
	var connectionObj;
	if (savedDBData != null && !jQuery.isEmptyObject(savedDBData)) {
		var connObj = savedDBData[connectionName];
		if (connObj != null && !jQuery.isEmptyObject(connObj)) {
			connectionObj = connObj;
		}
	}
	var columnsObj = globalTreeObj['treeColumnObj'];
	var data = {
		parentkey: schemaObjectType,
		connectionObj: JSON.stringify(connectionObj),
		startIndex: startIndex != null ? startIndex : 0,
		endIndex: endIndex != null ? endIndex : 50,
		columnsObj: JSON.stringify(columnsObj)
	};
	var url;
	if (dbType == "ERP") {
		url = 'getTreeErpConnectionDetails'
	} else {
		url = 'fetchSchemaTables'
	}
	$("#Loader").css("display", "block");
	if (true) {

		$.ajax({
			type: "post",
			traditional: true,
			dataType: 'json',
			url: url,
			cache: false,
			data: data,
			async: false,
			success: function(response) {
				stopLoader();
				if (response != null && response != "") {
					$.each(response, function(i) {
						var schemaObject = response[i];
						var schemaObjectName = schemaObject['value'];
						schemaObjectsList.push(schemaObjectName);
					})
					var newSchemaObjectsList = []
					if (schemaObjectsList.length % 50 == 0) {
						newSchemaObjectsList = newSchemaObjectsList.concat(schemaObjectsList);
						newSchemaObjectsList.push("Show More");
					}

					$("#schemaObjectsComboBox").jqxComboBox({ source: newSchemaObjectsList });
					$("#schemaObjectsComboBox").find("input").val(inputval);
					setTimeout(function() {
						//                        $('.jqx-listitem-element').find('div:contains("Show More")').hover( function (event)
						$('.jqx-listitem-element').unbind("mouseenter").on("mouseenter", function(event) {
							var span = $('.jqx-listitem-element').find('span:contains("Show More")');
							if (span.length > 0) {
								clearTimeout(timeOut);
								timeOut = setTimeout(function() {
									startIndex = startIndex + 50;
									endIndex = 50;
									var source = $("#schemaObjectsComboBox").jqxComboBox('source');
									if (source.indexOf("Show More") > -1) {
										source.splice(source.indexOf("Show More"), 1);
									}
									var schemaObjectsList = getSchemaObjectsListforComboBox(startIndex, endIndex, [], dbType);
									if (source.length % 50 == 0) {
										schemaObjectsList = source.concat(schemaObjectsList);
										schemaObjectsList.push("Show More");
									}
									$("#schemaObjectsComboBox").jqxComboBox({ source: schemaObjectsList });
									$("#schemaObjectsComboBox").find("input").val(inputval);
								}, 1000)
							}
						});
					}, 1000)

				}

			},
			error: function(e) {
				console.log(e);
				sessionTimeout(e);
				stopLoader();
			}
		});
	}
	return schemaObjectsList;
}

function setFilePath() {
	var selectedOperatorId = $('#' + flowChartWorkSpaceId).flowchart('getSelectedOperatorId');
	var selectedOperatorData = $("#" + flowChartWorkSpaceId).flowchart('getOperatorData', selectedOperatorId);
	var filePathDiv = "<div>"
		+ "<table>"
		+ "<tr><td>File Type</td><td>"
		+ "<select id='selectFileTypeId'>"
		+ "<option selected >XLSX</option>"
		+ "<option>XLS</option>"
		+ "<option>CSV</option>"
		+ "<option>TXT</option>"
		+ "<option>JSON</option>"
		+ "<option>XML</option>"
		+ "</select>"
		+ "</td></tr>"
		+ "<tr><td>FilePath</td><td><input type='text' id='setFilePathId' value='' /></td></tr>"
		+ "<tr></tr>"
		+ "</table>"
		+ "</div>"
	$("#dialog").html(filePathDiv);
	$("#dialog").dialog({
		title: 'Set File Path',
		modal: true,
		width: 300,
		height: 135,
		fluid: true,
		buttons: [{
			text: (labelObject['Ok'] != null ? labelObject['Ok'] : 'Ok'),
			click: function() {

				var connectionObj = {};
				var fileType = $("#selectFileTypeId").val();
				fileType = "." + fileType.toLowerCase();
				var filePath = $("#setFilePathId").val();
				var fileName = filePath.substring(filePath.lastIndexOf("\\") + 1);
				var imageIcon = "";
				if (fileType == '.xls'
					|| fileType == '.xlsx'
					|| fileType == '.XLS'
					|| fileType == '.XLSX'
				) {
					imageIcon = "images/XLSX-Icon.svg"
				} else if (fileType == '.xml'
					|| fileType == '.XML') {
					imageIcon = "images/XML-Icon.svg";
				} else if (fileType == '.CSV'
					|| fileType == '.csv') {
					imageIcon = "images/CSV-Icon.svg";
				} else if (fileType == '.JSON'
					|| fileType == '.json') {
					imageIcon = "images/JSON_Icon.svg";
				}
				connectionObj['imageIcon'] = imageIcon;
				connectionObj['fileName'] = fileName;
				connectionObj['filePath'] = filePath;
				connectionObj['fileType'] = fileType;
				selectedOperatorData['connObj'] = connectionObj;
				selectedOperatorData['dragType'] = 'File';
				selectedOperatorData['filePath'] = filePath

				$("#" + flowChartWorkSpaceId).flowchart('setOperatorData', selectedOperatorId, selectedOperatorData);
				var title = fileName;
				var body = $("#" + flowChartWorkSpaceId).flowchart('getOperatorBody', selectedOperatorId);
				var elem = document.createElement('div');
				elem.innerHTML = body;
				$(elem).find(".visionOpLabelDiv").remove();
				body = elem.innerHTML;
				body += '<div class="visionOpLabelDiv" title="Double click to Rename" ondblclick="renameOperatorDisplayLabel(\'' + title + '\',this)" style="width:' + (title.length * 5) + 'px;margin-left:' + (((title.length * -5) / 2) + 14) + 'px;">' + title + '</div>';
				body = body.replaceAll("images/ETL_File.png", imageIcon);
				$('#' + flowChartWorkSpaceId).flowchart('setOperatorBody', selectedOperatorId, body);
				$(this).html("");
				//$(this).dialog("close");
				$(this).dialog("destroy");
			}

		}],
		open: function() {

			var connObj = selectedOperatorData['connObj'];
			if (connObj != null) {
				var filePath = connObj['filePath'];
				var fileType = connObj['fileType'];
				fileType = fileType.substring(1).toUpperCase();
				$("#selectFileTypeId").val(fileType);
				$("#setFilePathId").val(filePath);
			}

			$(this).closest(".ui-dialog").find(".ui-button").eq(1).addClass("dialogyes");
			$(".visionHeaderMain").css("z-index", "999");
			$(".visionFooterMain").css("z-index", "999");
		},
		beforeClose: function(event, ui) {
			$(".visionHeaderMain").css("z-index", "99999");
			$(".visionFooterMain").css("z-index", "99999");
		}
	});
}

function undo() {

	var flowchartData = $('#' + flowChartWorkSpaceId).flowchart('getData');
	var flowchartOperatorTypes = flowchartData['operatorTypes'];
	var allEditInfokeys = Object.keys(flowchartOperatorTypes);
	var editInfokeys = [];
	$.each(allEditInfokeys, function(i) {
		if (this.indexOf("CREATE") > -1) {
			editInfokeys.push(this);
		}
	})
	var lastIndex = editInfokeys.length - 1;
	var undoObjKey = editInfokeys[lastIndex];
	var undoObj = flowchartOperatorTypes[undoObjKey];
	var undoObjType = undoObjKey.split("_")[0];
	var undoObjId = undoObjKey.split("_")[1];
	if (undoObjType == "OPERATORCREATE") {
		$('#' + flowChartWorkSpaceId).flowchart('deleteOperator', parseInt(undoObjId));
	} else if (undoObjType == "LINKCREATE") {
		$("#" + flowChartWorkSpaceId).flowchart('deleteLink', parseInt(undoObjId));
	}
	delete flowchartOperatorTypes[undoObjKey];
	var flowchartData = $('#' + flowChartWorkSpaceId).flowchart('getData');
	flowchartData['operatorTypes'] = flowchartOperatorTypes;
	$('#' + flowChartWorkSpaceId).flowchart('setData', flowchartData);
}

function redo() {

	var flowchartData = $('#' + flowChartWorkSpaceId).flowchart('getData');
	var flowchartOperatorTypes = flowchartData['operatorTypes'];
	var allEditInfokeys = Object.keys(flowchartOperatorTypes);
	var editInfokeys = [];
	$.each(allEditInfokeys, function(i) {
		if (this.indexOf("DELETE") > -1) {
			editInfokeys.push(this);
		}
	})
	var lastIndex = editInfokeys.length - 1;
	var undoObjKey = editInfokeys[lastIndex];
	var undoObj = flowchartOperatorTypes[undoObjKey];
	var undoObjType = undoObjKey.split("_")[0];
	var undoObjId = undoObjKey.split("_")[1];
	if (undoObjType == "DELETELINK") {
		$("#" + flowChartWorkSpaceId).flowchart('createLink', parseInt(undoObjId), undoObj);
	} else if (undoObjType == "OPERATORDELETE") {
		$('#' + flowChartWorkSpaceId).flowchart('createOperator', parseInt(undoObjId), undoObj);
	}
	delete flowchartOperatorTypes[undoObjKey];
	var flowchartData = $('#' + flowChartWorkSpaceId).flowchart('getData');
	flowchartData['operatorTypes'] = flowchartOperatorTypes;
	$('#' + flowChartWorkSpaceId).flowchart('setData', flowchartData);
}

function refreshMappingTables() {

	treeSavedConnections(globalTreeObj, 'savedConnections');
}


function showPdf(filePath, fileName, gridId) {

	//    var filePath = data['filePath'];
	//    var fileName = data['fileName'];
	//    var fileType = data['fileType'];
	//    var gridId = data['gridId'];
	filePath = filePath.replaceAll("\\", "---");
	filePath = filePath.replaceAll("/", "---");
	var selectedItemIndex = $('#dataViewDiv').jqxTabs('selectedItem');
	var divStr = "<div>"
		+ "<div id='personalize_" + gridId + "'>" + "</div>"
		+ "<div id='main_" + gridId + "'>"
		+ "<div id='" + gridId + "'></div>"
		+ "</div>"
		+ "</div>";
	if (selectedItemIndex == null) {
		//$("#designViewTab").jqxTabs('select', 1);
		switchETLDesignTabs("li_contentView", "dataViewDiv");
		$("#dataViewDiv").prepend("<ul></ul>");
		$("#dataViewDiv ul").prepend("<li title='" + fileName + "'>" + fileName + "</li>");
		$("#dataViewDiv").append(divStr);
		$('#dataViewDiv').jqxTabs({ width: "100%", height: "100%", position: 'top', theme: 'ui-redmond', reorder: true });
		$('#dataViewDiv').jqxTabs('showAllCloseButtons');
		$("#dataViewDiv").find("li.jqx-tabs-title").find("div.jqx-tabs-close-button").css("background-image", "url(images/close.png)");
		$("#dataViewDiv").find("li.jqx-tabs-title-selected-top").find("div.jqx-tabs-close-button").css("background-image", "url(images/close.png)");
	} else {
		switchETLDesignTabs("li_contentView", "dataViewDiv");
		$('#dataViewDiv').jqxTabs('addLast', fileName, divStr);
	}


	var pdfContent = "<iframe id='thedialog' style='width: 100%; height:500px;' src='readPDF?filePath=" + filePath + "' ></iframe>";
	$("#" + gridId).html(pdfContent);
}




function selectJobOnJobSuccess($this) {
	var selectedThis = $("#" + flowChartWorkSpaceId + " .selected");
	var operatorOutPut = $("#" + flowChartWorkSpaceId + " .selected").find(".flowchart-operator-outputs").find(".flowchart-operator-connector-arrow");
	$(operatorOutPut).trigger("click");
	$('#' + flowChartWorkSpaceId).flowchart({

		onLinkCreate: function(linkId, linkData) {
			var fromOperatorId = linkData['fromOperator'];
			var fromOperatorData = $("#" + flowChartWorkSpaceId).flowchart('getOperatorData', fromOperatorId);
			var toOperatorId = linkData['toOperator'];
			var toOperatorData = $("#" + flowChartWorkSpaceId).flowchart('getOperatorData', toOperatorId);
			fromOperatorData['onSuccessExecuteOp'] = toOperatorId;
			$("#" + flowChartWorkSpaceId).flowchart('setOperatorData', fromOperatorId, fromOperatorData);
			return true;
		},
		onLinkDelete: function(linkId, linkData) {
			var fromOperatorId = linkData['fromOperator'];
			var fromOperatorData = $("#" + flowChartWorkSpaceId).flowchart('getOperatorData', fromOperatorId);
			var toOperatorId = linkData['toOperator'];
			delete fromOperatorData['onSuccessExecuteOp'];
			$("#" + flowChartWorkSpaceId).flowchart('setOperatorData', fromOperatorId, fromOperatorData);
			return true;
		}
	});
}

function selectJobOnJobFail($this) {
	var selectedOperatorId = $("#" + flowChartWorkSpaceId).flowchart('getSelectedOperatorId');
	var selectedThis = $("#" + flowChartWorkSpaceId + " .selected");
	var operatorOutPut = $("#" + flowChartWorkSpaceId + " .selected").find(".flowchart-operator-outputs").find(".flowchart-operator-connector-arrow");
	$(operatorOutPut).trigger("click");
	$('#' + flowChartWorkSpaceId).flowchart({

		onLinkCreate: function(linkId, linkData) {

			var fromOperatorId = linkData['fromOperator'];
			if (fromOperatorId == selectedOperatorId) {
				var fromOperatorData = $("#" + flowChartWorkSpaceId).flowchart('getOperatorData', fromOperatorId);
				var toOperatorId = linkData['toOperator'];
				var toOperatorData = $("#" + flowChartWorkSpaceId).flowchart('getOperatorData', toOperatorId);
				fromOperatorData['onFailExecuteOp'] = toOperatorId;
				$("#" + flowChartWorkSpaceId).flowchart('setOperatorData', fromOperatorId, fromOperatorData);
			}
			return true;
		},
		onLinkDelete: function(linkId, linkData) {
			var fromOperatorId = linkData['fromOperator'];
			if (fromOperatorId == selectedOperatorId) {
				var fromOperatorData = $("#" + flowChartWorkSpaceId).flowchart('getOperatorData', fromOperatorId);
				var toOperatorId = linkData['toOperator'];
				delete fromOperatorData['onFailExecuteOp'];
				$("#" + flowChartWorkSpaceId).flowchart('setOperatorData', fromOperatorId, fromOperatorData);
			}
			return true;
		}
	});
}

function setLinkToRejectedRecordsOp() {
	var selectedOperatorId = $("#" + flowChartWorkSpaceId).flowchart('getSelectedOperatorId');
	var selectedThis = $("#" + flowChartWorkSpaceId + " .selected");
	var operatorOutPut = $("#" + flowChartWorkSpaceId + " .selected").find(".flowchart-operator-outputs").find(".flowchart-operator-connector-arrow");
	$(operatorOutPut).trigger("click");
	$('#' + flowChartWorkSpaceId).flowchart({

		onLinkCreate: function(linkId, linkData) {
			var fromOperatorId = linkData['fromOperator'];
			if (fromOperatorId == selectedOperatorId) {
				//            var fromOperatorData = $("#" + flowChartWorkSpaceId).flowchart('getOperatorData', fromOperatorId);
				var toOperatorId = linkData['toOperator'];
				var toOperatorData = $("#" + flowChartWorkSpaceId).flowchart('getOperatorData', toOperatorId);
				toOperatorData['component'] = 'Y';
				toOperatorData['iconType'] = 'REJECTED';
				$("#" + flowChartWorkSpaceId).flowchart('setOperatorData', toOperatorId, toOperatorData);
			}

			return true;
		},
		onLinkDelete: function(linkId, linkData) {

			return true;
		}
	});
}

function etlGridExport(gridId, tableName) {
	var exportFormat = $("#export" + gridId).val();
	var selectedrowindexes = $("#" + gridId).jqxGrid('selectedrowindexes');
	if (selectedrowindexes.length>0){
		var rowDataArray = [];
	$.each(selectedrowindexes, function(i){
		var rowdata = $("#" + gridId).jqxGrid('getrowdata', i);
		if (rowdata!=null){
			 delete rowdata["boundindex"]; 
		    delete rowdata["uid"];                         
		    delete rowdata["uniqueid"]; 
		    delete rowdata["visibleindex"]; 

		rowDataArray.push(rowdata);
		}
		
	})
	
	$("#exportFinalData").remove();
	var formStr = '<form id="exportFinalData" action="etlGridExport" method="POST" target="_blank">'
		+ '<input type="hidden" name="etlExportTableName" id="etlExportTableName"/>'
		+ '<input type="hidden" name="fileType" id="fileType"/>'
		+ '<input type="hidden" name="rowDataArray" id="rowDataArray"/>'
		+ '</form>';
	$("#pageBody").append(formStr);
	$("#etlExportTableName").val(tableName);
	$("#fileType").val(exportFormat);
	$("#rowDataArray").val(JSON.stringify(rowDataArray));
	$("#exportFinalData").submit();
	//    setTimeout(function(){
	$("#exportFinalData").remove();
	} else {
		showMesg("Please select rows to export");
	}
	
	
	
				
}


function setFileDataType(fileObjStr) {
	showLoader();
	var selectedOperatorId = $("#" + flowChartWorkSpaceId).flowchart('getSelectedOperatorId');
	var selectedOperatorData = $("#" + flowChartWorkSpaceId).flowchart('getOperatorData', selectedOperatorId);
	var dataTypesObj = selectedOperatorData['dataTypesObj'];
	gridUpdatedData = {};
	if (fileObjStr != null && fileObjStr != '') {
		var fileDataObj = JSON.parse(fileObjStr);
		if (fileDataObj != null) {
			var filePath = fileDataObj['filePath'];
			filePath = filePath.replaceAll('###', '\\');
			filePath = filePath.replaceAll('#$#', ' ');
			fileDataObj['filePath'] = filePath;
		}
	}

	$.ajax({
		type: "post",
		traditional: true,
		dataType: 'json',
		url: 'setFileDataType',
		cache: false,
		data: {
			fileObj: JSON.stringify(fileDataObj),
			dataTypesObj: JSON.stringify(dataTypesObj)
		},
		success: function(data, status, xhr) {

			var dataArray = data['data'];
			var dataTypesList = data['dataTypesList'];
			$("#etldialog").html("<div id='tableGrid'></div>");
			$("#etldialog").dialog({
				title: (labelObject['FILE DATA TYPE'] != null ? labelObject['FILE DATA TYPE'] : 'FILE DATA TYPE'),
				modal: true,
				width: 400,
				minHeight: 300,
				maxHeight: 500,
				autoheight: true,
				fluid: true,
				buttons: [{
					text: (labelObject['Ok'] != null ? labelObject['Ok'] : 'Ok'),
					click: function() {
						var dataTypesObj = {};
						var rows = $('#tableGrid').jqxGrid('getrows');
						$.each(rows, function(i) {
							var columnName = rows[i]['columnName'];
							var dataType = rows[i]['datatypeName'];
							var columnsize = rows[i]['columnsize'];
							//                                var abc  = columnsize.toString();
							if (columnsize != null && columnsize.toString() != 'NaN') {
								//                                    dataType = dataType + "(" + columnsize + ")";
							} else {
								columnsize = "";
							}
							var dataTypeObj = {};
							dataTypeObj['datatype'] = dataType;
							dataTypeObj['columnsize'] = columnsize;
							dataTypesObj[columnName] = dataTypeObj;
						})

						var selectedOperatorId = $("#" + flowChartWorkSpaceId).flowchart('getSelectedOperatorId');
						var selectedOperatorData = $("#" + flowChartWorkSpaceId).flowchart('getOperatorData', selectedOperatorId);
						selectedOperatorData['dataTypesObj'] = dataTypesObj;
						$("#" + flowChartWorkSpaceId).flowchart('setOperatorData', selectedOperatorId, selectedOperatorData);
						$(this).html("");
						$(this).dialog("close");
						$(this).dialog("destroy");
					}

				}],
				open: function() {
					var source =
					{
						localdata: dataArray,
						datatype: "array",
						loadComplete: function(data) {


						},
						rendered: function() {

						}

					};
					var dataAdapter = new $.jqx.dataAdapter(source);
					var inputRenderer = function(row, columnfield, value, defaulthtml, columnproperties) {//overflow-y:scroll;height:100%;
						if (columnfield == 'columnName') {
							var html = defaulthtml;
							if (value == null || value == "") {
								html = '<input type="text" id="TablecolumnName_' + row + '" dataField="' + columnfield + '" initVal="newRow_' + row + '" value="" style="width:100%;height:100%;" >'
							} else {
								html = '<input type="text" id="TablecolumnName_' + row + '" dataField="' + columnfield + '" initVal="' + value + '" value="' + value + '" style="width:100%;height:100%;" >'

							}
							return html;
						}

						if (columnfield == 'columnsize') {
							return '<input id="TableColumnSize_' + row + '" dataField="' + columnfield + '" style="width:100%;height:100%;" type="number" initVal="' + value + '" value="' + value + '" min="0" max="4000">';
						}

						if (columnfield == 'datatypeName') {
							var html = defaulthtml;
							html = '<select name="dataTypeNames" id="TableDataType_' + row + '" dataField="' + columnfield + '" initVal="' + value + '" style="width:100%;height:100%;" >';
							$.each(dataTypesList, function(i) {
								if (dataTypesList[i] == value) {
									html += '<option value="' + dataTypesList[i] + '" selected >' + dataTypesList[i] + '</option>';
								} else {
									html += '<option value="' + dataTypesList[i] + '">' + dataTypesList[i] + '</option>';
								}

							});
							html += '</select>';
							return html;
						}


					}

					$("#tableGrid").jqxGrid(
						{
							width: "100%",
							source: source,
							height: "100%",
							editable: true,
							sortable: true,
							columnsResize: true,
							columnsReorder: true,
							enableHover: true,
							enableBrowserSelection: true,
							//                                filterable: true,
							//                                selectionmode: 'checkbox',
							handlekeyboardnavigation: function(event) {

								var keyis = event.key;
								if (keyis.length == 1) {
									//                                            var value = $(event.target).val();
									//                                            $(event.target).val(value + keyis);
									//                                            
									var cursorPos = $(event.target).prop('selectionStart');
									var v = $(event.target).val();
									var textBefore = v.substring(0, cursorPos);
									var textAfter = v.substring(cursorPos, v.length);
									$(event.target).val(textBefore + $(this).val() + textAfter);
									return true;
								}
								//                                       

							},
							//                                cellvaluechanging: function (row, column, columntype, oldvalue, newvalue) {
							//                                    if (newvalue == ""){
							//                                        return oldvalue;
							//                                    }
							//                                    var row = {Change: column, value: newvalue};
							//                                    var rowID = $('#ResultGrid').jqxGrid('getrowid');
							//                                    console.log(row);
							//                                    $('#tableGrid').jqxGrid('updaterow', rowID, row);
							//                                },

							columns: [
								{ text: 'Column Name', datafield: 'columnName', width: 200, editable: false, cellsrenderer: inputRenderer },
								{
									text: 'Datatype', datafield: 'datatypeName', width: 100, editable: false, cellsrenderer: inputRenderer
								},
								{ text: 'Size', datafield: 'columnsize', width: 100, editable: false, cellsrenderer: inputRenderer },
							]
						});
					stopLoader();
					$("[id^=tableGrid]").change(function(event) {

						var target = event.target;
						var oldvalue = $(target).attr("initval");
						var value;
						var dataField = $(target).attr("dataField");
						// validations
						var rowIndex = $(target).attr("id").split("_")[1];
						var columnName = $("#TablecolumnName_" + rowIndex).attr("initval");
						var columnSize;
						if (dataField == "datatypeName") {
							value = $(target).val();
							//                             $("#TableColumnSize_" + rowIndex).val(value);
							if (value == "NUMBER" || value == "NUMERIC" || value == "DECIMAL") {
								columnSize = $("#TableColumnSize_" + rowIndex).val("");
								$("#TableColumnSize_" + rowIndex).attr('readonly', true);
								$("#TableScale_" + rowIndex).attr('readonly', false);
							}
							if (value == "FLOAT") {
								columnSize = $("#TableColumnSize_" + rowIndex).val("");
								$("#TableColumnSize_" + rowIndex).attr('readonly', true);
							}
							if (value == "INTERGER" || value == "DATE" || value == "LONG" || value == "LONG RAW"
								|| value == "ROWID" || value == "MLSLABEL" || value == "CLOB" || value == "NCLOB"
								|| value == "BLOB" || value == "BFILE" || value == "BINARY_DOUBLE" || value == "BINARY_FLOAT"
								|| value == "URITYPE" || value == "DOUBLE PRECISION" || value == "SMALLINT" || value == "REAL"
								|| value == "URITYPE" || value == "TIMESTAMP") {
								columnSize = $("#TableColumnSize_" + rowIndex).val("");
								$("#TableColumnSize_" + rowIndex).attr('readonly', true);
							}
							if (value == "VARCHAR" || value == "VARCHAR2" || value == "CHAR" || value == "NVARCHAR2"
								|| value == "RAW" || value == "CHAR VARYING" || value == "CHARACTER" || value == "CHARACTER VARYING"
								|| value == "NATIONAL CHAR" || value == "NATIONAL CHARACTER" || value == "NATIONAL CHARACTER VARYING"
								|| value == "NCHAR VARYING") {

								columnSize = $("#TableColumnSize_" + rowIndex).attr('readonly', false);
							}
						}

						$("#tableGrid").jqxGrid('endrowedit', rowIndex, false);
						var rowData = $("#tableGrid").jqxGrid('getrowdata', rowIndex);
						var dataFieldsObj = gridUpdatedData[columnName];
						if (dataFieldsObj == null) {
							dataFieldsObj = {};
						}

						if (dataField != null) {
							if (dataField == "columnName") {
								value = $(target).val();
								if (value != null && oldvalue != value) {
									dataFieldsObj[dataField] = value;
									gridUpdatedData[columnName] = dataFieldsObj;
								}
							} else if (dataField == "datatypeName" || dataField == "columnsize"
								|| dataField == "byteOrChar") {
								value = $(target).val();
								if (value != null && oldvalue != value) {
									dataFieldsObj['datatypeName'] = $("#TableDataType_" + rowIndex).val();
									dataFieldsObj['columnsize'] = $("#TableColumnSize_" + rowIndex).val();
									gridUpdatedData[columnName] = dataFieldsObj;
								}
							} else if (dataField == "notNull") {
								var checked = $(target).prop("checked");
								if (checked) {
									$(target).val("NOT NUL")
									value = "NOT NULL";
								} else {
									$(target).val("NULL")
									value = "NULL"
								}
								if (value != null && oldvalue != value) {
									dataFieldsObj[dataField] = value;
									gridUpdatedData[columnName] = dataFieldsObj;
								}
							} else if (dataField == "defaultValue") {
								value = $(target).val();
								if (value != null && oldvalue != value) {
									dataFieldsObj[dataField] = value;
									gridUpdatedData[columnName] = dataFieldsObj;
								}
							}

							var row = { columnName: columnName, datatypeName: dataFieldsObj['datatypeName'], columnsize: parseInt(dataFieldsObj['columnsize']) };
							$('#tableGrid').jqxGrid('updaterow', rowIndex, row);
							//                            $('#tableGrid').jqxGrid('updatebounddata');
							console.log("");
						}

					});
					$(this).closest(".ui-dialog").find(".ui-button").eq(1).addClass("dialogyes");
					$(".visionHeaderMain").css("z-index", "999");
					$(".visionFooterMain").css("z-index", "999");
				},
				beforeClose: function(event, ui) {
					$(".visionHeaderMain").css("z-index", "99999");
					$(".visionFooterMain").css("z-index", "99999");
				}
			});
		},
		error: function(e) {
			console.log(e);
			sessionTimeout(e);
			stopLoader();
		}
	});
	console.log("data type mtd called..");
}

function pdfToHTML(fileObjStr) {
	if (fileObjStr != null && fileObjStr != '') {
		var fileDataObj = JSON.parse(fileObjStr);
		if (fileDataObj != null) {
			var filePath = fileDataObj['filePath'];
			filePath = filePath.replaceAll('###', '\\');
			filePath = filePath.replaceAll('#$#', ' ');
			fileDataObj['filePath'] = filePath;
		}
	}

	$.ajax({
		type: "post",
		traditional: true,
		dataType: 'html',
		url: 'convertPDFToHTML',
		cache: false,
		data: {
			filePath: filePath
		},
		success: function(result) {
			stopLoader();
			var pdfContent = "<iframe id='pdfToHTMLData' style='width: 100%; height:650px;' srcdoc='' onload='setSrcdoc()'></iframe>";
			$("#dataProfilingTabContent").html(pdfContent);
			//            var downloadDataButton = "<div id='downloadiFrameHtmlButton'><button onclick=downloadiFrameHtml('dataProfilingIframe')>Download</button></div>"

			//            $("#dataProfilingTabContent").append(downloadDataButton);

			$("#etldialog").html(pdfContent);
			$("#etldialog").dialog({
				title: (labelObject['Message'] != null ? labelObject['Message'] : 'Message'),
				modal: true,
				width: 1000,
				height: 600,
				fluid: true,
				buttons: [{
					text: (labelObject['Ok'] != null ? labelObject['Ok'] : 'Ok'),
					click: function() {
						$(this).html("");
						//$(this).dialog("close");
						$(this).dialog("destroy");
					}

				}],
				open: function() {
					$('#pdfToHTMLData').attr('srcdoc', result);
					$(this).closest(".ui-dialog").find(".ui-button").eq(1).addClass("dialogyes");
					$(".visionHeaderMain").css("z-index", "999");
					$(".visionFooterMain").css("z-index", "999");
				},
				beforeClose: function(event, ui) {
					$(".visionHeaderMain").css("z-index", "99999");
					$(".visionFooterMain").css("z-index", "99999");
				}
			});
		},
		error: function(e) {
			console.log(e);
			sessionTimeout(e);
			stopLoader();
		}
	});
}


function addSapFilterRow(columnsArray) {
	//    var selectColstr = "<select><option value=''>Select Column</option>";
	//    $.each(columnsArray, function (i) {
	//        selectColstr += "<option value='" + columnsArray[i] + "'>" + columnsArray[i] + "</option>"
	//    })
	var rowIndex = $("#sapTableFilterTable > tbody > tr").length;
	selectColstr += "</select>";
	var selectOperatorStr = "<select>"
		+ "<option value='='>=</option>";
	+"<option value='LIKE'>LIKE</option>";
	+"</select>";
	var tableTr = '<tr><td width="5%"><img src="images/Detele Red Icon.svg" onclick="deleteSelectedRow(this)" class="visionColMappingImg" title="Delete" style="width:15px;height: 15px;cursor:pointer;"></td>\n\
                     <td width="40%" class="sapTableFilterColumn" ><div id="sapTableFilterColumnComboBox_'+ rowIndex + '"></div></td>\n\
                     <td width="15%" class="sapFilterOperator" >' + selectOperatorStr + '</td>\n\
                     <td width="40%" class="sapFilterValue" ><input type="text" value="" style="width:97%" ></td></tr>';
	$('#sapTableFilterTable tr:last').after(tableTr);
	$("#sapTableFilterColumnComboBox_" + rowIndex).jqxComboBox({
		source: columnsArray,
		width: '200px',
		animationType: 'slide',
		placeHolder: "Select Column"
	});
}



function addSAPFilterFromAnotherTable(tableName, connectionObj) {
	var selectedOperatorId = $("#" + flowChartWorkSpaceId).flowchart('getSelectedOperatorId');
	var selectedOperatorData = $("#" + flowChartWorkSpaceId).flowchart('getOperatorData', selectedOperatorId);
	var anotherTableFilterObj = selectedOperatorData['anotherTableFilterObj'];
	var filterSapTableConnectionName = "";
	var filterSapTableName = "";
	var filterSapTableColumnName = "";
	var filterSapTableRowrangeStart = "";
	var filterSapTableRowrangeEnd = "";
	var filterSapTableWhereCond = "";
	var filterSapSourceTableCompareColumn = "";
	if (anotherTableFilterObj != null && !jQuery.isEmptyObject(anotherTableFilterObj)) {
		filterSapTableConnectionName = anotherTableFilterObj['filterSapTableConnectionName'];
		filterSapTableName = anotherTableFilterObj['filterSapTableName'];
		filterSapTableColumnName = anotherTableFilterObj['filterSapTableColumnName'];
		filterSapTableRowrangeStart = anotherTableFilterObj['filterSapTableRowrangeStart'];
		filterSapTableRowrangeEnd = anotherTableFilterObj['filterSapTableRowrangeEnd'];
		filterSapTableWhereCond = anotherTableFilterObj['filterSapTableWhereCond'];
		filterSapTableWhereCond = filterSapTableWhereCond.replaceAll("'", "&apos;");

		filterSapSourceTableCompareColumn = anotherTableFilterObj['filterSapSourceTableCompareColumn'];
	}

	var connectionOptions = "<option value=''>Select Connection</option>";
	$.each(savedDBData, function(key, value) {
		connectionOptions += "<option value='" + JSON.stringify(value) + "'>" + key + "</option>"
	})

	var htmlStr = "<div>"
		+ "<table id='sapAnotherTablefilterTable' >"
		+ "<tr>"
		+ "<td><select id='filterSapTableConnectionName' >" + connectionOptions + "</select></td>"
		+ "<td><input id='filterSapTableName' value='" + filterSapTableName + "' placeholder='Table Name' /></td>"
		//            + "<td><input id='filterSapTableName' value='" + filterSapTableName + "' placeholder='Table Name' /></td>"
		+ "<td><input id='filterSapTableColumnName' value='" + filterSapTableColumnName + "' placeholder='Column Name'  /></td>"
		+ "<td><input id='filterSapTableRowrangeStart' value='" + filterSapTableRowrangeStart + "' placeholder='Row index start'  /></td>"
		+ "<td><input id='filterSapTableRowrangeEnd' value='" + filterSapTableRowrangeEnd + "' placeholder='Row index end'  /></td>"
		+ "<td><input id='filterSapTableWhereCond' value='" + filterSapTableWhereCond + "' placeholder='Where condition'  /></td>"
		+ "<td><input id='filterSapSourceTableCompareColumn' value='" + filterSapSourceTableCompareColumn + "' placeholder='Source Data column'  /></td>"
		+ "</tr>"
		+ "</table>"
		+ "</div>"
	$("#sapFilterWithAnotherTableDiv").html(htmlStr)
	if (filterSapTableConnectionName != null && filterSapTableConnectionName != "") {
		$("#filterSapTableConnectionName").val(filterSapTableConnectionName);
	}

}

function addSAPFilter(tableName, connectionObj) {
	showLoader();
	$.ajax({
		type: "post",
		traditional: true,
		dataType: 'json',
		url: 'selectSapTableColumns',
		cache: false,
		data: {
			parentkey: tableName,
			connectionObj: JSON.stringify(connectionObj)
		},
		success: function(response) {
			stopLoader();
			var columnsArray = response['columnsArray'];
			var selectColstr = "<select><option value=''>Select Column</option>";
			$.each(columnsArray, function(i) {
				selectColstr += "<option value='" + columnsArray[i] + "'>" + columnsArray[i] + "</option>"
			})
			selectColstr += "</select>";
			var selectOperatorStr = "<select class='selectWhereclauseOperator'>"
				+ "<option value='='>=</option>"
				+ "<option value='!='>!=</option>"
				+ "<option value='LIKE'>LIKE</option>"
				+ "<option value='NOT LIKE'>NOT LIKE</option>"
				+ "<option value='IN'>IN</option>"
				+ "<option value='NOT IN'>NOT IN</option>"
				+ "<option value='BETWEEN'>BETWEEN</option>"
				+ "<option value='ISNULL'>IS NULL</option>"
				+ "<option value='ISNOTNULL'>IS NOT NULL</option>"
				+ "</select>";
			var divStr = '<div class="sapTableFilterDiv">\n\
                  <div class="visionEtlAddIconDiv"><img data-trstring="" src="images/Add icon.svg" id="visionEtlAddRowIcon" class="visionHeaderEtlAddRowIcon" title="Add  Filter"  style="width:15px;height: 15px;cursor:pointer;"></div><div class="visionEtlFileHeaderTablesDiv">\n\
                  <table id="sapTableFilterTable" class="visionEtlFileHeaderTable" style="width: 100%;" border="1"><thead><tr>\n\
                    <th style="width:5%" class="" style="background: #0071c5 none repeat scroll 0 0;color: #FFF;text-align: center"></th>\n\
                    <th style="width:26%" class="" style="background: #0071c5 none repeat scroll 0 0;color: #FFF;text-align: center">Column Name</th>\n\
                    <th style="width:15%" class="" style="background: #0071c5 none repeat scroll 0 0;color: #FFF;text-align: center">Operator</th>\n\
                    <th style="width:26%" class="" style="background: #0071c5 none repeat scroll 0 0;color: #FFF;text-align: center">Value</th>\n\
                    <th style="width:26%" class="sapFilterToValueTh" style="background: #0071c5 none repeat scroll 0 0;color: #FFF;text-align: center;">To Value</th></tr></thead>\n\
                  <tbody>';
			var tableTr = "";
			var selectedOperatorId = $("#" + flowChartWorkSpaceId).flowchart('getSelectedOperatorId');
			var selectedOperatorData = $("#" + flowChartWorkSpaceId).flowchart('getOperatorData', selectedOperatorId);
			var whereClauseObjArray = selectedOperatorData['whereClauseObjArray'];
			if (whereClauseObjArray != null && whereClauseObjArray.toString() != "[]") {
				$.each(whereClauseObjArray, function(i) {
					var whereClauseObj = whereClauseObjArray[i];
					var column = whereClauseObj['column'];
					var operator = whereClauseObj['operator'];
					var value = whereClauseObj['value'];
					var toValue = whereClauseObj['toValue'];
					var disabled = "";
					var valdisabled = "";
					if (operator != null && operator == "BETWEEN") {
						disabled = "";
					} else if (operator != null && (operator == "ISNULL" || operator == "ISNOTNULL")) {
						valdisabled = "disabled";
					}
					else {
						toValue = "";
						disabled = "disabled";
					}
					tableTr += '<tr><td style="width:5%"><img src="images/Detele Red Icon.svg" onclick="deleteSelectedRow(this)" class="visionColMappingImg" title="Delete" style="width:15px;height: 15px;cursor:pointer;"></td>\n\
                     <td style="width:26%" class="sapTableFilterColumn" ><div id="sapTableFilterColumnComboBox_'+ i + '"></div></td>\n\
                     <td style="width:15%" class="sapFilterOperator" >' + selectOperatorStr + '</td>\n\
                     <td style="width:26%" class="sapFilterValue" ><input type="text" value="'+ value + '" style="width:97%" ' + valdisabled + ' ></td>\n\
                     <td style="width:26%" class="sapFilterToValue"  ><input id="sapFilterToValueId_'+ i + '" type="text" value="' + toValue + '" style="width:97%" ' + disabled + ' ></td></tr>';
				})
			} else {
				tableTr = '<tr><td style="width:5%"><img src="images/Detele Red Icon.svg" onclick="deleteSelectedRow(this)" class="visionColMappingImg" title="Delete" style="width:15px;height: 15px;cursor:pointer;"></td>\n\
                     <td style="width:26%" class="sapTableFilterColumn" ><div id="sapTableFilterColumnComboBox_0"></div></td>\n\
                     <td style="width:15%" class="sapFilterOperator" >' + selectOperatorStr + '</td>\n\
                     <td style="width:26%" class="sapFilterValue" ><input type="text" value="" style="width:97%" ></td>\n\
                     <td style="width:26%" class="sapFilterToValue"  ><input id="sapFilterToValueId_0"  type="text" value="" style="width:97%" disabled ></td></tr>';
			}



			divStr += tableTr;
			divStr += '</tbody></table></div></div>';
			$("#sapFilterCondtionsDiv").html("");
			$("#sapFilterCondtionsDiv").html(divStr);



			if (whereClauseObjArray != null && whereClauseObjArray.toString() != "[]") {
				$.each(whereClauseObjArray, function(i) {
					var whereClauseObj = whereClauseObjArray[i];
					var column = whereClauseObj['column'];
					var operator = whereClauseObj['operator'];
					var value = whereClauseObj['value'];
					var toValue = whereClauseObj['toValue'];
					//                    $($($("#sapTableFilterTable tbody").find("tr")[i]).find("td")[1]).find("select").val(column);
					$($($("#sapTableFilterTable tbody").find("tr")[i]).find("td")[2]).find("select").val(operator);
					$($($("#sapTableFilterTable tbody").find("tr")[i]).find("td")[3]).find("input").val(value);
					$($($("#sapTableFilterTable tbody").find("tr")[i]).find("td")[4]).find("input").val(toValue);

					$("#sapTableFilterColumnComboBox_" + i).jqxComboBox({
						source: columnsArray,
						width: '200px',
						animationType: 'slide',
						placeHolder: "Select Column"
					});
					$("#sapTableFilterColumnComboBox_" + i).find("input").val(column);
				})
			} else {
				$("#sapTableFilterColumnComboBox_0").jqxComboBox({
					source: columnsArray,
					width: '200px',
					animationType: 'slide',
					placeHolder: "Select Column"
				});

			}


			$("#visionEtlAddRowIcon").click(function(event) {
				var tableTrLength = $('#sapTableFilterTable tbody').find('tr').length;
				//                var selectColstr = "<select><option value=''>Select Column</option>";
				//                $.each(columnsArray, function (i) {
				//                    selectColstr += "<option value='" + columnsArray[i] + "'>" + columnsArray[i] + "</option>"
				//                })
				//                selectColstr += "</select>";
				var selectOperatorStr = "<select class='selectWhereclauseOperator' id='selectWhereclauseOperatorId_" + tableTrLength + "'>"
					+ "<option value='='>=</option>"
					+ "<option value='!='>!=</option>"
					+ "<option value='LIKE'>LIKE</option>"
					+ "<option value='NOT LIKE'>NOT LIKE</option>"
					+ "<option value='IN'>IN</option>"
					+ "<option value='NOT IN'>NOT IN</option>"
					+ "<option value='BETWEEN'>BETWEEN</option>"
					+ "<option value='ISNULL'>IS NULL</option>"
					+ "<option value='ISNOTNULL'>IS NOT NULL</option>"
					+ "</select>";

				var tableTr = '<tr><td width="5%"><img src="images/Detele Red Icon.svg" onclick="deleteSelectedRow(this)" class="visionColMappingImg" title="Delete" style="width:15px;height: 15px;cursor:pointer;"></td>\n\
                     <td width="26%" class="sapTableFilterColumn" ><div id="sapTableFilterColumnComboBox_'+ tableTrLength + '"></div></td>\n\
                     <td width="15%" class="sapFilterOperator" >' + selectOperatorStr + '</td>\n\
                     <td width="26%" class="sapFilterValue" ><input type="text" value="" style="width:97%" ></td>\n\
                     <td width="26%" class="sapFilterToValue" ><input id="sapFilterToValueId_'+ tableTrLength + '" type="text" value="" style="width:97%" disabled></td></tr>';
				if ($('#sapTableFilterTable tbody').find('tr:last').length > 0) {
					$('#sapTableFilterTable tbody').find('tr:last').after(tableTr);
				} else {
					$('#sapTableFilterTable tbody').append(tableTr);
				}

				$("#sapTableFilterColumnComboBox_" + tableTrLength).jqxComboBox({
					source: columnsArray,
					width: '200px',
					animationType: 'slide',
					placeHolder: "Select Column"
				});

				$(".selectWhereclauseOperator").change(function(event) {
					var operator = $(event.target).val();

					if (operator != null && operator == "BETWEEN") {
						$(event.target).closest("tr").find(".sapFilterToValue").find("input").prop("disabled", false);

					} else if (operator != null && (operator == "ISNOTNULL" || operator == "ISNULL")) {
						$(event.target).closest("tr").find(".sapFilterValue").find("input").val("");
						$(event.target).closest("tr").find(".sapFilterValue").find("input").prop("disabled", true);

						$(event.target).closest("tr").find(".sapFilterToValue").find("input").val("");
						$(event.target).closest("tr").find(".sapFilterToValue").find("input").prop("disabled", true);

					} else {
						$(event.target).closest("tr").find(".sapFilterValue").find("input").val("");
						$(event.target).closest("tr").find(".sapFilterValue").find("input").prop("disabled", false);

						$(event.target).closest("tr").find(".sapFilterToValue").find("input").val("");
						$(event.target).closest("tr").find(".sapFilterToValue").find("input").prop("disabled", true);
					}

				})
			})

			$(".selectWhereclauseOperator").change(function(event) {
				var operator = $(event.target).val();

				if (operator != null && operator == "BETWEEN") {
					$(event.target).closest("tr").find(".sapFilterToValue").find("input").prop("disabled", false);

				} else if (operator != null && (operator == "ISNOTNULL" || operator == "ISNULL")) {
					$(event.target).closest("tr").find(".sapFilterValue").find("input").val("");
					$(event.target).closest("tr").find(".sapFilterValue").find("input").prop("disabled", true);

					$(event.target).closest("tr").find(".sapFilterToValue").find("input").val("");
					$(event.target).closest("tr").find(".sapFilterToValue").find("input").prop("disabled", true);

				} else {
					$(event.target).closest("tr").find(".sapFilterValue").find("input").val("");
					$(event.target).closest("tr").find(".sapFilterValue").find("input").prop("disabled", false);

					$(event.target).closest("tr").find(".sapFilterToValue").find("input").val("");
					$(event.target).closest("tr").find(".sapFilterToValue").find("input").prop("disabled", true);
				}

			})

		},
		error: function(e) {
			console.log(e);
			sessionTimeout(e);
			stopLoader();
		}
	});
}
function sapTableOptions() {
	setTimeout(function(){
		
		var selectedOperatorId = $("#" + flowChartWorkSpaceId).flowchart('getSelectedOperatorId');
	var selectedOperatorData = $("#" + flowChartWorkSpaceId).flowchart('getOperatorData', selectedOperatorId);
	var tableName = selectedOperatorData['tableName'];
	var connectionObj = selectedOperatorData['connObj'];
	var optionsStr = "<div>"
		+ "<table>"
		+ "<tr>"
		+ "<td><span>Rows Range</span></td>"
		+ "<td><input id='rangeSelectionStartRecord' type='text' value='' placeholder='Start' /></td>"
		+ "<td><input id='rangeSelectionEndRecord' type='text' value='' placeholder='End' /></td>"
		+ "</tr>"
		+ "</table>"
		+ "<div onclick=addSAPFilter('" + tableName + "'," + JSON.stringify(connectionObj) + ") style='cursor:pointer;'>SAP Filter</div>"
		+ "<div id='sapFilterCondtionsDiv'></div>"
		+ "<div onclick=addSAPFilterFromAnotherTable('" + tableName + "'," + JSON.stringify(connectionObj) + ") style='cursor:pointer;'>Table Filter</div>"
		+ "<div id='sapFilterWithAnotherTableDiv'></div>"
		+ "</div>";
	$("#etldialog").html(optionsStr);
	$("#etldialog").dialog({
		title: (labelObject['Message'] != null ? labelObject['Message'] : 'Message'),
		modal: true,
		height: 'auto',
		width: 'auto',
		fluid: true,
		buttons: [{
			text: (labelObject['Ok'] != null ? labelObject['Ok'] : 'Ok'),
			click: function() {

				var rowsRangeObj = {};
				rowsRangeObj['start'] = $("#rangeSelectionStartRecord").val();
				rowsRangeObj['end'] = $("#rangeSelectionEndRecord").val();
				selectedOperatorData['rowsRangeObj'] = rowsRangeObj;
				var whereClauseObjArray = [];

				if ($("#sapTableFilterTable").length > 0) {

					$("#sapTableFilterTable tbody").find("tr").each(function(trIndex) {
						var whereClauseObj = {};
						var column = $($(this).find("td")[1]).find("input").val();
						var operator = $($(this).find("td")[2]).find("select").val();
						var value = $($(this).find("td")[3]).find("input").val();
						var toValue = $($(this).find("td")[4]).find("input").val();
						if (column != null && column != "Select Column") {
							whereClauseObj['column'] = column;
							whereClauseObj['operator'] = operator;
							whereClauseObj['value'] = value;
							whereClauseObj['toValue'] = toValue;
							whereClauseObjArray.push(whereClauseObj);
						}

					})
					selectedOperatorData['whereClauseObjArray'] = whereClauseObjArray;
				}

				var anotherTableFilterObj = {};
				if ($("#sapAnotherTablefilterTable").length > 0) {
					var filterSapTableName = $("#filterSapTableName").val();
					if (filterSapTableName != null && filterSapTableName != "") {
						var filterSapTableConnectionName = $("#filterSapTableConnectionName").val();
						var filterSapTableColumnName = $("#filterSapTableColumnName").val();
						var filterSapTableRowrangeStart = $("#filterSapTableRowrangeStart").val();
						var filterSapTableRowrangeEnd = $("#filterSapTableRowrangeEnd").val();
						var filterSapTableWhereCond = $("#filterSapTableWhereCond").val();
						var filterSapSourceTableCompareColumn = $("#filterSapSourceTableCompareColumn").val();
						anotherTableFilterObj['filterSapTableConnectionName'] = filterSapTableConnectionName;
						anotherTableFilterObj['filterSapTableName'] = filterSapTableName;
						anotherTableFilterObj['filterSapTableColumnName'] = filterSapTableColumnName;
						anotherTableFilterObj['filterSapTableRowrangeStart'] = filterSapTableRowrangeStart;
						anotherTableFilterObj['filterSapTableRowrangeEnd'] = filterSapTableRowrangeEnd;
						anotherTableFilterObj['filterSapTableWhereCond'] = filterSapTableWhereCond;
						anotherTableFilterObj['filterSapSourceTableCompareColumn'] = filterSapSourceTableCompareColumn;
					}
					selectedOperatorData['anotherTableFilterObj'] = anotherTableFilterObj;
				}

				$("#" + flowChartWorkSpaceId).flowchart('setOperatorData', selectedOperatorId, selectedOperatorData);
				$(this).html("");
				//                        //$(this).dialog("close");
				$(this).dialog("destroy");
			}
		}],
		open: function() {

			var rowsRangeObj = selectedOperatorData['rowsRangeObj'];
			if (rowsRangeObj != null) {
				$("#rangeSelectionStartRecord").val(rowsRangeObj['start']);
				$("#rangeSelectionEndRecord").val(rowsRangeObj['end'])
			}
			$(this).closest(".ui-dialog").css("z-index", "9999")
			$(this).closest(".ui-dialog").find(".ui-button").eq(1).addClass("dialogyes");
			$(".visionHeaderMain").css("z-index", "999");
			$(".visionFooterMain").css("z-index", "999");
		},
		beforeClose: function(event, ui) {
			
			$(".visionHeaderMain").css("z-index", "99999");
			$(".visionFooterMain").css("z-index", "99999");
			
			$("#etldialog").html("");
			$(this).dialog("destroy");
			$("#contentSplitter").resize();
			 $("#feedListExpander").css('height','100%');

		}
	});
		
	}, 500)
	
}

function selectNumberGeneration($this) {
	var divStr = "<div><select id='numberGenerationType'><option>Batch Id</option></select></div>";
	divStr += "<input id='generatedNumber' type='text'><button id'generateNumberButton'>Generate</button>"
	$("#etldialog").html(divStr);
	$("#etldialog").dialog({
		title: (labelObject['Message'] != null ? labelObject['Message'] : 'Message'),
		modal: true,
		height: 'auto',
		width: 'auto',
		fluid: true,
		buttons: [{
			text: (labelObject['Ok'] != null ? labelObject['Ok'] : 'Ok'),
			click: function() {


				$(this).html("");
				//                        //$(this).dialog("close");
				$(this).dialog("destroy");
			}
		}],
		open: function() {
			$("#generateNumberButton").click(function(event) {
				var numberGenerationType = $("#numberGenerationType").val();
				$.ajax({
					type: "post",
					traditional: true,
					dataType: 'json',
					url: 'generateNumber',
					cache: false,
					data: {
						numberGenerationType: numberGenerationType,
					},
					success: function(response) {
						stopLoader();
					},
					error: function(e) {
						console.log(e);
						sessionTimeout(e);
						stopLoader();
					}
				});
			})

			$(this).closest(".ui-dialog").css("z-index", "9999")
			$(this).closest(".ui-dialog").find(".ui-button").eq(1).addClass("dialogyes");
			$(".visionHeaderMain").css("z-index", "999");
			$(".visionFooterMain").css("z-index", "999");
		},
		beforeClose: function(event, ui) {
			$(".visionHeaderMain").css("z-index", "99999");
			$(".visionFooterMain").css("z-index", "99999");
		}
	});
}

function setExecutionSequence() {
	var selectedOperatorId = $("#" + flowChartWorkSpaceId).flowchart('getSelectedOperatorId');
	var selectedOperatorData = $("#" + flowChartWorkSpaceId).flowchart('getOperatorData', selectedOperatorId);
	var executionSequence = selectedOperatorData['executionSequence'] != null ? selectedOperatorData['executionSequence'] : "";
	var divStr = "<input id='executionSequenceNo' type='text' value='" + executionSequence + "' />"
	$("#etldialog").html(divStr);
	$("#etldialog").dialog({
		title: (labelObject['Set sequence'] != null ? labelObject['Set sequence'] : 'Set sequence'),
		modal: true,
		height: 'auto',
		width: '300px',
		fluid: true,
		buttons: [{
			text: (labelObject['Ok'] != null ? labelObject['Ok'] : 'Ok'),
			click: function() {
				var sequenceNo = $("#executionSequenceNo").val();


				selectedOperatorData['executionSequence'] = $("#executionSequenceNo").val();
				$("#" + flowChartWorkSpaceId).flowchart('setOperatorData', selectedOperatorId, selectedOperatorData);

				var body = $('#' + flowChartWorkSpaceId).flowchart('getOperatorBody', selectedOperatorId);
				var ele = document.createElement('div');
				ele.innerHTML = body;

				$(ele).find('.etlOperatorExecutionSequecne').find("span").html(sequenceNo);
				body = ele.innerHTML;
				$('#' + flowChartWorkSpaceId).flowchart('setOperatorBody', selectedOperatorId, body);

				$(this).html("");
				//                        //$(this).dialog("close");
				$(this).dialog("destroy");
			}
		}],
		open: function() {
			$("#generateNumberButton").click(function(event) {
				var numberGenerationType = $("#numberGenerationType").val();
				$.ajax({
					type: "post",
					traditional: true,
					dataType: 'json',
					url: 'generateNumber',
					cache: false,
					data: {
						numberGenerationType: numberGenerationType,
					},
					success: function(response) {
						stopLoader();
					},
					error: function(e) {
						console.log(e);
						sessionTimeout(e);
						stopLoader();
					}
				});
			})

			$(this).closest(".ui-dialog").css("z-index", "9999")
			$(this).closest(".ui-dialog").find(".ui-button").eq(1).addClass("dialogyes");
			$(".visionHeaderMain").css("z-index", "999");
			$(".visionFooterMain").css("z-index", "999");
		},
		beforeClose: function(event, ui) {
			$(".visionHeaderMain").css("z-index", "99999");
			$(".visionFooterMain").css("z-index", "99999");
		}
	});
}

function changeConnection(dbType) {

	var selectedOperatorId = $('#' + flowChartWorkSpaceId).flowchart('getSelectedOperatorId');
	var selectedOperatorData = $("#" + flowChartWorkSpaceId).flowchart('getOperatorData', selectedOperatorId);
	var connectionsDiv = "<table id='setConnectionsTable'>"
		+ "<tr><td>Connection</td><td><div id ='connectionComboBox'></div></td></tr>"
		+ "</table>"
		+ "<div><input id='applyToAllSources' type='checkbox' /><span>Apply new connection to all source Tables with same existing connection</span></div>"

	var connectionName = selectedOperatorData['connObj']['CONNECTION_NAME'];
	$("#etldialog").html(connectionsDiv);
	$("#etldialog").dialog({
		title: (labelObject['Message'] != null ? labelObject['Message'] : 'Set Connection'),
		modal: true,
		height: 'auto',
		minWidth: 300,
		width: 500,
		fluid: true,
		buttons: [{
			text: (labelObject['Ok'] != null ? labelObject['Ok'] : 'Ok'),
			click: function() {
				var newConnectionName = $("#connectionComboBox").find("input").val();
				var newConnectionObj = savedDBData[newConnectionName];
				selectedOperatorData['connObj'] = newConnectionObj;
				$("#" + flowChartWorkSpaceId).flowchart('setOperatorData', selectedOperatorId, selectedOperatorData);
				var applyToAllSources = $("#applyToAllSources").prop('checked');
				if (applyToAllSources) {
					var flowChartData = $('#' + flowChartWorkSpaceId).flowchart('getData');
					var operators = flowChartData['operators'];
					$.each(operators, function(indx) {
						var currentOperatorId = operators[indx]['operatorId'];
						var currentOperatorData = $("#" + flowChartWorkSpaceId).flowchart('getOperatorData', currentOperatorId);
						if (currentOperatorData['connObj'] != null) {
							var currentConnectionName = currentOperatorData['connObj']['CONNECTION_NAME'];
							if (currentConnectionName == connectionName) {
								//                                     var newConnectionObj = savedDBData[newConnectionName];
								currentOperatorData['connObj'] = newConnectionObj;
								$("#" + flowChartWorkSpaceId).flowchart('setOperatorData', currentOperatorId, currentOperatorData);
							}
						}

					})
				}
				$(this).html("");
				//                        //$(this).dialog("close");
				$(this).dialog("destroy");
			}
		}],
		open: function() {

			$(".ui-dialog").addClass('setConnectionPopup');
			//            setTimeout(function(){

			$("#connectionComboBox").jqxComboBox({
				source: [''],
				width: '200px',
				animationType: 'slide',
				placeHolder: "Select Connection"
			});
			$("#connectionComboBox").find("input").val(connectionName);
			$('#connectionComboBox').on('open', function(event) {
				var inputval = $("#connectionComboBox").find("input").val();
				$.ajax({
					type: "post",
					traditional: true,
					dataType: 'json',
					url: 'fetchAvailableConnections',
					cache: false,
					data: {
						dbType: dbType,
						schemaImage: 'images/DM_ORACLE.png'
					},
					success: function(response) {

						if (response != null && response != "") {
							var availableConnections = response['connectionsList'];
							$("#connectionComboBox").jqxComboBox({ source: availableConnections });
							$("#connectionComboBox").find("input").val(inputval);
						}
					},
					error: function(e) {
						console.log(e);
						sessionTimeout(e);
						stopLoader();
					}
				});
			});
			//            }, 50)

			$(this).closest(".ui-dialog").css("z-index", "9999")
			$(this).closest(".ui-dialog").find(".ui-button").eq(1).addClass("dialogyes");
			$(".visionHeaderMain").css("z-index", "999");
			$(".visionFooterMain").css("z-index", "999");
		},
		beforeClose: function(event, ui) {
			$(".visionHeaderMain").css("z-index", "99999");
			$(".visionFooterMain").css("z-index", "99999");
		}
	});
}

function showServerLog() {
	var url = "http://172.17.111.4:9990/console/index.html#log-file;server=ph-prod-pilog-a;name=server.log;external=false";
	//    var url = "http://172.17.111.4:9990/console/";
	var iframe = "<iframe id='thedialog' style='width: 100%; height:500px;' src='" + url + "' ></iframe>";
	$("#etldialog").html(iframe);
	$("#etldialog").dialog({
		title: (labelObject['Server Log'] != null ? labelObject['Server Log'] : 'Server Log'),
		modal: true,
		height: 'auto',
		minWidth: 300,
		width: 1000,
		fluid: true,
		buttons: [{
			text: (labelObject['Ok'] != null ? labelObject['Ok'] : 'Ok'),
			click: function() {

				$(this).html("");
				//                        //$(this).dialog("close");
				$(this).dialog("destroy");
			}
		}],
		open: function() {

			$(this).closest(".ui-dialog").css("z-index", "9999")
			$(this).closest(".ui-dialog").find(".ui-button").eq(1).addClass("dialogyes");
			$(".visionHeaderMain").css("z-index", "999");
			$(".visionFooterMain").css("z-index", "999");
		},
		beforeClose: function(event, ui) {
			$(".visionHeaderMain").css("z-index", "99999");
			$(".visionFooterMain").css("z-index", "99999");
		}
	});

	//    var url = "https://maps.google.com/?q=" + pargi + "&t=&z=13&ie=UTF8&iwloc=&output=embed";
	//    var iframe = "<iframe width='1100' height='500' id='gmap_canvas' src='" + url + "' frameborder='0' scrolling='no' marginheight='0' marginwidth='0'></iframe>";
	////    window.open(url);
	//    var modalObj = {
	//        title: labelObject['&nbsp;&nbsp;Candidate Location'] != null ? labelObject['&nbsp;&nbsp;Candidate Location'] : '&nbsp;&nbsp;Candidate Location',
	//        body: iframe,
	//    };
	//    var buttonArray = [
	//        {
	//            text: labelObject['Ok'] != null ? labelObject['Ok'] : 'Ok',
	//            click: function () {
	//            },
	//            isCloseButton: true
	//        }
	//    ];
	//    modalObj['buttons'] = buttonArray;
	//    createModal("etldialog", modalObj);
	//    $(".modal-dialog").addClass("modal-xl");
	//    stopLoader();


}


/*$(document).ready(function() {
	var ctrlDown = false,
		ctrlKey = 17,
		cmdKey = 91,
		vKey = 86,
		cKey = 67;

	$(document).keydown(function(e) {
		if (e.keyCode == ctrlKey || e.keyCode == cmdKey) ctrlDown = true;
	}).keyup(function(e) {
		if (e.keyCode == ctrlKey || e.keyCode == cmdKey) ctrlDown = false;
	});

	$(".etl-page-body").keydown(function(e) {
		if (ctrlDown && (e.keyCode == vKey || e.keyCode == cKey)) return false;
	});

	// Document Ctrl + C/V 
	var copyOperatorIds = [];
	$(document).keydown(function(e) {


		if (ctrlDown && (e.keyCode == cKey)) {
			console.log("Document catch Ctrl+C");
			copyOperatorIds = [];
			var flowChartData = $("#" + flowChartWorkSpaceId).flowchart("getData");
			$("#" + flowChartWorkSpaceId + " .selected").each(function() {
				var currentFlowcharArea = $(this).parent().parent().attr("id");
				var selectedOpeartorId = $(this).data("operator_id");
				copyOperatorIds.push(selectedOpeartorId);

			});
		}
		if (ctrlDown && (e.keyCode == vKey)) {
			console.log("Document catch Ctrl+V");




			if (copyOperatorIds != "[]") {
				var flowChartData = $("#" + flowChartWorkSpaceId).flowchart("getData");
				var highestKey = 0;
				var operators = flowChartData['operators'];
				$.each(operators, function(i) {
					var opId = parseInt(this['operatorId']);
					if (opId > highestKey) {
						highestKey = opId;
					}
				})

				var linksData = {};
				var copiedOperatorIds = [];
				var oldNewOpObj = {};
				$.each(copyOperatorIds, function(indx) {
					var currentOperatorId = copyOperatorIds[indx];
					var currentOperatorData = $("#" + flowChartWorkSpaceId).flowchart('getOperatorData', currentOperatorId);
					highestKey++;
					currentOperatorData['operatorId'] = highestKey;
					oldNewOpObj[currentOperatorId] = highestKey;
					currentOperatorData['top'] = parseInt(currentOperatorData['top']) + 100;
					$("#" + flowChartWorkSpaceId).flowchart('addOperator', currentOperatorData);

					var toOpLinkArray = $("#" + flowChartWorkSpaceId).flowchart('getLinksFrom', currentOperatorId);

					$.each(toOpLinkArray, function(indx) {
						var fromOp = this['fromOperator'];
						var toOP = this['toOperator'];
						linksData[fromOp + "_" + toOP] = this;
						//                            $('#' + flowChartWorkSpaceId).flowchart('addLink', newLink);

					})

					var fromOpLinkArray = $("#" + flowChartWorkSpaceId).flowchart('getLinksFrom', currentOperatorId);
					$.each(fromOpLinkArray, function(indx) {
						var fromOp = this['fromOperator'];
						var toOP = this['toOperator'];
						linksData[fromOp + "_" + toOP] = this;
					})

				})

				$.each(linksData, function(key, val) {
					var newLink = {};
					newLink['fromOperator'] = oldNewOpObj[val['fromOperator']];
					newLink['toOperator'] = oldNewOpObj[val['toOperator']];
					newLink['fromConnector'] = 'output_1';
					newLink['toConnector'] = 'input_1';
					newLink['toSubConnector'] = 0;
					newLink['fromSubConnector'] = 0;
					$('#' + flowChartWorkSpaceId).flowchart('addLink', newLink);
				})


			}
		}
	});
});*/


// connectiontabs code start //

var $etlFolderSchemaObject;

function getConExplorerHomeDivString(newInstance) {
	var explorerHtml = "<div id='etlSchemaExplorer_" + newInstance + "' class='etlSchemaExplorerInstance' explorer-instance='" + newInstance + "' data-level='0'>"
		+ "<div id='etlSchemaExplorerOptions'>"
		+ "<img class='etlexplorerOptionsImg' src='images/etl/back.png' onclick=etlExplorerGoBack('" + newInstance + "') />"
		+ "<img class='etlexplorerOptionsImg' src='images/etl/home.png' onclick=etlExplorerGoHome('" + newInstance + "') />"
		+ "<img class='etlexplorerOptionsImg' src='images/etl/refresh.png' onclick=refreshConnectionExplorer('" + newInstance + "') />"
		+ "<img class='etlexplorerOptionsImg' src='images/Detele Red Icon.svg' onclick=deleteSelectedConnExplorerItems(event,'" + newInstance + "') id='deleteConnExplorerItemsIcon' />"
		
                + "<img class='etlexplorerOptionsImg' src='images/etl/threedots-ver.png' onclick=explorerMoreOptions(event,'" + newInstance + "') style='float:right;' />"
		+ "</div>"
        
		+ "<div class='etlSchemaExplorerBreadCrumb' id='etlSchemaExplorerBreadCrumb_" + newInstance + "' ><span></span></div>"
		+ "<input placeholder='Search... ' id='etlSchemaExplorerSearchInput_" + newInstance + "' class='etlSchemaExplorerSearchInput m-2' value='' style='display:none;'/>"
		+ "<input type='hidden' id='etlSchemaExplorerStartIndex_" + newInstance + "'  value='0' />"

		+ "<div id='etlSchemaExplorerInner_" + newInstance + "' class='etlSchemaExplorerInner' >"

		+ "<div class='etlConnectionItem etlFolder' id='files' data-level='0'>"
		+ "<img class='etlexplorerImg' src='images/File-Icon.svg' />"
		+ "<span>Files</span>"
		+ "</div>"
		+ "<div class='etlConnectionItem etlFolder' id='Database' data-level='0'>"
		+ "<img  class='etlexplorerImg' src='images/DB-Icon.svg' />"
		+ "<span>Database</span>"
		+ "</div>"
		+ "<div class='etlConnectionItem etlFolder' id='ERP' data-level='0'>"
		+ "<img class='etlexplorerImg' src='images/ERP-Icon.svg' />"
		+ "<span>ERP</span>"
		+ "</div>"
		+ "<div class='etlConnectionItem etlFolder' id='onlineServicesDiv' data-level='0'>"
		+ "<img class='etlexplorerImg' src='images/ONLINE_SERVICES_Icon.svg' />"
		+ "<span>Online Sevices</span>"
		+ "</div>"
		+ "</div>"
		+ "</div>";
	return explorerHtml;
}

function deleteSelectedConnExplorerItems(event, instance ){
    showLoader();
   var dataDivId = $("#etlSchemaExplorerInner_"+instance).attr("data-divid");
   
   if (dataDivId == "Files") {
       var fileConnObjArray = [];
       var abc =$('.etlConnectionItemSelected:checkbox:checked');
       $('.etlConnectionItemSelected:checkbox:checked').each(function(){
           var dataConnObj = $(this).closest(".etlConnectionItem").attr("data-connobj");
           fileConnObjArray.push(JSON.parse(dataConnObj));
       })
       $.ajax({
		type: 'post',
		traditional: true,
		dataType: 'html',
		cache: false,
		url: 'deleteSelectedConnExplorerItems',
		async: true,
		data: {
			fileConnObjArray: JSON.stringify(fileConnObjArray)
		},
		success: function(response) {
			stopLoader();
                        $("#deleteConnExplorerItemsIcon").hide();
                        refreshConnectionExplorer(instance);
                        showMesg(response)
		},
		error: function(e) {

			console.log(e);
			sessionTimeout(e);
			stopLoader();
		}
	});
   }
}

function explorerMoreOptions(event, instance){
   var dataDivId = $("#etlSchemaExplorerInner_"+instance).attr("data-divid");
   if (dataDivId == "Files") {
        var menuItems = "<li id='connExploreritemSelection_"+instance+"' >Select</li>";
        var menuHeight = 1;

        $("#jqxMenu").remove();
        $(".etl-page-body").append("<div id='jqxMenu'><ul></ul></div>");
        $("#jqxMenu ul").html(menuItems);
        var contextMenu = $("#jqxMenu").jqxMenu({
                width: '120px', height: menuHeight * 27.5 + 'px', autoOpenPopup: false, mode: 'popup',
                //                                    theme: 'energyblue'
        }); // ravi start
        var scrollTop = $(window).scrollTop();
        var scrollLeft = $(window).scrollLeft();
        contextMenu.jqxMenu('open', parseInt(event.clientX) + 5 + scrollLeft, parseInt(event.clientY) + 5 + scrollTop);
        
        
   }
    
    
    $("#connExploreritemSelection_"+instance).click(function(event){
        $("#etlSchemaExplorerInner_"+instance).find(".etlConnectionItem").each(function(i){
            $(this).prepend("<input type='checkbox' class='etlConnectionItemSelected etl-checkbox-round-large selectContactCheckBox' />");
        })
        $("#deleteConnExplorerItemsIcon").show();
    })
}


function refreshConnectionExplorer(instance) {
	var divId = $("#etlSchemaExplorerInner_" + instance).attr("data-divId");
	var level = $("#etlSchemaExplorerInner_" + instance).attr("data-level");
	var fileType = $("#etlSchemaExplorerInner_" + instance).attr("data-fileType");
	var connectionType = $("#etlSchemaExplorerInner_" + instance).attr("data-conntype");
	var schemaObjectType = $("#etlSchemaExplorerInner_" + instance).attr("data-schemaobjecttype");
	var connectionName = $("#etlSchemaExplorerInner_" + instance).attr("data-connname");
	var connectionObjStr = $("#etlSchemaExplorerInner_" + instance).attr("data-connobj");
	level = parseInt(level);
	if (level > 0) {
		level = level - 1;

		var filterValue = $("#etlSchemaExplorerSearchInput_" + instance).val();
		var startIndex = $("#etlSchemaExplorerStartIndex_" + instance).val();

		loadConnections(instance, divId, level, fileType, connectionType, schemaObjectType, connectionName, connectionObjStr, filterValue, startIndex);
	} else {
		loadSavedConnections(instance);
	}
}

function etlExplorerGoHome(instance) {
	var selectedItem = $('#connectionTabs').jqxTabs('selectedItem');
	var explorerHtml = getConExplorerHomeDivString(instance);

	$('#connectionTabs').jqxTabs('setContentAt', selectedItem, explorerHtml);

	initializeSavedConnectionDomEvents(instance);
}

function etlExplorerGoBack(instance) {

	var divId = $("#etlSchemaExplorerInner_" + instance).attr("data-divId");
	var level = $("#etlSchemaExplorerInner_" + instance).attr("data-level");
	var fileType = $("#etlSchemaExplorerInner_" + instance).attr("data-fileType");
	var connectionType = $("#etlSchemaExplorerInner_" + instance).attr("data-conntype");
	var schemaObjectType = $("#etlSchemaExplorerInner_" + instance).attr("data-schemaobjecttype");
	var connectionName = $("#etlSchemaExplorerInner_" + instance).attr("data-connname");
	var connectionObjStr = $("#etlSchemaExplorerInner_" + instance).attr("data-connobj");
	level = parseInt(level);
	if (level > 1) {
		level = level - 2;

		var filterValue = $("#etlSchemaExplorerSearchInput_" + instance).val();
		var startIndex = $("#etlSchemaExplorerStartIndex_" + instance).val();

		loadConnections(instance, divId, level, fileType, connectionType, schemaObjectType, connectionName, connectionObjStr, filterValue, startIndex);
	} else {
		loadSavedConnections(instance);
	}
}



function loadNewInstanceOfConnectionExplorer() {
	var instance = $("#connectionTabInstance").val();
	var newInstance = parseInt(instance) + 1;
	$("#connectionTabInstance").val(newInstance);

	var explorerHtml = getConExplorerHomeDivString(newInstance);

	var length = $('#connectionTabs').jqxTabs('length');
	
	$('#connectionTabs').jqxTabs('addAt', length - 1, "Conn Explorer", explorerHtml);
	$("#connectionTabInstance").val();
	initializeSavedConnectionDomEvents(newInstance);
}

function loadSavedConnections(instance) {

	var explorerHtml = getConExplorerHomeDivString(instance);

	var connectionTabs = "<div id='connectionTabs' >"
		+ "<ul style='margin-left: 20px;'>"
		+ "<li>Conn Explorer</li>"
		+ "<li onclick= 'loadNewInstanceOfConnectionExplorer()' class='etlAddConnectionExplorer' >✙</li>"
		+ "</ul>"
		+ "<div>" + explorerHtml + "</div>"
		+ "<div></div>"
		+ "</div>"
		+ "<input id='connectionTabInstance' type='hidden' value = '1'/>";

	$("#savedConnectionsIconsDiv").html(connectionTabs);

	$('#connectionTabs').on('created', function () {
		
	}); 
	
	$('#connectionTabs').jqxTabs({ width: "100%", height: "100%" , showCloseButtons:true});
	
	//$('#connectionTabs').jqxTabs('showAllCloseButtons');
	
	initializeSavedConnectionDomEvents(instance);
}

function initializeSavedConnectionDomEvents(instance) {
    
        $("#deleteConnExplorerItemsIcon").hide();
	/*$('#connectionTabs').unbind('selected').on('selected', function(event) {
		var li = $("#connectionTabs").find("li");
		$("#connectionTabs").find("li").find("style").remove();
		var lisel = $("#connectionTabs").find("li.jqx-tabs-title-selected-top");
		var width = $("#connectionTabs").find("li.jqx-tabs-title-selected-top").width();
		$("#connectionTabs").find("li.jqx-tabs-title-selected-top").append('<style>.etl-page-body #connectionTabs .jqx-tabs-title-selected-top::after{margin-left:'+(width+8)+'px !important;}</style>');

	});*/

	/*$('#connectionTabs').unbind('add').on('add', function(event) {
		var li = $("#connectionTabs").find("li");	
		$("#connectionTabs").find("li").find("style").remove();
		var lisel = $("#connectionTabs").find("li.jqx-tabs-title-selected-top");
		var width = $("#connectionTabs").find("li.jqx-tabs-title-selected-top").width();
		$("#connectionTabs").find("li.jqx-tabs-title-selected-top").append('<style>.etl-page-body #connectionTabs .jqx-tabs-title-selected-top::after{margin-left:'+(width+8)+'px !important;}</style>');

	});*/
	
	$("#etlSchemaExplorer_" + instance).find(".etlFolder").unbind("click").on("click", function(event) {
		if ( !$(event.target).hasClass("etlexplorerRightClickOptions") ){
		var divId = $(event.currentTarget).attr("id");
		var level = $(event.currentTarget).attr("data-level");
		var fileType = $(event.currentTarget).attr("data-fileType");
		var connectionType = $(event.currentTarget).attr("data-conntype");
		var schemaObjectType = $(event.currentTarget).attr("data-schemaobjecttype");
		var connectionName = $(event.currentTarget).attr("data-connname");
		var connectionObjStr = $(event.currentTarget).attr("data-connobj");

		var filterValue = $("#etlSchemaExplorerSearchInput_" + instance).val();
		var startIndex = $("#etlSchemaExplorerStartIndex_" + instance).val();

		loadConnections(instance, divId, level, fileType, connectionType, schemaObjectType, connectionName, connectionObjStr, filterValue, startIndex);
	
		}
		})


	$("#etlSchemaExplorer_" + instance).find(".etlFile").on('mousedown', function(event) {
		if (isRightClick(event)) {
			var title = $(event.currentTarget).text();
			var connectionObjStr = $(event.currentTarget).attr("data-connobj");
			var connObj = JSON.parse(connectionObjStr);
			var fileObj = {};

			fileObj['filePath'] = connObj['filePath'];
			fileObj['fileType'] = connObj['fileType'];
			for (var entitykey in HtmlEntities) {
				var entity = HtmlEntities[entitykey];
				var regex = new RegExp(entitykey, 'g');
				title = title.replace(regex, entity);
			}
			fileObj['fileName'] = title;
			//   PKH View file data end ----->  
                        
			height = 2;
			var menuItems = "<li onclick=deleteFile('" + JSON.stringify(fileObj) + "') file-data='" + JSON.stringify(fileObj) + "' >Delete</li>";
			menuItems += "<li onclick=viewFileData('" + JSON.stringify(fileObj) + "')>View File Data</li>";
			//menuItems += "<li onclick=selectFiles('" + JSON.stringify(fileObj) + "')>View File Data</li>";
			$("#jqxMenu").remove();
			$(".etl-page-body").append("<div id='jqxMenu'><ul></ul></div>");
			$("#jqxMenu ul").html(menuItems);
			var contextMenu = $("#jqxMenu").jqxMenu({
				width: '140px', height: height * 30 + 'px', autoOpenPopup: false, mode: 'popup',
				//                                    theme: 'energyblue'
			}); // ravi start


			var scrollTop = $(window).scrollTop();
			var scrollLeft = $(window).scrollLeft();
			contextMenu.jqxMenu('open', parseInt(event.clientX) + 5 + scrollLeft, parseInt(event.clientY) + 5 + scrollTop);
			
			$("#etlSchemaExplorerInner_" + instance).scroll(function(scrollevent) {
			  $("#jqxMenu").remove();
			});
			
			return false;
		}
	});


	$("#etlSchemaExplorer_" + instance).find(".etlFolderSchemaObject").on('mousedown', function(event) {
		if (isRightClick(event)) {
			$etlFolderSchemaObject = $(event.currentTarget);
			var $this = $(event.currentTarget);
			var title = $(event.currentTarget).text();
			var connectionObjStr = $(event.currentTarget).attr("data-connobj");
			var connObj = JSON.parse(connectionObjStr);

			var divId = $("#etlSchemaExplorerInner_" + instance).attr("data-divId");
			var level = $("#etlSchemaExplorerInner_" + instance).attr("data-level");
			var fileType = $("#etlSchemaExplorerInner_" + instance).attr("data-fileType");
			var connectionType = $("#etlSchemaExplorerInner_" + instance).attr("data-conntype");
			var schemaObjectType = $(event.currentTarget).attr("data-schemaobjecttype");
			var connectionName = $("#etlSchemaExplorerInner_" + instance).attr("data-connname");
			var connectionObjStr = $("#etlSchemaExplorerInner_" + instance).attr("data-connobj");

			height = 2;
			var menuItems = "<li onclick=filterConnectionExplorerTables('" + instance + "','" + divId + "','" + 4 + "','" + fileType + "','" + connectionType + "','" + schemaObjectType + "','" + connectionName + "','" + connectionObjStr + "')>Filter</li>";
			menuItems += "<li onclick=openSchemaObjectsInNewTab('" + instance + "','" + divId + "','" + 4 + "','" + fileType + "','" + connectionType + "','" + schemaObjectType + "','" + connectionName + "','" + connectionObjStr + "')>Open in Newtab</li>";
			
			$("#jqxMenu").remove();
			$(".etl-page-body").append("<div id='jqxMenu'><ul></ul></div>");
			$("#jqxMenu ul").html(menuItems);
			var contextMenu = $("#jqxMenu").jqxMenu({
				width: '140px', height: height * 30 + 'px', autoOpenPopup: false, mode: 'popup',
				//                                    theme: 'energyblue'
			}); // ravi start


			var scrollTop = $(window).scrollTop();
			var scrollLeft = $(window).scrollLeft();
			contextMenu.jqxMenu('open', parseInt(event.clientX) + 5 + scrollLeft, parseInt(event.clientY) + 5 + scrollTop);
			$("#etlSchemaExplorerInner_" + instance).scroll(function(scrollevent) {
			 $("#jqxMenu").remove();
			});
			return false;
		}
                // highLightSelectedTable(this);

	});

	

		
		$(".etlConnectionItem").hover(
				  function(event) {
				    if ($(event.currentTarget).find(".etlexplorerRightClickOptions").length > 0 ) {
					$(event.currentTarget).find(".etlexplorerRightClickOptions").css("display","block");
					} 
				  }, function(event) {
				   if ($(event.currentTarget).find(".etlexplorerRightClickOptions").length > 0 ) {
					$(event.currentTarget).find(".etlexplorerRightClickOptions").css("display","none");
					} 
				  });
	
	$("#etlSchemaExplorer_" + instance).find(".etlConnection").on('mousedown', function(event) {
		if (isRightClick(event)) {


			var connectionName = $(event.currentTarget).attr("data-connname");


			height = 1;
			var menuItems = "<li onclick=viewConnection('" + connectionName + "')>View</li>";
			menuItems += "<li onclick=deleteConnection('" + connectionName + "')>Delete</li>";
			menuItems += "<li onclick=viewSQLEditor('" + connectionName + "')>SQL</li>";
			$("#jqxMenu").remove();
			$(".etl-page-body").append("<div id='jqxMenu'><ul></ul></div>");
			$("#jqxMenu ul").html(menuItems);
			var contextMenu = $("#jqxMenu").jqxMenu({
				width: '140px', height: height * 30 + 'px', autoOpenPopup: false, mode: 'popup',
				//                                    theme: 'energyblue'
			}); // ravi start


			var scrollTop = $(window).scrollTop();
			var scrollLeft = $(window).scrollLeft();
			contextMenu.jqxMenu('open', parseInt(event.clientX) + 5 + scrollLeft, parseInt(event.clientY) + 5 + scrollTop);
			$("#etlSchemaExplorerInner_" + instance).scroll(function(scrollevent) {
			  $("#jqxMenu").remove();
			});
			return false;
		}

	});


	$("#etlSchemaExplorer_" + instance).find(".etlSchemaObject").on('mousedown', function(event) {
		if (isRightClick(event)) {
			
			var $this = $(event.currentTarget);
			var title = $(event.currentTarget).text();
			var connectionObjStr = $(event.currentTarget).attr("data-connobj");
			var connObj = JSON.parse(connectionObjStr);

			var divId = $("#etlSchemaExplorerInner_" + instance).attr("data-divId");
			var level = $("#etlSchemaExplorerInner_" + instance).attr("data-level");
			var fileType = $("#etlSchemaExplorerInner_" + instance).attr("data-fileType");
			var connectionType = $("#etlSchemaExplorerInner_" + instance).attr("data-conntype");

			var connectionName = $("#etlSchemaExplorerInner_" + instance).attr("data-connname");
			var connectionObjStr = $("#etlSchemaExplorerInner_" + instance).attr("data-connobj");
                        
                        var funcProcFlag = $(event.currentTarget).attr("func-proc-flag");
                        var schemaObjectType = $(event.currentTarget).attr("data-schemaobjecttype");


			var height = 1;
                        var menuItems = "";
                    if(schemaObjectType == "FUNCTIONS"){
                        menuItems = "<li onclick=viewTableInfo('" + connectionName + "','" + title + "','" + JSON.stringify(connObj) + "','"+ funcProcFlag+"')>View</li>";
                        
                    } else if (schemaObjectType == "PROCEDURES"){
                        menuItems = "<li onclick=viewTableInfo('" + connectionName + "','" + title + "','" + JSON.stringify(connObj) + "','"+ funcProcFlag+"')>View</li>";
                        menuItems += "<li onclick=scheduleProcedure('" + connectionName + "','" + title + "','" + JSON.stringify(connObj) + "')>Schedule</li>";
                    
                    } else{
                        menuItems = "<li onclick=viewTableData('" + connectionName + "','" + title + "'," + JSON.stringify(connObj) + ")>View Data</li>";
                        if (!$(event.currentTarget).hasClass("etlERPSchemaObject")) {
                            menuItems += "<li onclick=alterTable('" + connectionName + "','" + title + "'," + JSON.stringify(connObj) + ")>Alter</li>";
                            height = 2;
                        }
                        menuItems += "<li onclick=advancedOptions('" + connObj['CONNECTION_NAME'] + "','" + title + "'," + JSON.stringify(connObj) + ")>Adv Options</li>";
                        height = height + 1; 
                    }
                    menuItems += "<li name='"+title+"' onclick=copyTableName('" + title + "')>Copy Name</li>";
                        height = height + 1;
        
			
			$("#jqxMenu").remove();
			$(".etl-page-body").append("<div id='jqxMenu'><ul></ul></div>");
			$("#jqxMenu ul").html(menuItems);
			var contextMenu = $("#jqxMenu").jqxMenu({
				width: '140px', height: height * 30 + 'px', autoOpenPopup: false, mode: 'popup',
				//                                    theme: 'energyblue'
			}); // ravi start


			var scrollTop = $(window).scrollTop();
			var scrollLeft = $(window).scrollLeft();
			contextMenu.jqxMenu('open', parseInt(event.clientX) + 5 + scrollLeft, parseInt(event.clientY) + 5 + scrollTop);
			$("#etlSchemaExplorerInner_" + instance).scroll(function(scrollevent) {
			  $("#jqxMenu").remove();
			});
			return false;
		}
                highLightSelectedTable(this);
	});

	$("#etlSchemaExplorer_" + instance).find("div.etlFile").draggable({
		cursor: "move",
		opacity: 0.7,
		helper: 'clone',
		//                                appendTo: 'body',
		zIndex: 1000,
		helper: function(event, ui) {
			var $this = $(this);
			var innerText = $this.text();
			var title = innerText;
			var descripttion = $this.attr("title");
			var value = this.parentElement.id.split("-")[1];
			var connectionObjStr = $this.attr("data-connobj");;
			var connectionObj = JSON.parse(connectionObjStr);

			var operatorData = {
				top: event.screenX,
				left: event.screenY,
				statusLabel: innerText.trim(),
				tableName: (connectionObj['CONN_CUST_COL1'] != 'SAP_ECC' && connectionObj['CONN_CUST_COL1'] != 'SAP_HANA') ? (connectionObj['CONN_USER_NAME'] + '.' + innerText.trim()) : innerText.trim(),
				//                        tableName: connectionObj['CONN_USER_NAME'] + "." + innerText.trim(),
				dragType: "Table",
				CONNECTION_NAME: connectionObj['CONNECTION_NAME'], //CONNECTION_NAME
				CONN_DB_NAME: connectionObj['CONN_DB_NAME'], //CONN_DB_NAME
				CONN_CUST_COL1: connectionObj['CONN_CUST_COL1'], //CONN_CUST_COL1
				connObj: connectionObj,
				properties: {
					//body: '<div title="' + innerText + '" class="visionOpLabelDiv">' + innerText + '</div>',
					body: '<div  title="' + connectionObj['CONNECTION_NAME'] + ' . ' + title + '" class=""><div title="Double Click here to view the Transformations rules(' + connectionObj['CONNECTION_NAME'] + '.' + title + ')" style="cursor:pointer"><img src="images/GridDB.svg"'
						+ 'class="visionOpIcons"  ondblclick=viewTrfmRules()  style="width:18px;height: 18px;padding-top: 6px;"/></div>'

						+ '</div><div class="visionOpLabelDiv" title="Double click to Rename" ondblclick="renameOperatorDisplayLabel(\'' + title + '\',this)" style="width:' + (title.length * 5) + 'px;margin-left:' + (((title.length * -5) / 2) + 14) + 'px;">' + title + '</div>',
					inputs: {
						input_1: {
							label: '',
							multipleLinks: true
						}
					},
					outputs: {
						output_1: {
							label: '',
						}
					}
				}
			};
			//            var obj = $('#'+flowChartWorkSpaceId).flowchart('getOperatorElement', operatorData);
			var contentSplitterStyle = $("#contentSplitter").css("display");
			var contentSplitter1Style = $("#contentSplitter1").css("display");
			var $flowchart;
			$flowchart = $('#' + flowChartWorkSpaceId);
			$("#draggableOperatorId").remove();
			var body = '<div id="draggableOperatorId" title="' + connectionObj['CONNECTION_NAME'] + ' . ' + this.label + '" class = "visionObjectNameDiv" style="cursor:pointer">'
				+ '<img class="visionTableIcon" src="images/GridDB.svg"/>'
				+ '<span> ' + innerText + '</span></div>';
			$("body").append(body);
			return $("#draggableOperatorId");
			//                    return  $flowchart.flowchart('getOperatorElement', operatorData);
			//                    return  $('#'+flowChartWorkSpaceId).flowchart('getOperatorElement', operatorData);
		},
		stop: function(e, ui) {
			var selItems = [];
			if (!(selectedItems != null && selectedItems.length != null && selectedItems.length > 0)) {
				selItems[0] = this.innerText;
			} else {
				selItems = selectedItems;
				//                        for (var i = 0; i < selectedItems.length; i++) {
				//                            selItems[i] = selectedItems[i];
				//                        }
			}
			$(".flowchart-operator-connector-label").hide();
			var contentSplitterStyle = $("#contentSplitter").css("display");
			var contentSplitter1Style = $("#contentSplitter1").css("display");
			var $flowchart;
			var $container;
			$flowchart = $('#' + flowChartWorkSpaceId);
			$container = $('#' + flowChartWorkSpaceId);
			//                    var $flowchart = $('#'+flowChartWorkSpaceId);
			//
			//                    var $container = $('#'+flowChartWorkSpaceId);
			var elOffset = ui.offset;
			var containerOffset = $container.offset();
			if (elOffset.left > containerOffset.left &&
				elOffset.top > containerOffset.top &&
				elOffset.left < containerOffset.left + $container.width() &&
				elOffset.top < containerOffset.top + $container.height()) {
				var flowchartOffset = $flowchart.offset();
				var relativeLeft = elOffset.left - flowchartOffset.left;
				var relativeTop = elOffset.top - flowchartOffset.top;
				var positionRatio = $flowchart.flowchart('getPositionRatio');
				relativeLeft /= positionRatio;
				relativeTop /= positionRatio;
				elOffset.left = relativeLeft;
				elOffset.top = relativeTop;
			}
			var top = elOffset.top;
			for (var j = 0; j < selItems.length; j++) {
				// ravi start
				trfmRulesChanged = true;
				// ravi end
				var $this = $(this);
				var innerText = selItems[j];
				var title = innerText;
				var value = this.parentElement.id.split("-")[1];
				var connectionObjStr = $this.attr("data-connobj");;
				var connectionObj = JSON.parse(connectionObjStr);
				var imageIcon = connectionObj['imageIcon'];


				var executionSequence = getHighestSequence(flowChartWorkSpaceId);


				var data = {
					top: top,
					left: elOffset.left,
					dragType: "File",
					executionSequence: executionSequence
				};

				var fileObj = {};
				var filePath = connectionObj['filePath'];
				if (filePath != null && filePath.lastIndexOf("\\") > -1) {
					filePath = filePath.substring(filePath.lastIndexOf("\\") + 1);
				}
				fileObj['filePath'] = filePath;
				fileObj['fileType'] = connectionObj['fileType'];
				for (var entitykey in HtmlEntities) {
					var entity = HtmlEntities[entitykey];
					var regex = new RegExp(entitykey, 'g');
					title = title.replace(regex, entity);
				}

				fileObj['fileName'] = title;


				data['connObj'] = connectionObj;
				data['filePath'] = connectionObj['filePath'];
				data['properties'] = {

					body: '<div  title="' + title + '" class="etlOperatorBody" data-icontype="FILE" ><div><img src="' + imageIcon + '"'
						+ 'class="visionOpIcons" title="Double click here to view the data" ondblclick=viewFileData(\'' + JSON.stringify(fileObj) + '\')  style="width:18px;height: 18px;"/></div>'
						+ '<div class="etlOperatorExecutionSequecne"><span>' + executionSequence + '</span></div>'
						+ '<div class="visionOpLabelDiv" title="Double click to Rename" ondblclick="renameOperatorDisplayLabel(\'' + title + '\',this)" style="width:' + (title.length * 5) + 'px;margin-left:' + (((title.length * -5) / 2) + 14) + 'px;">' + title + '</div>',
					inputs: {
						input_1: {
							label: '',
						}
					},
					outputs: {
						output_1: {
							label: '',
						}
					}
				}

				var operatorId = $flowchart.flowchart('addOperator', data);


				$(".flowchart-operator-connector-label").hide();
				$(".flowchart-operator-title").hide();
				//                            var component = $(this).attr("component");
				//                            if (component != "Y") {
				//                                inputOutPutPopUp(operatorId);
				//                            }
				trfmRulesChanged = true;
				top = top + 70;
				initializeOperators();

			}
		}

	});

	$("#etlSchemaExplorer_" + instance).find("div.etlSchemaObject").draggable({
		cursor: "move",
		opacity: 0.7,
		helper: 'clone',
		//                                appendTo: 'body',
		zIndex: 1000,
		helper: function(event, ui) {
			var $this = $(this);
			var innerText = $this.text();
			var title = innerText;
			var descripttion = $this.attr("title");
			var value = this.parentElement.id.split("-")[1];
			var connectionObjStr = $this.attr("data-connobj");;
			var connectionObj = JSON.parse(connectionObjStr);

			var operatorData = {
				top: event.screenX,
				left: event.screenY,
				statusLabel: innerText.trim(),
				tableName: (connectionObj['CONN_CUST_COL1'] != 'SAP_ECC' && connectionObj['CONN_CUST_COL1'] != 'SAP_HANA') ? (connectionObj['CONN_USER_NAME'] + '.' + innerText.trim()) : innerText.trim(),
				//                        tableName: connectionObj['CONN_USER_NAME'] + "." + innerText.trim(),
				dragType: "Table",
				CONNECTION_NAME: connectionObj['CONNECTION_NAME'], //CONNECTION_NAME
				CONN_DB_NAME: connectionObj['CONN_DB_NAME'], //CONN_DB_NAME
				CONN_CUST_COL1: connectionObj['CONN_CUST_COL1'], //CONN_CUST_COL1
				connObj: connectionObj,
				properties: {
					//body: '<div title="' + innerText + '" class="visionOpLabelDiv">' + innerText + '</div>',
					body: '<div  title="' + connectionObj['CONNECTION_NAME'] + ' . ' + title + '" class="etlOperatorBody"><div title="Double Click here to view the Transformations rules(' + connectionObj['CONNECTION_NAME'] + '.' + title + ')" style="cursor:pointer"><img src="images/GridDB.svg"'
						+ 'class="visionOpIcons"  ondblclick=viewTrfmRules()  style="width:18px;height: 18px;padding-top: 6px;"/></div>'

						+ '</div><div class="visionOpLabelDiv" title="Double click to Rename" ondblclick="renameOperatorDisplayLabel(\'' + title + '\',this)" style="width:' + (title.length * 5) + 'px;margin-left:' + (((title.length * -5) / 2) + 14) + 'px;">' + title + '</div>',
					inputs: {
						input_1: {
							label: '',
							multipleLinks: true
						}
					},
					outputs: {
						output_1: {
							label: '',
						}
					}
				}
			};
			//            var obj = $('#'+flowChartWorkSpaceId).flowchart('getOperatorElement', operatorData);
			var contentSplitterStyle = $("#contentSplitter").css("display");
			var contentSplitter1Style = $("#contentSplitter1").css("display");
			var $flowchart;
			$flowchart = $('#' + flowChartWorkSpaceId);
			$("#draggableOperatorId").remove();
			var body = '<div id="draggableOperatorId" title="' + connectionObj['CONNECTION_NAME'] + ' . ' + this.label + '" class = "visionObjectNameDiv" style="cursor:pointer">'
				+ '<img class="visionTableIcon" src="images/GridDB.svg"/>'
				+ '<span> ' + innerText + '</span></div>';
			$("body").append(body);
			return $("#draggableOperatorId");
			//                    return  $flowchart.flowchart('getOperatorElement', operatorData);
			//                    return  $('#'+flowChartWorkSpaceId).flowchart('getOperatorElement', operatorData);
		},
		stop: function(e, ui) {
			var selItems = [];
			if (!(selectedItems != null && selectedItems.length != null && selectedItems.length > 0)) {
				selItems[0] = this.innerText;
			} else {
				selItems = selectedItems;
				//                        for (var i = 0; i < selectedItems.length; i++) {
				//                            selItems[i] = selectedItems[i];
				//                        }
			}
			$(".flowchart-operator-connector-label").hide();
			var contentSplitterStyle = $("#contentSplitter").css("display");
			var contentSplitter1Style = $("#contentSplitter1").css("display");
			var $flowchart;
			var $container;
			$flowchart = $('#' + flowChartWorkSpaceId);
			$container = $('#' + flowChartWorkSpaceId);
			//                    var $flowchart = $('#'+flowChartWorkSpaceId);
			//
			//                    var $container = $('#'+flowChartWorkSpaceId);
			var elOffset = ui.offset;
			var containerOffset = $container.offset();
			if (elOffset.left > containerOffset.left &&
				elOffset.top > containerOffset.top &&
				elOffset.left < containerOffset.left + $container.width() &&
				elOffset.top < containerOffset.top + $container.height()) {
				var flowchartOffset = $flowchart.offset();
				var relativeLeft = elOffset.left - flowchartOffset.left;
				var relativeTop = elOffset.top - flowchartOffset.top;
				var positionRatio = $flowchart.flowchart('getPositionRatio');
				relativeLeft /= positionRatio;
				relativeTop /= positionRatio;
				elOffset.left = relativeLeft;
				elOffset.top = relativeTop;
			}
			var top = elOffset.top;




			for (var j = 0; j < selItems.length; j++) {
				// ravi start
				trfmRulesChanged = true;
				var $this = $(this);
				var innerText = selItems[j];
				var title = innerText;
				var value = this.parentElement.id.split("-")[1];
				var connectionObjStr = $this.attr("data-connobj");;
				var connectionObj = JSON.parse(connectionObjStr);

				var sapOptionsIcon = "";
				if (connectionObj['CONN_CUST_COL1'] == "SAP_HANA" || connectionObj['CONN_CUST_COL1'] == "SAP_ECC") {
					sapOptionsIcon = "<div class='sapOptionsIconDiv'><img onclick='sapTableOptions()' src='images/Filter Icon-01.svg' /></div>"
				}

				var executionSequence = getHighestSequence(flowChartWorkSpaceId);

				var data = {
					top: top,
					left: elOffset.left,
					statusLabel: innerText.trim(),
					tableName: (connectionObj['CONN_CUST_COL1'] != 'SAP_ECC' && connectionObj['CONN_CUST_COL1'] != 'SAP_HANA') ? (connectionObj['CONN_USER_NAME'] + '.' + innerText.trim()) : innerText.trim(),
					//                            tableName: connectionObj['CONN_USER_NAME'] + "." + innerText.trim(),
					CONNECTION_NAME: connectionObj['CONNECTION_NAME'], //CONNECTION_NAME
					CONN_DB_NAME: connectionObj['CONN_DB_NAME'], //CONN_DB_NAME
					CONN_CUST_COL1: connectionObj['CONN_CUST_COL1'], //CONN_CUST_COL1
					dragType: "Table",
					executionSequence: executionSequence,
					connObj: connectionObj,
					//                statusLabel: innerText,
					properties: {

						//                                title: innerText,
						//  body: '<div  title="' + title + '"  class="visionOpLabelDiv">' + innerText + '</div>',
						body: '<div  title="' + connectionObj['CONNECTION_NAME'] + ' . ' + title + '" class="etlOperatorBody"  data-icontype="TABLE"  ><div title="Double Click here to view the Transformations rules(' + connectionObj['CONNECTION_NAME'] + '.' + title + ')" style="cursor:pointer"><img src="images/GridDB.svg"'
							+ 'class="visionOpIcons"  ondblclick=viewTrfmRules()  style="width:18px;height: 18px;padding-top: 6px;"/></div>'
							+ '<div class="etlOperatorExecutionSequecne"><span>' + executionSequence + '</span></div>'
							+ sapOptionsIcon
							+ '</div><div class="visionOpLabelDiv" title="Double click to Rename" ondblclick="renameOperatorDisplayLabel(\'' + title + '\',this)" style="width:' + (title.length * 5) + 'px;margin-left:' + (((title.length * -5) / 2) + 14) + 'px;">' + title + '</div>',
						inputs: {
							input_1: {
								label: 'I-MAP',
								multipleLinks: true
							}
						},
						outputs: {
							output_1: {
								label: 'O-MAP',
							}
						}
					}
				};
				var operatorId = $flowchart.flowchart('addOperator', data);


				//                        $dataModellerFlowchart.flowchart('addOperator', data);
				$(".flowchart-operator-connector-label").hide();
				$(".flowchart-operator-title").hide();
				top = top + 70;
				initializeOperators();
			}
		}

	});

	var timeout;
	$("#etlSchemaExplorerInner_" + instance).unbind("scroll").on("scroll", function(event) {
		console.log("scrolled :: ")
		var datalevel = parseInt($("#etlSchemaExplorerInner_" + instance).attr("data-level"));
		if (datalevel > 3) {
			if (($(this).scrollTop() + $(this).innerHeight() >= $(this)[0].scrollHeight) && ($(this)[0].scrollHeight > $(this).innerHeight())) {
				console.log("iam in scroll functionality...........");
				clearTimeout(timeout);
				timeout = setTimeout(function() {

					var divId = $("#etlSchemaExplorerInner_" + instance).attr("data-divId");
					var level = $("#etlSchemaExplorerInner_" + instance).attr("data-level");
					var fileType = $("#etlSchemaExplorerInner_" + instance).attr("data-fileType");
					var connectionType = $("#etlSchemaExplorerInner_" + instance).attr("data-conntype");
					var schemaObjectType = $("#etlSchemaExplorerInner_" + instance).attr("data-schemaobjecttype");
					var connectionName = $("#etlSchemaExplorerInner_" + instance).attr("data-connname");
					var connectionObjStr = $("#etlSchemaExplorerInner_" + instance).attr("data-connobj");

					var filterValue = $("#etlSchemaExplorerSearchInput_" + instance).val();
					var startIndex = $("#etlSchemaExplorerStartIndex_" + instance).val();

					loadConnections(instance, divId, level, fileType, connectionType, schemaObjectType, connectionName, connectionObjStr, filterValue, startIndex);
				}, 50);
			}
		}

	});

	var timeout;
	$("#etlSchemaExplorerSearchInput_" + instance).unbind("keyup").on("keyup", function(event) {
		clearTimeout(timeout);
		timeout = setTimeout(function() {
			var filterValue = $("#etlSchemaExplorerSearchInput_" + instance).val();

			$("#etlSchemaExplorerStartIndex_" + instance).val(0);
			//var childItem = $("#etlSchemaExplorerInner_"+instance).find(".etlFolder")[0];
			var divId = $("#etlSchemaExplorerInner_" + instance).attr("data-divId");
			var level = $("#etlSchemaExplorerInner_" + instance).attr("data-level");
			var fileType = $("#etlSchemaExplorerInner_" + instance).attr("data-fileType");
			var connectionType = $("#etlSchemaExplorerInner_" + instance).attr("data-conntype");
			var schemaObjectType = $("#etlSchemaExplorerInner_" + instance).attr("data-schemaobjecttype");
			var connectionName = $("#etlSchemaExplorerInner_" + instance).attr("data-connname");
			var connectionObjStr = $("#etlSchemaExplorerInner_" + instance).attr("data-connobj");

			var filterValue = $("#etlSchemaExplorerSearchInput_" + instance).val();
			var startIndex = $("#etlSchemaExplorerStartIndex_" + instance).val();
			loadConnections(instance, divId, level, fileType, connectionType, schemaObjectType, connectionName, connectionObjStr, filterValue, startIndex);


		}, 1000);

	});
}

function loadConnections(instance, divId, level, fileType, connectionType, schemaObjectType, connectionName, connectionObjStr, filterValue, startIndex) {
	showLoader();
	var limit = 50;

	$.ajax({
		type: "post",
		traditional: true,
		dataType: 'json',
		url: 'getAvaliableConnections',
		cache: false,
		//async: false,
		data: {
			instance: instance,
			divId: divId,
			level: level,
			fileType: fileType,
			connectionType: connectionType,
			schemaObjectType: schemaObjectType,
			connectionName: connectionName,
			connectionObjStr: connectionObjStr,
			filterValue: filterValue,
			startIndex: startIndex,
			limit: limit
		},
		success: function(response) {
			stopLoader();

			if (response != null && !jQuery.isEmptyObject(response)) {
				
				var explorerHtml = "";
				if (response['htmlDiv']!=null && response['htmlDiv']!=""){
					explorerHtml = response['htmlDiv'];
				} else {
					explorerHtml = "<div><img src='images/etl/nodatafound.png' class='etl_nodatafound_Img'></div>";
				};
			
				if (response['data-level'] > 3) {
					if (startIndex == 0) {
						$("#etlSchemaExplorerInner_" + instance).html(explorerHtml);
					} else {
						$("#etlSchemaExplorerInner_" + instance).append(explorerHtml);
					}


				} else {
					$("#etlSchemaExplorerInner_" + instance).html(explorerHtml);
					$("#etlSchemaExplorerStartIndex_" + instance).val(0);

				}

				if (response['data-level'] > 3 || (response['data-divId'] == "Files" && response['data-level'] == 2)) {
					$("#etlSchemaExplorerSearchInput_" + instance).show();
				} else {
					$("#etlSchemaExplorerSearchInput_" + instance).hide();
					$("#etlSchemaExplorerSearchInput_" + instance).val("");
				}

				if ((divId == "Database" || divId == "ERP") && parseInt(level) >= 3) {
					var startIndx = response['resultList'].length + parseInt(startIndex);
					$("#etlSchemaExplorerStartIndex_" + instance).val(startIndx);
				}

				if (response['breadCrumb'] != null && response['breadCrumb'] != "") {
					$("#etlSchemaExplorerBreadCrumb_" + instance).find("span").html(response['breadCrumb']);
				}

				var datalevel = response['data-level'];
				$("#etlSchemaExplorerInner_" + instance).attr("data-level", datalevel);

				$("#etlSchemaExplorerInner_" + instance).attr("data-divId", response['data-divId']);
				$("#etlSchemaExplorerInner_" + instance).attr("data-level", response['data-level']);
				$("#etlSchemaExplorerInner_" + instance).attr("data-fileType", response['data-fileType']);
				$("#etlSchemaExplorerInner_" + instance).attr("data-conntype", response['data-conntype']);
				$("#etlSchemaExplorerInner_" + instance).attr("data-schemaobjecttype", response['data-schemaobjecttype']);
				$("#etlSchemaExplorerInner_" + instance).attr("data-connName", response['data-connname']);
				$("#etlSchemaExplorerInner_" + instance).attr("data-connobj", response['data-connobj']);

				initializeSavedConnectionDomEvents(instance);
			}

		},
		error: function(e) {
			console.log(e);
			sessionTimeout(e);
			stopLoader();
		}
	});
}

function filterConnectionExplorerTables(instance, divId, level, fileType, connectionType, schemaObjectType, connectionName, connectionObjStr) {
	var html = "<input type='text' id='fileExplorerFilterVal' value='' />";
	$("#dialog").html(html);
	$("#dialog").dialog({
		title: (labelObject['Filter Value'] != null ? labelObject['Filter Value'] : 'Filter Value'),
		modal: true,
		width: 300,
		height: 135,
		fluid: true,
		buttons: [{
			id: 'filterDialogOk',
			text: (labelObject['Ok'] != null ? labelObject['Ok'] : 'Ok'),
			click: function() {
				var filterValue = $("#fileExplorerFilterVal").val()

				var startIndex = $("#etlSchemaExplorerStartIndex_" + instance).val();
				loadConnections(instance, divId, level, fileType, connectionType, schemaObjectType, connectionName, connectionObjStr, filterValue, startIndex);

				$("#etlSchemaExplorerSearchInput_" + instance).val(filterValue);
				$(this).html("");
				//$(this).dialog("close");
				$(this).dialog("destroy");
			}

		}],
		open: function() {
			$("#dialog").keyup(function(event) {
				if (event.keyCode === 13) {
					$("#filterDialogOk").click();
				}
			});

			$(this).closest(".ui-dialog").find(".ui-button").eq(1).addClass("dialogyes");
			$(".visionHeaderMain").css("z-index", "999");
			$(".visionFooterMain").css("z-index", "999");
		},
		beforeClose: function(event, ui) {
			$(".visionHeaderMain").css("z-index", "99999");
			$(".visionFooterMain").css("z-index", "99999");
		}
	});
}

function getHighestSequence(flowChartWorkSpaceId) {

	var flowchartData = $('#' + flowChartWorkSpaceId).flowchart('getData');
	var highestExecutionSequence = Object.keys(flowchartData['operators']).length + 1
	$.each(flowchartData['operators'], function(i) {
		if (parseInt(this['executionSequence']) >= highestExecutionSequence) {
			highestExecutionSequence = parseInt(this['executionSequence']) + 1;
		}
	})
	return highestExecutionSequence;
}

function setStatusIconOnOperator(statusOpArray) {
	$.each(statusOpArray, function(i) {
		var operatorIdStr = statusOpArray[i].substring(9);
		var operatorId = parseInt(operatorIdStr);
		var operatorData = $('#' + flowChartWorkSpaceId).flowchart('getOperatorData', operatorId);
		var body = operatorData['properties']['body'];
		var ele = document.createElement('div');
		ele.innerHTML = body;
		if ($(ele).find(".operatorProcessStatus").length > 0) {
			
		} else {
			$(ele).append("<div class='operatorProcessStatus' ><img src='images/etl/etl_check_icon.png' /></div>");
			operatorData['properties']['body'] = $(ele).html();
			$('#' + flowChartWorkSpaceId).flowchart('setOperatorData', operatorId, operatorData);
		}

	})
}



function initializeOperators() {
	$(".flowchart-operator,.mappingIconClassVertical").unbind("mouseenter").on("mouseenter",
		function() {
			$("#etlOperatorInfo").remove();
			var $this = this;
			if ($(this).hasClass("mappingIconClassVertical")) {
				$("<div id='etlOperatorInfo' class='etlGroupComponentsInfo' ><img  src='images/etl/info.png'></div>").insertAfter($(this).find("p"));
			} else if ($(this).hasClass("flowchart-operator")) {
				$(this).append("<div id='etlOperatorInfo' class='etlOperatorComponentInfo'  ><img  src='images/etl/info.png'></div>");
			}

			$("#etlOperatorInfo").popover({
				trigger: "click",
				//                title: "Event Timings", 
				content: function(event) {
					showComponentInfo($this, this);

					return '<div class="popoverContentDiv"><div class="voteAnalysisLoader"></div></div>'
				},
				html: true,
				placement: "right",
				//                    height:250px,
			});

			$("#pageBodyContent").unbind("mousedown").on("mousedown", function(event) {
				
				if (!$(event.target).closest(".popover-body").length > 0 
					&&  $(event.target).parent("div").attr("id") != "etlOperatorInfo" ) {
					var iddd = $(event.target).parent("div").attr("id");
					$(".popover").remove();
					$("#etlOperatorInfo").remove();
				}
				
				if (!$(event.target).closest(".popover-body").length > 0  ) {
					$(".popover").remove();
					//$("#etlOperatorInfo").remove();
				}
			})

		});



	$(".flowchart-operator, .mappingIconClassVertical").unbind("mouseleave").on("mouseleave",
		function(event) {
			if ($(".popover").length > 0) {

			} else {
				$("#etlOperatorInfo").remove();
			}
		})
}

function showComponentInfo($this, thiss) {
	var compName;
	if ($($this).find(".visionMapOperator").length > 0 ) {
		compName = $($($this).find(".visionMapOperator")[0]).attr("data-icontype");

	} else if ($($this).find(".etlOperatorBody").length > 0) {
		compName = $($($this).find(".etlOperatorBody")[0]).attr("data-icontype");

	} else if ($($this).hasClass("mappingIconClassVertical")) {
		compName = $($this).attr("data-type");

	}


	$.ajax({
		type: 'post',
		traditional: true,
		dataType: 'json',
		cache: false,
		url: 'getComponentInfo',
		async: true,
		data: {
			compName: compName
		},
		success: function(response) {
			stopLoader();

			if (response != null && !jQuery.isEmptyObject(response)) {
				var componentName = response['componentName'];
				var image = response['image'];
				var compDesc = response['compDesc'];
				var html = "<div class='etlComponentInfoPopoverContent' >"
					+ "<div class='m-1' ><h5>" + componentName + "</h5><div>"

					+ "<div id='etlComponentVideoInfo'><video width='250px' height='' controls></video></div>"
					+ "<div class='m-1' ><h5>Description</h5><div>"
					+ "<div><span>" + compDesc + "</span></div>"
					+ "</div>";
				$(".popover-body").html(html);
				var blobfileString = response['compVideo'];
				var blob = base64ToBlob(blobfileString)
				$(".popover-body").find("#etlComponentVideoInfo").find('video').attr("src", URL.createObjectURL(blob));
				if ($($this).hasClass("mappingIconClassVertical")) {
					var position = $(thiss).position();
					$(".popover").css("left", position.left - 285);

				}

			}

		},
		error: function(e) {

			console.log(e);
			sessionTimeout(e);
			stopLoader();
		}
	});
}

function base64ToBlob(blobfileString, fileType) {

	const byteCharacters = atob(blobfileString);
	const byteNumbers = new Array(byteCharacters.length);
	for (let i = 0; i < byteCharacters.length; i++) {
		byteNumbers[i] = byteCharacters.charCodeAt(i);
	}
	const byteArray = new Uint8Array(byteNumbers);
	const blob = new Blob([byteArray], { type: fileType });
	return blob;
}

function showColumnReconciliation(subJobId) {
	var flowChartData = $('#' + flowChartWorkSpaceId).flowchart('getData');


	var sourceConnObj;
	var sourceTable;
	var targetConnObj;
	var targetTable;
	var targetTrfmRules;
	
	$.each(flowChartData.operators, function(key, operator){
			
			var toOperatorsArray = $('#' + flowChartWorkSpaceId).flowchart('getAllToOperatorsByFromOpId', operator.operatorId);
			var fromOperatorsArray = $('#' + flowChartWorkSpaceId).flowchart('getAllFromOperatorsByToOpId', operator.operatorId);
			if (toOperatorsArray.length == 0) {
				targetConnObj = operator['connObj'];
				targetTable = operator['tableName'];
				targetTrfmRules =  operator['trfmRules']
			}
			if (fromOperatorsArray.length == 0){
				sourceConnObj = operator['connObj'];
				sourceTable = operator['tableName']
			}
	})
	
	var jobId = $("#"+flowChartWorkSpaceId).attr("jobid");
	
	
	$.ajax({
		type: "post",
		traditional: true,
		dataType: 'json',
		url: 'getColumnReconciliation',
		cache: false,
		data: {
			jobId: jobId,
			subJobId: subJobId,
			sourceConnObj: JSON.stringify(sourceConnObj),
			targetConnObj: JSON.stringify(targetConnObj),
			sourceTable: sourceTable,
			targetTable: targetTable,
			targetTrfmRules: JSON.stringify(targetTrfmRules),
		},
		success: function(response) {
			stopLoader();
			if (response != null && !jQuery.isEmptyObject(response)) {
				var dataList = response['dataList'];
				$("#dialog").html("<div id='columnReconciliation' ></div>");
				$("#dialog").dialog({
					title: (labelObject['Column Reconciliation'] != null ? labelObject['Column Reconciliation'] : 'Column Reconciliation'),
					//        modal: true,
					width: 977,
					height: 550,
					fluid: true,
					buttons: [{
							text: (labelObject['Ok'] != null ? labelObject['Ok'] : 'Ok'),
							click: function() {
								$(this).html("");
								//$(this).dialog("close");
								$(this).dialog("destroy");
							}
						}],
					open: function() {
						  var source =
				            {
				                localdata: dataList,
				                datatype: "array"
				            };
				            var dataAdapter = new $.jqx.dataAdapter(source, {
				                downloadComplete: function (data, status, xhr) { },
				                loadComplete: function (data) { },
				                loadError: function (xhr, status, error) { }
				            });
				            $("#columnReconciliation").jqxGrid(
				            {
				                width: "100%",
				                height: "100%",
				                source: dataAdapter,
				                columns: [
				                  { text: 'Source Column', datafield: 'SOURCE_COLUMN', width: 180 },
				                  { text: 'Source datatype', datafield: 'SOURCE_DATATYPE', width: 100 },
				                  { text: 'Source length', datafield: 'SOURCE_LENGTH', width: 100 },
				                  { text: 'Target Column', datafield: 'TARGET_COLUMN', width: 180 },
				                  { text: 'Target datatype', datafield: 'TARGET_DATATYPE', width: 100 },
				                  { text: 'Target length', datafield: 'TARGET_LENGTH', width: 100 },
				                  { text: 'Insert Count', datafield: 'INSERT_COUNT', width: 100 },
				                  { text: 'Update Count', datafield: 'UPDATE_COUNT', width: 100 }
				                 ]
				            });
					},
					beforeClose: function(event, ui) {
						$("#contentSplitter").resize();
			 			$("#feedListExpander").css('height','100%');
					
					}
				});
			}
			
		},
		error: function(e) {

			console.log(e);
			sessionTimeout(e);
			stopLoader();
		}
	});
}

function showJobReconciliation(subJobId){
	var connObj = savedDBData["Current_V10"];
	var connectionName = connObj['CONNECTION_NAME'];
	
	var jobId = $("#"+flowChartWorkSpaceId).attr("jobid");
	var jobname = $("#"+flowChartWorkSpaceId).attr("jobname");
	
	$.ajax({
		type: "post",
		traditional: true,
		dataType: 'json',
		url: 'getETLJObReconciliation',
		cache: false,
		data: {
			jobId: jobId,
			subJobId: subJobId
		},
		success: function(response) {
			stopLoader();
			if (response != null && !jQuery.isEmptyObject(response)) {
				var dataList = response['dataList'];
				 var tableStr = "<table class='table table-bordered' >"
				 				+"<thead>"
				 				+"<th width='16.6%' >Source Table</th>"
				 				+"<th width='16.6%' >Source Count</th>"
				 				+"<th width='16.6%' >Target Table</th>"
				 				+"<th width='16.6%' >Processed Count</th>"
				 				+"<th width='16.6%' >Rejected Count</th>"
				 				+"<th width='16.6%' >Comments</th>"
				 				+"</thead><tbody>";
				 $.each(dataList, function (index){
					var rowData = dataList[index];
					var tableName = rowData[5];
					
					if (tableName!=null && tableName.indexOf(".") > -1 ) {
						tableName = tableName.split(".")[1];
					}
					
					tableStr +="<tr>"
							+"<td>"+ (rowData[3] !=null ? rowData[3]: '') +"</td>"
							+"<td>"+ (rowData[4] !=null ? rowData[4]: '') +"</td>"
							+"<td>"+ (rowData[5] !=null ? rowData[5]: '') +"</td>"
							+"<td>"+ (rowData[6] !=null ? rowData[6]: '') +"</td>"
							+"<td>"+ (rowData[7] !=null ? rowData[7]: '') +"</td>"
							//+"<td>"+ (rowData[8] !=null ? rowData[8]: '') +"</td>"
							+"<td><img class='viewComments' src='images/etl/ViewComments.png' onclick=viewRejectedTableData('" + connectionName + "','TEMP_REJ_" + tableName + "'," + JSON.stringify(connObj) + ") /></td>"
							+"</tr>"
							
				})
				tableStr += "<tbody></table>";
                    var modalObj = {

                        title: 'Job Reconciliation ( '+jobname+' )',
                        body: tableStr
                    };
                    var buttonArray = [
                        {
                        }
                    ];
                    modalObj['buttons'] = buttonArray;
                    $("#modalDailogDiv").remove();
                    $("body").append("<div id='modalDailogDiv'></div>");
                    createModal("modalDailogDiv", modalObj);
                    $("#modalDailogDiv").find(".modal-dialog").addClass("model-cust-rec-reg modal-xl opacity-animate3");

			}
			
		},
		error: function(e) {

			console.log(e);
			sessionTimeout(e);
			stopLoader();
		}
	});
}

function viewRejectedTableData(connectionName, tableName, connectionObj) {
	$("#modalDailogDiv").remove();
	viewTableData(connectionName, tableName, connectionObj);
}

function provideDALAuthorisation(tableName){
	$.ajax({
		type: "post",
		traditional: true,
		dataType: 'json',
		url: 'provideDALAuthorisation',
		cache: false,
		data: {
			tableName: tableName,
		},
		success: function(response) {
			stopLoader();
			if (response != null && !jQuery.isEmptyObject(response)) {
				

			}
			
		},
		error: function(e) {

			console.log(e);
			sessionTimeout(e);
			stopLoader();
		}
	});
}

function openConnectionItemRightClickConextMenu(event){
	var connItem = $(event.target).closest(".etlConnectionItem");
	$(event.target).closest(".etlConnectionItem").trigger({
	    type: 'mousedown',
	    which: 3,
	   // clientX: event.target.offsetLeft+65, 
	    //clientY: event.target.offsetTop+60
	    clientX: event.x, 
	    clientY: event.y
	});
	return false;
}

function alignOperators(alignment){
	var sourceLeft = 100;
	var scale= 100;
	var selectedOperators = [];
	var selectedOperatorIds = [];
	$('#' + flowChartWorkSpaceId).find(".tempSelectedOperator").remove();
	var flowChartData = $('#' + flowChartWorkSpaceId).flowchart('getData');
	
	$("#" + flowChartWorkSpaceId + " .selected").each(function() {
		var selectedOpeartorId = $(this).data("operator_id");
		selectedOperators.push(flowChartData.operators[selectedOpeartorId]);
		selectedOperatorIds.push( parseInt(selectedOpeartorId));
	});
	
	if (selectedOperators.length == 0){
		selectedOperators = flowChartData.operators;
	}
	if (alignment == 'left'){
		 sourceLeft = 100;
	} else if (alignment == 'center'){
		 sourceLeft = 350;
	} else if (alignment == 'right'){
		 sourceLeft = 600;
	} 
		var maxSourceTop = 0;
		
		$.each(selectedOperators, function(key, operator){
			var jobMinTop = 0;
			var jobMaxTop = 0;
			var jobOperators = [];
			var toOperatorsArray = $('#' + flowChartWorkSpaceId).flowchart('getAllToOperatorsByFromOpId', operator.operatorId);
			var fromOperatorsArray = $('#' + flowChartWorkSpaceId).flowchart('getAllFromOperatorsByToOpId', operator.operatorId);
			
   			var jobsArray =[];
			if (fromOperatorsArray.length ==0) {
				var jobData;
				function setOpPostition(nextToOperators, srcOperatorId){
					jobOperators.push(srcOperatorId);
					if (nextToOperators.length>0){
						
						$.each(nextToOperators, function(i) {
								var currOperatorId = nextToOperators[i].operatorId;
								var srcOperatorLeft = flowChartData.operators[srcOperatorId].left;
								flowChartData.operators[currOperatorId].left = srcOperatorLeft+scale+100;
								var top =  nextToOperators[i].top;
							
								
								var nextToOps = $('#' + flowChartWorkSpaceId).flowchart('getAllToOperatorsByFromOpId', currOperatorId);
								setOpPostition(nextToOps, currOperatorId)
							})
					}
				}
				
				
				
				flowChartData.operators[operator.operatorId].left = sourceLeft;
				var nextToOperators = $('#' + flowChartWorkSpaceId).flowchart('getAllToOperatorsByFromOpId', operator.operatorId);
				setOpPostition(nextToOperators, operator.operatorId);

			}
	
		})
	var minTop = 0;
	var jobMaxTop = 0;
	$.each(selectedOperators, function(key, operator){
			
			var toOperatorsArray = $('#' + flowChartWorkSpaceId).flowchart('getAllToOperatorsByFromOpId', operator.operatorId);
			var fromOperatorsArray = $('#' + flowChartWorkSpaceId).flowchart('getAllFromOperatorsByToOpId', operator.operatorId);

			if (fromOperatorsArray.length ==0) {
				var jobData
				function setOpPostition(nextToOperators, srcOperatorId){
			
					if (nextToOperators.length>0){
						
						if (nextToOperators.length ==1 ) {
							var currOperatorId = nextToOperators[0].operatorId;
							var srcOperatortop = flowChartData.operators[srcOperatorId].top;
							flowChartData.operators[currOperatorId].top = srcOperatortop;
							jobMaxTop = srcOperatortop;
							minTop = minTop;
							var nextToOps = $('#' + flowChartWorkSpaceId).flowchart('getAllToOperatorsByFromOpId', currOperatorId);
							setOpPostition(nextToOps, currOperatorId);
								
						} else {
							$.each(nextToOperators, function(i) {
								var nextCount = nextToOperators.length;
								var heightDecrease = ((nextCount-1) * 60)/2
							
								var currOperatorId = nextToOperators[i].operatorId;
								var srcOperatortop = flowChartData.operators[srcOperatorId].top;
								
								var currentOpTopCalVal =srcOperatortop+(i*60)-heightDecrease;
								flowChartData.operators[currOperatorId].top = currentOpTopCalVal
								if (minTop > currentOpTopCalVal){
									minTop = currentOpTopCalVal;
								}
								if (jobMaxTop < currentOpTopCalVal){
									jobMaxTop = currentOpTopCalVal;
								}
								var nextToOps = $('#' + flowChartWorkSpaceId).flowchart('getAllToOperatorsByFromOpId', currOperatorId);
							setOpPostition(nextToOps, currOperatorId);
							})
							
						}
					}
				}
				
				var sourcetop =  operator.top;
				if (jobMaxTop == 0){
					 sourcetop =  60;
				} else {
					sourcetop = jobMaxTop+60;
				}
			
				flowChartData.operators[operator.operatorId].top = sourcetop;
			
				var nextToOperators = $('#' + flowChartWorkSpaceId).flowchart('getAllToOperatorsByFromOpId', operator.operatorId);
				setOpPostition(nextToOperators, operator.operatorId);

			}
	
		})
	
		if (minTop < 0){
			$.each(flowChartData.operators, function(key, operator){
				flowChartData.operators[operator.operatorId].top = flowChartData.operators[operator.operatorId].top-minTop + 20;
			})
		}

			$('#' + flowChartWorkSpaceId).flowchart('setData', flowChartData);
			
			var flowChartData = $('#' + flowChartWorkSpaceId).flowchart('getData');
			
			$.each(flowChartData.operators, function(i){
				
				var body = this['properties']['body'];
				var ele = document.createElement('div');
				ele.innerHTML = body;
				$(ele).find(".tempSelectedOperator").remove();
				
				if (selectedOperatorIds.indexOf(parseInt(this['operatorId']) ) > -1 ){
						ele.innerHTML = ele.innerHTML+"<div class='tempSelectedOperator'></div>"
				}
				$('#' + flowChartWorkSpaceId).flowchart('setOperatorBody', parseInt(this['operatorId']), $(ele).html());
			})
	
			$('#' + flowChartWorkSpaceId).find(".tempSelectedOperator").each(function(i){
				$(this).closest(".flowchart-operator").addClass("selected");
			});
			
			$('#' + flowChartWorkSpaceId).find(".tempSelectedOperator").remove();

	}
	
	
	function enableDesignViewZoom() {
	var panZoomFlag = true;
	var $flowchart = $("#"+flowChartWorkSpaceId);
	if (panZoomFlag) {
		var $container = $flowchart.parent();

		var cx = $flowchart.width() / 2;
		var cy = $flowchart.height() / 2;

		// Panzoom initialization...
		$flowchart.panzoom();

		// Centering panzoom
		$flowchart.panzoom(
			"pan",
			-cx + $container.width() / 2,
			-cy + $container.height() / 2
		);

		// Panzoom zoom handling...
		var possibleZooms = [0.5, 0.75, 1, 2, 3];
		var currentZoom = 2;

		$container.on("mousewheel.focal", function(e) {
			if ($flowchart.panzoom("instance") != undefined) {
				e.preventDefault();
				$flowchart.panzoom("enable");
				var delta = e.delta || e.originalEvent.wheelDelta || e.originalEvent.detail;
				var zoomOut = delta ? delta < 0 : e.originalEvent.deltaY > 0;
				currentZoom = Math.max(
					0,
					Math.min(possibleZooms.length - 1, currentZoom + (zoomOut * 2 - 1))
				);
				$flowchart.flowchart("setPositionRatio", possibleZooms[currentZoom]);
				$flowchart.panzoom("zoom", possibleZooms[currentZoom], {
					animate: false,
					focal: e,
				});
			} else {
				$flowchart.panzoom("disable");
			}
		});
	} else {
		$flowchart.panzoom("disable");
	}
}

function disableDesignViewZoom() {
	var $flowchart = $("#"+flowChartWorkSpaceId);
	$flowchart.flowchart("setPositionRatio", 1);
	$flowchart.panzoom("reset");
	$flowchart.panzoom("disable");
	$flowchart.panzoom("destroy");
}




var mouseDown = false;
function initialiseMouseSelection(){
	// return false;
	//$(".flowchart-operator-connector-arrow").unbind("mousedown").on("mousedown",function(mdevent) {
	//		mdevent.stopPropagation();
	//		return false;
	//});
	
	/*$("#flowChartTabs").find("li").find("style").remove();
	var width = $("#flowChartTabs").find("li.jqx-tabs-title-selected-top").width();
	if (width!=null ){
		$("#flowChartTabs").find("li.jqx-tabs-title-selected-top").append('<style>.etl-page-body #flowChartTabs .jqx-tabs-title-selected-top::after{margin-left:'+(width+8)+'px !important;}</style>');

	}*/
	
	
$("#"+flowChartWorkSpaceId).unbind("mousedown").on("mousedown",function(mdevent) {
	
	var x1 = $("#"+flowChartWorkSpaceId).find(".flowchart-temporary-link-layer").find("line").attr("x1");
	var y1 = $("#"+flowChartWorkSpaceId).find(".flowchart-temporary-link-layer").find("line").attr("y1");
	$("#"+flowChartWorkSpaceId).find(".flowchart-temporary-link-layer").find("line").attr("x2", x1);
	$("#"+flowChartWorkSpaceId).find(".flowchart-temporary-link-layer").find("line").attr("y2", y1);
	
	mouseDown = true;
	$(".selectionArea").remove();
	$(".flowchart-operator").removeClass("selected");
	$("#etlPageBody").append("<div id='selectionAreaDiv' class='selectionArea'></div>");
	$("#selectionAreaDiv").css("left", mdevent.clientX);
	$("#selectionAreaDiv").css("top", mdevent.clientY);
	$("#selectionAreaDiv").css("border", "1px solid #ddd");
	
	var flowchartData = $('#' + flowChartWorkSpaceId).flowchart('getData');
	var flowChartOperators = $('#' + flowChartWorkSpaceId).find(".flowchart-operator");
	var mdLeft = mdevent.offsetX;
	var mdTop = mdevent.offsetY;
	$("#"+flowChartWorkSpaceId).unbind("mousemove").on("mousemove",function(mvevent) {
		if (mouseDown) {
			$("#selectionAreaDiv").css("display", "block");
			var mvLeft = mvevent.offsetX;
			var mvTop = mvevent.offsetY;
			
			if (mvevent.offsetX - mdevent.offsetX <= 0 && mvevent.offsetY - mdevent.offsetY <= 0){
				$("#selectionAreaDiv").css("transform", "rotate(180deg)");
				$("#selectionAreaDiv").width( mdevent.offsetX - mvevent.offsetX);
				$("#selectionAreaDiv").height( mdevent.offsetY - mvevent.offsetY );
				
				$.each(flowChartOperators, function(i) {
				if (mdLeft >= this.offsetLeft && mvLeft <= this.offsetLeft 
					&& mdTop > this.offsetTop && mvTop <= this.offsetTop 
					){
						console.log("selection matched ::  "+ mvevent.offsetX + " "+mvevent.offsetY );
						$(this).addClass("selected");
						
				} else {
					$(this).removeClass("selected");
				}
			})
			
			} 
			 if ( mvevent.offsetX - mdevent.offsetX >= 0 && mvevent.offsetY - mdevent.offsetY <= 0){
				$("#selectionAreaDiv").css("transform", "rotate(270deg)");
				$("#selectionAreaDiv").height(mvevent.offsetX - mdevent.offsetX);
				$("#selectionAreaDiv").width(mdevent.offsetY - mvevent.offsetY );
				
				$.each(flowChartOperators, function(i) {
				if (mdLeft <= this.offsetLeft && mvLeft >= this.offsetLeft 
					&& mdTop > this.offsetTop && mvTop <= this.offsetTop 
					){
						console.log("selection matched ::  "+ mvevent.offsetX + " "+mvevent.offsetY );
						$(this).addClass("selected");
						
				} else {
					$(this).removeClass("selected");
				}
			})
				
			}
			 
			 if ( mvevent.offsetX - mdevent.offsetX <= 0 && mvevent.offsetY - mdevent.offsetY >= 0){
				$("#selectionAreaDiv").css("transform", "rotate(90deg)");
				$("#selectionAreaDiv").height(mdevent.offsetX - mvevent.offsetX );
				$("#selectionAreaDiv").width(mvevent.offsetY - mdevent.offsetY );
				
				$.each(flowChartOperators, function(i) {
				if (mdLeft >= this.offsetLeft && mvLeft <= this.offsetLeft 
					&& mdTop < this.offsetTop && mvTop >= this.offsetTop 
					){
						console.log("selection matched ::  "+ mvevent.offsetX + " "+mvevent.offsetY );
						$(this).addClass("selected");
						
				} else {
					$(this).removeClass("selected");
				}
			})
			
			}
			if (mvevent.offsetX - mdevent.offsetX >= 0 && mvevent.offsetY - mdevent.offsetY >= 0) {
				$("#selectionAreaDiv").css("transform", "rotate(0deg)");
				$("#selectionAreaDiv").width(mvevent.offsetX - mdevent.offsetX );
				$("#selectionAreaDiv").height(mvevent.offsetY - mdevent.offsetY);
			
				$.each(flowChartOperators, function(i) {
				if (mdLeft <= this.offsetLeft && mvLeft >= this.offsetLeft 
					&& mdTop < this.offsetTop && mvTop >= this.offsetTop 
					){
						console.log("selection matched ::  "+ mvevent.offsetX + " "+mvevent.offsetY );
						$(this).addClass("selected");
						
				} else {
					$(this).removeClass("selected");
				}
			})
			}
		}
		
		
			
	});
	
	
		var rightClick = isRightClick(mdevent);
		if (rightClick && copyOperatorIds!=null && copyOperatorIds.length >0 ) {
			 var menuItems = "<li onclick='pasteOperators()'>Paste Selection</li>";
                        
                        $("#jqxMenu").remove();
                        $(".etl-page-body").append("<div id='jqxMenu'><ul></ul></div>");
                        $("#jqxMenu ul").html(menuItems);
                        var contextMenu = $("#jqxMenu").jqxMenu({
                                width: '140px', height: 1 * 30 + 'px', autoOpenPopup: false, mode: 'popup',
                        })
                        
                        var scrollTop = $(window).scrollTop();
                        var scrollLeft = $(window).scrollLeft();
                        contextMenu.jqxMenu('open', parseInt(mdevent.clientX) + 5 + scrollLeft, parseInt(mdevent.clientY) + 5 + scrollTop);
                        //return false;
	
		}  
	
	$("#selectionAreaDiv").unbind("mousemove").on("mousemove",function(mvevent) {
		if (mouseDown) {
		
			
			var mvLeft = mvevent.offsetX;
			var mvTop = mvevent.offsetY;
			
			$("#selectionAreaDiv").css("height", mvTop);
			$("#selectionAreaDiv").css("width", mvLeft);
			
		}
	});

	$(".flowchart-operator").unbind("mousemove").on("mousemove",function(mvevent) {
		if (mouseDown) {
		
			var mvLeft = mvevent.clientX;
			var mvTop = mvevent.clientY;

			$("#selectionAreaDiv").css("height", mvTop);
			$("#selectionAreaDiv").css("width", mvLeft);
			
		}
		
	});


});




$("#pageBody").unbind("mouseup").on("mouseup", function(mdevent) {
		//$("#"+flowChartWorkSpaceId).unbind("mousemove");
		 console.log("event class :: "+mdevent.target.className);
		if (  mdevent.target.className.animVal == "flowchart-links-layer" ||   $(mdevent.target).hasClass("selectionArea")){
			var selectedOpLen = $("#" + flowChartWorkSpaceId + " .selected").length;
		if (selectedOpLen > 0){
			var menuItems = "<li onclick='activateOperators()'>Activate</li>";
				menuItems += "<li onclick=deactivateOperators()>Deactivate</li>";
				menuItems += "<li onclick=copyOperators()>Copy Selection</li>";
				$("#jqxMenu").remove();
				$(".etl-page-body").append("<div id='jqxMenu'><ul></ul></div>");
				$("#jqxMenu ul").html(menuItems);
				var contextMenu = $("#jqxMenu").jqxMenu({
					width: '140px', height: 3 * 30 + 'px', autoOpenPopup: false, mode: 'popup',
				})
				
				$("#"+flowChartWorkSpaceId+", .flowchart-operator, #selectionAreaDiv").unbind("mousemove");
				var scrollTop = $(window).scrollTop();
				var scrollLeft = $(window).scrollLeft();
				contextMenu.jqxMenu('open', parseInt(event.clientX) + 5 + scrollLeft, parseInt(event.clientY) + 5 + scrollTop);
				//return false;
		
		} else {
			mouseDown = false;
			$(".selectionArea").remove();
			//return false;
		}
		}  else {
			mouseDown = false;
			$(".selectionArea").remove();
			//return false;
		}
		
		if ( $(mdevent.target).hasClass("flowchart-operator-connector-arrow") ) {
			$("#"+flowChartWorkSpaceId).unbind("mousemove").on("mousemove",function(mvevent) {
				$("#"+flowChartWorkSpaceId).find(".flowchart-temporary-link-layer").find("line").attr("x2",mvevent.offsetX);
				$("#"+flowChartWorkSpaceId).find(".flowchart-temporary-link-layer").find("line").attr("y2",mvevent.offsetY)
			});
		
			$(".flowchart-operator").unbind("mousemove").on("mousemove",function(mvevent) {
				mvevent.stopPropagation();
				//$("#"+flowChartWorkSpaceId).find(".flowchart-temporary-link-layer").find("line").attr("x2",mvevent.offsetX);
				//$("#"+flowChartWorkSpaceId).find(".flowchart-temporary-link-layer").find("line").attr("y2",mvevent.offsetY);
			});
		
			
		 }

		// return false;
		
		// $("#"+flowChartWorkSpaceId).find(".flowchart-temporary-link-layer").find("line").remove();
	
		
});


var globalCreatedLinkData;
var globalCreatedLinkId;
	
$("#" + flowChartWorkSpaceId).flowchart({
		//                                onOperatorSelect: function(operatorId) {
		//                                return true;
		//                                },
		onLinkCreate: function(linkId, linkData) {
			
				
	
			globalCreatedLinkData = linkData;
			globalCreatedLinkId = linkId;
			
			var fromOperatorId = linkData['fromOperator'];
			var fromOperatorData = $("#" + flowChartWorkSpaceId).flowchart('getOperatorData', fromOperatorId);
			var toOperatorId = linkData['toOperator'];
			var toOperatorData = $("#" + flowChartWorkSpaceId).flowchart('getOperatorData', toOperatorId);
			
			if (toOperatorData['component'] == 'Y' && toOperatorData['iconType'] != 'OUTPUT') {
			
				toOperatorData['tableName'] = "ZZ_TEMP_" + toOperatorData['timeStamp'];
				toOperatorData['statusLabel'] = toOperatorData['tableName'];
				toOperatorData['tableNameLabel'] = toOperatorData['iconType'] + "_OUTPUT_" + toOperatorData['operatorId'];
				if (toOperatorData['connObj'] == null) {
					toOperatorData['connObj'] = savedDBData["Current_V10"];
				}
			}
			
		 
		 
		var strokeColor = toOperatorData['fromLinkColor'];
		setTimeout(function(){
			
			if (strokeColor!=null && strokeColor !="#0071C5") {
					$("#"+flowChartWorkSpaceId).find("svg").find("g").find("[data-link_id='"+linkId+"']").find('path').css("stroke",strokeColor,"!important");
				} else {
				
					if (toOperatorData['iconType'] == "SQL") {
					//$("#" + flowChartWorkSpaceId).flowchart('setLinkMainColor',linkId, "#FFD700");
					$("#"+flowChartWorkSpaceId).find("svg").find("g").find("[data-link_id='"+linkId+"']").find('path').css("stroke","#FFD700","!important");
					
				} else if (toOperatorData['iconType'] == "XLSX") {
					$("#"+flowChartWorkSpaceId).find("svg").find("g").find("[data-link_id='"+linkId+"']").find('path').css("stroke","#7F462C","!important");
				
				} else if (toOperatorData['iconType'] == "JSON") {
					$("#"+flowChartWorkSpaceId).find("svg").find("g").find("[data-link_id='"+linkId+"']").find('path').css("stroke","#D2691E","!important");
				
				} else if (toOperatorData['iconType'] == "GROUP") {
					$("#"+flowChartWorkSpaceId).find("svg").find("g").find("[data-link_id='"+linkId+"']").find('path').css("stroke","#FF8C00","!important");
				
				} else if (toOperatorData['iconType'] == "UNGROUP") {
					$("#"+flowChartWorkSpaceId).find("svg").find("g").find("[data-link_id='"+linkId+"']").find('path').css("stroke","#F67280","!important");
				
				} else if (toOperatorData['iconType'] == "GROUP_JOB") {
					$("#"+flowChartWorkSpaceId).find("svg").find("g").find("[data-link_id='"+linkId+"']").find('path').css("stroke","#7D0552","!important");
				
				}  else if (toOperatorData['iconType'] == "LOOKUP") {
					$("#"+flowChartWorkSpaceId).find("svg").find("g").find("[data-link_id='"+linkId+"']").find('path').css("stroke","#C25A7C","!important");
				
				}  else if (toOperatorData['iconType'] == "AGGREGATE") {
					$("#"+flowChartWorkSpaceId).find("svg").find("g").find("[data-link_id='"+linkId+"']").find('path').css("stroke","#FF69B4","!important");
				
				}  else if (toOperatorData['iconType'] == "FILTER") {
					//$("#" + flowChartWorkSpaceId).flowchart('setLinkMainColor',linkId, "#E2F516");
					$("#"+flowChartWorkSpaceId).find("svg").find("g").find("[data-link_id='"+linkId+"']").find('path').css("stroke","#E2F516","!important");
				
				}  else if (toOperatorData['iconType'] == "EXPFILTER") {
					$("#"+flowChartWorkSpaceId).find("svg").find("g").find("[data-link_id='"+linkId+"']").find('path').css("stroke","#FF007F","!important");
				
				}  else if (toOperatorData['iconType'] == "PIVOTUNPIVOT") {
					$("#"+flowChartWorkSpaceId).find("svg").find("g").find("[data-link_id='"+linkId+"']").find('path').css("stroke","#CC338B","!important");
				
				}  else if (toOperatorData['iconType'] == "SCD") {
					$("#"+flowChartWorkSpaceId).find("svg").find("g").find("[data-link_id='"+linkId+"']").find('path').css("stroke","#008000","!important");
				
				}  else if (toOperatorData['iconType'] == "TYPECONVERT") {
					$("#"+flowChartWorkSpaceId).find("svg").find("g").find("[data-link_id='"+linkId+"']").find('path').css("stroke","#DA70D6","!important");
				
				}  else if (toOperatorData['iconType'] == "SORT") {
					$("#"+flowChartWorkSpaceId).find("svg").find("g").find("[data-link_id='"+linkId+"']").find('path').css("stroke","#B048B5","!important");
				
				}  else if (toOperatorData['iconType'] == "UNIQUE") {
					$("#"+flowChartWorkSpaceId).find("svg").find("g").find("[data-link_id='"+linkId+"']").find('path').css("stroke","#6A0DAD","!important");
				
				}  else if (toOperatorData['iconType'] == "SCRIPTS") {
					$("#"+flowChartWorkSpaceId).find("svg").find("g").find("[data-link_id='"+linkId+"']").find('path').css("stroke","#6A5ACD","!important");
				
				}  else if (toOperatorData['iconType'] == "JOIN") {
					$("#"+flowChartWorkSpaceId).find("svg").find("g").find("[data-link_id='"+linkId+"']").find('path').css("stroke","#8B008B","!important");
				
				}  else if (toOperatorData['iconType'] == "GROUPBY") {
					$("#"+flowChartWorkSpaceId).find("svg").find("g").find("[data-link_id='"+linkId+"']").find('path').css("stroke","#842DCE","!important");
				
				}  else if (toOperatorData['iconType'] == "QUERY") {
					$("#"+flowChartWorkSpaceId).find("svg").find("g").find("[data-link_id='"+linkId+"']").find('path').css("stroke","#5FFB17","!important");
				
				}  else if (toOperatorData['iconType'] == "MERGE") {
					$("#"+flowChartWorkSpaceId).find("svg").find("g").find("[data-link_id='"+linkId+"']").find('path').css("stroke","#ADF802","!important");
				
				}  else if (toOperatorData['iconType'] == "STAGING") {
					$("#"+flowChartWorkSpaceId).find("svg").find("g").find("[data-link_id='"+linkId+"']").find('path').css("stroke","#BCE954","!important");
				
				}  else if (toOperatorData['iconType'] == "REJECTED") {
					$("#"+flowChartWorkSpaceId).find("svg").find("g").find("[data-link_id='"+linkId+"']").find('path').css("stroke","#3F9B0B","!important");
				
				} 
				 else if (toOperatorData['iconType'] == "RESUME") {
					$("#"+flowChartWorkSpaceId).find("svg").find("g").find("[data-link_id='"+linkId+"']").find('path').css("stroke","red","!important");
				
				} 
				 else if (toOperatorData['iconType'] == "OUTPUT") {
					$("#"+flowChartWorkSpaceId).find("svg").find("g").find("[data-link_id='"+linkId+"']").find('path').css("stroke","#808080","!important");
				
				}  else if (toOperatorData['iconType'] == "RDBMS_TABLE") {
					$("#"+flowChartWorkSpaceId).find("svg").find("g").find("[data-link_id='"+linkId+"']").find('path').css("stroke","#A52A2A","!important");
				
				}  else if (toOperatorData['iconType'] == "ERP_TABLE") {
					$("#"+flowChartWorkSpaceId).find("svg").find("g").find("[data-link_id='"+linkId+"']").find('path').css("stroke","#FFA500","!important");
				
				} else if (toOperatorData['iconType'] == "FILE") {
					$("#"+flowChartWorkSpaceId).find("svg").find("g").find("[data-link_id='"+linkId+"']").find('path').css("stroke","#FFC0CB","!important");
				
				} else if (toOperatorData['iconType'] == "SAPLOADSTANDARD") {
					$("#"+flowChartWorkSpaceId).find("svg").find("g").find("[data-link_id='"+linkId+"']").find('path').css("stroke","#32CD32","!important");
				
				} else if (toOperatorData['iconType'] == "SAPLOAD") {
					$("#"+flowChartWorkSpaceId).find("svg").find("g").find("[data-link_id='"+linkId+"']").find('path').css("stroke","#1de407","!important");
				
				} else if (toOperatorData['iconType'] == "SAPRESUME") {
					$("#"+flowChartWorkSpaceId).find("svg").find("g").find("[data-link_id='"+linkId+"']").find('path').css("stroke","#FF00FF","!important");
				
				} else if (toOperatorData['iconType'] == "SAPJOIN") {
					$("#"+flowChartWorkSpaceId).find("svg").find("g").find("[data-link_id='"+linkId+"']").find('path').css("stroke","#00008B","!important");
				
				} else if (toOperatorData['iconType'] == "PIVOT") {
					$("#"+flowChartWorkSpaceId).find("svg").find("g").find("[data-link_id='"+linkId+"']").find('path').css("stroke","#808080","!important");
				
				}  else if (toOperatorData['iconType'] == "UNPIVOT") {
					$("#"+flowChartWorkSpaceId).find("svg").find("g").find("[data-link_id='"+linkId+"']").find('path').css("stroke","#C0C0C0","!important");
			
				} 
				 else if (toOperatorData['iconType'] == "SKIP_ROWS") {
					$("#"+flowChartWorkSpaceId).find("svg").find("g").find("[data-link_id='"+linkId+"']").find('path').css("stroke","red","!important");
				
				} 
				 else if (toOperatorData['iconType'] == "MERGE_FILES") {
					$("#"+flowChartWorkSpaceId).find("svg").find("g").find("[data-link_id='"+linkId+"']").find('path').css("stroke","red","!important");
				
				}
				  else if (toOperatorData['iconType'] == "TABLE") {
					$("#"+flowChartWorkSpaceId).find("svg").find("g").find("[data-link_id='"+linkId+"']").find('path').css("stroke","#9400D3","!important");
				
				}  else if (toOperatorData['dragType'] == 'Table') {
					$("#"+flowChartWorkSpaceId).find("svg").find("g").find("[data-link_id='"+linkId+"']").find('path').css("stroke","#eb008b","!important");
				
				}  else if (toOperatorData['dragType'] == 'File') {
					$("#"+flowChartWorkSpaceId).find("svg").find("g").find("[data-link_id='"+linkId+"']").find('path').css("stroke","#49bdbc","!important");
				
				}
			
				}
				
				$("#" + flowChartWorkSpaceId).flowchart('setOperatorData', toOperatorId, toOperatorData);
				
			 
		}, 200)

			//            setToOpDblCLickFuncName(fromOperator, toOperator);
			return true;
			
		},
		onLinkDelete: function(linkId, linkData) {

			return true;
		},
		onAfterChange: function(changeType) {
			
			
			/* if (changeType =='link_create' && globalCreatedLinkId!=null) {
				var linkId = globalCreatedLinkId;
				var toOperatorId = globalCreatedLinkData['toOperator'];
				var toOperatorData = $("#" + flowChartWorkSpaceId).flowchart('getOperatorData', toOperatorId);
				
			}*/
			
			 /*globalCreatedLinkData;
			 globalCreatedLinkId;*/
			
			if (!operatorDoublClick) {
				trfmRulesChanged = true;
				console.error("trfmRulesChanged : " + trfmRulesChanged);
				return true;
			}
		},
		onOperatorSelect: function(changeType) {
			$(document).find("input").blur();
			return true;
		},
		onLinkSelect: function(linkId, linkData) {
			$(document).find("input").blur();
			return true;
		},
		onLinkDoubleClick: function(linkId, linkData) {
			$("#etl-color-picker").remove();
			$("body").prepend("<input id='etl-color-picker' value='#276cb8' style='position:absolute;' />")
			
			setTimeout(function(){
				$('#etl-color-picker').css("position","absolute");
				$('#etl-color-picker').css("top",globaldblpageY);
				$('#etl-color-picker').css("left",globaldblpageX);
				$('#etl-color-picker').css("z-index",9999999999);
				
				$('#etl-color-picker').spectrum({
				  type: "component",
				  showInput: false,
    			 showPalette: true,
				  move: function(color) {
				   // color.toHexString(); // #ff0000
				    $("#"+flowChartWorkSpaceId).find("svg").find("g").find("[data-link_id='"+linkId+"']").find('path').css("stroke",color.toHexString(),"!important");
					
					var toOperatorId = linkData['toOperator'];
					var toOperatorData = $("#" + flowChartWorkSpaceId).flowchart('getOperatorData', toOperatorId);
					toOperatorData['fromLinkColor'] = color.toHexString();
					$("#" + flowChartWorkSpaceId).flowchart('setOperatorData', toOperatorId, toOperatorData);
				}
			});
			$('#etl-color-picker').click();
			$('#etl-color-picker').hide();
			
			},200)
			
			
			return true;
		}
	});
	
	
	
}

function activateOperators(){
	$("#" + flowChartWorkSpaceId + " .selected").each(function() {
		var selectedOpeartorId = $(this).data("operator_id");
		var operatorData = $('#' + flowChartWorkSpaceId).flowchart('getOperatorData', selectedOpeartorId);
		
		$(this).removeClass("selected");
	
		var body = operatorData['properties']['body'];
		var ele = document.createElement('div');
		ele.innerHTML = body;
		$(ele).find("div").removeClass("operatorDisabled");
		operatorData['properties']['body'] = $(ele).html();
		operatorData['disabled'] = false;
		$('#' + flowChartWorkSpaceId).flowchart('setOperatorData', parseInt(operatorData['operatorId']), operatorData);
		$(".selectionArea").remove();
	});
}

function deactivateOperators(){
	$("#" + flowChartWorkSpaceId + " .selected").each(function() {
		var selectedOpeartorId = $(this).data("operator_id");
		var operatorData = $('#' + flowChartWorkSpaceId).flowchart('getOperatorData', selectedOpeartorId);

		$(this).removeClass("selected");
		var body = operatorData['properties']['body'];
		var ele = document.createElement('div');
		ele.innerHTML = body;
		$(ele).find("div").addClass("operatorDisabled");
		operatorData['properties']['body'] = $(ele).html();
		operatorData['disabled'] = true;
		$('#' + flowChartWorkSpaceId).flowchart('setOperatorData', parseInt(operatorData['operatorId']), operatorData);
		$(".selectionArea").remove();
	});
}

function getActiveFlowChartData() {
	var operatorIds = [];
	var operators = {};
	var links = {};
	var data = $('#' + flowChartWorkSpaceId).flowchart('getData');

	$.each(data.operators, function(key, operator) {
		if (operator['disabled'] == null || operator['disabled'] ==false) {
			operators[key] = operator;
			operatorIds.push( parseInt(operator['operatorId']));
		}
	})

	$.each(data.links, function(key, link) {
		if (operatorIds.indexOf(parseInt(link['toOperator'])) >- 1 && operatorIds.indexOf(parseInt(link['fromOperator'])) >- 1 ) {
			links[key] = this;
		}
	})
	
	data['operators'] = operators;
	data['links'] = links;
	return data;
}

function viewScemaObjectData(event) {
	var connObjString = $(event.currentTarget).attr("data-connobj");
	var connObj = JSON.parse(connObjString);
	var connectionName = connObj['CONNECTION_NAME'];
	var schemaobjectname = $(event.currentTarget).attr("data-schemaobjectname");

	viewTableData(connectionName, schemaobjectname, connObj);
	console.log("anc")
}

function showJobExecutionPreview() {
	var  jobDescr =  $('#' + flowChartWorkSpaceId).attr("jobDescr");
	var  jobId =  $('#' + flowChartWorkSpaceId).attr("jobId");
		$("#dialog").html("<div id='executionPreviewDiv' style='width:100%; height:100%;' ></div>");
		$("#dialog").dialog({
			title: (labelObject['Job Preview'] != null ? labelObject['Job Preview'] : 'Job Preview'),
			modal: true,
			height: 400,
			width: 800,
			fluid: true,
			buttons: [{
				text: (labelObject['Ok'] != null ? labelObject['Ok'] : 'Ok'),
				click: function() {
					$(this).html("");
					//                        //$(this).dialog("close");
					$(this).dialog("destroy");
				}
			}],
			open: function() {
				var flowChartData =  $('#'+flowChartWorkSpaceId).flowchart('getData');
				$('#executionPreviewDiv').flowchart({
				linkWidth: 2,
				defaultSelectedLinkColor: '#000055',
				grid: 10,
				distanceFromArrow: 0,
				multipleLinksOnInput: true,
				multipleLinksOnOutput: true,
				defaultSelectedLinkColor: 'red',
				onOperatorContextMenu: function(operatorId) {
					console.log("operatorId:::" + operatorId);
					openOpeartorContextMenu(operatorId);
					return true;
				},
			});
			
			var count = 0;
			var OperatorsData = {};
			var linksData = {};
			try {
				for (var key in flowChartData.operators) {

					OperatorsData[count] = flowChartData.operators[key];
					for (var i in flowChartData.links) {
						if (parseInt(key) == flowChartData.links[i].fromOperator) {
							flowChartData.links[i].fromOperator = count;
						}
						if (parseInt(key) == flowChartData.links[i].toOperator) {
							flowChartData.links[i].toOperator = count;
						}

					}

					count = count + 1;
				}
				for (var key in OperatorsData) {
					$("#executionPreviewDiv").flowchart('addOperator', OperatorsData[key]);
				}
			} catch (e) {
			}



			var count = 0;
			//   try {

			for (var key in flowChartData.links) {

				linksData[count] = flowChartData.links[key];
				count = count + 1;
			}
			for (var key in linksData) {
				$("#executionPreviewDiv").flowchart('addLink', linksData[key]);
			}

			$(".flowchart-operator-connector-label").hide();
			$(".flowchart-operator-title").hide();
			$(".visionMapOperator").removeClass("visionOpLabelDiv");
			
			//showFlowLine();
			showPreviewCount(jobId);
				
				$(this).closest(".ui-dialog").css("z-index", "9999")
				$(this).closest(".ui-dialog").find(".ui-button").eq(1).addClass("dialogyes");
				$(".visionHeaderMain").css("z-index", "999");
				$(".visionFooterMain").css("z-index", "999");
			},
			beforeClose: function(event, ui) {
				
				$(".visionHeaderMain").css("z-index", "99999");
				$(".visionFooterMain").css("z-index", "99999");
				$("#contentSplitter").resize();
			 	$("#feedListExpander").css('height','100%');
			}
		});
};

function showFlowLine() {
	
	$('#executionPreviewDiv').find(".visionJobReconciliation").remove(); 
	showLoader();
	setTimeout(function(){
		stopLoader();
		var flowChartData =  $('#executionPreviewDiv').flowchart('getData');
	$.each(flowChartData.operators, function(key, operator) {
		if (key == 0) {
			var body = $('#executionPreviewDiv').flowchart('getOperatorBody', operator.operatorId);
			var ele = document.createElement('div');
				ele.innerHTML = body;
				$(ele).find('.visionOpLabelDiv').remove();
				body = ele.innerHTML;
				body += '<div class="previewCount" title="Source Records:245" >245</div>';
				$('#executionPreviewDiv').flowchart('setOperatorBody', operator.operatorId, body);																		
		} else if (key == 1) {
			var body = $('#executionPreviewDiv').flowchart('getOperatorBody', operator.operatorId);
			var ele = document.createElement('div');
			ele.innerHTML = body;
			$(ele).find('.visionOpLabelDiv').remove();
			body = ele.innerHTML;
			body += '<div class="previewCount" title="Unique Records:229"  >229</div>';
			$('#executionPreviewDiv').flowchart('setOperatorBody', operator.operatorId, body);			
		} else if (key == 2) {
			var body = $('#executionPreviewDiv').flowchart('getOperatorBody', operator.operatorId);
			var ele = document.createElement('div');
			ele.innerHTML = body;
			$(ele).find('.visionOpLabelDiv').remove();
			body = ele.innerHTML;
			body += '<div class="previewCount" title="Loads 229 records to target" >229</div>';
			$('#executionPreviewDiv').flowchart('setOperatorBody', operator.operatorId, body);
		}
		$('#executionPreviewDiv').find(".visionJobReconciliation").remove(); 
	})
	}, 2000)
	
}

async function showPreviewCount(jobId) {
	
	saveTrfmRulesToOp();

    var $flowchart = $('#' + flowChartWorkSpaceId);
     var flowChartData;
	  if (  $("#"+flowChartWorkSpaceId).find(".operatorDisabled").length > 0 ) {
			flowChartData = getActiveFlowChartData();
		} else {
			 flowChartData = $flowchart.flowchart('getData');
		}



    var operators = flowChartData['operators'];
    if (operators != null && !jQuery.isEmptyObject(operators)) {
        var groupJob = false;
        for (var key of Object.keys(operators)) {
            var operator = operators[key];
            if (operator['iconType'] == 'GROUP_JOB') {
                groupJob = true;
            }
            break;
        }
        if (groupJob) {
            showMesg("Cannot show execution preview for this job");
            return false;
        }
    }
	 validateTransformationRules(flowChartData);
	 
		flowChartData = getTransformedPreviewData(flowChartData);
		showLoader();
			let mypromise = new Promise(resolve => {  
				 createTemPreviewTables(resolve, flowChartData);
			});
			await mypromise;
		
	    showLoader();
	    $.ajax({
	        type: 'post',
	        traditional: true,
	        dataType: 'json',
	        cache: false,
	        url: 'processJobComponents',
	       // async: false,
	        data: {
	            currentConnObj: JSON.stringify(savedDBData['Current_V10']),
	            flowchartData: JSON.stringify(flowChartData),
	            //jobId: $("#currentJobId").val(),
	             jobId: $('#' + flowChartWorkSpaceId).attr("jobid"),
	             preview: "Y",
	            
	        },
	        success: function (response) {
	            stopLoader();
	            if (response != null) {
		
					$.ajax({
						type: "post",
						traditional: true,
						dataType : 'json',
						url: 'getETLJobPreviewCount',
						cache: false,
						data: {
							jobId : jobId
						},
						success: function(response) {
							stopLoader();
							if (response!=null) {
								var flowChartData =  $('#executionPreviewDiv').flowchart('getData');
								var sequenceNoArray = [];
								var opSequenceArray = [];
								var opSequenceObject = [];
								
								$.each(flowChartData.operators, function(key, operator) {
									sequenceNoArray.push(parseInt(operator['executionSequence']));
									opSequenceArray.push(parseInt(operator['operatorId']));
									opSequenceObject[operator['operatorId']] = parseInt(operator['executionSequence']);
								});
								
								var sortedSequenceNoArray = [];
								sortedSequenceNoArray = sortedSequenceNoArray.concat(sequenceNoArray);
								sortedSequenceNoArray.sort(function(a, b){return a - b});
								
								var  sortedOpSequenceArray = [];
								$.each(sortedSequenceNoArray, function(i){
									var index = sequenceNoArray.indexOf(sortedSequenceNoArray[i]);
									var opId = opSequenceArray[index];
									sequenceNoArray.splice(index, 1);
									opSequenceArray.splice(index, 1);
									sortedOpSequenceArray.push(opId);
								});
								
								var nextSeq;
								
									const go = async () => {
									for (var i=0; i< sortedOpSequenceArray.length; i++) {
											
											nextSeq = 	opSequenceObject[sortedOpSequenceArray[i+1]];
											var currentSeq = opSequenceObject[sortedOpSequenceArray[i]];
											var operator =  $('#' + flowChartWorkSpaceId).flowchart('getOperatorData', sortedOpSequenceArray[i]);
											var count = response[''+operator.operatorId+'']
											if (count!=null){
												var title;
												var toOperatorsArray = $('#' + flowChartWorkSpaceId).flowchart('getAllToOperatorsByFromOpId', operator.operatorId);
												var fromOperatorsArray = $('#' + flowChartWorkSpaceId).flowchart('getAllFromOperatorsByToOpId', operator.operatorId);
												if (toOperatorsArray.length == 0) {
													title = "Loads "+count+" records to target";
												} else if (fromOperatorsArray.length == 0) {
													title = "Source count "+count;
												} else {
													title = "Processed  "+count+" records";
												}
												
												var body = $('#executionPreviewDiv').flowchart('getOperatorBody', operator.operatorId);
												var ele = document.createElement('div');
												ele.innerHTML = body;
												$(ele).find('.visionOpLabelDiv').remove();
												body = ele.innerHTML;
												body += '<div class="previewCount" title="'+title+'" >'+count+'</div>';
												$('#executionPreviewDiv').flowchart('setOperatorBody', operator.operatorId, body);
												$('#executionPreviewDiv').find(".visionJobReconciliation").remove(); 
											}
											
											
									var toOpLinkArray = $('#executionPreviewDiv').flowchart('getLinksFrom', sortedOpSequenceArray[i]);
									
									
									  for (var j=0; j< toOpLinkArray.length; j++){
													var link = toOpLinkArray[j];
													var key = $('#executionPreviewDiv').flowchart('addLink', link);
													
													var linkkk = $('#executionPreviewDiv').find("[data-link_id='"+key+"']").find('path');
													 var classList = $('#executionPreviewDiv').find("[data-link_id='"+key+"']").find('path')[0].classList;
													 $('#executionPreviewDiv').find("[data-link_id='"+key+"']").find('path')[0].classList.add("animatedPath");
				                        			 $(".animatedPath").attr("stroke", "green");
				                        			 
				                        			 var path = makeSVG("path", {
														d: "M0,0L0,-5L7,0L0,5",
														fill: "#7C0A67",
														id: "arrowDataLinkId" + key
													});
													//			document.getElementById("arrow").appendChild(path);
													if (!document.getElementById("arrowDataLinkId" + key)) {
														document.getElementById("executionPreviewDiv")
															.querySelector('.flowchart-links-layer').appendChild(path);
													}
												
													let promise1 = new Promise(resolve => {
														if (nextSeq!= currentSeq){
															svgLinkAnimation(resolve, key);
														} else {
															svgLinkAnimation(null, key);
															resolve("resolvedd");
														}
														
														//resolve("resolvedd");
											
													})
													await promise1;
													console.log("J value is"+ j);
													
												}
									
									
										
									
								};
								}
									go();	

							}
							
							deleteTemPreviewTables(data);
							
						}, error: function(e) {
							console.log("The Error Message is:::" + e.message);
							sessionTimeout(e);
						}
					});
            }
           
        },
        error: function (e)
        {
            sessionTimeout(e);
        }

    });

}

function getTransformedPreviewData(flowChartData){
	var operators = flowChartData['operators'];
	 var newOperators = {};
	 $.each(operators, function(key, operator) {
		if (operator['trfmRules'] != null && operator['trfmRules']['colMappingsData']!=null && ( operator['dragType'] != 'Table' || operator['iconType'] != 'Table' ) ) {
			var tableName = 'ZZ_TEMP_'+genHexString(16);
			
			// var fromOperatorsArray = $('#' + flowChartWorkSpaceId).flowchart('getFromOperatorsByToOpId', operator['operatorId']);
			var fromOperatorsArray = $('#' + flowChartWorkSpaceId).flowchart('getAllFromOperatorsByToOpId', operator.operatorId);
			
			if (fromOperatorsArray!=null && fromOperatorsArray.length >0){
				var fromOperator = fromOperatorsArray[0];
				if (fromOperator['iconType'] == 'MERGE') {
					tableName = tableName+"_MERGE";
				}
			}
			
			// if (operator['component'] == "Y")
			operator['nonPreviewtableName'] =  operator['tableName'];
			operator['tableName'] =  tableName;

			var trfmRules = operator['trfmRules'];
			var newcolumnMapping = [];
			var columnMapping = trfmRules['colMappingsData'];
			$.each(columnMapping, function() {
				var destTable = this['destTable'];
				if (destTable.indexOf(".") > -1 ) {
					this['destTable'] = tableName+"."+destTable.split(".")[1];
				}
				
				var destinationColumn = this['destinationColumn'];
				if (destTable.indexOf(".") > -1 ) {
					this['destinationColumn'] = tableName+"."+destinationColumn.split(".")[1];
				}
				var destinationColumnActualValue = this['destinationColumnActualValue'];
				if (destinationColumnActualValue.indexOf(".") > -1 ) {
					this['destinationColumnActualValue'] = tableName+"."+destinationColumnActualValue.split(".")[1];
				}
				newcolumnMapping.push(this);
			})
			trfmRules['colMappingsData'] = newcolumnMapping;
			 operator['trfmRules'] = trfmRules ;
			 newOperators[key] = operator;
		} else {
			newOperators[key] = operator;
		}
	})
	data['operators'] = newOperators;
	return data;
}

function createTemPreviewTables(resolve, flowChartData){

	$.ajax({
		type: "post",
		traditional: true,
		dataType : 'json',
		url: 'createTemPreviewTables',
		cache: false,
		data: {
			flowChartData : JSON.stringify(flowChartData)
		},
		success: function(response) {
			//stopLoader();
			resolve("resolved");
			
			
		}, error: function(e) {
			resolve("resolved");
			console.log("The Error Message is:::" + e.message);
			//sessionTimeout(e);
		}
	});
};

function deleteTemPreviewTables(flowChartData) {
	var previewTablesInfo = {};
	$.each(flowChartData.operators, function(key, operator){
		if (operator['nonPreviewtableName']!=null){
			var actualtable = operator['nonPreviewtableName'];
			var previewTable = operator['tableName'];
			previewTablesInfo[actualtable]  = previewTable;
		}
	})
	$.ajax({
		type: "post",
		traditional: true,
		dataType : 'json',
		url: 'deleteTemPreviewTables',
		cache: false,
		data: {
			flowChartData : JSON.stringify(flowChartData)
		},
		success: function(response) {
			stopLoader();
			
		}, error: function(e) {
			console.log("The Error Message is:::" + e.message);
			//sessionTimeout(e);
		}
	});
};



 async function svgLinkAnimation(resolveloop, operatorId) {
	let mypromise = new Promise(resolve => { 
   		let chart = $('#executionPreviewDiv').find("[data-link_id='"+operatorId+"']").find('path')[0];
	
	let arrow = document.querySelector("#arrowDataLinkId" + operatorId);
	// the length of the chart path
	let length = chart.getTotalLength();
	// the request animation id
	let rid = null;
	// setting the stroke-dasharray and the stroke-dashoffset for the chart
	chart.style.strokeDasharray = length;
	chart.style.strokeDashoffset = length;
	// the animation frames
	let frames = length;
	// two points on the path: the actual point and an other point very near used to calculate the angle of rotation for the arrow
	let point1, point2;
	// the animation:
	 function Frame() {
		 
			rid = requestAnimationFrame(Frame);
		chart.style.strokeDashoffset = frames;
		//two points on the path: the actual point and an other point very near
		point1 = chart.getPointAtLength(length - frames);
		point2 = chart.getPointAtLength((length - frames + 2) % length);
		//the angle of rotation for the arrow
		angle = Math.atan2(point2.y - point1.y, point2.x - point1.x);
		// set the transformation for the arrow
		arrow.setAttribute(
			"transform",
			"translate(" +
			[point1.x, point1.y] +
			")" +
			"rotate(" +
			(angle * 180) / Math.PI +
			")"
		);

		frames--;
		// stop the animation
		if (frames <= 2) {
			cancelAnimationFrame(rid);
			rid = null;
			resolve('resolvedFrame');
		}
	};
	
	Frame();
	
	});
	await mypromise;
	console.log("svgLinkAnimation");
	if (resolveloop!=null) {
		resolveloop('resolved');
	}
	
}

function makeSVG(tag, attrs) {
	var el = document.createElementNS("http://www.w3.org/2000/svg", tag);
	for (var k in attrs) el.setAttribute(k, attrs[k]);
	return el;
}


function copyOperators() {
        copyOperatorIds = [];
        copyFlowChartWorkSpace = flowChartWorkSpaceId;
        var flowChartData = $("#" + flowChartWorkSpaceId).flowchart("getData");
        $("#" + flowChartWorkSpaceId + " .selected").each(function() {
                var currentFlowcharArea = $(this).parent().parent().attr("id");
                var selectedOpeartorId = $(this).data("operator_id");
                copyOperatorIds.push(selectedOpeartorId);
        
        });
}

function pasteOperators(){
	if (copyOperatorIds!=null && copyOperatorIds.length >0) {
				
				var flowChartData = $("#" + flowChartWorkSpaceId).flowchart("getData");
				
					var maxTop =0;
				var highestKey = -1;
				var operators = flowChartData['operators'];
				$.each(operators, function(i) {
					var opId = parseInt(this['operatorId']);
					if (opId > highestKey) {
						highestKey = opId;
					}
					var opTop = this.top;
					if (opTop > maxTop) { 
						maxTop =opTop;
					}
				})
				if (maxTop > 0){
					maxTop = maxTop + 20;
				}
		
				var linksData = {};
				var copiedOperatorIds = [];
				var oldNewOpObj = {};
				
				$.each(copyOperatorIds, function(indx) {
					var currentOperatorId = copyOperatorIds[indx];
					var currentOperatorData = $("#" + copyFlowChartWorkSpace).flowchart('getOperatorData', currentOperatorId);
					highestKey++;
					currentOperatorData['operatorId'] = highestKey;
					oldNewOpObj[currentOperatorId] = highestKey;
					currentOperatorData['top'] = parseInt(currentOperatorData['top']) + maxTop;
					//currentOperatorData['top'] = maxTop + 100;
					$("#" + flowChartWorkSpaceId).flowchart('addOperator', currentOperatorData);

					var toOpLinkArray = $("#" + copyFlowChartWorkSpace).flowchart('getLinksFrom', currentOperatorId);

					$.each(toOpLinkArray, function(indx) {
						var fromOp = this['fromOperator'];
						var toOP = this['toOperator'];
						linksData[fromOp + "_" + toOP] = this;
						//                            $('#' + flowChartWorkSpaceId).flowchart('addLink', newLink);

					})
					
					var fromOpLinkArray = $("#" + copyFlowChartWorkSpace).flowchart('getLinksFrom', currentOperatorId);
					$.each(fromOpLinkArray, function(indx) {
						var fromOp = this['fromOperator'];
						var toOP = this['toOperator'];
						linksData[fromOp + "_" + toOP] = this;
					})

				})

				$.each(linksData, function(key, val) {
					var newLink = {};
					newLink['fromOperator'] = oldNewOpObj[val['fromOperator']];
					newLink['toOperator'] = oldNewOpObj[val['toOperator']];
					newLink['fromConnector'] = 'output_1';
					newLink['toConnector'] = 'input_1';
					newLink['toSubConnector'] = 0;
					newLink['fromSubConnector'] = 0;
					$('#' + flowChartWorkSpaceId).flowchart('addLink', newLink);
				})
				
				
				


			}
}


function openServerConsoleLog() {
   var serverConsoleInterval = null;
 
  // $("#dialog").css("background-color", "#000");
   $("#dialog").html("<div id='serverConsoleLogDiv' style='width:100%; height:100%;' ></div>");
				
				$("#dialog").dialog({
					title: (labelObject['Console'] != null ? labelObject['Console'] : 'Console'),
					modal: true,
					height: 500,
					width: 1000,
					fluid: true,
					buttons: [{
						text: (labelObject['Ok'] != null ? labelObject['Ok'] : 'Ok'),
						click: function() {							
							$(this).html("");
							$(this).dialog("destroy");
						},
						
					}],
					open: function() {
						
						$.ajax({
								url: 'fetchServerConsoleLog',
								type: "post",
								traditional: true,
								dataType: 'json',
								data: {
								},
								success: function(data, status, xhr) {
						
									if (xhr.status == 200) {
										var logStr = data['logStr'];
										$("#serverConsoleLogDiv").html(logStr);
										$('#dialog').scrollTop($('#dialog')[0].scrollHeight);
										
									}
								}
							});
							
						serverConsoleInterval = setInterval(function() {
							$.ajax({
								url: 'fetchServerConsoleLog',
								type: "post",
								traditional: true,
								dataType: 'json',
								data: {
								},
								success: function(data, status, xhr) {
						
									if (xhr.status == 200) {
										var logStr = data['logStr'];
										
									
										var scrollHeight = $('#dialog')[0].scrollHeight;
										var scrollTop = $('#dialog').scrollTop();
										
										$("#serverConsoleLogDiv").html(logStr);
										
										if ( scrollHeight - scrollTop < 303){
											$('#dialog').scrollTop($('#dialog')[0].scrollHeight);
										}
									
										
									}
								}
							});
							}, 2000);
						
			            $(this).closest(".ui-dialog").find(".ui-button").eq(1).addClass("dialogyes");
			            $(".visionHeaderMain").css("z-index", "999");
			            $(".visionFooterMain").css("z-index", "999");
					},
					beforeClose: function(event, ui) {
						
						clearInterval(serverConsoleInterval);
						
				            $("#savedSources").jqxTree('selectItem', null);
				            $(".visionHeaderMain").css("z-index", "99999");
				            $(".visionFooterMain").css("z-index", "99999");
					}
									
				});
				
				
	
	

}

var globalFlowChartData;
var globalDebugOffset = 0;
var debugRunFlag = true;
var debugInterval;



function debugRun(type, resolve) {
	
	if (type == 'run') {
		showLoader();
		debugRunFlag = true;
		$("#debugPauseMode").attr("src","images/etl/pause.png");
		$("#debugRunMode").attr("src","images/etl/play_gray.png");
		
		$("#debugNextMode").attr("src","images/etl/next_gray.png");

		debugInterval = setInterval(function() {
		
		if (debugRunFlag && debugInterval!=null) {
			
			$.ajax({
	        type: 'post',
	        traditional: true,
	        dataType: 'json',
	        cache: false,
	        url: 'debugProcessJob',
	      //  async: false,
	        data: {
				jobId: 'D41EBD54CC43C2729D78FB920E449811',
	           offset: globalDebugOffset,
	           flowchartData: JSON.stringify(globalFlowChartData)
	        },
		success: function(response) {
					 stopLoader();
				
					if (debugRunFlag == false) {
						showLoader();
					}
			
					if (response != null && response['sourceDataObj']!=null) {
					
						if (response['status'] == 'Fail') {
							clearInterval(debugInterval);
							debugInterval = null;
							debugRunFlag = false;
							$("#debugPauseMode").attr("src","images/etl/pause_gray.png");
							$("#debugRunMode").attr("src","images/etl/play.png");
							$("#debugNextMode").attr("src","images/etl/next.png");
							 stopLoader();
						}
						$(".debugInfoTables").remove();
						var operators = globalFlowChartData['operators'];
						$(".debugInfoTableDiv").remove();		
						$.each(operators, function(i) {
							
							var operator = operators[i];
							var left = operator.left;
							var top = operator.top;
							var div = "";
							var component = operator['component'];
							var connectedFromOperatorsArray = $('#' + flowChartWorkSpaceId).flowchart('getAllConnFromOperatorsByOpId', operator['operatorId'], []);
							if (connectedFromOperatorsArray!= null && connectedFromOperatorsArray.length == 0 ){
								var sourceDataObj = response['sourceDataObj'];
								div += "<div class='debugInfoTableDiv'><table class='debugInfoTables' id='debugInfoTable_"+operator.operatorId+"'>"
										+"<tr>";
										$.each(sourceDataObj, function(col, val) {
											div += "<th style='width:100px;' ><span title='"+col+"' >"+col+"</span></th>";
										})
										div += "</tr>";
										div += "<tr>";
										$.each(sourceDataObj, function(col, val){
											div += "<td style='width:100px;' ><span title='"+val+"' >"+val+"</span></td>";
										})
										div += "</tr>"+"</table></div>";
							} else if (component=="Y" && operator['iconType'] =='FILTER') {
								var filterDataObj = response['filterDataObj'];
								if (filterDataObj!=null){
									div += "<div class='debugInfoTableDiv'><table class='debugInfoTables' id='debugInfoTable_"+operator.operatorId+"'>"
										
										if (filterDataObj!=null && filterDataObj['error']!=null) {
									
											div += "<tr>";
											div += "<th style='width:100px;' ><span title='Error' >Error</span></th>";
											div += "</tr>";
											div += "<tr>";
											div += "<td style='width:100%;' ><span style='color:red;' title='"+filterDataObj['error']+"' >"+filterDataObj['error']+"</span></td>";
										
										} else {
										
											div += "<tr>";
											$.each(filterDataObj, function(col, val) {
												div += "<th style='width:100px;' ><span title='"+col+"' >"+col+"</span></th>";
											})
											div += "</tr>";
											div += "<tr>";
									
											$.each(filterDataObj, function(col, val){
											div += "<td style='width:100px;' ><span title='"+val+"' >"+val+"</span></td>";
											})
										}
										
										div += "</tr>"+"</table></div>";
								}
								
							} else if (component!="Y" && connectedFromOperatorsArray!= null && connectedFromOperatorsArray.length > 0) {
								var targetDataObj = response['targetDataObj'];
								
								div += "<div class='debugInfoTableDiv'><table class='debugInfoTables' id='debugInfoTable_"+operator.operatorId+"'>"
									
										if (targetDataObj!=null && targetDataObj['error']!=null) {

											div += "<tr>";
											div += "<th style='width:100px;' ><span title='Error' >Error</span></th>";
											div += "</tr>";
											div += "<tr>";
											div += "<td style='width:100%;' ><span style='color:red;' title='"+targetDataObj['error']+"' >"+targetDataObj['error']+"</span></td>";
										
										} else {
											
											div += "<tr>";
											$.each(targetDataObj, function(col, val) {
												div += "<th style='width:100px;' ><span title='"+col+"' >"+col+"</span></th>";
											})
											div += "</tr>";
											div += "<tr>";
										
											$.each(targetDataObj, function(col, val){
											div += "<td style='width:100px;' ><span title='"+val+"' >"+val+"</span></td>";
											})
										}
										
										div += "</tr>"+"</table></div>";
							}
							
							
							
						$("#"+flowChartWorkSpaceId).append(div);
						$("#debugInfoTable_"+operator.operatorId).css("position","absolute");
						$("#debugInfoTable_"+operator.operatorId).css("top",top+50);
						$("#debugInfoTable_"+operator.operatorId).css("left",left);
						
						})
							
							globalDebugOffset = globalDebugOffset+1;
							
					 
					} else {
					
					}
					if (resolve!=null){
						resolve("resolved");
					}
					
				},
				error: function(response) {
					if (response != null && !jQuery.isEmptyObject(response)) {
			
					}
				},
		})
		} else {
			stopLoader();
		}
	
		}, 2000);
		
	} else if (type == 'pause') {
		showLoader();
		debugRunFlag = false;
		$("#debugPauseMode").attr("src","images/etl/pause_gray.png");
		$("#debugRunMode").attr("src","images/etl/play.png");
		$("#debugNextMode").attr("src","images/etl/next.png");
		if (debugInterval!=null) {
			clearInterval(debugInterval);
		}
		debugInterval = null;
		
		//stopLoader();
		
	} else if (type == 'stop') { 
		stopDebug()
	} else if (type == 'next') {
		showLoader();
		$.ajax({
	        type: 'post',
	        traditional: true,
	        dataType: 'json',
	        cache: false,
	        url: 'debugProcessJob',
	      //  async: false,
	        data: {
				jobId: 'D41EBD54CC43C2729D78FB920E449811',
	           offset: globalDebugOffset,
	           flowchartData: JSON.stringify(globalFlowChartData)
	        },
		success: function(response) {
					 stopLoader();
				
					if (response != null && response['sourceDataObj']!=null) {
						$(".debugInfoTables").remove();
						var operators = globalFlowChartData['operators'];
						var sourceDataObj = response['sourceDataObj'];
						var targetDataObj = response['targetDataObj'];
						$(".debugInfoTableDiv").remove();
						
						$.each(operators, function(i) {
							
							var operator = operators[i];
							var left = operator.left;
							var top = operator.top;
							var div = "";
							var component = operator['component'];
							var connectedFromOperatorsArray = $('#' + flowChartWorkSpaceId).flowchart('getAllConnFromOperatorsByOpId', operator['operatorId'], []);
							if (connectedFromOperatorsArray.length == 0 ) {
								var sourceDataObj = response['sourceDataObj'];
								div += "<div class='debugInfoTableDiv'><table class='debugInfoTables' id='debugInfoTable_"+operator.operatorId+"'>"
										+"<tr>";
										$.each(sourceDataObj, function(col, val) {
											div += "<th style='width:100px;' ><span title='"+col+"' >"+col+"</span></th>";
										})
										div += "</tr>";
										div += "<tr>";
										$.each(sourceDataObj, function(col, val){
											div += "<td style='width:100px;' ><span title='"+val+"' >"+val+"</span></td>";
										})
										div += "</tr>"+"</table></div>";
							} else if (component!="Y" && connectedFromOperatorsArray.length > 0) {
								var targetDataObj = response['targetDataObj'];
								
								div += "<div class='debugInfoTableDiv'><table class='debugInfoTables' id='debugInfoTable_"+operator.operatorId+"'>"
										
										if (targetDataObj!=null && targetDataObj['error']!=null) {
											
											div += "<tr>";
											div += "<th style='width:100px;' ><span title='Error' >Error</span></th>";
											div += "</tr>";
											div += "<tr>";
											div += "<td style='width:100%;' ><span style='color:red;' title='"+targetDataObj['error']+"' >"+targetDataObj['error']+"</span></td>";
										
										} else {
											
											div += "<tr>";
											$.each(targetDataObj, function(col, val) {
												div += "<th style='width:100px;' ><span title='"+col+"' >"+col+"</span></th>";
											})
											div += "</tr>";
											div += "<tr>";
										
											$.each(targetDataObj, function(col, val){
											div += "<td style='width:100px;' ><span title='"+val+"' >"+val+"</span></td>";
											})
										}
										
										div += "</tr>"+"</table></div>";
							}
							
							
									
						$("#"+flowChartWorkSpaceId).append(div);
						$("#debugInfoTable_"+operator.operatorId).css("position","absolute");
						$("#debugInfoTable_"+operator.operatorId).css("top",top+50);
						$("#debugInfoTable_"+operator.operatorId).css("left",left);
						
						})
							
							globalDebugOffset = globalDebugOffset+1;
							
					 
					} else {
					
					}
										
				},
				error: function(response) {
					if (response != null && !jQuery.isEmptyObject(response)) {
			
					}
				},
		})
	}
	
}

function pauseDebug(){
	
}
function stopDebug(){
	debugRunFlag = false;
	if (debugInterval!=null) {
			clearInterval(debugInterval);
			}
			debugInterval = null;
			$(".debugProcessJobButtons").remove();
			$(".debugInfoTables").remove();
}


async function debugProcessJob(offset) {
let mypromise = new Promise(resolve => {
		
	showLoader();
	globalDebugOffset = 0;
	globalDebugRunFlag = true;
	if (debugInterval!=null) {
		clearInterval(debugInterval);
	}
	
	var debugButtons ="";

	debugButtons = "<div class='debugProcessJobButtons' >"
						+"<img title='Stop' onclick=debugRun('stop') id='debugStopMode' type='image' src='images/etl/stop.png'  />"						
						+"<img title='Run' onclick=debugRun('run') id='debugRunMode' type='image' src='images/etl/play_gray.png'  />"
						+"<img title='Pause' onclick=debugRun('pause') id='debugPauseMode' type='image' src='images/etl/pause.png'  />"
						+"<img title='Next' onclick=debugRun('next') id='debugNextMode' type='image' src='images/etl/next.png'  />"
					
						+"</div>";
				
	$(".debugProcessJobButtons").remove();
	$("#flowChartTabs").append(debugButtons);
	$(".debugProcessJobButtons").css("position","absolute");
	$(".debugProcessJobButtons").css("top",30);
	$(".debugProcessJobButtons").css("left",450);					
				
	if (offset == "0") {
		globalFlowChartData = $("#" + flowChartWorkSpaceId).flowchart("getData");
	}
	
	debugRun('run', resolve);
	
	});
	await mypromise;
	
	stopLoader();
	
}

function performDataProfiling(gridId, tableName, connObj){
	var rowdata = $("#" + gridId).jqxGrid('getrowdata', 0);
	var columnsArray =Object.keys(rowdata);
	var tableColsArray = [];
	var html =  "<div><input type='checkbox' class='etlDHASelectAllColumns' id='etlDHASelectAllColumns' ><span class='etlDHASelectAllColumnsSpan' >Select All</span></div>";
	
	 	html += "<div id='etlDHASelectColumnsListBox'></div>";
	//var html =  "<div><input type='checkbox' class='etlDHASelectAllColumns' id='etlDHASelectAllColumns' ><span>Select All</span></div>";
	//	html +=  "<div class='etlDHASelectColumnsDiv' >";
		$.each(columnsArray, function(i) {
			if (   columnsArray[i] == 'ROWNUM' 
				|| columnsArray[i] == 'uid' 
				|| columnsArray[i] == 'boundindex' 
				|| columnsArray[i] == 'uniqueid' 
				|| columnsArray[i] == 'visibleindex' 
				|| columnsArray[i].indexOf("_HIDDEN") > -1 ) {
	
				} else {
					//html+= "<div><input type='checkbox' class='etlDHAColumnName' value='"+columnsArray[i]+"' /><span> "+columnsArray[i]+"</span></div>";
					tableColsArray.push(columnsArray[i]);
				}
			});
		//html+="</div>";
	$("#dialog").html(html);
		$("#dialog").dialog({
			title: (labelObject['Select columns'] != null ? labelObject['Select columns'] : 'Select columns'),
			modal: true,
			html:true,
			height: 'auto',
			width: 320,
			maxWidth: 300,
			fluid: true,
			buttons: [{
				text: (labelObject['Ok'] != null ? labelObject['Ok'] : 'Ok'),
				click: function() {
					var items = $("#etlDHASelectColumnsListBox").jqxListBox('getCheckedItems'); 
					var colsArray = [];
					$.each(items, function(i){
						colsArray.push(this.value);
					})
					
					var colsArrayStr =	colsArray.join(",");
					showLoader();
					$.ajax({
						type: "post",
						traditional: true,
						dataType: 'json',
						url: 'performDataProfilingFromETL',
						cache: false,
						data: {
							tableName: tableName,
							colsArray: colsArrayStr,
                                                        connObj: connObj
							
						},
						success: function(response) {
							stopLoader();
							var result = response['result']
							$("#etldialog").html('<iframe id="dataProfilingIframe" style="width:100%;height:100%;" srcdoc=""></iframe>');
						
						$("#etldialog").dialog({
							title: (labelObject['Data Profiling'] != null ? labelObject['Data Profiling'] : 'Data Profiling'),
							modal: true,
							html:true,
							height: 'auto',
							width:1300,
							height:550,
							fluid: true,
						
						});
						$("#dataProfilingIframe").attr("srcdoc",result);
						},
						error: function(e) {
							console.log(e);
							sessionTimeout(e);
							stopLoader();
						}
						})
					
					$(this).html("");
					//                        //$(this).dialog("close");
					$(this).dialog("destroy");
				}
			}],
			open: function() {
				
				 $("#etlDHASelectColumnsListBox").jqxListBox({ 
					checkboxes: true, 
					filterable: true,
					source: tableColsArray,  
					width: 280, 
					height: 280
					});
				
				$("#etlDHASelectAllColumns").click(function(){
				    if ( $("#etlDHASelectAllColumns").prop('checked') ) {
					
						$("#etlDHASelectColumnsListBox").jqxListBox('checkAll'); 
					} else {
						$("#etlDHASelectColumnsListBox").jqxListBox('uncheckAll'); 
					}
				});
				
				$(this).closest(".ui-dialog").css("z-index", "9999")
				$(this).closest(".ui-dialog").find(".ui-button").eq(1).addClass("dialogyes");
				$(".visionHeaderMain").css("z-index", "999");
				$(".visionFooterMain").css("z-index", "999");
			},
			beforeClose: function(event, ui) {
				$(".visionHeaderMain").css("z-index", "99999");
				$(".visionFooterMain").css("z-index", "99999");
			}
		});
	

}

function performDataCleansing(gridId, tableName, connObj) {
    var dcFunctions = [];
        dcFunctions.push('Trim and Clean');
        dcFunctions.push('Deduplication');
        dcFunctions.push('Fill NA');
        
                $("#dialog").html("<div id='etlDCSelectColumnsListBox' ></div>");
		$("#dialog").dialog({
			title: (labelObject['Data Cleansing'] != null ? labelObject['Data Cleansing'] : 'Data Cleansing'),
			modal: true,
			html:true,
			height: 'auto',
			width: 320,
			maxWidth: 300,
			fluid: true,
			buttons: [{
				text: (labelObject['Ok'] != null ? labelObject['Ok'] : 'Ok'),
				click: function() {
					var items = $("#etlDCSelectColumnsListBox").jqxListBox('getCheckedItems'); 
					var fun_call = [];
					$.each(items, function(i){
						fun_call.push(this.value.toLowerCase());
					})
					
					var fun_call =	fun_call.join(",");
					showLoader();
					
                                        showLoader();
                                        $.ajax({
                                                type: "post",
                                                traditional: true,
                                                dataType: 'json',
                                                url: 'performDataCleansingFromETL',
                                                cache: false,
                                                data: {
                                                        tableName: tableName,
                                                        fun_call: fun_call,
                                                        connObj: connObj

                                                },
                                                success: function(response) {
                                                        stopLoader();
                                                        showMesg(response['result']);
                                                        $("#"+gridId).jqxGrid("updatebounddata");
                                                },
                                                error: function(e) {
                                                        console.log(e);
                                                        sessionTimeout(e);
                                                        stopLoader();
                                                }
                                        })
					
					$(this).html("");
					//                        //$(this).dialog("close");
					$(this).dialog("destroy");
				}
			}],
			open: function() {
				
				 $("#etlDCSelectColumnsListBox").jqxListBox({ 
					checkboxes: true, 
					filterable: true,
					source: dcFunctions,  
					width: 280, 
					height: 180
					});
				
				
				
				$(this).closest(".ui-dialog").css("z-index", "9999")
				$(this).closest(".ui-dialog").find(".ui-button").eq(1).addClass("dialogyes");
				$(".visionHeaderMain").css("z-index", "999");
				$(".visionFooterMain").css("z-index", "999");
			},
			beforeClose: function(event, ui) {
				$(".visionHeaderMain").css("z-index", "99999");
				$(".visionFooterMain").css("z-index", "99999");
			}
		});
                
    
                                        
	
}

function performVendorValidation(gridId, tableName, connObj){

                $("#etldialog").remove();
                $("#selectBatchIdListBox").remove();
                $("body").append("<div id='etldialog'></div>");
                $("#etldialog").html("<div id='selectBatchIdListBox' ></div>");
		$("#etldialog").dialog({
			title: (labelObject['Select BatchId'] != null ? labelObject['Select Columns'] : 'Select BatchId'),
			modal: true,
			html:true,
			height: 'auto',
			width: 320,
			maxWidth: 300,
			fluid: true,
			buttons: [{
				text: (labelObject['Ok'] != null ? labelObject['Ok'] : 'Ok'),
				click: function() {
					
                                        var batchId = $("#selectBatchIdListBox").jqxComboBox('getSelectedItem')['value']; 
					
                                          showLoader();
                                            $.ajax({
                                                    type: "post",
                                                    traditional: true,
                                                        dataType: 'json',
                                                        url: 'performVendorValidation',
                                                        cache: false,
                                                        data: {
                                                                tableName: tableName,
                                                                connObj: connObj,
                                                                batchId: batchId

                                                        },
                                                        success: function(response) {
                                                                stopLoader();
                                                                showMesg(response['result']);
                                                                $("#"+gridId).jqxGrid("updatebounddata");
                                                        },
                                                        error: function(e) {
                                                                console.log(e);
                                                                sessionTimeout(e);
                                                                stopLoader();
                                                        }
                                                })
					
					$(this).html("");
					//                        //$(this).dialog("close");
					$(this).dialog("destroy");
				}
			}],
			open: function() {
				showLoader();
                                  $.ajax({
                                        type: "post",
                                        traditional: true,
                                        dataType: 'json',
                                        url: 'getTableColumnsList',
                                        cache: false,
                                        data: {
                                                tableName: tableName,
                                                connObj: connObj,
                                                batchIds:"Y"
                                        },
                                        success: function(response) {
                                            stopLoader();
                                                var batchIdsArray = response['batchIdsArray']!=null?response['batchIdsArray']:[];
                                                stopLoader();
                                                
                                                $("#selectBatchIdListBox").jqxComboBox({ 
                                                    source: batchIdsArray,
                                                    width: '200px',
                                                    animationType: 'slide',
                                                    searchMode: 'contains',
                                                    placeHolder: "Select BatchId"
                                                     
                                                 });
                                                 
                                                 var timeout =null;
                                                 $("#selectBatchIdListBox").find(".jqx-combobox-input").on("keydown", function(e){
                                                     clearTimeout(timeout);
                                                        timeout = setTimeout(function() { 
                                                         var searchString = $(e.currentTarget).val();
                                                                    $.ajax({
                                                                    type: "post",
                                                                    traditional: true,
                                                                    dataType: 'json',
                                                                    url: 'getTableColumnsList',
                                                                    cache: false,
                                                                    data: {
                                                                            tableName: tableName,
                                                                            connObj: connObj,
                                                                            batchIds:"Y",
                                                                            searchString:searchString
                                                                    },
                                                                    success: function(response) {
                                                                        var batchIdsArray = response['batchIdsArray']!=null?response['batchIdsArray']:[];
                                                                            stopLoader();
                                                                            
                                                                            $("#selectBatchIdListBox").jqxComboBox({ 
                                                                                source: batchIdsArray
                                                                             });
                                                                             $("#selectBatchIdListBox").jqxComboBox('open' ); 
                                                                             $("#selectBatchIdListBox").find(".jqx-combobox-input").val(searchString);
                                                                    },
                                                                    error: function(e) {
                                                                            console.log(e);
                                                                            sessionTimeout(e);
                                                                            stopLoader();
                                                                    }
                                                            })
                                                        }, 1000)
                                                    
                                                 })
                                                
                                        },
                                        error: function(e) {
                                                console.log(e);
                                                sessionTimeout(e);
                                                stopLoader();
                                        }
                                })
                                        
				
				
				
				
				$(this).closest(".ui-dialog").css("z-index", "9999")
				$(this).closest(".ui-dialog").find(".ui-button").eq(1).addClass("dialogyes");
				$(".visionHeaderMain").css("z-index", "999");
				$(".visionFooterMain").css("z-index", "999");
			},
			beforeClose: function(event, ui) {
				$(".visionHeaderMain").css("z-index", "99999");
				$(".visionFooterMain").css("z-index", "99999");
			}
		});
                
   
    
//    var html = "<div><span>Please Provide Batch Id</span><input id='vendorValidationBatchId' value='' /></div>";
//                $("#dialog").html(html);
//		$("#dialog").dialog({
//			title: (labelObject['Message'] != null ? labelObject['Message'] : 'Message'),
//			modal: true,
//			html:true,
//			height: 'auto',
//			width: 320,
//			maxWidth: 300,
//			fluid: true,
//			buttons: [{
//				text: (labelObject['Ok'] != null ? labelObject['Ok'] : 'Ok'),
//				click: function() {
//					var batchId  = $("#vendorValidationBatchId").val();
//                                        showLoader();
//                                        $.ajax({
//                                                type: "post",
//                                                traditional: true,
//                                                dataType: 'json',
//                                                url: 'performVendorValidation',
//                                                cache: false,
//                                                data: {
//                                                        tableName: tableName,
//                                                        connObj: connObj,
//                                                        batchId: batchId
//
//                                                },
//                                                success: function(response) {
//                                                        stopLoader();
//                                                        showMesg(response['result']);
//                                                        $("#"+gridId).jqxGrid("updatebounddata");
//                                                },
//                                                error: function(e) {
//                                                        console.log(e);
//                                                        sessionTimeout(e);
//                                                        stopLoader();
//                                                }
//                                        })
//					$(this).html("");
//					//                        //$(this).dialog("close");
//					$(this).dialog("destroy");
//				}
//			}],
//			open: function() {
//				
//				$(this).closest(".ui-dialog").css("z-index", "9999")
//				$(this).closest(".ui-dialog").find(".ui-button").eq(1).addClass("dialogyes");
//				$(".visionHeaderMain").css("z-index", "999");
//				$(".visionFooterMain").css("z-index", "999");
//			},
//			beforeClose: function(event, ui) {
//				$(".visionHeaderMain").css("z-index", "99999");
//				$(".visionFooterMain").css("z-index", "99999");
//			}
//		});
    
    
}


function performReferenceDataExtraction(gridId, tableName, connObj) {
                $("#etldialog").remove();
                $("#selectBatchIdListBox").remove();
                $("#selectTableColumnsListBox").remove();
                $("body").append("<div id='etldialog'></div>");
                $("#etldialog").html("<div id='selectBatchIdListBox' ></div><div id='selectTableColumnsListBox' ></div>");
		$("#etldialog").dialog({
			title: (labelObject['Select Columns'] != null ? labelObject['Select Columns'] : 'Select Columns'),
			modal: true,
			html:true,
			height: 'auto',
			width: 320,
			maxWidth: 300,
			fluid: true,
			buttons: [{
				text: (labelObject['Ok'] != null ? labelObject['Ok'] : 'Ok'),
				click: function() {
					var items = $("#selectTableColumnsListBox").jqxComboBox('getSelectedItems'); 
					var colsArray = [];
					$.each(items, function(i){
						colsArray.push(this.value.toUpperCase());
					})
					
					var colsArray =	colsArray.join(",");
                                        
                                        var batchId = $("#selectBatchIdListBox").jqxComboBox('getSelectedItem')['value']; 
					
                                       					
					showLoader();
                                        $.ajax({
                                                type: "post",
                                                traditional: true,
                                                dataType: 'json',
                                                url: 'etlReferenceDataExtraction',
                                                cache: false,
                                                data: {
                                                        tableName: tableName,
                                                        connObj: connObj,
                                                        batchId: batchId,
                                                        colsArray: colsArray,
                                                        
                                                },
                                                success: function(response) {
                                                        stopLoader();
                                                        showMesg(response['result']);
                                                        $("#"+gridId).jqxGrid("updatebounddata");
                                                },
                                                error: function(e) {
                                                        console.log(e);
                                                        sessionTimeout(e);
                                                        stopLoader();
                                                }
                                        })
					
					$(this).html("");
					//                        //$(this).dialog("close");
					$(this).dialog("destroy");
				}
			}],
			open: function() {
                            
				showLoader();
                                  $.ajax({
                                        type: "post",
                                        traditional: true,
                                        dataType: 'json',
                                        url: 'getTableColumnsList',
                                        cache: false,
                                        data: {
                                                tableName: tableName,
                                                connObj: connObj,
                                                batchIds:"Y"
                                        },
                                        success: function(response) {
                                            var batchIdsArray = response['batchIdsArray']!=null?response['batchIdsArray']:[];
                                                stopLoader();
                                                
                                                $("#selectBatchIdListBox").jqxComboBox({ 
                                                    source: batchIdsArray,
                                                    width: '200px',
                                                    animationType: 'slide',
                                                    searchMode: 'contains',
                                                    placeHolder: "Select BatchId"
                                                     
                                                 });
                                                 
                                                 var timeout =null;
                                                 $("#selectBatchIdListBox").find(".jqx-combobox-input").on("keydown", function(e){
                                                     clearTimeout(timeout);
                                                        timeout = setTimeout(function() { 
                                                         var searchString = $(e.currentTarget).val();
                                                                    $.ajax({
                                                                    type: "post",
                                                                    traditional: true,
                                                                    dataType: 'json',
                                                                    url: 'getTableColumnsList',
                                                                    cache: false,
                                                                    data: {
                                                                            tableName: tableName,
                                                                            connObj: connObj,
                                                                            batchIds:"Y",
                                                                            searchString:searchString
                                                                    },
                                                                    success: function(response) {
                                                                        var batchIdsArray = response['batchIdsArray']!=null?response['batchIdsArray']:[];
                                                                            stopLoader();
                                                                            
                                                                            $("#selectBatchIdListBox").jqxComboBox({ 
                                                                                source: batchIdsArray
                                                                             });
                                                                             $("#selectBatchIdListBox").jqxComboBox('open' ); 
                                                                             $("#selectBatchIdListBox").find(".jqx-combobox-input").val(searchString);
                                                                    },
                                                                    error: function(e) {
                                                                            console.log(e);
                                                                            sessionTimeout(e);
                                                                            stopLoader();
                                                                    }
                                                            })
                                                        }, 1000)
                                                    
                                                 })
                                                 
                                                 
                                                 var colsArray = response['columnsList']!=null ? response['columnsList'] : [];
                                                
                                                  $("#selectTableColumnsListBox").jqxComboBox({ 
                                                    source: colsArray,
                                                    width: '200px',
                                                    animationType: 'slide',
                                                    searchMode: 'contains',
                                                    multiSelect: true,
                                                    placeHolder: "Select Columns"
                                                 });
                                                                                           
                                        },
                                        error: function(e) {
                                                console.log(e);
                                                sessionTimeout(e);
                                                stopLoader();
                                        }
                                })
                                        
				
				
				
				
				$(this).closest(".ui-dialog").css("z-index", "9999")
				$(this).closest(".ui-dialog").find(".ui-button").eq(1).addClass("dialogyes");
				$(".visionHeaderMain").css("z-index", "999");
				$(".visionFooterMain").css("z-index", "999");
			},
			beforeClose: function(event, ui) {
				$(".visionHeaderMain").css("z-index", "99999");
				$(".visionFooterMain").css("z-index", "99999");
			}
		});
                
    
                                        
	
}


function updateColumnFuntion(gridId, columnName, functionOperation, data) {
	$.ajax({
		type: "post",
		traditional: true,
		dataType: 'json',
		url: 'updateColumnFuntion',
		cache: false,
		data: {
			columnName: columnName,
			functionOperation: functionOperation,
			data: JSON.stringify(data)
		},
		success: function(response) {
			stopLoader();
			showMesg(response['result']);
			$("#"+gridId).jqxGrid("updatebounddata");
		},
		error: function(e) {
			console.log(e);
			sessionTimeout(e);
			stopLoader();
		}
	})
}

function alterTableDrop(gridId, columnName, functionOperation, data){
    
    var html = "<span>Are you sure you want to drop the column?</span>";
                $("#dialog").html(html);
		$("#dialog").dialog({
			title: (labelObject['Drop Column'] != null ? labelObject['Drop Column'] : 'Drop Column'),
			modal: true,
			html:true,
			height: 'auto',
			width: 320,
			maxWidth: 300,
			fluid: true,
			buttons: [{
				text: (labelObject['Yes'] != null ? labelObject['Yes'] : 'Yes'),
				click: function() {
					
                                         var dataObj = JSON.parse(data);
                                        var tableName = dataObj['tableName'];
                                        var connectionObj = dataObj['connectionObj'];
                                        var selectedColumnsList = [];
                                        selectedColumnsList.push(columnName);
                                         $.ajax({
                                                type: 'post',
                                                traditional: true,
                                                dataType: 'json',
                                                cache: false,
                                                url: 'dropColumnAlterTable',
                                                async: true,
                                                data: {
                                                        tableName: tableName,
                                                        connObj: connectionObj,
                                                        selectedColumnsList: JSON.stringify(selectedColumnsList)
                                                },
                                                success: function(response) {
                                                        stopLoader();
                                                        if (response != null) {
                                                                //                var responseObj = JSON.parse(response);
                                                                showMesg(response['message']);
                                                                var selectedItemIndex = $('#dataViewDiv').jqxTabs('selectedItem');

                                                                $('#dataViewDiv').jqxTabs('removeAt', selectedItemIndex); 

                                                                viewTableDataGrid(dataObj);
                                                               
                                                        }
                                                },
                                                error: function(e) {
                                                        sessionTimeout(e);
                                                }

                                        });
                                        
					$(this).html("");
					//                        //$(this).dialog("close");
					$(this).dialog("destroy");
				}
			},
                        {
				text: (labelObject['No'] != null ? labelObject['No'] : 'No'),
				click: function() {
					
					$(this).html("");
					//                        //$(this).dialog("close");
					$(this).dialog("destroy");
				}
			}],
			open: function() {
				
				$(this).closest(".ui-dialog").css("z-index", "9999")
				$(this).closest(".ui-dialog").find(".ui-button").eq(1).addClass("dialogyes");
				$(".visionHeaderMain").css("z-index", "999");
				$(".visionFooterMain").css("z-index", "999");
			},
			beforeClose: function(event, ui) {
				$(".visionHeaderMain").css("z-index", "99999");
				$(".visionFooterMain").css("z-index", "99999");
			}
		});
    
       
}

function alterTableAddColumn(){
     var html = "<div id='' ><table>"
                +"<tr><td>Column Name</td><td><input type='text' id='addColumnName' ></td></tr>"
                +"<tr><td>DataType</td><td><input type='text' id='addColumnDataType' ></td></tr>"
                +"<tr><td>Primary key</td><td><input type='checkbox' id='addColumnPK' ></td></tr>"
                +"<tr><td>Not null</td><td><input type='text' id='addColumnNotNull' ></td></tr>"
                +"<tr><td>Default value</td><td><input type='text' id='addColumnDefaultValue' ></td></tr>"
                +"</table></div>";
                $("#dialog").html(html);
		$("#dialog").dialog({
			title: (labelObject['Add Column'] != null ? labelObject['Add Column'] : 'Add Column'),
			modal: true,
			html:true,
			height: 'auto',
			width: 320,
			maxWidth: 300,
			fluid: true,
			buttons: [{
				text: (labelObject['Ok'] != null ? labelObject['Ok'] : 'Ok'),
				click: function() {
					var find = $("#updateColumnFind").val();
					var replace = $("#updateColumnReplaceWith").val();
					
                                        $.ajax({
                                                type: "post",
                                                traditional: true,
                                                dataType: 'json',
                                                url: 'updateColumnReplace',
                                                cache: false,
                                                data: {
                                                        columnName: columnName,
                                                        functionOperation: functionOperation,
                                                        find: find,
                                                         replace: replace,       
                                                        data: JSON.stringify(data)

                                                },
                                                success: function(response) {
                                                        stopLoader();
                                                        showMesg(response['result']);
                                                        $("#"+gridId).jqxGrid("updatebounddata");
                                                },
                                                error: function(e) {
                                                        console.log(e);
                                                        sessionTimeout(e);
                                                        stopLoader();
                                                }
                                        })
                                        
					$(this).html("");
					//                        //$(this).dialog("close");
					$(this).dialog("destroy");
				}
			}],
			open: function() {
				
						
				
				$(this).closest(".ui-dialog").css("z-index", "9999")
				$(this).closest(".ui-dialog").find(".ui-button").eq(1).addClass("dialogyes");
				$(".visionHeaderMain").css("z-index", "999");
				$(".visionFooterMain").css("z-index", "999");
			},
			beforeClose: function(event, ui) {
				$(".visionHeaderMain").css("z-index", "99999");
				$(".visionFooterMain").css("z-index", "99999");
			}
		});
}


function updateColumnReplace(gridId, columnName, functionOperation, data) {
    var html = "<div id='' ><table>"
                +"<tr><td>Find</td><td><input type='text' id='updateColumnFind' ></td></tr>"
                +"<tr><td>Replace with</td><td><input type='text' id='updateColumnReplaceWith' ></td></tr>"
                +"</table></div>";
     $("#dialog").html(html);
		$("#dialog").dialog({
			title: (labelObject['Replace'] != null ? labelObject['Replace'] : 'Replace'),
			modal: true,
			html:true,
			height: 'auto',
			width: 320,
			maxWidth: 300,
			fluid: true,
			buttons: [{
				text: (labelObject['Ok'] != null ? labelObject['Ok'] : 'Ok'),
				click: function() {
					var find = $("#updateColumnFind").val();
					var replace = $("#updateColumnReplaceWith").val();
					
			
                                        $.ajax({
                                                type: "post",
                                                traditional: true,
                                                dataType: 'json',
                                                url: 'updateColumnReplace',
                                                cache: false,
                                                data: {
                                                        columnName: columnName,
                                                        functionOperation: functionOperation,
                                                        find: find,
                                                         replace: replace,       
                                                        data: JSON.stringify(data)

                                                },
                                                success: function(response) {
                                                        stopLoader();
                                                        showMesg(response['result']);
                                                        $("#"+gridId).jqxGrid("updatebounddata");
                                                },
                                                error: function(e) {
                                                        console.log(e);
                                                        sessionTimeout(e);
                                                        stopLoader();
                                                }
                                        })
                                        
					$(this).html("");
					//                        //$(this).dialog("close");
					$(this).dialog("destroy");
				}
			}],
			open: function() {
				
						
				
				$(this).closest(".ui-dialog").css("z-index", "9999")
				$(this).closest(".ui-dialog").find(".ui-button").eq(1).addClass("dialogyes");
				$(".visionHeaderMain").css("z-index", "999");
				$(".visionFooterMain").css("z-index", "999");
			},
			beforeClose: function(event, ui) {
				$(".visionHeaderMain").css("z-index", "99999");
				$(".visionFooterMain").css("z-index", "99999");
			}
		});
	
}


function updateColumnFuntionPrefixSuffix(gridId, columnName, functionOperation, data) {
    var html = "<div id='' ><table>"
                +"<tr><td>"+functionOperation+"</td><td><input type='text' id='updateColumnValue' ></td></tr>"
                
                +"</table></div>";
                $("#dialog").html(html);
		$("#dialog").dialog({
			title: (labelObject[functionOperation] != null ? labelObject[functionOperation] : functionOperation),
			modal: true,
			html:true,
			height: 'auto',
			width: 320,
			maxWidth: 300,
			fluid: true,
			buttons: [{
				text: (labelObject['Ok'] != null ? labelObject['Ok'] : 'Ok'),
				click: function() {
					var updateColumnValue = $("#updateColumnValue").val();
					
                                        $.ajax({
                                                type: "post",
                                                traditional: true,
                                                dataType: 'json',
                                                url: 'updateColumnFuntionPrefixSuffix',
                                                cache: false,
                                                data: {
                                                        columnName: columnName,
                                                        functionOperation: functionOperation,
                                                        updateColumnValue: updateColumnValue,
                                                        data: JSON.stringify(data)

                                                },
                                                success: function(response) {
                                                        stopLoader();
                                                        showMesg(response['result']);
                                                        $("#"+gridId).jqxGrid("updatebounddata");
                                                },
                                                error: function(e) {
                                                        console.log(e);
                                                        sessionTimeout(e);
                                                        stopLoader();
                                                }
                                        })
                                        
					$(this).html("");
					//                        //$(this).dialog("close");
					$(this).dialog("destroy");
				}
			}],
			open: function() {
				
				$(this).closest(".ui-dialog").css("z-index", "9999")
				$(this).closest(".ui-dialog").find(".ui-button").eq(1).addClass("dialogyes");
				$(".visionHeaderMain").css("z-index", "999");
				$(".visionFooterMain").css("z-index", "999");
			},
			beforeClose: function(event, ui) {
				$(".visionHeaderMain").css("z-index", "99999");
				$(".visionFooterMain").css("z-index", "99999");
			}
		});
	
}

function advancedOptions(connectionName, tableName, connectionObj) {
    
        showLoader();
	$.ajax({
		type: "post",
		traditional: true,
		dataType: 'json',
		url: 'getTableColumnsList',
		cache: false,
		data: {
			connectionName: connectionName,
			tableName: tableName,
			connObj: JSON.stringify(connectionObj),
                        maskedColumns:"Y"
		},
		success: function(response) {
			stopLoader();
			var columnsList = response['columnsList'];
			var maskedColumnsList = response['maskedColumnsList'];
			
			var html =  "<div><input type='checkbox' class='etlDHASelectAllColumns' id='etlDHASelectAllColumns' ><span class='etlDHASelectAllColumnsSpan' >Select All</span></div>";

	 		html += "<div id='etlDHASelectColumnsListBox'></div>";
			$("#dialog").html(html);
			$("#dialog").dialog({
				title: (labelObject['Select columns'] != null ? labelObject['Select columns'] : 'Select columns'),
				modal: true,
				html:true,
				height: 'auto',
				width: 320,
				maxWidth: 300,
				fluid: true,
				buttons: [{
					text: (labelObject['Mask Columns'] != null ? labelObject['Mask Columns'] : 'Mask Columns'),
					click: function() {
						var items = $("#etlDHASelectColumnsListBox").jqxListBox('getCheckedItems'); 
						var colsArray = [];
						$.each(items, function(i){
							colsArray.push(this.value);
						})
						
						var colsArrayStr =	colsArray.join(",");
						showLoader();
						$.ajax({
							type: "post",
							traditional: true,
							dataType: 'json',
							url: 'updateMakedColumns',
							cache: false,
							data: {
								tableName: tableName,
								colsArray: colsArrayStr,
								connObj: JSON.stringify(connectionObj)
								
							},
							success: function(response) {
								stopLoader();
								showMesg(response['result']);
							},
							error: function(e) {
								console.log(e);
								sessionTimeout(e);
								stopLoader();
							}
							})
						
						$(this).html("");
						//                        //$(this).dialog("close");
						$(this).dialog("destroy");
					}
				}],
				open: function() {
					
					 $("#etlDHASelectColumnsListBox").jqxListBox({ 
						checkboxes: true, 
						filterable: true,
						source: columnsList,  
						width: 280, 
						height: 280
						});
						
						$.each(columnsList, function(i){
							if (maskedColumnsList.indexOf(columnsList[i]) > -1 ) {
								
								$("#etlDHASelectColumnsListBox").jqxListBox('checkIndex', i); 
							}
						})
					
					$("#etlDHASelectAllColumns").click(function(){
					    if ( $("#etlDHASelectAllColumns").prop('checked') ) {
						
							$("#etlDHASelectColumnsListBox").jqxListBox('checkAll'); 
						} else {
							$("#etlDHASelectColumnsListBox").jqxListBox('uncheckAll'); 
						}
					});
					
					$(this).closest(".ui-dialog").css("z-index", "9999")
					$(this).closest(".ui-dialog").find(".ui-button").eq(1).addClass("dialogyes");
					$(".visionHeaderMain").css("z-index", "999");
					$(".visionFooterMain").css("z-index", "999");
				},
				beforeClose: function(event, ui) {
					$(".visionHeaderMain").css("z-index", "99999");
					$(".visionFooterMain").css("z-index", "99999");
				}
			});
		},
		error: function(e) {
			console.log(e);
			sessionTimeout(e);
			stopLoader();
		}
	})
}

function fetchYoutubeData(paramsObj){
    showLoader();
    
    $.ajax({
            type: "post",
            traditional: true,
            dataType: 'json',
            url: 'fetchYoutubeApiData',
            cache: false,
            data: paramsObj,
            success: function(response) {
                    stopLoader();
                    showMesg(response['result']);
                    
                    var columnsObj = globalTreeObj['treeColumnObj'];
                    var extTreeParams = $("#extTreeParams").val();

                    var data = {
                            parentkey: 'YT_NC_ANALYSIS_PSA_BZR',
                            treeId: globalTreeObj['treeId'],
                            level: '5',
                            extTreeParams: {},
                            columnsObj: JSON.stringify(columnsObj),
                            connectionObj: JSON.stringify(savedDBData['Current_V10']),
                            startIndex: 0,
                            endIndex: 50,
                            DBValue: 'Current_V10',
                            tableName: 'YT_NC_ANALYSIS_PSA_BZR',
                            whereClause: paramsObj.whereClause
                    };
                   
                    viewTableDataGrid(data);
            },
            error: function(e) {
                    console.log(e);
                    sessionTimeout(e);
                    stopLoader();
            }
            })
}


function displayTableScript(gridId, tableName, connObj) {
showLoader();
    $.ajax({
        type: "post",
        traditional: true,
        dataType: 'json',
        url: 'getTableScript',
        cache: false,
        data: {
        	flag: "S",
        	tableName: tableName,
                connObj: connObj
                
        },
        success: function (response) {
            stopLoader();
            var tableScript = response['tableScript'];
            var tableScriptArr = tableScript.split('\n');
            var markup = "<div  class='" + tableName + "-ScriptMessage scriptMessageDiv' >";
            tableScriptArr.forEach(element => {
                markup += "<h5 style='color:#0f2878;font-size:0.7rem;'>" + element + "</h5>";
            });
            markup += "</div>"
            $("#etlScriptDialog").remove();
             $("body").append("<div id='etlScriptDialog'></div>");
            $('#etlScriptDialog').dialog({
            title: tableName + ' DDL SCHEMA',
            width: 500,
            height: 350,
            open: function () {
            $(this).html(markup);
            },
            buttons: [
            {
            text: "Close",
                    click: function () {
                    $(this).dialog("close");
                    }
            }
            ]
            }).css({height: "350px", overflow: "auto"});
        },
        error: function (e) {
        console.log(e);
                sessionTimeout(e);
                stopLoader();
        }
    });
}

function queryFilter(gridId, tableName, connObjString, whereClauseCondition){
                if (whereClauseCondition== null || whereClauseCondition == '') {
                    whereClauseCondition = $("#QueryFilter_"+gridId).attr("whereclause");
                    whereClauseCondition = whereClauseCondition!=null ? whereClauseCondition:'';
                }
               
                $("#dialog").remove();
                $("body").append("<div id='dialog' ></div>");
                
                $("#dialog").html('<textarea id="queryFilterWhereClause"  rows="4" cols="50"  >'+whereClauseCondition+'</textarea>');
		$("#dialog").dialog({
			title: (labelObject['Where Clause Condition'] != null ? labelObject['Where Clause Condition'] : 'Where Clause Condition'),
			modal: true,
			html:true,
			height: 'auto',
			width: 400,
			fluid: true,
			buttons: [{
				text: (labelObject['Ok'] != null ? labelObject['Ok'] : 'Ok'),
				click: function() {
                                    var connObj = JSON.parse(connObjString);
                                    var whereClause =  $("#queryFilterWhereClause").val();
                                  
                                    $("#QueryFilter_"+gridId).attr("whereclause", whereClause);
                                    var aaa = $("#QueryFilter_"+gridId).attr("whereclause")
                                   
//                                    if (whereClause!=null && whereClause!='') {
//                                       whereClause =  " WHERE " + whereClause;
//                                    }
                                    whereClause = whereClause!=null?whereClause:'';
                                    var columnsObj = globalTreeObj['treeColumnObj'];
                                    var extTreeParams = $("#extTreeParams").val();
                    
                                     var data = {
                                        parentkey: tableName,
                                        treeId: globalTreeObj['treeId'],
                                        level: '5',
                                        extTreeParams: {},
                                        columnsObj: JSON.stringify(columnsObj),
                                        connectionObj: connObjString,
                                        startIndex: 0,
                                        endIndex: 50,
                                        DBValue: connObj['CONNECTION_NAME'],
                                        tableName: tableName,
                                        whereClause: whereClause
                                };

                                viewTableDataGrid(data);
                                   
					$(this).html("");
					//                        //$(this).dialog("close");
					$(this).dialog("destroy");
				}
			},
                    {
				text: (labelObject['Clear'] != null ? labelObject['Clear'] : 'Clear'),
				click: function() {
                                    var connObj = JSON.parse(connObjString);
                                    
                                    $("#QueryFilter_"+gridId).attr("whereclause","");
                                    
                                    $("#queryFilterWhereClause").val("");
                                   
                                    var columnsObj = globalTreeObj['treeColumnObj'];
                                    var extTreeParams = $("#extTreeParams").val();
                    
                                     var data = {
                                        parentkey: tableName,
                                        treeId: globalTreeObj['treeId'],
                                        level: '5',
                                        extTreeParams: {},
                                        columnsObj: JSON.stringify(columnsObj),
                                        connectionObj: connObjString,
                                        startIndex: 0,
                                        endIndex: 50,
                                        DBValue: connObj['CONNECTION_NAME'],
                                        tableName: tableName
                                        };

                                        viewTableDataGrid(data);
                                   
					$(this).html("");
					//                        //$(this).dialog("close");
					$(this).dialog("destroy");
				}
			}],
			open: function() {
				$(this).closest(".ui-dialog").css("z-index", "9999")
				$(this).closest(".ui-dialog").find(".ui-button").eq(1).addClass("dialogyes");
				$(".visionHeaderMain").css("z-index", "999");
				$(".visionFooterMain").css("z-index", "999");
			},
			beforeClose: function(event, ui) {
				$(".visionHeaderMain").css("z-index", "99999");
				$(".visionFooterMain").css("z-index", "99999");
			}
		});
    
}

function getInsertQueryVal(value,dataType){
    
    switch (dataType) {
        
      case "CHAR": case "VARCHAR": case "VARCHAR2": case "NCHAR": case "NVARCHAR2": case "RAW": case "CLOB": case "BLOB": //ORACLE
      /*case "CHAR": case "VARCHAR":*/ case "TEXT": case "ENUM": case "SET":   //MYSQL  
      case "NVARCHAR": case "NTEXT": //MSSQL
       return "'" + value + "'";

      case "NUMBER": case "INTEGER": case "FLOAT": case "DECIMAL":   //ORACLE
      case "INT": case "TINYINT": case "SMALLINT": case "MEDIUMINT": case "BIGINT": case "DOUBLE": case "BIGINT UNSIGNED": /*case "FLOAT": case "DECIMAL":*/ //MYSQL
      case "REAL": case "BIT": //MSSQL
        return value;
      case "DATE":   case "DATETIME"://ORACLE //MYSQL
        value = value.split('.')[0];
        return  !value.includes(' ') ? "TO_DATE('" + value + "','YYYY-MM-DD')" : "TO_DATE('" + value + "','YYYY-MM-DD HH24:MI:SS')";
//        return "TO_DATE('" + value + "','YYYY-MM-DD HH24:MI:SS')";
      case "BOOLEAN":   //ORACLE //MYSQL
        return value;
      default:
        return "'"+value+"'";
    }


}

function displayTableTriggers(gridId, tableName, connObj, flag) {
    showLoader();
        $.ajax({
        type: "post",
                traditional: true,
                dataType: 'json',
                url: 'getTableScript',
                cache: false,
                data: {
                tableName: tableName,
                        connObj: connObj,
                        flag: flag

                },
                success: function (response) {
                stopLoader();
                        if (!jQuery.isEmptyObject(response) && response['data'] != undefined){
                            var tableName = response['tableName'];
                            var connObjStr = response['connObj'];
                var markup = "";
                        var isPresent = false;
                        var triggerMessage = response['triggerMessage'];
                        var columns = response['columns'];
                        var triggerBodyDivStr = "";
                        markup += "<div class='trigger-class'><div class='panel-body table-responsive' style='max-height:150px;'>"
                        + "<table class='table table-hover table-bordered trigger-table' style='width:100%;'><thead><tr>";
                        $.each(columns, function (i) {
                        markup += "<th>" + columns[i] + "</th>";
                        });
                        markup += "</tr></thead><tbody>";
                        var data = response['data'];
                        if (data.length > 0){
                isPresent = true;
                }
                for (var i = 0; i < data.length; i++){
                var obj = data[i];
                        var triggerName = obj['TRIGGER_NAME'];
                        var triggerBody = obj['TRIGGER_BODY'];
                        markup += "<tr>";
                        for (var k = 0; k < columns.length; k++){
                if (columns[k] == 'TRIGGER_NAME'){
                markup += "<td onclick=showTriggerMessage('triggerBodyMsg_" + triggerName + "','triggerBody_" + tableName + "','" + triggerName +"','" + connObjStr + "','" + tableName + "')>" + triggerName + "</td>";
                }else if(columns[k] == 'STATUS'){
                    markup += "<td id='" + triggerName + "_Status'>" + obj[columns[k]] + "</td>";
                } else {
                    markup += "<td>" + obj[columns[k]] + "</td>";
                }

                }
                markup += "</tr>";
                        triggerBodyDivStr += "<pre style='display:none;' id='triggerBodyMsg_" + triggerName + "'>" + triggerBody + "</pre>";
                }
                markup += "</tbody></table></div>"
                        + "<div style='margin-top:10px;border:1px solid black;padding:10px;max-height:225px;overflow:scroll;' id='triggerBody_" + tableName + "' >"
                        + "</div></div>"
                    $('#triggerDialog').remove();
                        $("#etlPageBody").append("<div id='triggerDialog'></div>");
                        $('#triggerDialog').dialog({
                title: tableName + ' TRIGGERS',
                        width: 700,
                        height: 500,
                        open: function () {
                        $(this).html(markup);
                                $("#triggerBody_" + tableName).html(triggerBodyDivStr);
                                //$("#triggerBody_"+tableName).hide();
                                if (isPresent){
                        $("#triggerBody_" + tableName).hide();
                        } else{
                        $("#triggerBody_" + tableName).html(triggerMessage);
                        }

                        },
                        buttons: [
                        {
                        text: "Close",
                                click: function () {
                                $(this).dialog("close");
                                }
                        }
                        ]
                }).css({overflow: "hidden"});
                } else{
                showMesg(response['triggerMessage']);
                }
                }
        ,
                error: function (e) {
                console.log(e);
                        sessionTimeout(e);
                        stopLoader();
                }
        });
}

function showTriggerMessage(id,parentId,triggerName,connObjStr,tableName){
    var buttonStr = "<div class='etl-trigger-btn' id='etlTriggerBtn' style='display:flex;gap:10px;float:right;position:absolute;right:20px;'>"
                        +  "<img title='Enable' style='height:12px;cursor:pointer;' onclick=triggerOperation('" + triggerName + "','" + connObjStr + "','" + tableName + "','O','ENABLE') src='images/etl/enable.png' >"
                        + "<img title='Disable' style='height:12px;cursor:pointer;' onclick=triggerOperation('" + triggerName + "','" + connObjStr + "','" + tableName + "','O','DISABLE') src='images/etl/disable.png' >"
                        //+ "<button type='button' class='btn btn-outline-secondary' onclick=triggerOperation('" + triggerName + "','" + connObjStr + "','" + tableName + "','O','ENABLE')>Enable Trigger</button>"
                        //+ "<button type='button' class='btn btn-outline-secondary' onclick=triggerOperation('" + triggerName + "','" + connObjStr + "','" + tableName + "','O','DISABLE')>Disable Trigger</button>"
                        + "</div>"
                        + "<div class='etl-triggerOperation-msg' style='display:flex;gap:10px;float:right;position:absolute;right:20px;margin-top:35px;'>"
                        + "<span id='enableDisableMsg'></span>"
                        + "</div>"
    var childElements = $('#'+parentId).children().not('#'+id);
    childElements.each(function() {
      $('#'+this.id).css("display", "none");
    });
    $('#'+id).css("display", "block");
     $('#etlTriggerBtn').remove();
     $('#'+parentId).prepend(buttonStr);
    $('#'+parentId).show();
}  

function triggerOperation(triggerName,connObjStr,tableName,flag,enableDisableFlag){
    showLoader();
    $.ajax({
    type: "post",
            traditional: true,
            dataType: 'json',
            url: 'getTableScript',
            cache: false,
            data: {
                triggerName: triggerName,
                connObjStr: connObjStr,
                flag: flag,
                enableDisableFlag:enableDisableFlag,
                tableName: tableName

            },
            success: function (response) {
                stopLoader();
                if (!jQuery.isEmptyObject(response)){
                       $("#enableDisableMsg").html('');
                       $("#enableDisableMsg").html(response['message']);
                       $("#enableDisableMsg").css({"background":"#98FB98","display":"block"});
                       $('#enableDisableMsg').fadeOut(7000);
                       $("#" + response['triggerName'] + "_Status").html(response['enableDisableFlag'] + "D");
                       $("#" + response['triggerName'] + "_Status").addClass('etl-trigger-status');
                        setTimeout(function() {
                            $("#" + response['triggerName'] + "_Status").removeClass('etl-trigger-status');
                        }, 1000);
                }
            }
            ,
            error: function (e) {
                console.log(e);
                sessionTimeout(e);
                stopLoader();
            }
    });
}
        
function getSelectedText() {
        var selectedText = '';
 
        // window.getSelection
        if (window.getSelection) {
            selectedText = window.getSelection();
        }
        // document.getSelection
        else if (document.getSelection) {
            selectedText = document.getSelection();
        }
        // document.selection
        else if (document.selection) {
            selectedText =
                document.selection.createRange().text;
        } 
        // To write the selected text into the textarea
        return selectedText;
    }
    
 function copyColAlterTable(){
    var selectedrowindexes = $('#tableAlterGrid').jqxGrid('selectedrowindexes');
        var selectedColumnsList = [];
        $.each(selectedrowindexes, function(i) {
                var columnName = $("#alterTablecolumnName_" + selectedrowindexes[i]).attr("initval");
                selectedColumnsList.push(columnName);
        });
        var text = selectedColumnsList.toString();
        if (text!=null && text!=""){
            navigator.clipboard.writeText(text); 
            showFadeMesg("Copied!");
        }
        
}

function viewTableInfo(connectionName,title,connObj,flag){
    var connObj = JSON.parse(connObj);
    showLoader();
        $.ajax({
        type: "post",
                traditional: true,
                dataType: 'json',
                url: 'getTableScript',
                cache: false,
                data: {
                    objectName: title,
                    connObj: JSON.stringify(connObj),
                    flag: flag,
                    connectionName:connectionName
                },
                success: function (response) {
                stopLoader();
                        if (!jQuery.isEmptyObject(response) && response['result'] != undefined){
                                var markup = "<div id='functionClassId' class='scriptMessageDiv' style='border:1px solid black;padding:10px;max-height:400px;height:400px;overflow:scroll;'><pre>" 
                                + response['result'] + "</pre></div>";
                    $('#etlScriptDialog').remove();
                        $("#etlPageBody").append("<div id='etlScriptDialog'></div>");
                        $('#etlScriptDialog').dialog({
                        title: title,
                        width: 700,
                        height: 500,
                        open: function () {
                            $(this).html(markup);
                        },
                        buttons: [
                        {
                            text: "Close",
                                click: function () {
                                $(this).dialog("close");
                                }
                        }
                        ]
                }).css({overflow: "hidden"});
                } else{
                    showMesg(response['message']);
                }
                }
        ,
                error: function (e) {
                console.log(e);
                        sessionTimeout(e);
                        stopLoader();
                }
        });
}

function showFadeMesg(message, colour){
    if (colour == null) {
        colour = "#fff";
    }
    $("#showFadeMesg").remove();
    $("body").append("<div id='showFadeMesg'></div>");
    $("#showFadeMesg").html("<span>"+message+"</span>");
    $("#showFadeMesg").css("background", colour);
    $('#showFadeMesg').delay(200).fadeOut(1000);
    
}

function copyTableName(tableName) {
if (tableName!=null && tableName!=""){
    navigator.clipboard.writeText(tableName); 
     showFadeMesg("Copied!"); 
}
}

function highLightSelectedTable($this) {
    $(".etlConnectionItem").removeClass("etlHighlightSelectedTable");
    $($this).addClass("etlHighlightSelectedTable");
   
}

function excludeNull(checkBoxId,className){  
    var ischecked= $("#" + checkBoxId).is(':checked');
    var siblingId = $("#" + checkBoxId).siblings("input")[0].id;
    var isSiblingChecked = $("#" + siblingId).is(':checked');
    if(ischecked && isSiblingChecked){
            //etl-excludedNullPk-query
            removeSiblingsProperty("etl-excludedNullPk-query");
            $(".etl-excludedNullPk-query").css("display","block");

    } else if(ischecked && isSiblingChecked == false){
        removeSiblingsProperty(className);
        $("." + className).css("display","block");
    }  else if(ischecked == false && isSiblingChecked){//etl-excludedPk-query
        removeSiblingsProperty("etl-excludedPk-query");
        $(".etl-excludedPk-query").css("display","block");
        if(siblingId == "excludeNullCheckBoxId"){
            removeSiblingsProperty("etl-excluded-query");
            $(".etl-excluded-query").css("display","block");
        }

    }else {
        $("." + className).css("display","none");
        removeSiblingsProperty(className);
        $(".etl-insert-query").css("display","block");
    }
}

function removeSiblingsProperty(className){
     $("." + className).siblings("span").each(function() {
        $("." + this.className).css("display", "none");
    });
}

function scheduleProcedure(connectionName, procedureName,connObjStr){
    var scheduleForm = "<div class='cronStartDateDiv'>"
                + "<table><tr>"
                + "<td>Start Date</td>"
                + "<td><input type='text' id='cronStartDate' readonly='true'  /></td>"
                + "<td>End Date</td>"
                + "<td><input type='text' id='cronEndDate' /></td>"
                + "</tr></table>"
                + "</div>"
                + "<div id='cronExpressionDiv' class='cron-builder'></div>"
                + "<div class='cron-expression'>"
                + " <p>Cron Expression:<input type='text' id='cronExpression' readonly='true' /></p>"
                + "</div>"
                + "<div class='scheduleNotificationsDiv' ><input type='checkbox' id='scheduleNotifications' /><span id='scheduleNotificationsSpan' >Enable Notifications</span>"
                + "<input type='text' placeholder='Enter mail ids' id='scheduleNotificationEmailIds' style='display:none;' />"
                + "</div>";
               
        $("#etlSheduleDIalog").remove();
        $("body").append("<div id='etlSheduleDIalog' ></div>");
        $("#etlSheduleDIalog").html(scheduleForm);
        $("#etlSheduleDIalog").dialog({
            title: (labelObject[procedureName] != null ? labelObject[procedureName] : procedureName),
            modal: true,
            height: 270,
            minWidth: '650',
            maxWidth: 'auto',
            fluid: true,
            buttons: [{
                    text: (labelObject['Schedule'] != null ? labelObject['Schedule'] : 'Schedule'),
                    click: function () {
                        var cronExp = $('#cronExpression').val();
                        if (cronExp != null && cronExp != '') {
                            cronExp = cronExp.substring(0, cronExp.lastIndexOf(" "));
                            var cronStartDate = $("#cronStartDate").val();
                            var cronEndDate = $("#cronEndDate").val();
                            
                            var notificationEmailIds = $("#scheduleNotificationEmailIds").val();
                            var enableNotifications = $("#scheduleNotifications").val();
                            if ($("#scheduleNotifications").prop("checked") && $("#scheduleNotificationEmailIds").val()== "") {
                                                        showMesg("Provide Email Ids");
                                                        return false;
							} 
                            console.log("cronExp:::" + cronExp);
                            $(this).html("");
                            $(this).dialog("close");
                            $(this).dialog("destroy");
                            
                            scheduleProc(cronExp, procedureName, cronStartDate, cronEndDate, enableNotifications, notificationEmailIds, connectionName, connObjStr);
                          //  scheduleProcessJob(cronExp, jobId, jobName, cronStartDate, cronEndDate, enableNotifications, notificationEmailIds);
                        }


                    }},
                {
                    text: (labelObject['Cancel'] != null ? labelObject['Cancel'] : 'Cancel'),
                    click: function () {
                        $(this).html("");
                        $(this).dialog("close");
                        $(this).dialog("destroy");

                    }}],
            open: function () {
	
                $(this).closest(".ui-dialog").find(".ui-button").eq(1).addClass("dialogyes");
                $(this).closest(".ui-dialog").find(".ui-button").eq(2).addClass("dialogno");
                $(".visionHeaderMain").css("z-index", "999");
                $(".visionFooterMain").css("z-index", "999");
                
                $("#scheduleNotifications").change(function(event) {

					$("#scheduleNotificationEmailIds").val("");
					if ($(this).prop("checked")) {
						$("#scheduleNotificationEmailIds").show();
					} else {
						$("#scheduleNotificationEmailIds").hide();
					}
					
				})
                
                $('#cronExpressionDiv').cronBuilder({
                    selectorLabel: "Select time period:  ",
                    onChange: function (expression) {
                        var getData = expression.join(" ");
                        $('#cronExpression').val(getData);
                    }
                });
                $("#cronStartDate").datepicker({
                    changeMonth: true,
                    changeYear: true,
                    dateFormat: "dd-mm-yy",
                    showOn: "button",
                    buttonImage: 'images/date_picker_icon.png',
                    buttonImageOnly: true,

//                    setDate:new Date()
                });
                $("#cronStartDate").datepicker("setDate", new Date());
                $("#cronStartDate").addClass("ui-datepickerJobSchedule");

                $("#cronEndDate").datepicker({
                    changeMonth: true,
                    changeYear: true,
                    dateFormat: "dd-mm-yy",
                    showOn: "button",
                    buttonImage: 'images/date_picker_icon.png',
                    buttonImageOnly: true
                });
                $("#ui-datepicker-div").addClass("ui-datepickerJobSchedule");
//                $('#cronExpression').html("");
                //cronExpressionDiv
            },
            beforeClose: function (event, ui)
            {
                $(".visionHeaderMain").css("z-index", "99999");
                $(".visionFooterMain").css("z-index", "99999");
            }
        });
}

function scheduleProc(cronExp, procedureName, cronStartDate, cronEndDate, enableNotifications, notificationEmailIds, connectionName, connObjStr){
    showLoader();
        $.ajax({
        type: "post",
                traditional: true,
                dataType: 'json',
                url: 'scheduleStoredProcedure',
                cache: false,
                data: {
                    cronExp: cronExp,
                    procedureName: procedureName,
                    cronStartDate: cronStartDate,
                    cronEndDate: cronEndDate,
                    enableNotifications: enableNotifications,
                    notificationEmailIds: notificationEmailIds,
                    connectionName: connectionName,
                    connObjStr: connObjStr
                },
                success: function (response) {
                stopLoader();
                       var message = response['message'];
                        showMesg(message)
                },
                error: function (e) {
                console.log(e);
                        sessionTimeout(e);
                        stopLoader();
                }
        });
}


function addingConnectionSQL(){
        $("#columnMappingFuncDialog").html("Database:<div id=\"databases\"></div>Connection:<div id=\"databasesConn\"></div><input type=\"hidden\" id=\"databaseName\" value=\"\"/><input type=\"hidden\" id=\"databasesConnection\" value=\"\"/>")
                loadDropdownData("1", "Database", "0", "CN", "");
                var database = $("#databaseName").val();
                setTimeout(function() {
                $('#databases').jqxDropDownList({
                source:$("#databaseName").val().split(","),
                        height: 25,
                        width: 170,
                        checkboxes: false,
                        filterable: true,
                        dropDownHeight: 130,
                        filterPlaceHolder: "Database",
                        placeHolder: "Select Database...",
                        popupZIndex: 99999
                });
                }, 500);
                $("#databases").on('change', function (event) {
        var connectionName = $("#databases").jqxDropDownList('val');
                loadDropdownData("1", "Database", "1", "CN", connectionName);
                var args = event.args;
                if (args) {
        // index represents the item's index.                          
        var index = args.index;
                var item = args.item;
                // get item's label and value.
                var label = item.label;
                var lang = item.value;
                $("#databasesConn").jqxDropDownList('clearSelection');
                setTimeout(function() {
                $("#databasesConn").jqxDropDownList({
                source: $("#databasesConnection").val().split(","),
                        height: 25,
                        width: 170,
                        checkboxes: false,
                        filterable: true,
                        dropDownHeight: 130,
                        filterPlaceHolder: "Connection",
                        placeHolder: "Select Connection...",
                        popupZIndex: 99999
                });
                }, 500);
        }
        });
                $("#columnMappingFuncDialog").dialog({
        title: (labelObject["Add-On"] != null ? labelObject["Add-On"] : "Add-On"),
                modal: true,
                height: 270,
                minWidth: '650',
                maxWidth: 'auto',
                fluid: true,
                buttons: [{
                text: (labelObject['OK'] != null ? labelObject['OK'] : 'OK'),
                        click: function () {

                        var connectionName = $("#databasesConn").jqxDropDownList('val');
                                if (connectionName !== "") {
                        viewSQLEditor(connectionName);
                                $(this).html("");
                                $(this).dialog("destroy");
                        } else {

                        $(this).find(".error-message").remove();
                                var errorMessage = "Connection name is empty. Please select a connection.";
                                $(this).append("<div class='error-message'>" + errorMessage + "</div>");
                        }
                        }},
                {
                text: (labelObject['Cancel'] != null ? labelObject['Cancel'] : 'Cancel'),
                        click: function () {
                        $(this).html("");
                                $(this).dialog("close");
                                $(this).dialog("destroy");
                        }}],
                open: function () {

                $(this).closest(".ui-dialog").find(".ui-button").eq(1).addClass("dialogyes");
                        $(this).closest(".ui-dialog").find(".ui-button").eq(2).addClass("dialogno");
                        $(".visionHeaderMain").css("z-index", "999");
                        $(".visionFooterMain").css("z-index", "999");
                },
                beforeClose: function (event, ui)
                {
                $(".visionHeaderMain").css("z-index", "99999");
                        $(".visionFooterMain").css("z-index", "99999");
                }
        });
        }
        
        
    function   loadDropdownData(instance, divId, level, fileType, connectionType){
        showLoader();
                $.ajax({
                type: "post",
                        traditional: true,
                        dataType: 'json',
                        url: 'getAvaliableConnections',
                        cache: false,
                        //async: false,
                        data: {
                        instance: instance,
                                divId: divId,
                                level: level,
                                fileType: fileType,
                                connectionType: connectionType


                        },
                        success: function(response) {
                        stopLoader();
                                if (response != null && !jQuery.isEmptyObject(response)) {
                        if (divId == "Database" && level == "0"){
                        //     localStorage.setItem("resultList", response['resultList'])
                        $("#databaseName").val(response['resultList']);
                        }
                        else if (divId == "Database" && level == "1" && fileType == "CN"){
                        //       localStorage.setItem("connList", response['connList']);
                        $("#databasesConnection").val(response['connList']);
                                return;
                        }

                        }
                        }
                });
        }


function openSchemaObjectsInNewTab(instance, divId, level, fileType, connectionType, schemaObjectType, connectionName, connectionObjStr){
	showLoader();
	
	showEtlList('schemaObjectsDiv', 'schemaObjects');
	
	var startIndex = 0;
	var limit = 50;
	var filterValue = "";
	$.ajax({
		type: "post",
		traditional: true,
		dataType: 'json',
		url: 'getAvaliableConnections',
		cache: false,
		//async: false,
		data: {
			instance: instance,
			divId: divId,
			level: level,
			fileType: fileType,
			connectionType: connectionType,
			schemaObjectType: schemaObjectType,
			connectionName: connectionName,
			connectionObjStr: connectionObjStr,
			filterValue: filterValue,
			startIndex: startIndex,
			limit: limit
		},
		success: function(response) {
			stopLoader();

			if (response != null && !jQuery.isEmptyObject(response)) {
				var objectsList = response['resultList'];
				var html ="";
				$.each(objectsList, function(i){
					var abc = '<div class="etlConnectionItem etlSchemaObject"><img src="" />'+objectsList[i]+'</div>';
					html += abc;
					})
				$("#connectionsTabs").append(html);
			}

		},
		error: function(e) {
			console.log(e);
			sessionTimeout(e);
			stopLoader();
		}
	});
}










/* 
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
var dragEventTimeout = null;
var count = 0;
var chartDivArr = [];
var cardDivArr = [];
var cardTrendDivArr = {};
var chartDivObj = {};
var filterCount = 0;
var savedDBData = {};
var chartClickDataObj = {};
var chartFilterConfigObj;
var compareChartsArr = [];
var twofunc = true;
var autoSuggestedChartCount = 0;
var showAutoMsgFlag = false;
var showAutoMsgDependFlag = false;
const isNullOrUndefined = o => o == null;
var intellisenseViewChartCount = 0;
var convAIMergeTables = [];
var eChartsArrList = ['treemap', 'sunburst', 'BarAndLine', 'heatMap', 'BasicAreaChart', 'StackedAreaChart', 'GradStackAreaChart', 'AreaPiecesChart', 'boxplot', 'sankey','ganttChart'];

//function visualizationDivToggle() {
//	$('.visualizationMainDivwrapper').toggleClass('width60');
//	$('#Visualization').toggleClass('visualBIChart');
//	var leftFileUploadswidth = $('.leftFileUploads').width();
//	var visualizationMainDivwrapperwidth = $('.visualizationMainDivwrapper').width();
//	if (leftFileUploadswidth == '15%' && visualizationMainDivwrapperwidth == '15%') {
//		$(".chartViewAreaClass").css("width", "70%", "!important");
//		$(".chartView").css("width", "70%", "!important");
//	} else if (visualizationMainDivwrapperwidth == '15%') {
//		$(".chartViewAreaClass").css("width", "80%", "!important");
//		$(".chartView").css("width", "80%", "!important");
//	} else {
//		$(".chartViewAreaClass").css("width", "95%", "!important");
//		$(".chartView").css("width", "100%", "!important");
//	}
//}
function visualizationDivToggle() {
	$('.visualizationMainDivwrapper').toggleClass('width60');
	$('#Visualization').toggleClass('visualBIChart');
	var leftFileUploadswidth = $('.leftFileUploads').width();
	var flag = $('#visualToggleIcon').attr('data-flag');

	if (flag == "A") {
		$('#visualToggleIcon').html('<img src="images/toggle_minusicon.png" width="16px;">');
		$('#visualToggleIcon').attr('data-flag', 'I');
	}
	else {
		$('#visualToggleIcon').html('<img src="images/toggle_plusicon.png" width="16px;">');
		$('#visualToggleIcon').attr('data-flag', 'A');
	}


	var visualizationMainDivwrapperwidth = $('.visualizationMainDivwrapper').width();
	var togglediv = $("#visualToggleIcon");         //added this condition only to work when the user toggles for first time
	if (togglediv.attr('onclick', 'dataAnalyticGuide()')) {
		togglediv.removeAttr('onclick', 'dataAnalyticGuide()')
	}
	else {
		toggleediv.attr('onclick', 'dataAnalyticGuide())');
	}                                                                                            // ends here
	if (leftFileUploadswidth == '15%' && visualizationMainDivwrapperwidth == '15%') {
		$(".chartViewAreaClass").css("width", "70%", "!important");
		$(".chartView").css("width", "70%", "!important");
	} else if (visualizationMainDivwrapperwidth == '15%') {
		$(".chartViewAreaClass").css("width", "80%", "!important");
		$(".chartView").css("width", "80%", "!important");
	} else {
		$(".chartViewAreaClass").css("width", "95%", "!important");
		$(".chartView").css("width", "100%", "!important");
	}
}
function columnDivToggle() {
	$('.columnsMainDivwrapper').toggleClass('width60');
	$('#dxptableViewDiv').toggleClass('columnBI');
	var columnsMainDivwrapperWidth = $('.columnsMainDivwrapper').width();
	if (columnsMainDivwrapperWidth == '15%') {
		$(".visionSmartBiGridDataClass").css("width", "84%", "!important");
	} else if (columnsMainDivwrapperWidth == '4%') {
		$(".visionSmartBiGridDataClass").css("width", "95%", "!important");
	}
}
//function leftFileUploadsDivToggle() {
//	$('.leftFileUploads').toggleClass('width60');
//	$('#visionVisualizationDataSourcesId').toggleClass('fileUploadsDA');
//	var leftFileUploadswidth = $('.leftFileUploads').width();
//	var visualizationMainDivwrapperwidth = $('.visualizationMainDivwrapper').width();
//	if (leftFileUploadswidth == '15%' && visualizationMainDivwrapperwidth == '15%') {
//		$(".chartViewAreaClass").css("width", "70%", "!important");
//		$(".chartView").css("width", "70%", "!important");
//	} else if (leftFileUploadswidth == '15%') {
//		$(".chartViewAreaClass").css("width", "80%", "!important");
//		$(".chartView").css("width", "80%", "!important");
//	} else {
//		$(".chartViewAreaClass").css("width", "95%", "!important");
//		$(".chartView").css("width", "100%", "!important");
//	}
//}
function leftFileUploadsDivToggle() {
	$('.leftFileUploads').toggleClass('width60');
	var flag = $('#columnsToggleIcon').attr('data-flag');

	if (flag == "A") {
		$('#columnsToggleIcon').html('<img src="images/toggle_minusicon.png" width="16px;">');
		$('#columnsToggleIcon').attr('data-flag', 'I');
	}
	else {
		$('#columnsToggleIcon').html('<img src="images/toggle_plusicon.png" width="16px;">');
		$('#columnsToggleIcon').attr('data-flag', 'A');
	}

	$('#visionVisualizationDataSourcesId').toggleClass('fileUploadsDA');
	var leftFileUploadswidth = $('.leftFileUploads').width();
	var visualizationMainDivwrapperwidth = $('.visualizationMainDivwrapper').width();
	var togglediv = $("#columnsToggleIcon");   //added this condition only to work when the user toggles for first time
	if (togglediv.attr('onclick', 'dataIntegrationGuide()')) {
		togglediv.removeAttr('onclick', 'dataIntegrationGuide()')
	}
	else {
		toggleediv.attr('onclick', 'dataIntegrationGuide()');
	}                                                                                               // ends here
	if (leftFileUploadswidth == '15%' && visualizationMainDivwrapperwidth == '15%') {
		$(".chartViewAreaClass").css("width", "70%", "!important");
		$(".chartView").css("width", "70%", "!important");
	} else if (leftFileUploadswidth == '15%') {
		$(".chartViewAreaClass").css("width", "80%", "!important");
		$(".chartView").css("width", "80%", "!important");
	} else {
		$(".chartViewAreaClass").css("width", "95%", "!important");
		$(".chartView").css("width", "100%", "!important");
	}

}
function loadVisuvalization() {
	$(".searchMainWrap").show();
	$(".languageSelectionBox").hide();
	$(".settingheaderImage").hide();
	$.ajax({
		type: "post",
		traditional: true,
		dataType: 'json',
		url: "dataDXPAnalytics",
		cache: false,
		data: {
			menuId: 'DAL_ANALYTICS',
			treeId: "MM_SOURCE_AVAILABLE_CONNECTION_TREE"
		},
		success: function(response) {
			if (response != null && !jQuery.isEmptyObject(response)) {

				var treeObj = {};
				var visualizeDivsStr = response['result'];
				treeObj = response['treeObj'];
				chartFilterConfigObj = response['jsonChartFilterObj'];
				var visualizationbuttons = response['Buttons'];
				//                  $('#VisualizationconTabs').jqxTabs('select', 0);
				$("#pageBodyContent").remove();
				$("#pageBody").append('<div class="page-body-content" id="pageBodyContent"><div id ="VisualizePageBody" class="Visualize-page-body"></div></div></div>');
				$("#VisualizePageBody").html(visualizeDivsStr);
				$("#DxpVisualizationbutton").show();
				$("#DxpVisualizationbutton").html(visualizationbuttons); 
				 var chatSection = '<div id="info" class="infoClass">'
                        + '<div class="center"><div class="keyboardIconsMainDiv"><span id="keyboardId"><i class="fa fa-keyboard-o" style="font-size:25px;color:blue"></i></span><span class="minMaxKeys" id="minMaxKeysId" style="display:none">'
                        + '<span onclick="incKeySize()"><i class="fa fa-angle-up" style="font-size:18px;color:blue"></i></span>'
                        + '<span onclick="decKeySize()"><i class="fa fa-angle-down" style="font-size:18px;color:blue"></i></span>'
                        +'</span>'  
                        + '</div>'
                        + '<textarea  id="textAreaId" class="form-control" onkeypress="onTextSQLSearch()"></textarea></div><div class=\'infoMainDivClass\'><div class=\'infoSubDivClass\'><div class="voicMiceClass" onclick="voicetoText(\'textAreaId\')"><i class="fa fa-microphone" style="font-size:24px"></i></div>'
                        + '<div id="languageId" class="integralMultiLanguageClass"><select id="langSelect" class="languageSelectionBox" name="language" onchange="languageSelect()">'
                        + '</select></div></div>'
                        + '<div class=\'voiceSearchButtonClass\'><button class="searchtextCls" id="searchButtonId" onclick="textSearchData()">Search</button></div>'
                        + '</div>'
                        +'</div>'; 

				$("#searchDataContent").append(chatSection);   
				var languages = {
    
    "en": {
      layout: "qwerty",
      name: "English"
    },
    "tr": {
      layout: "ms-Turkish F",
      name: "Turkish (T\u00fcrk\u00e7e)"
    },
     "ar": {
      layout: "ms-Arabic (101)",
      name: "Arabic (\u0627\u0644\u0639\u0631\u0628\u064a\u0629)"
    },
    "de": {
      layout: "ms-German",
      name: "German (Deutsch)"
    },
     "sq": {
      layout: "ms-Albanian",
      name: "ms-Albanian"
    },
     "bn": {
      layout: "ms-Bengali",
      name: "Bengali"
    },
    "te": {
      layout: "ms-Telugu",
      name: "Telugu"
    },
     "zh": {
      layout: "ms-Chinese ChaJei IME",
      name: "Chinese"
    },
     "fr": {
      layout: "ms-Belgian French",
      name: "French US"
    },
    "fr-ca": {
      layout: "ms-Canadian French",
      name: "French UK"
    },
    "nl": {
      layout: "ms-Dutch",
      name: "Dutch"
    },
    "hu": {
      layout: "ms-Hungarian 101-key",
      name: "Hungarian"
    },
     "it": {
      layout: "ms-Italian",
      name: "Italian"
    },
    "ja": {
      layout: "ms-Japanese Hiragana",
      name: "Japanese"
    },
    "ko": {
      layout: "ms-Korean",
      name: "Korean"
    },
    "no": {
      layout: "ms-Norwegian with Sami",
      name: "Norwegian"
    },
     "pt": {
      layout: "ms-Portuguese",
      name: "Portuguese PT"
    },
     "br": {
      layout: "ms-Portuguese (Brazilian ABNT)",
      name: "Portuguese BR"
    },
     "eu": {
      layout: "ms-Portuguese",
      name: "Portuguese EU"
    },
     "ro": {
      layout: "ms-Romanian (Standard)",
      name: "Romanian"
    },
     "ru": {
      layout: "ms-Russian",
      name: "Russian"
    },
     "es": {
      layout: "ms-Spanish",
      name: "Spanish ES"
    },
     "mx": {
      layout: "ms-Spanish Variation",
      name: "Spanish Mx"
    },
    
    
  };
  
  
 
   
   
				$('#textAreaId')
					.keyboard({
						openOn: null,
						stayOpen: true,
						layout: 'alpha',
						autoAccept: true,
						usePreview: false,
					})
					.addTyping();
				addLang();
     function selectLang() {
   var lang=$("#langSelect").val();
    var obj = languages[lang],
      kb = $('#textAreaId').getkeyboard();
    if (obj) {
      kb.options.language = lang;
      kb.redraw(obj.layout);
    }
  }
  
  $('#keyboardId').click(function () {
                    var kb = $('#textAreaId').getkeyboard();
                    // close the keyboard if the keyboard is visible and the button is clicked a second time
                    if (kb.isOpen) {
                        $("#minMaxKeysId").hide();
                        kb.close();
                    } else {
                        selectLang();
                        $("#minMaxKeysId").show();
                    }
               });
               
               $("#langSelect").change(function(){
                var kb = $('#textAreaId').getkeyboard();
                        if (kb.isOpen) {
                selectLang();
                }
                else{
                    kb.close();
                }

                });

 function addLang() {
    var html = '';
    Object.keys(languages).forEach(function(language) {
      html += `<option value="${language}">${languages[language].name}</option>`;
    });
    $('#langSelect')
      .html(html)
      .val($('#textAreaId').getkeyboard().options.language || "en")
      
  }
//  document.getElementById("textAreaId").addEventListener("focusin", selectLang); 




				$(".leftFileUploads").show();
				$("#hintImageID").show();
				$("#hintImageID").html('<img src="images/idea-icon-trans-bg.png" class="hintImageClass" id="hintImageID" width="20px"/><span class="textHint" id="textHintID">Help me to navigate</span>');
				$("#hintImageID").attr('onclick', 'dxpAnalyticsGuideHome()');
				$('#VisionImageVisualizationFilter').unbind('click').on('click', function() {
					$('#Filters').toggle();
					$(".VisionImageVisualizationFilterOpen").toggle();
				});
				$('#VisionImageVisualizationCharts').unbind('click').on('click', function() {
					$('#Visualization').toggle();
					$(".VisionImageVisualizationChartsOpen").toggle();
				});
				$('#VisionImageVisualizationFields').unbind('click').on('click', function() {
					$('#Fields').toggle();
					$(".VisionImageVisualizationFieldsOpen").toggle();
				});
				$('.VisionImageVisualizationFilterClass').unbind('click').on('click', function() {
					$('#Filters').toggle();
					$(".VisionImageVisualizationFilterOpen").toggle();
				});
				$('.VisionImageVisualizationChartsClass').unbind('click').on('click', function() {
					$('#Visualization').toggle();
					$(".VisionImageVisualizationChartsOpen").toggle();
				});
				$('.VisionImageVisualizationFieldsClass').unbind('click').on('click', function() {
					$('#Fields').toggle();
					$(".VisionImageVisualizationFieldsOpen").toggle();
				});
				showDXPConnections("ETL_DM_TREE_SOURCES", "VisualizationSources");
				$("#visualizeArea").droppable({
					accept: ".visionVisualizeChartBoxClass"
				});
				$("#visionVisualizeSlicerFieldId").droppable({//slicer field
					revert: "invalid",
					refreshPositions: true,
					cursor: 'move',
					drop: function(event, ui) {
						if ($("#" + this.id).is(':visible')) {
							var id = ui.draggable[0].id;
							var label = ui.draggable[0].innerText;
							if (id != null && id != '' && id != undefined) {
								id = id.replace("_" + label, "");
							}
							var divid = this.id;
							if (divid != null && divid != '' && divid != undefined) {
								$("#Loader").css("display", "block");
								$("body").css({ "pointer-events": "auto" });
								$("#visionVisualizeSlicerFieldId").hide();
								getChartDiv("", "Slicer", id, label);
							}
						}
					}
				});
				$('#visionVisualizeQueryBodyId').jqxTabs({
					width: "100%",
					height: "100%",
					position: 'top',
					//                    theme: 'energyblue',
					reorder: true,
					showCloseButtons: true
				});
				$("#Current_V10_editor_1").attr("data-connction-name", "Current_V10");
				var sqlMainEditor = ace.edit("Current_V10_editor_1", {
					mode: "ace/mode/sql",
					enableBasicAutocompletion: true, // the editor completes the statement when you hit Ctrl + Space
					// showPrintMargin: true, // hides the vertical limiting strip
					fontSize: "100%", // ensures that the editor fits in the environment
					minLines: 5,
					maxLines: 20,
					wrap: true,
					autoScrollEditorIntoView: true,
					theme: "monokai"
				});

				$('#columnsToggleIcon').attr('data-flag', 'A');   //line236
				$('#visualToggleIcon').attr('data-flag', 'A');


			}
		},
		error: function(e) {
			console.log(e);
			sessionTimeout(e);
			stopLoader();
		}
	});
}
function showVisuvalization() {
	$(".searchMainWrap").hide();
	$(".languageSelectionBox").hide();
	$(".settingheaderImage").hide();
	$.ajax({
		type: "post",
		traditional: true,
		dataType: 'json',
		url: "dataDXPAnalytics",
		cache: false,
		data: {
			menuId: 'DAL_ANALYTICS',
			treeId: "MM_SOURCE_AVAILABLE_CONNECTION_TREE"
		},
		success: function(response) {
			if (response != null && !jQuery.isEmptyObject(response)) {
				var visualizeDivsStr = response['result'];
				chartFilterConfigObj = response['jsonChartFilterObj'];

				$("#pageBodyContent").remove();
				//                $("#visionVisualizationDataSourcesId").html('<div id="savedConnections"></div>');
				$("#pageBody").append('<div class="page-body-content" id="pageBodyContent"><div id ="VisualizePageBody" class="Visualize-page-body"></div></div></div>');
				$("#VisualizePageBody").html(visualizeDivsStr);
				$(".leftFileUploads").show();
				$(".leftFileUploads").toggleClass("width60");
				$('#visionVisualizationDataSourcesId').toggleClass('fileUploadsDA');
				$("#visualConnectionLi").addClass('Vtabactive');

				$('#VisionImageVisualizationFilter').unbind('click').on('click', function() {
					$('#Filters').toggle();
					$(".VisionImageVisualizationFilterOpen").toggle();
				});
				$('#VisionImageVisualizationCharts').unbind('click').on('click', function() {
					$('#Visualization').toggle();
					$(".VisionImageVisualizationChartsOpen").toggle();
				});
				$('#VisionImageVisualizationFields').unbind('click').on('click', function() {
					$('#Fields').toggle();
					$(".VisionImageVisualizationFieldsOpen").toggle();

				});
				$('.VisionImageVisualizationFilterClass').unbind('click').on('click', function() {
					$('#Filters').toggle();
					$(".VisionImageVisualizationFilterOpen").toggle();
				});
				$('.VisionImageVisualizationChartsClass').unbind('click').on('click', function() {
					$('#Visualization').toggle();
					$(".VisionImageVisualizationChartsOpen").toggle();
				});
				$('.VisionImageVisualizationFieldsClass').unbind('click').on('click', function() {
					$('#Fields').toggle();
					$(".VisionImageVisualizationFieldsOpen").toggle();
				});
				showDXPConnections("ETL_DM_TREE_SOURCES", "VisualizationSources");

				$("#visualizeArea").droppable({
					accept: ".visionVisualizeChartBoxClass"
				});
				$("#visionVisualizeSlicerFieldId").droppable({//slicer field
					revert: "invalid",
					refreshPositions: true,
					cursor: 'move',
					drop: function(event, ui) {
						if ($("#" + this.id).is(':visible')) {
							var id = ui.draggable[0].id;
							var label = ui.draggable[0].innerText;
							if (id != null && id != '' && id != undefined) {
								id = id.replace("_" + label, "");
							}
							var divid = this.id;
							if (divid != null && divid != '' && divid != undefined) {
								$("#Loader").css("display", "block");
								$("body").css({ "pointer-events": "auto" });
								$("#visionVisualizeSlicerFieldId").hide();
								getChartDiv("", "Slicer", id, label);
							}
						}
					}
				});

			}

		},
		error: function(e) {
			console.log(e);
			sessionTimeout(e);
			stopLoader();
		}
	});

}
function showdxpVisiualization() {
	$(".searchMainWrap").hide();
	$(".languageSelectionBox").hide();
	$(".settingheaderImage").hide();
	$("#VisualizationSources").hide();
	$.ajax({
		type: "post",
		traditional: true,
		dataType: 'json',
		url: "getFormData",
		cache: false,
		data: {
			menuId: 'DAL_ANALYTICS',
		},
		success: function(response) {
			if (response != null && !jQuery.isEmptyObject(response)) {
				var visualizeDivsStr = response['result'];
				chartFilterConfigObj = response['jsonChartFilterObj'];
				var buttons = response['buttons'];
				$("#pageBodyContent").remove();
				$("#pageBody").append('<div class="page-body-content" id="pageBodyContent"><div id ="VisualizePageBody" class="Visualize-page-body"></div></div></div>');
				$("#VisualizePageBody").html(visualizeDivsStr);
				$('#VisionImageVisualizationFilter').unbind('click').on('click', function() {
					$('#Filters').toggle();
					$(".VisionImageVisualizationFilterOpen").toggle();
				});
				$('#VisionImageVisualizationCharts').unbind('click').on('click', function() {
					$('#Visualization').toggle();
					$(".VisionImageVisualizationChartsOpen").toggle();
				});
				$('#VisionImageVisualizationFields').unbind('click').on('click', function() {
					$('#Fields').toggle();
					$(".VisionImageVisualizationFieldsOpen").toggle();

				});
				$('.VisionImageVisualizationFilterClass').unbind('click').on('click', function() {
					$('#Filters').toggle();
					$(".VisionImageVisualizationFilterOpen").toggle();
				});
				$('.VisionImageVisualizationChartsClass').unbind('click').on('click', function() {
					$('#Visualization').toggle();
					$(".VisionImageVisualizationChartsOpen").toggle();
				});
				$('.VisionImageVisualizationFieldsClass').unbind('click').on('click', function() {
					$('#Fields').toggle();
					$(".VisionImageVisualizationFieldsOpen").toggle();
				});
				showDXPConnections("ETL_DM_TREE_SOURCES", "VisualizationSources");

				$("#visualizeArea").droppable({
					accept: ".visionVisualizeChartBoxClass"
				});
				$("#visionVisualizeSlicerFieldId").droppable({//slicer field
					revert: "invalid",
					refreshPositions: true,
					cursor: 'move',
					drop: function(event, ui) {
						if ($("#" + this.id).is(':visible')) {
							var id = ui.draggable[0].id;
							var label = ui.draggable[0].innerText;
							if (id != null && id != '' && id != undefined) {
								id = id.replace("_" + label, "");
							}
							var divid = this.id;
							if (divid != null && divid != '' && divid != undefined) {
								$("#Loader").css("display", "block");
								$("body").css({ "pointer-events": "auto" });
								$("#visionVisualizeSlicerFieldId").hide();
								getChartDiv("", "Slicer", id, label);
							}
						}
					}
				});
			}

		},
		error: function(e) {
			console.log(e);
			sessionTimeout(e);
			stopLoader();
		}
	});
}
function showDXPConnections(menuId, treeId) {
	try {
		labelObject = JSON.parse($("#labelObjectHidden").val());
	} catch (e) {

	}
	var labelObject = {};
	$.ajax({
		type: 'POST',
		traditional: true,
		dataType: 'html',
		cache: false,
		url: 'getVisualizationDataSources',
		data: {
			menuId: menuId,
			ssRole: "CLOUD",
			ssOrgId: "C1F5CFB03F2E444DAE78ECCEAD80D27D"
		},
		success: function(response) {
			$("#" + treeId).remove();
			//            $("#visionVisualizationDataSourcesId").html('<div id="savedConnections" style="display:none"></div>');
			$("#visionVisualizationDataSourcesId").html('<div id="VisualizationSources" class ="VisualizationSourcesCLass" ></div>');
			stopLoader();
			if (response != null) {
				//                console.log("response:::" + response);
				response = JSON.parse(response);
				var menuResult = response.menuResult;
				var treeMenuData = JSON.parse(menuResult);
				var source =
				{
					datatype: "json",
					datafields: [
						{ name: 'MENU_ID' },
						{ name: 'PARENT_ID' },
						{ name: 'PARENT_MENU_ID' },
						{ name: 'MENU_DESCRIPTION' },
						{ name: 'icon' },
						{ name: 'value' },
						{ name: 'iconsize' },
						{ name: 'TOOL_TIP' },
						{ name: 'MAIN_DESCRIPTION' }
					],
					localdata: treeMenuData
				};
				// create data adapter.
				var dataAdapter = new $.jqx.dataAdapter(source);
				// perform Data Binding.
				dataAdapter.dataBind();
				var records = dataAdapter.getRecordsHierarchy('MENU_ID',
					'PARENT_ID',
					'items',
					[{ name: 'MENU_DESCRIPTION', map: 'html' }]
				);
				//                        'MENU_ID','PARENT_MENU_ID','TOOL_TIP');

				if (treeId != null && treeId != "" && treeId != undefined && treeId == "VisualizationSources") {
					$('#' + treeId).jqxTree({
						source: records, allowDrag: true, allowDrop: true, height: '90%', width: '100%', toggleMode: 'click', theme: 'energyblue',
						dragEnd: function(item) {
							//                            createImageSourcesFlowchart(item, item.value, 'File');
							//                            createImageSourcesDataModellerFlowchart(item, item.value, 'File');
							return true;
						}
					});

				} else if (treeId != null && treeId != "" && treeId != undefined && treeId == "descSplitterContainer") {
					$('#' + treeId).jqxTree({
						source: records, allowDrag: true,
						allowDrop: true, height: '90%', width: '100%',
						toggleMode: 'click', theme: 'energyblue',
						dragEnd: function(item) {
							//                            createImageDestinationFlowchart(item, item.value, 'File');
							//                            createImageDestinationDataModellerFlowchart(item, item.value, 'File');
							return true;
						}
					});
				}
				$('#' + treeId).css('visibility', 'visible');

				$('#' + treeId).on('select', function(event) {
					var item = $('#' + treeId).jqxTree('getItem', event.args.element);
					if (item != null && !jQuery.isEmptyObject(item) && item['value'] != null
						&& item['value'] != ''
						&& item['value'] != '#') {
						eval('anlytics' + item['value']);
					}
					$('#' + treeId).jqxTree('selectItem', null);
				});
				$(".VisualizationSourcesCLass").hover(function(e) {
					$("#panelsavedSourcesverticalScrollBar").show();
				}, function(e) {
					$("#panelsavedSourcesverticalScrollBar").hide();
				})
				$("#panelsavedSourcesverticalScrollBar").hide();
				$('.visionProgressSteps').hide();
				$("#" + treeId).jqxTree('expandAll');
			}
		},
		error: function(e) {
			sessionTimeout(e);
		}
	});
}

var currencySymbol = '';
var toCurrencyDropDownValue = '';
var isCurrencyConversionEvent = '';
var setOfRightToLeftCurrencyCode = new Set();
setOfRightToLeftCurrencyCode.add('AED');
setOfRightToLeftCurrencyCode.add('QAR');
var getLabelFormatter = function(params) {
	return params.name;
};

var getValueFormatter = function(params) {
	var formattedNumber = formatnumber(params.value);
	if (isCurrencyConversionEvent !== undefined && isCurrencyConversionEvent !== ''
		&& isCurrencyConversionEvent === 'true') {
		//		var toCurrencyDropDownValue = $("#toCurrencyDropDown").val();
		if (setOfRightToLeftCurrencyCode.has(toCurrencyDropDownValue)) {
			return formattedNumber + currencySymbol;
		} else {
			return currencySymbol + formattedNumber;
		}
	} else {
		return formattedNumber;
	}
};

var getPercentTooltipFormatter = function(params) {

}
var getLabelAndValueTooltipFormatter = function(params) {
	var label = params.name;
	var formattedNumber = formatnumber(params.value);
	if (isCurrencyConversionEvent !== undefined && isCurrencyConversionEvent !== ''
		&& isCurrencyConversionEvent === 'true') {
		//		var toCurrencyDropDownValue = $("#toCurrencyDropDown").val();
		if (setOfRightToLeftCurrencyCode.has(toCurrencyDropDownValue)) {
			return label + '<br />' + formattedNumber + currencySymbol;
		} else {
			return label + '<br />' + currencySymbol + formattedNumber;
		}
	} else {
		return label + '<br />' + formattedNumber;
	}
}

var getLabelAndPercentageTooltipFormatter = function(params) {

}

var getValueAndPercentageTooltipFormatter = function(params) {

}

var getLabelAndValueLabelFormatter = function(params) {
	var label = params.name;
	var formattedNumber = formatnumber(params.value);
	if (isCurrencyConversionEvent !== undefined && isCurrencyConversionEvent !== ''
		&& isCurrencyConversionEvent === 'true') {
		//		var toCurrencyDropDownValue = $("#toCurrencyDropDown").val();
		if (setOfRightToLeftCurrencyCode.has(toCurrencyDropDownValue)) {
			return label + '\n' + formattedNumber + currencySymbol;
		} else {
			return label + '\n' + currencySymbol + formattedNumber;
		}
	} else {
		return label + '\n' + formattedNumber;
	}
}

var getLabelAndPercentageLabelFormatter = function(params) {

}

var getValueAndPercentageLabelFormatter = function(params) {

}

function getSunburstChart(chartId, result, count, chartType, saveType) {
	chartType = 'sunburst';
	var chartUpper = chartType.toUpperCase();
	var chartTitle = $("#" + chartUpper + "TITLEECHARTS").val();
	isCurrencyConversionEvent = $("#isCurrencyConversionEvent").val();
	if (isCurrencyConversionEvent === undefined || isCurrencyConversionEvent === '') {
		isCurrencyConversionEvent = result['isCurrencyConversionEvent'];
	}
	currencySymbol = $("#toCurrencyDropDown_jqxDropDownList option:selected").attr('data-currencySymbol');
	if (currencySymbol === undefined || currencySymbol === '') {
		currencySymbol = result['currencySymbol'];
	}

	toCurrencyDropDownValue = $("#toCurrencyDropDown").val();
	if (toCurrencyDropDownValue === undefined || toCurrencyDropDownValue === '') {
		toCurrencyDropDownValue = result['toCurrencyDropDownValue'];
	}
	$("#visionVisualizeChartId" + count).remove();
	var sunburstChartId = "visionVisualizeChart" + count;
	var sunburstChartHomeId = "visionVisualizeChartHome" + count;
	$("#" + sunburstChartId).append("<div id='visionVisualizeChartId" + count + "' type='" + chartType + "' count='" + count + "' class='visionVisualChartBoxClass visionVisualChartBoxSelected'></div>")
	$("#" + chartId).css("width", "auto", "!important");
	$("#" + chartId).css("height", "350px", "!important");
	$("#" + sunburstChartId).css("width", "auto", "!important");
	$("#" + sunburstChartId).css("height", "600px", "!important");
	if ($("#" + chartId).parent().parent().hasClass("homeChartWrapDiv")) {
		$("#" + chartId).parent().parent().attr("class", "col-md-6 col-sm-6 col-lg-12 homeChartWrapDiv treeMapMainDiv");
	}
	$("#" + sunburstChartHomeId).addClass("visionVisualChartBoxClass");
	var dom = document.getElementById(chartId);
	var myChart = echarts.init(dom, null, {
		renderer: 'canvas',
		useDirtyRect: false
	});
	var data = result['data'];
	var radioButtonStr = result['radioButtonStr'];
	var optionObjectEcharts = result['layout'];
	var seriesObjectEcharts = result['dataPropObject'];
	if (chartTitle === undefined || chartTitle === '' || chartTitle === null) {
		chartTitle = optionObjectEcharts['text'];
	}
	var tableName = result['tableName'];

	var labelFormatter = function(data) {
		return data.name;
	};

	var valueFormatter = function(data) {
		return formatnumber(data.value);
	};

	var labelAndValueFormatter = function(data) {
		var label = data.name;
		var formattedValue = formatnumber(data.value);
		return "(" + label + "," + formattedValue + ")";
	};

	var option = {
		toolBox: {
			show: true,
			orient: 'vertical',
			left: 'right',
			top: 'center',
			feature: {
				mark: { show: true },
				dataView: { show: true, readOnly: false },
				magicType: { show: true, type: ['line', 'bar', 'stack'] },
				restore: { show: true },
				saveAsImage: { show: true }
			}
		},
		tooltip: {
			show: true,
			formatter: function(info) {
				var value = info.value;
				var treePathInfo = info.treePathInfo;
				var treePath = [];
				for (var i = 1; i < treePathInfo.length; i++) {
					treePath.push(treePathInfo[i].name);
				}
				return ['<div class="tooltip-title">' +
					echarts.format.encodeHTML(treePath.join('/')) +
					'</div>',
				formatUtil.addCommas(value)
				].join('');
			}
		},
		series: {
			type: 'sunburst',
			data: data,
			radius: [0, '90%'],
			emphasis: {
				focus: 'ancestor'
			},
			label: {
				rotate: 'radial',
				borderType: "dotted",
				padding: [24, 24, 24, 24],
				width: 25,
				overflow: 'truncate',
				formatter: function(params) {
					let arr = [params.name, echarts.format.addCommas(params.value)];
					return arr.join('\n');
				}
			}

		},
		toolbox: {
    feature: {
      dataZoom: {
        yAxisIndex: 'none'
      },
      restore: {},
      saveAsImage: {},
      myDelete: {
        show: true,
        title: 'Delete',
        icon: 'image://images/delete.png',
        onclick: function () {
          deleteModalChart(chartId);
        }
      }
    }
  },
		title: {
			text: chartTitle,
			left: "center",
			padding: [10, 0],
			textStyle: {
				fontSize: 14,
				fontWeight: "normal"
			}
		}

	};
	if (!(saveType != null && saveType != '' && saveType != undefined)) {
		getToolBox(chartId, chartType, tableName,"",result,count,Object.keys(result.data).length) ;
	}
	$("#" + chartId + "_radioButtons").html(radioButtonStr);
	$("#" + chartId + "_radioButtons input:radio").unbind("change").on("change", function() {
		var checkedVal = $("#" + chartId + "_radioButtons").find(":radio:checked").val();
		getParticularVisualizeChart(chartId, checkedVal, chartType);
	});

	var tooltipObject = optionObjectEcharts['tooltip'];
	if (tooltipObject != null && !jQuery.isEmptyObject(tooltipObject)) {
		$.each(tooltipObject, function(key, value) {
			if (key !== null && key === "formatter") {
				tooltipObject['formatter'] = eval(tooltipObject['formatter']);
			}
		});
		option['tooltip'] = tooltipObject;
	}
	var seriesObject = option['series'];
	var labelObject = seriesObjectEcharts['label'];
	if (labelObject != null && !jQuery.isEmptyObject(labelObject)) {
		$.each(labelObject, function(key, value) {
			if (key !== null && key === "formatter") {
				labelObject['formatter'] = eval(labelObject['formatter']);
			}
		});
		seriesObject['label'] = labelObject;
	}
	if (option && typeof option === 'object') {
		myChart.setOption(option);
	}

}

function getTreeMapChart(chartId, result, count, chartType, saveType, axisColumns, filterCondition) {
	chartType = 'treemap';
	var chartUpper = chartType.toUpperCase();
	var chartTitle = $("#" + chartUpper + "TITLEECHARTS").val();
	isCurrencyConversionEvent = $("#isCurrencyConversionEvent").val();
	if (isCurrencyConversionEvent === undefined || isCurrencyConversionEvent === '') {
		isCurrencyConversionEvent = result['isCurrencyConversionEvent'];
	}
	currencySymbol = $("#toCurrencyDropDown_jqxDropDownList option:selected").attr('data-currencySymbol');
	if (currencySymbol === undefined || currencySymbol === '') {
		currencySymbol = result['currencySymbol'];
	}

	toCurrencyDropDownValue = $("#toCurrencyDropDown").val();
	if (toCurrencyDropDownValue === undefined || toCurrencyDropDownValue === '') {
		toCurrencyDropDownValue = result['toCurrencyDropDownValue'];
	}
	$("#visionVisualizeChartId" + count).remove();
	var treeMapChartId = "visionVisualizeChart" + count;
	var treemapChartHomeId = "visionVisualizeChartHome" + count;
	$("#" + treeMapChartId).append("<div id='visionVisualizeChartId" + count + "' type='" + chartType + "' count='" + count + "' class='visionVisualChartBoxClass visionVisualChartBoxSelected'></div>")
	$("#" + chartId).css("width", "auto", "!important");
	$("#" + chartId).css("height", "350px", "!important");
	$("#" + treeMapChartId).css("width", "auto", "!important");
	$("#" + treeMapChartId).css("height", "600px", "!important");
	if ($("#" + chartId).parent().parent().hasClass("homeChartWrapDiv")) {
		$("#" + chartId).parent().parent().attr("class", "col-md-6 col-sm-6 col-lg-12 homeChartWrapDiv treeMapMainDiv");
	}
	$("#" + treemapChartHomeId).addClass("visionVisualChartBoxClass");
	var dom = document.getElementById(chartId);
	var myChart = echarts.init(dom, null, {
		renderer: 'canvas',
		useDirtyRect: true
	});
	var data = result['data'];
	var radioButtonStr = result['radioButtonStr'];
	var optionObjectEcharts = result['layout'];
	var seriesObjectEcharts = result['dataPropObject'];
	if (chartTitle === undefined || chartTitle === '' || chartTitle === null) {
		chartTitle = optionObjectEcharts['text'];
	}
	var tableName = result['tableName'];
	const formatUtil = echarts.format;
	var labelFormatter = function(data) {
		return data.name;
	};

	var valueFormatter = function(data) {
		return formatnumber(data.value);
	};

	var labelAndValueFormatter = function(data) {
		var label = data.name;
		var formattedValue = formatnumber(data.value);
		return "(" + label + "," + formattedValue + ")";
	};
	var option = {
		tooltip: {
			show: true,
			formatter: function(info) {
				var value = info.value;
				var treePathInfo = info.treePathInfo;
				var treePath = [];
				for (var i = 1; i < treePathInfo.length; i++) {
					treePath.push(treePathInfo[i].name);
				}
				return ['<div class="tooltip-title">' +
					echarts.format.encodeHTML(treePath.join('/')) +
					'</div>',
				formatUtil.addCommas(value)
				].join('');
			}
		},
		series: {
			name: "▶",
			type: 'treemap',
			visibleMin: 1,
			visualMin: 1,
			/*roam: 'move',*/
			label: {
				show: true,
				distance: 5,
				width: 25,
				overflow: 'truncate',
				formatter: function(params) {
					let arr = [params.name, echarts.format.addCommas(params.value)];
					return arr.join('\n');
				}
			},
			levels: [
				{
					itemStyle: {
						//borderWidth: 3,
						//borderColor: '#333',
						//gapWidth: 1
					}
				},
			],
			data: data,
			leafDepth: 1

		},
		title: {
			text: chartTitle,
			left: "center",
			padding: [15, 0],
			textStyle: {
				fontSize: 14,
				fontWeight: "normal"
			}
		}
	};

	if (!(saveType != null && saveType != '' && saveType != undefined)) {
		//getToolBox(chartId, chartType, tableName);
		getToolBox(chartId, chartType, tableName,"",result,count,Object.keys(result.data).length) ;
	}

	$("#" + chartId + "_radioButtons").html(radioButtonStr);
	$("#" + chartId + "_radioButtons input:radio").unbind("change").on("change", function() {
		var checkedVal = $("#" + chartId + "_radioButtons").find(":radio:checked").val();
		getParticularVisualizeChart(chartId, checkedVal, chartType);
	});

	var tooltipObject = optionObjectEcharts['tooltip'];
	if (tooltipObject != null && !jQuery.isEmptyObject(tooltipObject)) {
		$.each(tooltipObject, function(key, value) {
			if (key !== null && key === "formatter") {
				tooltipObject['formatter'] = eval(tooltipObject['formatter']);
			}
		});
		option['tooltip'] = tooltipObject;
	}
	var seriesObject = option['series'];
	var labelObject = seriesObjectEcharts['label'];
	if (labelObject != null && !jQuery.isEmptyObject(labelObject)) {
		$.each(labelObject, function(key, value) {
			if (key !== null && key === "formatter") {
				labelObject['formatter'] = eval(labelObject['formatter']);
			}
		});
		seriesObject['label'] = labelObject;
	}
	if (option && typeof option === 'object') {
		myChart.setOption(option);
		$("#" + chartId).attr("echartOption", JSON.stringify(option));
	}

	myChart.on('contextmenu', function(params) {
		var colorsObj = '';
		selectHomeAggregateFunction(chartId, chartType, axisColumns, filterCondition, colorsObj);
	});
}
function anlyticsgetTreeDataBase(type, typeName) {
	console.log(type + ":::iam in getTreeDataBasemethod:::" + typeName);
	if (type != null && type != "" && type != undefined && type == "FILE") {
		var response = "<div id ='visualizationDMFileId' class ='visualizationDMFileDivClass'>"
			+ "<div id='visionShowFileUploadMsg'></div>";
		response += "<input type='file' name='importVisualizationDMFile'  id='importVisualizationDMFile' class='visionVisualizationDMFilesInput'/>";
		response += "<div class='visionVisualizationDMFileUploadclass' id='visionVisualizationDmFileUpload'>";
		response += "<input type='hidden' id='selectedTreeTypeName' value=''>";
		response += "<input type='hidden' id='selectedTreeType' value=''>";

		if (typeName == 'JSON') {
			response += "<div id = 'imageDiv' class='imageDivClass'>"
			response += "<img src='images/JSON_Icon.svg'  id='jsonImageId' class='importFileClass'>";
			response += "</div>";
			response += "<div class='VisionVisualizationUploadFileContent'><h5>Import Data From JSON</h5></div>";

		} else if (typeName == 'XML') {
			response += "<div id = 'imageDiv' class='imageDivClass'>"
			response += "<img src='images/XML-Icon.svg'  id='xmlImageId' class='importFileClass'>";
			response += "</div>";
			response += "<div class='VisionVisualizationUploadFileContent'><h5>Import Data From XML</h5></div>";

		} else if (typeName == 'CSV') {
			response += "<div id = 'imageDiv' class='imageDivClass'>"
			response += "<img src='images/CSV-Icon.svg'  id='csvImageId' class='importFileClass'>";
			response += "</div>";
			response += "<div class='VisionVisualizationUploadFileContent'><h5>Import Data From CSV</h5></div>";

		} else if (typeName == 'TEXT') {
			response += "<div id = 'imageDiv' class='imageDivClass'>"
			response += "<img src='images/TEXT_Icon.svg'  id='csvtextImageId' class='importFileClass'>";
			response += "</div>";
			response += "<div class='VisionVisualizationUploadFileContent'><h5>Import Data From Text</h5></div>";

		} else {
			response += "<div id = 'imageDiv' class='imageDivClass'>"
			response += "<img src='images/Excel.png'  id='excelimageId' class='excelimageClass'>";
			response += "</div>";
			response += "<div class='VisionVisualizationUploadFileContent'><h5>Import Data From Excel</h5></div>";
		}
		uploadDXPFilePopup(response, type, typeName);
	} else if (type != null && type != "" && type != undefined && type == "DB") {
		var formString = "<div class='visionEtlConnectDbMain'>"
			+ "<div id='visionShowConnectionMsg'></div>"
			+ "<table class='visionEtlDbTable' autocomplete='false'>"
			+ "<tr><td><p style='font-weight:bold'>Connection Type:</p></td>"
			+ "<td>" + typeName + "</td></tr>"
			+ "<tr>"
			+ "<td> <label class='visionDbLabels'>Connection Name</label></td>"
			+ "<td> <input type='text'  name='ConnectionName' id='DbEtlConnectionName' class='visionInputDbFields' autocomplete='false'>"
			+ "<div class='dataMigrationInputError' id='DbEtlConnectionNameError'></div></td>"
			+ " </tr>"
			+ "<tr>"
			+ "<td> <label class='visionDbLabels'>Host Name</label></td>"
			+ "<td> <input type='text'  name='HostName' id='DbEtlHostName' class='visionInputDbFields' autocomplete='false'>"
			+ "<div class='dataMigrationInputError' id='DbEtlHostNameError'></div></td>"
			+ "</tr>"
			+ "<tr>"
			+ "<td>  <label class='visionDbLabels'>Port</label></td>"
			+ "<td><input type='text' value='' name='Port' id='DbEtlPort' class='visionInputDbFields' autocomplete='false'>"
			+ "<div class='dataMigrationInputError' id='DbEtlPortError'></div></td>"
			+ "</tr>"
			+ "<tr>"
			+ "<td>  <label class='visionDbLabels'>Username</label></td>"
			+ "<td> <input type='text'  name='EtlUsername' id='DbEtlUserName' class='visionInputDbFields' autocomplete='false'>"
			+ "<div class='dataMigrationInputError' id='DbEtlUserNameError'></div></td>"
			+ "</tr>"
			+ " <tr>"
			+ "<td>  <label class='visionDbLabels'>Password</label></td>"
			+ "<td>    <input type='password'   name='EtlPassword' id='DbEtlPassword' class='visionInputDbFields' autocomplete='false'>"
			+ "<div class='dataMigrationInputError' id='DbEtlPasswordError'></div></td>"
			+ "</tr>"
			+ "<tr>"
			+ "<td>  <label class='visionDbLabels'>Database/Service Name</label></td>"
			+ "<td>    <input type='text'  name='ServiceName' id='DbEtlServiceName' class='visionInputDbFields' autocomplete='false'>"
			+ "<div class='dataMigrationInputError' id='DbEtlServiceNameError'></div></td>"
			+ "</tr>"
			+ "<tr style='display:none'>"
			+ "<td>  <label class='visionDbLabels'>Audit Id</label></td>"
			+ "<td>    <input type='hidden'  name='auditId' id='EtlAuditId' class='visionInputDbFields'></td>"
			+ "</tr>"
			+ "<tr><td><input type='checkbox' name='checkBoxDetails' id = 'EtlCheckBoxChecked' value='checked' checked>Save Details"
			+ "<div class='visionDataMigrationError' style='display:none'>Please check the box</div></td></tr>"
			+ "<tr>"
			+ "<td class='visionDbConnectBtn' id='connectEtlDbTd' colspan = '2'><input type='button' value='Connect' name='Connect'  onclick = \"connectIvisualizeDatabase('" + type + "','" + typeName + "')\" class='visionInputDbButton'></td>"

			+ "</tr>"
			+ "</table></div>";
		ShowEtlConnectionPopup(formString, type, typeName, 'Connect Database');
	} else if (type != null && type != "" && type != undefined && type == "ERP" && typeName == "SAP") {
		var erpTable = "<div class='visionEtlErpDiv'>"
			+ "<div id='visionShowErpEtlMsg'></div>"
			+ "<table class='visionERPEtlTable'>"
			+ "<tr><td><p style='font-weight:bold'>Connection Type:</p></td>"
			+ "<td>" + typeName + "</td></tr>"
			+ " <tr class='visionERPDbTr'>"
			+ "<td class='visionERPDbTd'> <label class='visionERPDbLabels'>Connection Name</label></td>"
			+ "<td class='visionERPDbTd'> <input type='text' value='' name='ConnectionName' id='ErpEtlDbConnectionName' class='visionInputDbFields'>"
			+ "<div class='dataMigrationInputError' id='ErpEtlDbConnectionNameError'></div></td>"
			+ " </tr>"
			+ " <tr class='visionERPDbTr'>"
			+ "<td class='visionERPDbTd'> <label class='visionERPDbLabels'>Client</label></td>"
			+ "<td class='visionERPDbTd'> <input type='text' value='' name='Client' id='ERPEtlClientName' class='visionInputDbFields'>"
			+ "<div class='dataMigrationInputError' id='ERPEtlClientNameError'></div></td>"
			+ " </tr>"
			+ "<tr class='visionERPDbTr'>"
			+ "<td class='visionERPDbTd'> <label class='visionERPDbLabels'>Host Name</label></td>"
			+ "<td class='visionERPDbTd'> <input type='text' value='' name='ERP HostName' id='ERPEtlHostName' class='visionInputDbFields'>"
			+ "<div class='dataMigrationInputError' id='ERPEtlHostNameError'></div></td>"
			+ "</tr>"
			+ "<tr class='visionERPDbTr'>"
			+ "<td class='visionERPDbTd'>  <label class='visionERPDbLabels'>Username</label></td>"
			+ "<td class='visionERPDbTd'> <input type='text' value='' name='Username' id='ERPEtlUserName' class='visionInputDbFields'>"
			+ "<div class='dataMigrationInputError' id='ERPEtlUserNameError'></div></td>"
			+ "</tr>"
			+ " <tr class='visionERPDbTr'>"
			+ "<td class='visionERPDbTd'>  <label class='visionERPDbLabels'>Password</label></td>"
			+ "<td class='visionERPDbTd'>    <input type='password' value='' name='Password' id='ERPEtlPassword' class='visionInputDbFields'>"
			+ "<div class='dataMigrationInputError' id='ERPEtlPasswordError'></div></td>"
			+ "</tr>"
			+ "<tr class='visionERPDbTr'>"
			+ "<td class='visionERPDbTd'>  <label class='visionERPDbLabels'>Language Id</label></td>"
			+ "<td class='visionERPDbTd'>    <input type='text' value='' name='languageId' id='ERPEtlLanguageId' class='visionInputDbFields'>"
			+ "<div class='dataMigrationInputError' id='ERPEtlLanguageIdError'></div></td>"
			+ "</tr>"
			+ "<tr class='visionERPDbTr'>"
			+ "<tr class='visionERPDbTr' style='display:none'>"
			+ "<td class='visionERPDbTr'>  <label class='visionERPDbLabels'>Audit Id</label></td>"
			+ "<td class='visionERPDbTr'>    <input type='hidden' value='' name='auditId' id='ErpEtlauditId' class='visionInputDbFields'></td>"
			+ "</tr>"
			+ "<tr class='visionERPDbTr'>"
			+ "<td class='visionERPDbTd'>  <label class='visionERPDbLabels'>System Id</label></td>"
			+ "<td class='visionERPDbTd'>    <input type='text' value='' name='ERPSystemId' id='ERPEtlSystemId' class='visionInputDbFields'>"
			+ "<div class='dataMigrationInputError' id='ERPEtlSystemIdError'></div></td>"
			+ "</tr>"
			+ "<tr class='visionERPDbTr'><td><input type='checkbox' name='checkBoxDetails' id = 'checkBoxChecked' value='checked' checked>Save Details"
			+ "<div class='visionDataMigrationError' style='display:none'>Please check the box</div></td></tr>"
			+ "<tr class='visionERPDbTr'>"
			+ "<td class='visionERPDbTd visionERPDbConnectBtn' id='connectERPEtlDbTd' colspan = '2'><input type='button' value='Connect' name='Connect'  onclick = \"connectErpEtlDatabase('" + type + "','" + typeName + "')\" class='visionInputDbButton'></td>"

			+ "</tr>"
			+ "</table>";
		ShowEtlConnectionPopup(erpTable, type, typeName, 'Connect ERP');
	} else if (typeName == 'Oracle_ERP') {
		var formString = "<div class='visionEtlConnectDbMain'>"
			+ "<div id='visionShowConnectionMsg'></div>"
			+ "<table class='visionErpEtlDbTable' autocomplete='false'>"
			+ "<tr><td><p style='font-weight:bold'>Connection Type:</p></td>"
			+ "<td>" + typeName + "</td></tr>"
			+ "<tr>"
			+ "<td> <label class='visionDbLabels'>Connection Name</label></td>"
			+ "<td> <input type='text'  name='ConnectionName' id='DbEtlConnectionName' class='visionInputDbFields' autocomplete='false'>"
			+ "<div class='dataMigrationInputError' id='DbEtlConnectionNameError'></div></td>"
			+ " </tr>"
			+ "<tr>"
			+ "<td> <label class='visionDbLabels'>Host Name</label></td>"
			+ "<td> <input type='text'  name='HostName' id='DbEtlHostName' class='visionInputDbFields' autocomplete='false'>"
			+ "<div class='dataMigrationInputError' id='DbEtlHostNameError'></div></td>"
			+ "</tr>"
			+ "<tr>"
			+ "<td>  <label class='visionDbLabels'>Port</label></td>"
			+ "<td><input type='text' value='' name='Port' id='DbEtlPort' class='visionInputDbFields' autocomplete='false'>"
			+ "<div class='dataMigrationInputError' id='DbEtlPortError'></div></td>"
			+ "</tr>"
			+ "<tr>"
			+ "<td>  <label class='visionDbLabels'>Username</label></td>"
			+ "<td> <input type='text'  name='EtlUsername' id='DbEtlUserName' class='visionInputDbFields' autocomplete='false'>"
			+ "<div class='dataMigrationInputError' id='DbEtlUserNameError'></div></td>"
			+ "</tr>"
			+ " <tr>"
			+ "<td>  <label class='visionDbLabels'>Password</label></td>"
			+ "<td>    <input type='password'   name='EtlPassword' id='DbEtlPassword' class='visionInputDbFields' autocomplete='false'>"
			+ "<div class='dataMigrationInputError' id='DbEtlPasswordError'></div></td>"
			+ "</tr>"
			+ "<tr>"
			+ "<td>  <label class='visionDbLabels'>Database/Service Name</label></td>"
			+ "<td>    <input type='text'  name='ServiceName' id='DbEtlServiceName' class='visionInputDbFields' autocomplete='false'>"
			+ "<div class='dataMigrationInputError' id='DbEtlServiceNameError'></div></td>"
			+ "</tr>"
			+ "<tr style='display:none'>"
			+ "<td>  <label class='visionDbLabels'>Audit Id</label></td>"
			+ "<td>    <input type='hidden'  name='auditId' id='EtlAuditId' class='visionInputDbFields'></td>"
			+ "</tr>"
			+ "<tr><td><input type='checkbox' name='checkBoxDetails' id = 'EtlCheckBoxChecked' value='checked' checked>Save Details"
			+ "<div class='visionDataMigrationError' style='display:none'>Please check the box</div></td></tr>"
			+ "<tr>"
			+ "<td class='visionDbConnectBtn' id='connectEtlDbTd' colspan = '2'><input type='button' value='Connect' name='Connect'  onclick = \"connectIvisualizeDatabase('" + type + "','" + typeName + "')\" class='visionInputDbButton'></td>"

			+ "</tr>"
			+ "</table></div>";
		ShowEtlConnectionPopup(formString, type, typeName, 'Connect ERP');
	} else if (type == 'WEB_SERVICE') {
		if (typeName == 'SOAP') {
			var formString = "<div class='visionEtlConnectDbMain'>"
				+ "<div id='visionShowConnectionMsg'></div>"
				+ "<table class='visionErpEtlDbTable' autocomplete='false'>"
				+ "<tr><td><p style='font-weight:bold'>Webservice Type:</p></td>"
				+ "<td>" + typeName + "</td></tr>"
				+ "<tr>"
				+ "<td> <label class='visionDbLabels'>WSDL URL</label></td>"
				+ "<td> <input type='text'  name='wsdlURL' id='wsdlURL' class='visionInputDbFields' autocomplete='false'>"
				+ "<div class='dataMigrationInputError' id='wsdlURLError'></div></td>"
				+ " </tr>"
				+ "<tr>"
				+ "<td> <label class='visionDbLabels'>End Point URL</label></td>"
				+ "<td> <input type='text'  name='endPointURL' id='endPointURL' class='visionInputDbFields' autocomplete='false'>"
				+ "<div class='dataMigrationInputError' id='endPointURLError'></div></td>"
				+ "</tr>"
				+ "<tr>"
				+ "<tr style='display:none'>"
				+ "<td>  <label class='visionDbLabels'>Audit Id</label></td>"
				+ "<td>    <input type='hidden'  name='auditId' id='EtlAuditId' class='visionInputDbFields'></td>"
				+ "</tr>"
				+ "<tr><td><input type='checkbox' name='checkBoxDetails' id = 'EtlCheckBoxChecked' value='checked' checked>Save Details"
				+ "<div class='visionDataMigrationError' style='display:none'>Please check the box</div></td></tr>"
				+ "<tr>"
				+ "<td class='visionDbConnectBtn' id='connectEtlDbTd' colspan = '2'><input type='button' value='Import' name='Import'  onclick = \"connectEtlWSSOAP('" + type + "','" + typeName + "')\" class='visionInputDbButton'></td>"

				+ "</tr>"
				+ "</table></div>";
		} else if (typeName == 'REST') {

		}
		ShowEtlConnectionPopup(formString, type, typeName, 'Connect Webservice');
	}
}
function uploadDXPFilePopup(response, type, typeName) {
	$('.visualizationMainDivwrapper').toggleClass('width60');
	$('#Visualization').toggleClass('visualBIChart');
	$("#VisualizeBIColumns").css("display", "block");
	var labelObject = {};
	try {
		labelObject = JSON.parse($("#labelObjectHidden").val());
	} catch (e) {
	}
	$("#dialog").html(response);
	$("#dialog").dialog({
		title: (labelObject['Upload'] != null ? labelObject['Upload'] : 'Upload'),
		width: 500,
		height: 350,
		fluid: true,
		open: function() {

		},
		beforeClose: function(event, ui) {

		}
	});
	$("#selectedTreeType").val(type);
	$("#selectedTreeTypeName").val(typeName);
	$("#importVisualizationDMFile").hide();
	setTimeout(function() {
		$("html").on("dragover", function(e) {
			e.preventDefault();
			e.stopPropagation();
		});
		$("html").on("drop", function(e) {
			e.preventDefault();
			e.stopPropagation();
		});
		$('.visualizationDMFileDivClass').on('drop', function(event) {

			$("#wait").css("display", "block");
			var filetype = $('#selectedTreeTypeName').val();
			//            dmTreeFileUpload("Y", filetype);

			if (filetype == 'XLSX' || filetype == 'XLS') {
				var files = event.originalEvent.dataTransfer.files; // FileList object
				parseSmartBIExcel(files[0], filetype);
			} else {
				//                dmTreeFileUpload("N", filetype);
				//				uploadSelectedFile(files[0], filetype);
				saveFileOnServer(files[0], filetype);
			}
			event.target.value = '';
		});
		$("#visionVisualizationDmFileUpload").click(function() {
			var filetype = $('#selectedTreeTypeName').val();
			console.log("iam in clickable ");
			//            dmTreeFileUpload("N", filetype);

			$("#importVisualizationDMFile").click();
			//            $("#importVisualizationDMFile").trigger("change");
		});

		$("#importVisualizationDMFile").on('change', function(event) {

			var filetype = $('#selectedTreeTypeName').val();
			console.log("iam in files change ");
			//            dmTreeFileUpload("N", filetype);
			if (filetype == 'XLSX' || filetype == 'XLS') {
				var files = event.target.files; // FileList object
				parseSmartBIExcel(files[0], filetype);
			} else {
				var files = event.target.files;
				//                dmTreeFileUpload("N", filetype);
				//				uploadSelectedFile(files[0], filetype);
				saveFileOnServer(files[0], filetype);

			}
			event.target.value = '';
		});
	}
		, 300);
}
function parseSmartBIExcel(file, filetype) {
	var sheets = [];
	var fileName = file['name'];
	var fileDataType = file['type'];
	var reader = new FileReader();
	if (filetype != null && filetype != '' && filetype != undefined) {
		filetype = filetype.toLowerCase();
	}
	reader.onload = function(e) {

		var mergeFlag = false;
		var data = e.target.result;
		var workbook;
		if (filetype == 'xls') {
			workbook = XLS.read(data, {
				type: 'binary',
				cellDates: true
			});
		} else if (filetype == 'xlsx') {
			workbook = XLSX.read(data, { type: 'binary', cellDates: true, cellNF: true, cellText: false });
			var financeSheets = workbook['Sheets'];
			var mergeFileName = fileName.replace(".xlsx", '');
			$.each(financeSheets, function(key, value) {
				var mergeFinanceSheets = financeSheets[key];
				var merges = mergeFinanceSheets['!merges'];
				if (merges != null && !jQuery.isEmptyObject(merges)) {
					mergeFlag = true;
				}
			});


		}
		var headersObj = {};
		workbook.SheetNames.forEach(function(sheetName) {

			sheets.push(sheetName);
		});

		if (mergeFlag) {
			uploadSelectedFinanceFile(file, filetype, fileName)
		} else {
			getXlsxFileSheet(workbook, file, filetype, fileName, fileDataType, sheets);
		}


	}
	reader.onerror = function(ex) {
		console.log(ex);
	};

	reader.readAsBinaryString(file);
}

function uploadSelectedFinanceFile(files, fileType, fileName) {
	showLoader();
	var data;
	var url;
	var fileData = files['name'];
	var xlsxETLFileData = new FormData();
	xlsxETLFileData.append("importTreeDMFile", files);
	xlsxETLFileData.append("selectedFiletype", fileType);
	xlsxETLFileData.append("fileLocalPath", "");
	data = xlsxETLFileData;
	url = "importTreeDMFile";
	const myArray = fileName.split(".");
	let tableName = myArray[0];
	if (tableName != null && tableName != '' && tableName != undefined) {
		tableName = tableName.replace(/ /g, "_");
	}
	$.ajax({
		url: 'importTreeDMFinanceFile',
		type: "POST",
		data: xlsxETLFileData,
		enctype: 'multipart/form-data',
		processData: false,
		contentType: false,
		success: function(response) {
			stopLoader();
			if (response != null && response != '' && response != undefined) {
				response = JSON.parse(response);
				$("#dialog").html("");
				$("#dialog").dialog("close");
				$("#dialog").dialog("destroy");
				$(".buttoonClass").css("display", "block");
				var dataFieldsArray = response['dataFieldsArray'];
				var columnsArray = response['columnsArray'];
				var gridId = response['gridId'];
				var filePath = response['filePath'];
				var data = {
					filePath: filePath,
					fileName: fileName,
					fileType: fileType,
					fileHeaders: JSON.stringify(response['columnList']), // ravi file headers
					gridId: gridId // ravi multiple excelSheets code
				};
				data['columnsArray'] = JSON.stringify(response['columnList']);
				createFileAsTable(filePath, fileName, tableName);
				//                getdefaultChart("visualizeGraphArea", axisColumns, valuesColumns, "pie", tablesObj) 
				var source =
				{
					type: 'POST',
					//                                                async: false,
					datatype: "json",
					datafields: dataFieldsArray,
					data: data,
					url: 'getChartsFileObjectData',
					cache: false,
					root: 'Rows',
					beforeSend: function() {
						showLoader();
					}, loadError: function(xhr, status, error) {
						stopLoader();
					}, loadComplete: function(data) {
						stopLoader();
					},
					beforeprocessing: function(data) {
						if (data != null && data[0] != null) {
							source.totalrecords = data[0].totalrecords;
						} else {
							source.totalrecords = 0;
						}

						stopLoader();
					},
					sort: function() {
						$("#visualizeAreaGirdData1").jqxGrid('updatebounddata', 'sort');
						try {
							$("#visualizeAreaGirdData1").jqxGrid('clearselection');
						} catch (e) {
						}

					},
					filter: function() {
						$("#visualizeAreaGirdData1").jqxGrid('updatebounddata', 'filter');
						try {
							$("#visualizeAreaGirdData1").jqxGrid('clearselection');
						} catch (e) {
						}
					}

				};
				var dataAdapter = new $.jqx.dataAdapter(source);
				var headerTooltipRenderer = function(element) {
					$(element).parent().jqxTooltip({
						position: 'mouse', theme: 'energyblue',
						position: 'bottom-right',
						showArrow: false, content: $(element).text()
					});
				}
				//                        window.allGridColumns[gridId] = columnsArray;
				$("#visualizeAreaGirdData1").jqxGrid(
					{
						width: "100%",
						height: '95%',
						autoshowloadelement: false,
						source: dataAdapter,
						pageable: true,
						pagesize: 50,
						filterable: true,
						sortable: true,
						virtualmode: true,
						editable: true,
						columnsreorder: true,
						pagesizeoptions: ['50', '100', '500', '1000', '5000', '10000', '50000'],
						enabletooltips: true,
						enablemousewheel: true,
						enablehover: true,
						enablebrowserselection: true,
						rendergridrows: function(params) {
							return params.data;
						},
						columnsresize: true,
						columns: columnsArray,
						rowdetails: true
					});
			}
			$("#visualizeAreaGirdData1").on('columnclick', function(event) {
				var args = event.args;
				var dataField = args.datafield;
				var dataField1 = args.text;
				var rowIndex = args.rowindex;
				var cellValue = args.value;
				var column = $('#visualizeAreaGirdData1').jqxGrid('getcolumn', event.args.datafield).text;
				$.ajax({
					type: "POST",
					url: "getColumnformStr",
					cache: false,
					dataType: 'html',
					async: false,
					data: {
						column: dataField,
						table: tableName
					},
					success: function(response) {
						$("#dialog").html(response);
						$("#dialog").dialog({
							title: (labelObject[dataField] != null ? labelObject[dataField] : dataField),
							modal: true,
							width: 400,
							height: 250,
							fluid: true,
							//                            buttons: [{
							//                                    text: (labelObject['Ok'] != null ? labelObject['Ok'] : 'Ok'),
							//                                    click: function () {                            
							//                                        $("#dialog").html("");
							//                                        $("#dialog").dialog("close");
							//                                        $("#dialog").dialog("destroy");
							//                                    }
							//
							//                                }],
							open: function() {
								$(this).closest(".ui-dialog").find(".ui-button").eq(1).addClass("dialogyes");
								$(".visionHeaderMain").css("z-index", "999");
								$(".visionFooterMain").css("z-index", "999");
								$(".ui-dialog").addClass("bicolumnPopUp");

							},
							beforeClose: function(event, ui) {
								$(".visionHeaderMain").css("z-index", "99999");
								$(".visionFooterMain").css("z-index", "99999");
							}
						});
					},
					error: function(e) {
						console.log(e);
						sessionTimeout(e);
						stopLoader();
					}
				});

			});
			$("#visualizeAreaGirdData1").on('celldoubleclick', function(event) {
				var args = event.args;
				var val = $(this).text();
				var cellValue = args.value;
				var column = $('#visualizeAreaGirdData1').jqxGrid('getcolumn', event.args.datafield).text;
				$("#dialog").html(cellValue);
				$("#dialog").dialog({
					title: (labelObject['Message'] != null ? labelObject['Message'] : 'Message'),
					modal: true,
					width: 350,
					height: 200,
					fluid: true,
					open: function() {
						$(this).closest(".ui-dialog").find(".ui-button").eq(1).addClass("dialogyes");
						$(".visionHeaderMain").css("z-index", "999");
						$(".visionFooterMain").css("z-index", "999");
						$(".ui-dialog").addClass("bicolumnPopUp");

					},
					beforeClose: function(event, ui) {
						$(".visionHeaderMain").css("z-index", "99999");
						$(".visionFooterMain").css("z-index", "99999");
					}
				});

			});
			$("#VisualizeBIColumns").css("display", "block");
			$("#Fields").css("display", "block");
			switchSmartBiDesignTabs("li_contentView", "visionGridDataView");
		}, error: function(e) {
			console.log("The Error Message is:::" + e.message);
			sessionTimeout(e);
		}
	});
}

function getXlsxFileSheet(workbook, file, filetype, fileName, fileDataType, sheets) {
	labelObject = {};
	try {
		labelObject = JSON.parse($("#labelObjectHidden").val());
	} catch (e) {
	}
	function extractHeader(ws) {
		const header = []
		const columnCount = XLSX.utils.decode_range(ws['!ref']).e.c + 1;
		for (let i = 0; i < columnCount; ++i) {
			var headerObj = ws[`${XLSX.utils.encode_col(i)}1`];
			if (headerObj != null) {
				header[i] = headerObj.v;
			}
		}
		return header
	}
	var JSONData = {}
	var headersObj = {}
	var sheetsArray = []
	workbook.SheetNames.forEach(function(sheetName) {

		var XL_row_object = XLSX.utils.sheet_to_json(workbook.Sheets[sheetName], { raw: true })
		JSONData[sheetName] = XL_row_object;
		//            document.getElementById("jsonObject").innerHTML = json_object;
		sheetsArray.push(sheetName);
		const sheet = workbook.Sheets[sheetName]
		const headers = extractHeader(sheet);
		headersObj[sheetName] = headers;

	});
	uploadSmartBISelectedFileXlsx(JSONData, filetype, fileName, headersObj, sheetsArray);

	$("#visionETLXlsxFileIdAll").click(function() {
		$(".visionETLXlsxFileClass").prop('checked', $(this).prop('checked'));
	});
	var spanText = "<span class='VisionETLXlsxFileSpan'>1." + fileName + "</span>";
	$("#VisionETLXlsxFileNameId").html(spanText);
}
function uploadSmartBISelectedFileXlsx(jsonData, fileType, fileName, headersObj, sheets) {
	showLoader();
	var url;
	const myArray = fileName.split(".");
	let tableName = myArray[0];
	tableName = tableName.replaceAll(" ", "_");
	$.ajax({
		type: "post",
		traditional: true,
		url: 'importTreeChartsDMFileXlsx',
		cache: false,
		data: {
			jsonData: JSON.stringify(jsonData),
			selectedFiletype: fileType,
			fileName: fileName,
			headersObj: JSON.stringify(headersObj),
			sheets: JSON.stringify(sheets),
			newTableName: tableName.toUpperCase()
		},
		success: function(response) {
			stopLoader();
			if (response != null && !jQuery.isEmptyObject(response)) {
			    var fileExist = response['fileExist'];
			    var Message;
			    if(fileExist !=null && !jQuery.isEmptyObject(fileExist)){
				     Message = fileExist['Message'];
			    }
			    if(Message !=null && Message !='' && Message !=undefined && Message.indexOf("already existed")>-1){
				$("#dialog").html("");
				$("#dialog").dialog("close");
				$("#dialog").dialog("destroy");
				var appendMsg = "Table name already existed, Do you want replace or Create new table";
				$("#dialog").html(appendMsg);
				$("#dialog").dialog({
					title: (labelObject['Message'] != null ? labelObject['Message'] : 'Message'),
					modal: true,
					width: 350,
					height: 200,
					fluid: true,
					buttons :[
						{
						text: (labelObject['Replace Table'] != null ? labelObject['Replace Table'] : 'Replace Table'),
						click: function() {
							checkExistingorNewTable(response,fileName,tableName);
							$(this).html("");
							$(this).dialog("close");
							$(this).dialog("destroy");
                       }
					},
					{
						text: (labelObject['Create New Table'] != null ? labelObject['Create New Table'] : 'Create New Table'),
						click: function() {
							getImportFileNewTableName(response,fileName);
							$(this).html("");
							$(this).dialog("close");
							$(this).dialog("destroy");
                            
						}
					}
						
					],
					open: function() {
						$(this).closest(".ui-dialog").find(".ui-button").eq(1).addClass("dialogyes");
						$(".visionHeaderMain").css("z-index", "999");
						$(".visionFooterMain").css("z-index", "999");
						$(".ui-dialog").addClass("bicolumnPopUp");

					},
					beforeClose: function(event, ui) {
						$(".visionHeaderMain").css("z-index", "99999");
						$(".visionFooterMain").css("z-index", "99999");
					}
				});	
				}else{
					$("#dialog").html("");
				$("#dialog").dialog("close");
				$("#dialog").dialog("destroy");
					checkExistingorNewTable(response,fileName,tableName);
				}	
							
							
							}
		}, error: function(e) {
			console.log("The Error Message is:::" + e.message);
			sessionTimeout(e);
		}
	});
}
function getImportFileNewTableName(response,fileName) {
	var appendMsg = "please give new Table name :"
	         +"<input type='text' id='importFileTableNameId' value=''/>"
	         +"<div id='importFileTableNameErrorId' class='importFileTableNameErrorClass'></div>";
	$("#dialog1").html(appendMsg);
	$("#dialog1").dialog({
		title: (labelObject['Message'] != null ? labelObject['Message'] : 'Message'),
		modal: true,
		width: 350,
		height: 200,
		fluid: true,
		buttons: [
			{
				text: (labelObject['Ok'] != null ? labelObject['Ok'] : 'Ok'),
				click: function() {
					var tableName = $("#importFileTableNameId").val();
					if (tableName != null && tableName != '' && tableName != undefined) {
						$("#importFileTableNameErrorId").html("");
						checkImportedFileNewTableExist(response,fileName,tableName);
						$(this).html("");
						$(this).dialog("close");
						$(this).dialog("destroy");
					} else {
						$("#importFileTableNameErrorId").html("please give table name");
					}
				}
			},
			{
				text: (labelObject['Cancel'] != null ? labelObject['Cancel'] : 'Cancel'),
				click: function() {
					$(this).html("");
					$(this).dialog("close");
					$(this).dialog("destroy");

				}
			}

		],
		open: function() {
			$(this).closest(".ui-dialog").find(".ui-button").eq(1).addClass("dialogyes");
			$(".visionHeaderMain").css("z-index", "999");
			$(".visionFooterMain").css("z-index", "999");
			$(".ui-dialog").addClass("bicolumnPopUp");

		},
		beforeClose: function(event, ui) {
			$(".visionHeaderMain").css("z-index", "99999");
			$(".visionFooterMain").css("z-index", "99999");
		}
	});
}
function checkImportedFileNewTableExist(resp,fileName,tableName)
{
	$.ajax({
		type: "post",
		traditional: true,
		url: 'checkExistMergeTableName',
		cache: false,
		data: {
			newTableName: tableName.toUpperCase()
		},
		success: function(response) {
			stopLoader();
			if (response != null) {
				var Message = response['Message'];
				if(Message !=null && Message !='' && Message !=undefined && Message.indexOf("already existed") >-1){
				closeDialogBox("#dialog");
				var appendMsg = "Table Name is already Existed.please give new Table Name"
				   +"<input type='text' id='importFileTableNameId' value=''/>"
	               +"<div id='importFileTableNameErrorId' class='importFileTableNameErrorClass'></div>";
				$("#dialog").html(appendMsg);  
				$("#dialog").dialog({
					title: (labelObject['Message'] != null ? labelObject['Message'] : 'Message'),
					modal: true,
					width: 350,
					height: 200,
					fluid: true,
					buttons :[
						{
						text: (labelObject['Ok'] != null ? labelObject['Ok'] : 'Ok'),
							click: function() {
								var tableName = $("#importFileTableNameId").val();
								if (tableName != null && tableName != '' && tableName != undefined) {
									$("#importFileTableNameErrorId").html("");
									checkImportedFileNewTableExist(resp, fileName, tableName);
									$(this).html("");
									$(this).dialog("close");
									$(this).dialog("destroy");
								} else {
									$("#importFileTableNameErrorId").html("please give table name");
								}
							}
					},
					{
						text: (labelObject['Cancel'] != null ? labelObject['Cancel'] : 'Cancel'),
						click: function() {
							$(this).html("");
							$(this).dialog("close");
							$(this).dialog("destroy");
                            
						}
					}
						
					],
					open: function() {
						$(this).closest(".ui-dialog").find(".ui-button").eq(1).addClass("dialogyes");
						$(".visionHeaderMain").css("z-index", "999");
						$(".visionFooterMain").css("z-index", "999");
						$(".ui-dialog").addClass("bicolumnPopUp");

					},
					beforeClose: function(event, ui) {
						$(".visionHeaderMain").css("z-index", "99999");
						$(".visionFooterMain").css("z-index", "99999");
					}
				});	
				}else{
					
					checkExistingorNewTable(resp,fileName,tableName);
					$("#dialog").html("");
				$("#dialog").dialog("close");
				$("#dialog").dialog("destroy");
				}	
							
							
							}
		}, error: function(e) {
			console.log("The Error Message is:::" + e.message);
			sessionTimeout(e);
		}
	});
}
function checkExistingorNewTable(response,fileName,tableName)
{
	          var fields = response['datafilds'];
				var dataFieldsArray = response['dataFieldsArray'];
				var columnsArray = response['columnsArray'];
				var gridId = response['gridId'];
				var filePath = response['filePath'];
				tableName = tableName.replace(" ","_");
				var data = {
					tableName: tableName
				};
				
				createFileAsTable(filePath, fileName, tableName);
				var source =
				{
					type: 'POST',
					datatype: "json",
					datafields: dataFieldsArray,
					data: data,
					url: 'gettableObjectData',
					cache: false,
					root: 'Rows',
					async: false,
					processdata: function(data) {
						showLoader();
						data['getOnlyDataArray'] = 'Y';

					},
					beforeSend: function() {
						//showLoader();

					}, loadError: function(xhr, status, error) {
						stopLoader();
					}, loadComplete: function(data) {
						stopLoader();
					},
					beforeprocessing: function(data) {
						source.totalrecords = data[data.length - 1];
					},
				};
				var dataAdapter = new $.jqx.dataAdapter(source);
				var headerTooltipRenderer = function(element) {
					$(element).parent().jqxTooltip({
						position: 'mouse', theme: 'energyblue',
						position: 'bottom-right',
						showArrow: false, content: $(element).text()
					});
				}
				//                        window.allGridColumns[gridId] = columnsArray;
				$("#visualizeAreaGirdData1").jqxGrid(
					{
						width: "100%",
						height: "90%",
						theme: 'energyblue',
						autoshowloadelement: false,
						source: dataAdapter,
						pageable: true,
						pagesize: 50,
						showfilterrow: true,
						filterable: true,
						sortable: true,
						virtualmode: true,
						columnsreorder: true,
						selectionmode: 'checkbox',
						pagesizeoptions: ['50', '100', '500'],
						rendergridrows: function(params) {
							return params.data;
						},
						columnsresize: true,
						columns: columnsArray
					});
			
			$("#visualizeAreaGirdData1").on('columnclick', function(event) {
				var args = event.args;
				var dataField = args.datafield;
				var dataField1 = args.text;
				var rowIndex = args.rowindex;
				var cellValue = args.value;
				var column = $('#visualizeAreaGirdData1').jqxGrid('getcolumn', event.args.datafield).text;
				var gridId123 = '#' + gridId;
					var menuItems = "";

					menuItems += "<li><input type='button' id='renameId' value='Rename Column'  onclick=renameColumnValue('" + dataField + "','" + tableName + "','" + gridId123 + "')></li>";
					menuItems += "<li><input type='button' value='Function' onclick=selectType('" + dataField + "','" + tableName + "','" + gridId123 + "')></li>";
					menuItems += "<li><input type='button' value='Suffix Value' onclick=suffixValue('" + dataField + "','" + tableName + "','" + gridId123 + "')></li>";
					menuItems += "<li><input type='button' value='Prefix Value' onclick=prefixValue('" + dataField + "','" + tableName + "','" + gridId123 + "')></li>";
					menuItems += "<li><input type='button' value='Find Value' onclick=createFind('" + dataField + "','" + tableName + "','" + gridId123 + "')></li>";
					menuItems += "<li><input type='button' value='Remove Duplicates' onclick=deleteDuplicate('" + dataField + "','" + tableName + "','" + gridId123 + "')></li>";
		$("#jqxMenu").remove();
				$("#VisualizePageBody").append("<div id='jqxMenu'><ul></ul></div>");
				$("#jqxMenu ul").html(menuItems);
				var contextMenu = $("#jqxMenu").jqxMenu({ width: '120px', height: '150px', autoOpenPopup: false, mode: 'popup' });

				var scrollTop = $(window).scrollTop();
				var scrollLeft = $(window).scrollLeft();

				contextMenu.jqxMenu('open', parseInt(event.args.originalEvent.clientX) + 5 + scrollLeft, parseInt(event.args.originalEvent.clientY) + 5 + scrollTop);
				return false;
			});
			$("#visualizeAreaGirdData1").on('celldoubleclick', function(event) {
				var args = event.args;
				var val = $(this).text();
				var cellValue = args.value;
				var column = $('#visualizeAreaGirdData1').jqxGrid('getcolumn', event.args.datafield).text;
				$("#dialog").html(cellValue);
				$("#dialog").dialog({
					title: (labelObject['Message'] != null ? labelObject['Message'] : 'Message'),
					modal: true,
					width: 350,
					height: 200,
					fluid: true,
					open: function() {
						$(this).closest(".ui-dialog").find(".ui-button").eq(1).addClass("dialogyes");
						$(".visionHeaderMain").css("z-index", "999");
						$(".visionFooterMain").css("z-index", "999");
						$(".ui-dialog").addClass("bicolumnPopUp");

					},
					beforeClose: function(event, ui) {
						$(".visionHeaderMain").css("z-index", "99999");
						$(".visionFooterMain").css("z-index", "99999");
					}
				});

			});
			$("#VisualizeBIColumns").css("display", "block");
			$("#Fields").css("display", "block");
			switchSmartBiDesignTabs("li_contentView", "visionGridDataView");

}

function getAggregateResult(dataField, tableName) {
	var aggregateType = $("#smartBiSelect").val();
	$.ajax({
		type: "POST",
		url: "getAggregateResult",
		cache: false,
		dataType: 'html',
		async: false,
		data: {
			column: dataField,
			aggregateType: aggregateType,
			table: tableName
		},
		success: function(response) {
			$("#AggregateResultId").html(response);
		},
		error: function(e) {
			console.log(e);
			sessionTimeout(e);
			stopLoader();
		}
	});
}
function createSuffixAndPrifix(column, tableName, gridId) {
  showLoader();
  var checkedVal = $("#sufixprifixId").find(":radio:checked").val();
  var sufixVal = $("#suffixId").val();
  var PrifixVal = $("#prifixId").val();
  $("#dialog").html("");
  $("#dialog").dialog("close");
  $("#dialog").dialog("destroy");
  var exiFlag = "";
  var sufixPrifixVal = "";
  if (sufixVal != null && sufixVal != undefined && sufixVal != "") {
    checkedVal = "SUFFIX";
    sufixPrifixVal = sufixVal;
  } else if (PrifixVal != null && PrifixVal != undefined && PrifixVal != "") {
    checkedVal = "PRIFIX";
    sufixPrifixVal = PrifixVal;
  }
  $.ajax({
    type: "POST",
    url: "createSuffixAndPriffix",
    cache: false,
    dataType: "html",
    async: false,
    data: {
      column: column,
      sufixandPrifixVal: sufixPrifixVal,
      table: tableName,
      checkedVal: checkedVal,
    },
    success: function (response) {
      stopLoader();

      if (response != null && response != "") {
        if (gridId.startsWith("#divGrid")) {
          var data = {
            startIndex: 0,
            endIndex: 50,
            tableName: tableName,
            analytics: "Y",
          };
          viewAnalyticsTableDataGrid(data);
          removeIiWidgetOverlay();
        } else {
          showalterColumnData(tableName, exiFlag, gridId);
          showFileToDxpTableData(tableName, exiFlag, gridId);
          removeIiWidgetOverlay();
          leftFileUploadsDivToggle();
        }
      }
    },
    error: function (e) {
      console.log(e);
      sessionTimeout(e);
      stopLoader();
    },
  });
}
function renametableColumn(column, table, gridId) {
  //$("#visionVisualizationDataChartcount").hide();
  showLoader();
  var renameColumn = $("#ColumnRenameid").val();
  $("#dialog").html("");
  $("#dialog").dialog("close");
  $("#dialog").dialog("destroy");

  var exiFlag = " ";

  $.ajax({
    type: "POST",
    url: "renameSQLColumn",
    cache: false,
    dataType: "html",
    async: false,
    data: {
      column: column,
      renameColumn: renameColumn,
      table: table,
    },
    success: function (response) {
      stopLoader();
      var data = {
        startIndex: 0,
        endIndex: 50,
        tableName: table,
        analytics: "Y",
      };
      if (gridId.startsWith("#divGrid")) {
        viewAnalyticsTableDataGrid(data);
        removeIiWidgetOverlay();
      } else {
        showalterColumnData(table, exiFlag, gridId);
        showFileToDxpTableData(table, exiFlag, gridId);
        removeIiWidgetOverlay();
        leftFileUploadsDivToggle();
      }
    },
    error: function (e) {
      console.log(e);
      sessionTimeout(e);
      stopLoader();
    }
    });
}

function uploadSelectedFile(files, fileType) {
	showLoader();
	var data;
	var url;

	var xlsxETLFileData = new FormData();
	xlsxETLFileData.append("importTreeDMFile", files);
	xlsxETLFileData.append("selectedFiletype", fileType);
	data = xlsxETLFileData;
	url = "importTreeDMFile";

	$.ajax({
		url: 'importTreeDMFile',
		type: "POST",
		data: xlsxETLFileData,
		enctype: 'multipart/form-data',
		processData: false,
		contentType: false,
		success: function(response) {
			stopLoader();
			console.log("The result is:::" + response);
			$("#Loader").css("display", "none");
			$("body").css({ "pointer-events": "auto" });
			response = JSON.parse(response);
			var fileName = response.fileName;
			var result = response.result;
			if (result != null && result.indexOf("successfully") > -1) {
				$("#dialog").html("");
				$("#dialog").dialog("close");
				$("#dialog").dialog("destroy");
				showEtlList('savedConnectionsIconsDiv', 'availableConnections');
				getAvaliableFiles(fileType, 'FILES')

				$("#visionShowFileUploadMsg").html('<p style="color:green">' + result + '</p>');
			} else {
				$("#visionShowFileUploadMsg").html('<p style="color:red">' + result + '</p>');
			}
			$("#importVisualizationDMFile").remove();
			var fileImprtDiv = "<input type='file' name='importVisualizationDMFile'  id='importVisualizationDMFile' class='visionVisualizationDMFilesInput' style='display:none'>";
			$("#visionVisualizationDmFileUpload").parent().append(fileImprtDiv);
		
			console.log("On Complete::");
			// files expand ravi start
			var treeItemElement = globalFileTreeItem[fileType];
			if (treeItemElement != null) {
				var $element = $(treeItemElement);
				var children = $element.find('ul:first').children();
				if (children != null && children.length > 0) {
					$.each(children, function(index) {
						$('#savedConnections').jqxTree('removeItem', this)
					})
					$('#savedConnections').jqxTree('addTo', { label: 'dummy', value: "ajax" }, treeItemElement);
					$('#savedConnections').jqxTree('collapseItem', treeItemElement);
					$('#savedConnections').jqxTree('expandItem', treeItemElement);
				}
			}

		}, error: function(e) {
			console.log("The Error Message is:::" + e.message);
			sessionTimeout(e);
		}
	});

}
function showFileToDxpTableData(tableName,exisFlag) {
	$("#VisualizeBIColumns").css("display", "block");
	$(".visionVisualizeChartTableToggleClass").html("");

	var data = {
		tableName: tableName
	};
	$.ajax({
		url: 'getLoadTableColumns',
		type: "POST",
		data: data,
		traditional: true,
		cache: false,
		async: false,
		success: function(response) {
			stopLoader();
			$("#Loader").css("display", "none");
			$("body").css({ "pointer-events": "auto" });
			if (response != null) {
				leftFileUploadsDivToggle();
				$('.columnsMainDivwrapper').toggleClass('width60');
				$('#dxptableViewDiv').toggleClass('columnBI');
				$('.visualizationMainDivwrapper').toggleClass('width60');
				$('#Visualization').toggleClass('visualBIChart');
				
				var result = response;
				$("#VisualizeBIColumns").append(result);
				if (exisFlag == "Y") {
					$("#Fields").css("display", "none");
				}
				else {
					$("#Fields").css("display", "block");

				}

				$(".VisionImageVisualizationTableClass").unbind().click(function() {
					$(this).parent().parent().find('ul').toggle();
					if ($(this).parent().parent().find('ul').is(":visible")) {

						$(this).css({ transform: "rotate(90deg)" });
					} else {
						$(this).css({ transform: "rotate(360deg)" });
					}
				});
				var tableNameId = "visionVisualizeChartTableToggleClass li";
				$('.' + tableNameId).draggable({//cube changes 
					revert: "invalid",
					helper: "clone"

				});
				
				$(".columnFilterationClass").unbind('keyup').keyup(function(event) {
					tableColumnsFilteration(event, $(this));  
				});
			}

		}, error: function(e) {
			console.log("The Error Message is:::" + e.message);
			sessionTimeout(e);
		}
	});

}
function createFileAsTable(filePath, fileName, tableName) {
	$.ajax({
		url: 'createTableasFile',
		type: "POST",
		dataType: 'json',
		traditional: true,
		cache: false,
		async: false,
		data: {
			filePath: filePath,
			fileName: fileName,
			tableName: tableName
		},
		success: function(response) {
			stopLoader();
			if (response != null) {
				var tablename = response['tableName'];
				var buttons = response['buttons'];
				showFileToDxpTableData(tablename);
				$("#btnGroup").css("display", "block", "!important");
				$("#btnGroup").html(buttons);

			}
		}, error: function(e) {
			console.log("The Error Message is:::" + e.message);
			sessionTimeout(e);
		}
	});

}
function addSlicerValues(count, tableName, columnName, divid) {
	divid = divid.replace("visionVisualizeChart", "visionVisualizeChartId");
	var data = {};
	data['count'] = count;
	data['tableName'] = tableName;
	data['columnName'] = columnName;
	data['divid'] = divid;
	$.ajax({
		url: 'fetchSlicerValues',
		type: "POST",
		data: data,
		dataType: 'json',
		traditional: true,
		cache: false,
		success: function(response) {
			stopLoader();
			$("#Loader").css("display", "none");
			$("body").css({ "pointer-events": "auto" });
			if (response != null && !jQuery.isEmptyObject(response)) {
				var result = response['result'];
				$("#" + divid).html(result);
			}

		}, error: function(e) {
			console.log("The Error Message is:::" + e.message);
			sessionTimeout(e);
		}
	});
}
function getChartDiv(img, chartType, tableName, columnName, cardType) {
	$("#visionVisualizationDataChartcount").show();
	$("#visualizeAreaGirdData").hide();
	$("#visualizeAreaGirdData1").hide();
	$("#alterColumnData").hide();
	$("#visualizeChartConfigJoins").html("");
	var autoSuggChartsSelector = $("#modalFileCharts").children();
	if (!isNullOrUndefined(autoSuggChartsSelector) && autoSuggChartsSelector !== '') {
		var autoSuggestedChartsLen = $(autoSuggChartsSelector).length;
		if (autoSuggestedChartsLen > 1) {
			showAutoSuggChartsSaveDelPopup(img, chartType, tableName, columnName, cardType);
			return;
		}
	}

	switchSmartBiDesignTabs('li_designView', 'visualizeArea');
	var resizableDIv = "<div class='ui-resizable-handle ui-resizable-nw' id='nwgrip'></div>"
		+ "<div class='ui-resizable-handle ui-resizable-ne' id='negrip'></div>"
		+ "<div class='ui-resizable-handle ui-resizable-sw' id='swgrip'></div>"
		+ "<div class='ui-resizable-handle ui-resizable-se' id='segrip'></div>"
		+ "<div class='ui-resizable-handle ui-resizable-n' id='ngrip'></div>"
		+ "<div class='ui-resizable-handle ui-resizable-s' id='sgrip'></div>"
		+ "<div class='ui-resizable-handle ui-resizable-e' id='egrip'></div>"
		+ "<div class='ui-resizable-handle ui-resizable-w' id='wgrip'></div>";
	var childLength = $('#visualizeArea').find("div.ui-resizable-handle").length;
	$("#visionVisualizeSlicerFieldId").hide();
	if (chartType != null && chartType != '' && chartType != undefined && chartType == 'Card') {
		if (childLength > 0) {
			var slicerLength = '';
			var parentDivId = $('#visualizeArea').find("div#nwgrip").parent();
			if (parentDivId != null && parentDivId != '' && parentDivId != undefined) {
				parentDivId = parentDivId[0]['id'];
				slicerLength = $("#" + parentDivId).find(".visionVisualizeHorizontalCardClass").length;
			}
			if (!(slicerLength != null && slicerLength != '' && slicerLength != undefined && slicerLength > 0)) {
				var childId = $('#visualizeArea').find("div#nwgrip").prev("div");
				var imageId = childId[0]['id'];

				var columnDivs = $("#visualizeChartConfigColumns").children();
				$.each(columnDivs, function(index, val) {
					var columnChildDiv = val;
					$('#' + columnChildDiv['id']).hide();
				});
				var parentDiv = $('#visualizeArea').find("div#nwgrip").parent();
				var parentId = parentDiv[0]['id'];
				var chartCount;
				if (parentId != null && parentId != '' && parentId != undefined) {
					chartCount = parentId.replace("visionVisualizeChart", "");
				}
				chartDivObj[parentId] = chartType;
				var chartId = parentId.replace("visionVisualizeChart", "visionVisualizeChartId");
				$("#visionVisualizeChartColumns" + chartCount).show();
				$("#visionVisualizeChartProperties" + chartCount).html(chartFilterConfigObj[chartType]);
				if (jQuery.inArray(parentId, chartDivArr) > -1) {
					getChart(chartId, chartCount, chartType, "", "", "");
				} else {
					$("#" + imageId).html("<img src='images/" + img + "' id ='visionVisualizeChartImageId" + chartCount + "' class='visionVisualChartImageClass'/>");
					var width = $("#visionVisualizeChart" + chartCount).width();
					var height = $("#visionVisualizeChart" + chartCount).height();
					$("#visionVisualizeChartImageId" + chartCount).css("width", (width - 5) + "px");
					$("#visionVisualizeChartImageId" + chartCount).css("height", (height - 5) + "px");
				}

			}
		} else {
			var columnDivs = $("#visualizeChartConfigColumns").children();
			$.each(columnDivs, function(index, val) {
				var columnChildDiv = val;
				$('#' + columnChildDiv['id']).hide();
			});
			chartDivObj["visionVisualizeChart" + count] = chartType;
			var isCardTrend = "";
			if (cardType != null && cardType != '' && cardType != undefined && cardType != 'Normal') {
				isCardTrend = 'Trend';
				}else{
			        isCardTrend = 'NoTrend';		
				}
			var id = "<div id='visionVisualizeChart" + count + "' type='" + chartType + "' cardType='" + cardType + "' cardTrend = '"+isCardTrend+"' class='visionVisualizeChartBoxClass'>"
				+ "<div id='visionVisualizeChartId" + count + "' type='" + chartType + "' count='" + count + "' cardTrend = '"+isCardTrend+"'  class='visionVisualChartBoxClass visionVisualChartBoxSelected'>"
				+ "<img src='images/" + img + "' id ='visionVisualizeChartImageId" + count + "' type='" + chartType + "' class='visionVisualChartImageClass'/></div>"
				+ "<div class='ui-resizable-handle ui-resizable-nw' id='nwgrip'></div>"
				+ "<div class='ui-resizable-handle ui-resizable-ne' id='negrip'></div>"
				+ "<div class='ui-resizable-handle ui-resizable-sw' id='swgrip'></div>"
				+ "<div class='ui-resizable-handle ui-resizable-se' id='segrip'></div>"
				+ "<div class='ui-resizable-handle ui-resizable-n' id='ngrip'></div>"
				+ "<div class='ui-resizable-handle ui-resizable-s' id='sgrip'></div>"
				+ "<div class='ui-resizable-handle ui-resizable-e' id='egrip'></div>"
				+ "<div class='ui-resizable-handle ui-resizable-w' id='wgrip'></div>"
				+ "<div id= chartelements" + count + "' type='" + chartType + "' class='chartelements'>";
			if (cardType != null && cardType != '' && cardType != undefined && cardType != 'Normal') {
				id += "<img src='images/Horizontal_Dots.svg' data-toggle='Card Types' id='visionChartDiv" + count + "'  class='visionVisualizeHorizontalDotsClass' onclick=changeCardTypes(this,'" + cardType + "','" + chartType + "','" + count + "','cardShapes','Trend')  title='Card Types' style='transform: rotate(90deg);'/>";
			}else{
				id += "<img src='images/Horizontal_Dots.svg' data-toggle='Card Types' id='visionChartDiv" + count + "'  class='visionVisualizeHorizontalDotsClass' onclick=changeCardTypes(this,'" + cardType + "','" + chartType + "','" + count + "','cardShapes','NoTrend')  title='Card Types' style='transform: rotate(90deg);'/>";
			}
				id += "<img src='images/Save Icon.svg' data-toggle='Save chart' id='visionChartDiv" + count + "'  class='visionVisualizeHorizontalDotsClass' onclick=saveVisualizationData()  title='Save Chart'/>";
			if (cardType != null && cardType != '' && cardType != undefined && cardType != 'Normal') {
				id += "<img src='images/card_trends_conversion.png' data-toggle='Trend Conversion' id='visionCardTrendLineConversion" + count + "'  class='visionVisualizeHorizontalDotsClass' onclick=changeCardTypes(this,'" + cardType + "','" + chartType + "','" + count + "','cardTrendsConversion')  title='Card Trend Data Conversion'/>";
			}
			id += "<img src='images/cancelAllJobs.svg' data-toggle='Close chart' id='visionChartDiv" + count + "'  class='visionVisualizeHorizontalDotsClass' onclick=closeCardDiv('visionVisualizeChart" + count + "'," + count + ",'" + chartType + "')  title='Close Chart'/>"
				+ "</div>"
				+ "</div>";
			$("#visionVisualizationDataChartViewId").append(id);

			var divid = "<div id='visionVisualizeChartColumns" + count + "' class='visionVisualizeChartColumnsClass'>"
				+ "<div><span class='visionVisualizeChartValues'>Values</span><div id='visionVisualizeCardChartValuesId_" + count + "' class='visionVisualizeChartClass'></div></div>";
			if (cardType != null && cardType != '' && cardType != undefined && cardType != 'Normal') {
				divid += "<div><span class='visionVisualizeChartValues'>Date</span><div id='visionVisualizeCardChartDateValuesId_" + count + "' class='visionVisualizeChartClass'></div></div>"
					+ "<div id='visionVisualizeCardChartDateSelectValuesId_" + count + "' class='visionVisualizeChartClass' style='display:none'></div>";
			}
			divid += "</div>";
			$("#visualizeChartConfigColumns").append(divid);

			var filterDivId = "<div id='visionVisualizeChartFilters" + count + "' class='visionVisualizeChartFiltersClass'>"
				+ "<div id='visionVisualizeChartFiltersField_" + count + "' class='visionVisualizeChartFiltersFieldClass'/>"
				+ "<span class='visionVisualizeChartFiltersFieldSpanClass'>Add Fields Here</span></div>"
				+ "<div id='visionVisualizeChartFiltersValues" + count + "' class='visionVisualizeChartFiltersValuesClass'/></div>"
				+ "</div>";
			$("#visualizeChartConfigFilters").append(filterDivId);
			$("#visionVisualizeChartProperties" + count).unbind('keyup').on('keyup', function(event) {
				clearTimeout(timeOut);
				timeOut = setTimeout(function() {
					var target = event.currentTarget;
					var configTargetId = target['id'];
					var targetCount = configTargetId.replace("visionVisualizeChartProperties", "");
					var valuesTargetId = "visionVisualizeCardChartValuesId_" + targetCount;
					var chartTargetId = "visionVisualizeChartId" + targetCount;
					if ($.trim($("#" + axisTargetId).html()).length > 0 && $.trim($("#" + valuesTargetId).html()).length > 0) {
						var chartTargetType = chartDivObj["visionVisualizeChart" + targetCount];
						if (!(chartTargetType != null && chartTargetType != '' && chartTargetType != undefined)) {
							chartTargetType = chartType;
						}
						getChart(chartTargetId, targetCount, chartTargetType, "", "", "", "TestingCheck");
					}

				}, 3000);
			});

			$('#visionVisualizeChart' + count).resizable({
				handles: {
					'nw': '#nwgrip',
					'ne': '#negrip',
					'sw': '#swgrip',
					'se': '#segrip',
					'n': '#ngrip',
					'e': '#egrip',
					's': '#sgrip',
					'w': '#wgrip'
				}, resize: function(event, ui) {
					var uiId = ui.element[0]['id'];
					var width = $("#" + uiId).width();
					var height = $("#" + uiId).height();
					$("#" + uiId).find(".visionVisualChartBoxClass").css("width", (width - 5) + "px");
					$("#" + uiId).find(".visionVisualChartBoxClass").css("height", (height - 16) + "px");
					$("#" + uiId).find(".visionVisualizeChartIconsClass").css("width", (width - 5) + "px");
					$("#" + uiId).find(".visionVisualizeChartIconsClass").css("height", 16 + "px");
				},
				stop: function(event, ui) {
					var uiId = ui.element[0]['id'];
					$(".ui-resizable-handle").remove();
					$("#" + uiId).append(resizableDIv);
					$('#' + uiId).resizable({
						handles: {
							'nw': '#nwgrip',
							'ne': '#negrip',
							'sw': '#swgrip',
							'se': '#segrip',
							'n': '#ngrip',
							'e': '#egrip',
							's': '#sgrip',
							'w': '#wgrip'
						}
					});
					$('#' + uiId).draggable({
						revert: "invalid",
						containment: "#visualizeArea"
					});
				}
			});
			$('#visionVisualizeChart' + count).draggable({
				containment: "#visualizeArea",
				revert: "invalid",
			});
			$("#visionVisualizeTableName" + count).remove();
			$("#visionVisualizeColumnName" + count).remove();
			var hiddenFields = "<input type='hidden' id='visionVisualizeTableName" + count + "' value='" + tableName + "'/>"
				+ "<input type='hidden' id='visionVisualizeColumnName" + count + "' value='" + columnName + "'/>";
			$("#VisualizePageBody").append(hiddenFields);
			var width = $("#visionVisualizeChart" + count).width();
			var height = $("#visionVisualizeChart" + count).height();
			//$("#visionVisualizeChartId" + count).css("width", (width - 10) + "px");
			//$("#visionVisualizeChartId" + count).css("height", (height - 20) + "px");
			$("#visionVisualizeChartImageId" + count).css("width", (width - 5) + "px");
			$("#visionVisualizeChartImageId" + count).css("height", (height - 5) + "px");

			$("#visualizeChartConfigProperties").hide();
			$("#visualizeChartConfigFilters").hide();
			$("#visualizeChartConfigColumns").show();
			$("#visionVisualizeChartColumns" + count).show();
			$("#visionVisualizeConfig").find('li.visionVisualizeConfigActiveClass').removeClass('visionVisualizeConfigActiveClass');
			$("#visionVisualizeFields").addClass('visionVisualizeConfigActiveClass');


			count++;
		}
	} else if (chartType != null && chartType != '' && chartType != undefined && chartType == 'Slicer') {
		if (childLength > 0) {

			var slicerLength = '';
			var parentDivId = $('#visualizeArea').find("div#nwgrip").parent();
			if (parentDivId != null && parentDivId != '' && parentDivId != undefined) {
				parentDivId = parentDivId[0]['id'];
				slicerLength = $("#" + parentDivId).find(".visionVisualizeHorizontalDotsClass").length;
			}
			if (slicerLength != null && slicerLength != '' && slicerLength != undefined && slicerLength > 0) {
				var parentDiv = $('#visualizeArea').find("div#nwgrip").parent();
				var parentId = parentDiv[0]['id'];
				var chartCount;
				if (parentId != null && parentId != '' && parentId != undefined) {
					chartCount = parentId.replace("visionVisualizeChart", "");
				}
				addSlicerValues(chartCount, tableName, columnName, parentId);
				$("#visionVisualizeTableName" + chartCount).remove();
				$("#visionVisualizeColumnName" + chartCount).remove();
				var hiddenFields = "<input type='hidden' id='visionVisualizeTableName" + chartCount + "' value='" + tableName + "'/>"
					+ "<input type='hidden' id='visionVisualizeColumnName" + chartCount + "' value='" + columnName + "'/>";
				$("#VisualizePageBody").append(hiddenFields);
				var width = $("#visionVisualizeChart" + chartCount).width();
				var height = $("#visionVisualizeChart" + chartCount).height();
				$("#visionVisualizeChartId" + chartCount).css("width", (width - 10) + "px");
				$("#visionVisualizeChartId" + chartCount).css("height", (height - 20) + "px");
			} else {
				$("#Loader").css("display", "none");
				$("body").css({ "pointer-events": "auto" });
			}
		} else {
			var id = "<div id='visionVisualizeChart" + count + "' type='" + chartType + "' class='visionVisualizeChartBoxClass'>"
				+ "<div id='visionVisualizeChartIcons" + count + "' class='visionVisualizeChartIconsClass'>"
				+ "<img src='images/Horizontal_Dots.svg'  class='visionVisualizeHorizontalDotsClass'/>"
				+ "<div id='visionVisualizeDashBoardIcons" + count + "' class='visionVisualizeDashBoardIconsClass'></div></div>"
				+ "<div id='visionVisualizeChartId" + count + "' class='visionVisualChartBoxClass'></div>"
				+ "<div class='ui-resizable-handle ui-resizable-nw' id='nwgrip'></div>"
				+ "<div class='ui-resizable-handle ui-resizable-ne' id='negrip'></div>"
				+ "<div class='ui-resizable-handle ui-resizable-sw' id='swgrip'></div>"
				+ "<div class='ui-resizable-handle ui-resizable-se' id='segrip'></div>"
				+ "<div class='ui-resizable-handle ui-resizable-n' id='ngrip'></div>"
				+ "<div class='ui-resizable-handle ui-resizable-s' id='sgrip'></div>"
				+ "<div class='ui-resizable-handle ui-resizable-e' id='egrip'></div>"
				+ "<div class='ui-resizable-handle ui-resizable-w' id='wgrip'></div>"
				+ "</div>";
			$("#visionVisualizationDataChartViewId").append(id);
			$('#visionVisualizeChart' + count).resizable({
				handles: {
					'nw': '#nwgrip',
					'ne': '#negrip',
					'sw': '#swgrip',
					'se': '#segrip',
					'n': '#ngrip',
					'e': '#egrip',
					's': '#sgrip',
					'w': '#wgrip'
				}, resize: function(event, ui) {
					var uiId = ui.element[0]['id'];
					var width = $("#" + uiId).width();
					var height = $("#" + uiId).height();
					$("#" + uiId).find(".visionVisualChartBoxClass").css("width", (width - 5) + "px");
					$("#" + uiId).find(".visionVisualChartBoxClass").css("height", (height - 16) + "px");
					$("#" + uiId).find(".visionVisualizeChartIconsClass").css("width", (width - 5) + "px");
					$("#" + uiId).find(".visionVisualizeChartIconsClass").css("height", 16 + "px");
				},
				stop: function(event, ui) {
					var uiId = ui.element[0]['id'];
					$(".ui-resizable-handle").remove();
					$("#" + uiId).append(resizableDIv);
					$('#' + uiId).resizable({
						handles: {
							'nw': '#nwgrip',
							'ne': '#negrip',
							'sw': '#swgrip',
							'se': '#segrip',
							'n': '#ngrip',
							'e': '#egrip',
							's': '#sgrip',
							'w': '#wgrip'
						}
					});
					$('#' + uiId).draggable({
						revert: "invalid",
						containment: "#visualizeArea"
					});
				}
			});
			$('#visionVisualizeChart' + count).draggable({
				containment: "#visualizeArea",
				revert: "invalid",
			});
			var slicerId = 'visionVisualizeChart' + count;
			addSlicerValues(count, tableName, columnName, slicerId);
			$("#visionVisualizeTableName" + count).remove();
			$("#visionVisualizeColumnName" + count).remove();
			var hiddenFields = "<input type='hidden' id='visionVisualizeTableName" + count + "' value='" + tableName + "'/>"
				+ "<input type='hidden' id='visionVisualizeColumnName" + count + "' value='" + columnName + "'/>";
			$("#VisualizePageBody").append(hiddenFields);
			var width = $("#visionVisualizeChart" + count).width();
			var height = $("#visionVisualizeChart" + count).height();
			$("#visionVisualizeChartId" + count).css("width", (width - 10) + "px");
			$("#visionVisualizeChartId" + count).css("height", (height - 20) + "px");
			count++;
		}
		$("#" + slicerId).click(function(event) {
			var callflag = false;
			var valesArr = []
			$("#" + slicerId).find('input[type="checkbox"]:checked').each(function() {
				callflag = true;
				var value = $(this).val();
				valesArr.push(value);
			});
			if ($(event.target).hasClass("visionVisualizeChartSlicersButtons")) {
				callflag = true;
				var value = $(event.target).val();
				valesArr.push(value);
			}
			if (callflag) {
				filterData("visionVisualizationDataChartViewId", valesArr, tableName);
			}

		})
	} else {
		if (childLength > 0) {
			var slicerLength = '';
			var CardLength = '';
			var parentDivId = $('#visualizeArea').find("div#nwgrip").parent();
			if (parentDivId != null && parentDivId != '' && parentDivId != undefined) {
				parentDivId = parentDivId[0]['id'];
				slicerLength = $("#" + parentDivId).find(".visionVisualizeHorizontalDotsClass").length;
				// CardLength = $("#" + parentDivId).find(".visionVisualizeHorizontalCardClass").length;
			}
			if (!(CardLength != null && CardLength != '' && CardLength != undefined && CardLength > 0)) {
				var childId = $('#visualizeArea').find("div#nwgrip").parent();
				var imageId = childId[0]['id'];

				var columnDivs = $("#visualizeChartConfigColumns").children();
				$.each(columnDivs, function(index, val) {
					var columnChildDiv = val;
					$('#' + columnChildDiv['id']).hide();
				});
				var parentDiv = $('#visualizeArea').find("div#nwgrip").parent();
				var parentId = parentDiv[0]['id'];
				var chartCount;
				if (parentId != null && parentId != '' && parentId != undefined) {
					chartCount = parentId.replace("visionVisualizeChart", "");
				}
				chartDivObj[parentId] = chartType;
				var chartId = parentId.replace("visionVisualizeChart", "visionVisualizeChartId");
				$("#visionVisualizeChartColumns" + chartCount).show();
				$("#visionVisualizeChartProperties" + chartCount).html(chartFilterConfigObj[chartType]);
				$("#visionVisualizeChartProperties" + chartCount).attr('data-charttype', chartType);
				if (jQuery.inArray(parentId, chartDivArr) > -1) {
					$("#visionVisualizeChart" + chartCount).attr("type", chartType);
					$("#visionVisualizeChartId" + chartCount).attr("type", chartType);
					changeElementsId(chartCount, chartType);
					getChart(chartId, chartCount, chartType, "", "", "");
				} else {
					$("#visionVisualizeChartId" + chartCount).html("<img src='images/" + img + "' id ='visionVisualizeChartImageId" + chartCount + "' class='visionVisualChartImageClass'/>");
					var divid = "";
					if (chartType != null && chartType != '' && chartType == 'indicator') {
						divid = "<div id='visionVisualizeChartColumns" + count + "' class='visionVisualizeChartColumnsClass'>"
							+ "<div><span class='visionVisualizeChartValues'>Values</span><div id='visionVisualizeChartValuesId_" + count + "' class='visionVisualizeChartClass'></div></div>"
							+ "</div>";
					} else if (chartType != null && chartType != '' && chartType == 'BarAndLine') {
						divid = "<div id='visionVisualizeChartColumns" + count + "' class='visionVisualizeChartColumnsClass'>"
							+ "<div><span class='visionVisualizeChartAxis'>Axis</span><div id='visionVisualizeChartAxisId_" + count + "' class='visionVisualizeChartClass'></div></div>"
							+ "<div><span class='visionVisualizeChartValues'>Bar Values</span><div id='visionVisualizeChartValuesId_" + count + "' class='visionVisualizeChartClass'></div></div>"
							+ "<div><span class='visionVisualizeChartComboValues'>Line Values</span><div id='visionVisualizeChartComboValuesId_" + count + "' class='visionVisualizeChartClass'></div></div>"
							+ "</div>";
					} else if (chartType != null && chartType != '' && chartType == 'boxplot') {
						divid = "<div id='visionVisualizeChartColumns" + count + "' class='visionVisualizeChartColumnsClass'>"
							+ "<div><span class='visionVisualizeChartAxis'>Axis</span><div id='visionVisualizeChartAxisId_" + count + "' class='visionVisualizeChartClass'></div></div>"
							+ "<div><span class='visionVisualizeChartValues'>Values</span><div id='visionVisualizeChartValuesId_" + count + "' class='visionVisualizeChartClass'></div></div>"
							+ "<div><span class='visionVisualizeChartComboValues'>Duartion</span><div id='visionVisualizeChartComboValuesId_" + count + "' class='visionVisualizeChartClass'></div></div>"
							+ "</div>";
					}else if (chartType != null && chartType != '' && chartType == 'ganttChart') {
						divid = "<div id='visionVisualizeChartColumns" + count + "' class='visionVisualizeChartColumnsClass'>"
							+ "<div><span class='visionVisualizeChartAxis'>Task Name</span><div id='visionVisualizeChartAxisId_" + count + "' class='visionVisualizeChartClass'></div></div>"
							+ "<div><span class='visionVisualizeChartValues'>From Date</span><div id='visionVisualizeChartValuesId_" + count + "' class='visionVisualizeChartClass'></div></div>"
							+ "<div><span class='visionVisualizeChartComboValues'>To Date</span><div id='visionVisualizeChartComboValuesId_" + count + "' class='visionVisualizeChartClass'></div></div>"
							+ "<div><span class='visionVisualizeChartPercentValues'>Completed %</span><div id='visionVisualizeChartPercentValuesId_" + count + "' class='visionVisualizeChartClass'></div></div>"
							+ "</div>";
					}
					 else {
						divid = "<div id='visionVisualizeChartColumns" + count + "' class='visionVisualizeChartColumnsClass'>"
							+ "<div><span class='visionVisualizeChartAxis'>Axis</span><div id='visionVisualizeChartAxisId_" + count + "' class='visionVisualizeChartClass'></div></div>"
							+ "<div><span class='visionVisualizeChartValues'>Values</span><div id='visionVisualizeChartValuesId_" + count + "' class='visionVisualizeChartClass'></div></div>";
						divid += "</div>";
					}
					$("#visionVisualizeChartColumns" + chartCount).html(divid);
					var width = $("#visionVisualizeChart" + chartCount).width();
					var height = $("#visionVisualizeChart" + chartCount).height();
					$("#visionVisualizeChart" + chartCount).attr("type", chartType);
					$("#visionVisualizeChartId" + chartCount).attr("type", chartType);
					$("#visionVisualizeChartImageId" + chartCount).css("width", (width - 5) + "px");
					$("#visionVisualizeChartImageId" + chartCount).css("height", (height - 5) + "px");

				}

			}

		} else {
			var columnDivs = $("#visualizeChartConfigColumns").children();
			$.each(columnDivs, function(index, val) {
				var columnChildDiv = val;
				$('#' + columnChildDiv['id']).hide();
			});
			chartDivObj["visionVisualizeChart" + count] = chartType;
			var id = "<div id='visionVisualizeChart" + count + "' type='" + chartType + "' class='visionVisualizeChartBoxClass' >"
				+ "<div id='visionVisualizeChartId" + count + "' type='" + chartType + "' count='" + count + "' class='visionVisualChartBoxClass visionVisualChartBoxSelected' >"
				+ "<img src='images/" + img + "' id ='visionVisualizeChartImageId" + count + "' type='" + chartType + "' class='visionVisualChartImageClass'/></div>"
				+ "<div class='ui-resizable-handle ui-resizable-nw' id='nwgrip'></div>"
				+ "<div class='ui-resizable-handle ui-resizable-ne' id='negrip'></div>"
				+ "<div class='ui-resizable-handle ui-resizable-sw' id='swgrip'></div>"
				+ "<div class='ui-resizable-handle ui-resizable-se' id='segrip'></div>"
				+ "<div class='ui-resizable-handle ui-resizable-n' id='ngrip'></div>"
				+ "<div class='ui-resizable-handle ui-resizable-s' id='sgrip'></div>"
				+ "<div class='ui-resizable-handle ui-resizable-e' id='egrip'></div>"
				+ "<div class='ui-resizable-handle ui-resizable-w' id='wgrip'></div>"
				+ "<div id= chartelements" + count + "' type='" + chartType + "' class='chartelements'>"
				+ "<div id='dxpFilterPopOver" + count + "' > "
				+ "<div id='filterDxpResults" + count + "'>"
				+ "</div></div>"
				//+ "<img src='images/Plus_Blue_Icon.svg' data-toggle='popover' id='chartelement" + count + "'  class='visionVisualizeHorizontalDotsClass' onclick=searchElement('visionVisualizeChart" + count + "'," + count + ",'" + chartType + "')  title='chart elements'/>"
				+ "<img src='images/cancelAllJobs.svg' data-toggle='Close chart' id='visionChartDiv" + count + "'  class='visionVisualizeHorizontalDotsClass' onclick=closeChartDiv('visionVisualizeChart" + count + "'," + count + ",'" + chartType + "')  title='Close Chart'/>"
				+ "<img src='images/Save Icon.svg' data-toggle='Save chart' id='visionChartDiv" + count + "'  class='visionVisualizeHorizontalDotsClass' onclick=saveVisualizationData()  title='Save Chart'/>"
				+ "<img src='images/money-exchange.png' data-toggle='Currency Conversion' id='currencyConversion" + count + "'  class='visionVisualizeHorizontalDotsClass' onclick=showCurrencyConversionPopup('visionVisualizeChartId" + count + "'," + count + ",'" + chartType + "') title='Currency Converter'/>"
				+ "<div id='dxpFilterPopOver2'> "
				+ "<div id='filterDxpResult2'>"
				+ "</div>";
			$("#visionVisualizationDataChartViewId").append(id);

			var divid = "";
			if (chartType != null && chartType != '' && chartType == 'indicator') {
				divid = "<div id='visionVisualizeChartColumns" + count + "' class='visionVisualizeChartColumnsClass'>"
					+ "<div><span class='visionVisualizeChartValues'>Values</span><div id='visionVisualizeChartValuesId_" + count + "' class='visionVisualizeChartClass'></div></div>"
					+ "</div>";
			} else if (chartType != null && chartType != '' && chartType == 'BarAndLine') {
				divid = "<div id='visionVisualizeChartColumns" + count + "' class='visionVisualizeChartColumnsClass'>"
					+ "<div><span class='visionVisualizeChartAxis'>Axis</span><div id='visionVisualizeChartAxisId_" + count + "' class='visionVisualizeChartClass'></div></div>"
					+ "<div><span class='visionVisualizeChartValues'>Bar Values</span><div id='visionVisualizeChartValuesId_" + count + "' class='visionVisualizeChartClass'></div></div>"
					+ "<div><span class='visionVisualizeChartComboValues'>Line Values</span><div id='visionVisualizeChartComboValuesId_" + count + "' class='visionVisualizeChartClass'></div></div>"
					+ "</div>";
			} else if (chartType != null && chartType != '' && chartType == 'boxplot') {
				divid = "<div id='visionVisualizeChartColumns" + count + "' class='visionVisualizeChartColumnsClass'>"
					+ "<div><span class='visionVisualizeChartAxis'>Axis</span><div id='visionVisualizeChartAxisId_" + count + "' class='visionVisualizeChartClass'></div></div>"
					+ "<div><span class='visionVisualizeChartValues'>Values</span><div id='visionVisualizeChartValuesId_" + count + "' class='visionVisualizeChartClass'></div></div>"
					+ "<div><span class='visionVisualizeChartComboValues'>Duartion</span><div id='visionVisualizeChartComboValuesId_" + count + "' class='visionVisualizeChartClass'></div></div>"
					+ "</div>";
			}else if (chartType != null && chartType != '' && chartType == 'ganttChart') {
						divid = "<div id='visionVisualizeChartColumns" + count + "' class='visionVisualizeChartColumnsClass'>"
							+ "<div><span class='visionVisualizeChartAxis'>Task Name</span><div id='visionVisualizeChartAxisId_" + count + "' class='visionVisualizeChartClass'></div></div>"
							+ "<div><span class='visionVisualizeChartValues'>From Date</span><div id='visionVisualizeChartValuesId_" + count + "' class='visionVisualizeChartClass'></div></div>"
							+ "<div><span class='visionVisualizeChartComboValues'>To Date</span><div id='visionVisualizeChartComboValuesId_" + count + "' class='visionVisualizeChartClass'></div></div>"
							+ "<div><span class='visionVisualizeChartPercentValues'>Completed %</span><div id='visionVisualizeChartPercentValuesId_" + count + "' class='visionVisualizeChartClass'></div></div>"
							+ "</div>";
		   } else {
				divid = "<div id='visionVisualizeChartColumns" + count + "' class='visionVisualizeChartColumnsClass'>"
					+ "<div><span class='visionVisualizeChartAxis'>Axis</span><div id='visionVisualizeChartAxisId_" + count + "' class='visionVisualizeChartClass'></div></div>"
					+ "<div><span class='visionVisualizeChartValues'>Values</span><div id='visionVisualizeChartValuesId_" + count + "' class='visionVisualizeChartClass'></div></div>";
				divid += "</div>";
			}
			$("#visualizeChartConfigColumns").append(divid);

			var filterDivId = "<div id='visionVisualizeChartFilters" + count + "' class='visionVisualizeChartFiltersClass'>"
				+ "<div id='visionVisualizeChartFiltersField_" + count + "' class='visionVisualizeChartFiltersFieldClass'/>"
				+ "<span class='visionVisualizeChartFiltersFieldSpanClass'>Add Fields Here</span></div>"
				+ "<div id='visionVisualizeChartFiltersValues" + count + "' class='visionVisualizeChartFiltersValuesClass'/></div>"
				+ "</div>";
			$("#visualizeChartConfigFilters").append(filterDivId);

			var chartConfigProps = "<div id= 'visionVisualizeChartProperties" + count + "' class='visionVisualizeChartPropConfigClass visionVisualizeChartPropConfigClassEcharts' data-chartType='" + chartType + "'>" + chartFilterConfigObj[chartType] + "</div>";
			$("#visualizeChartConfigProperties").append(chartConfigProps);
			changeElementsId(count, chartType);
			var chartConfigJoin = "<div id='visionVisualizeChartJoins" + count + "' class='visionVisualizeChartPropJoinsClass'>"
				+ "<div id='visionVisualizeCOnfigJoinImageDIv" + count + "' class='visionVisualizeCOnfigJoinImageDIvClass'>"
				+ "<img src='images/mapping.svg' class='visionVisualizeJoinImageClass' onclick=\"showDxpJoinsPopup('visionVisualizeChartId" + count + "','" + count + "','" + chartType + "')\" title='click to show Join'/></div>"
				+ "<div id='visionVisualizeConfigJoinQuery" + count + "' class='visionVisualizeConfigJoinQueryClass'></div></div>"
			$("#visualizeChartConfigJoins").append(chartConfigJoin);
			// var timeOut = null;
			$("#visionVisualizeChartProperties" + count).unbind('keyup').on('keyup', function(event) {
				clearTimeout(timeOut);
				timeOut = setTimeout(function() {
					var target = event.currentTarget;
					var configTargetId = target['id'];
					var paramsObjet = getParamsToSendToGetChart(configTargetId, chartType);
					var chartTargetId = paramsObjet['chartTargetId'];
					var targetCount = paramsObjet['targetCount'];
					var chartTargetType = paramsObjet['chartTargetType'];
					getChart(chartTargetId, targetCount, chartTargetType, "", "", "", "TestingCheck");
				}, 3000);
			});
			$("#visionVisualizeChartProperties" + count).unbind('change').on('change', function(event) {
				var target = event.currentTarget;
				var configTargetId = target['id'];
				var paramsObjet = getParamsToSendToGetChart(configTargetId, chartType);
				var chartTargetId = paramsObjet['chartTargetId'];
				var targetCount = paramsObjet['targetCount'];
				var chartTargetType = paramsObjet['chartTargetType'];
				getChart(chartTargetId, targetCount, chartTargetType, "", "", "", "TestingCheck");
			});
			$('#visionVisualizeChart' + count).resizable({
				handles: {
					'nw': '#nwgrip',
					'ne': '#negrip',
					'sw': '#swgrip',
					'se': '#segrip',
					'n': '#ngrip',
					'e': '#egrip',
					's': '#sgrip',
					'w': '#wgrip'
				}, resize: function(event, ui) {
					var uiId = ui.element[0]['id'];
					var width = $("#" + uiId).width();
					var height = $("#" + uiId).height();
					$("#" + uiId).find(".visionVisualChartImageClass").css("width", (width - 5) + "px");
					$("#" + uiId).find(".visionVisualChartImageClass").css("height", (height - 5) + "px");

				},
				stop: function(event, ui) {
					var uiId = ui.element[0]['id'];
					$(".ui-resizable-handle").remove();
					$("#" + uiId).append(resizableDIv);
					$('#' + uiId).resizable({
						handles: {
							'nw': '#nwgrip',
							'ne': '#negrip',
							'sw': '#swgrip',
							'se': '#segrip',
							'n': '#ngrip',
							'e': '#egrip',
							's': '#sgrip',
							'w': '#wgrip'
						}
					});
					$('#' + uiId).draggable({
						revert: "invalid",
						containment: "#visualizeArea"
					});
				}
			});
			$('#visionVisualizeChart' + count).draggable({
				containment: "#visualizeArea",
				revert: "invalid",

			});
			var width = $("#visionVisualizeChart" + count).width();
			var height = $("#visionVisualizeChart" + count).height();
			$("#visionVisualizeChartImageId" + count).css("width", (width - 5) + "px");
			$("#visionVisualizeChartImageId" + count).css("height", (height - 5) + "px");
			$("#visualizeChartConfigProperties").hide();
			$("#visualizeChartConfigFilters").hide();
			$("#visualizeChartConfigJoins").hide();

			$("#visualizeChartConfigColumns").show();
			$("#visionVisualizeChartColumns" + count).show();
			$("#visionVisualizeConfig").find('li.visionVisualizeConfigActiveClass').removeClass('visionVisualizeConfigActiveClass');
			$("#visionVisualizeFields").addClass('visionVisualizeConfigActiveClass');

			count++;
		}
	}
	$('[id^="visionVisualizeChartButtons"]').click(function(event) {

		var target = event.currentTarget;
		var divId = target['id'];
		if (divId != null && divId != '' && divId != undefined) {
			divId = divId.replace("visionVisualizeChartButtons", "");
		}
		var div = "<li onclick=chartOptions('Remove','" + divId + "')>Remove</li>"
		$("#jqxMenu").remove();
		$('body').append("<div id='jqxMenu'><ul></ul></div>");
		$("#jqxMenu ul").html(div);
		var contextMenu = $("#jqxMenu").jqxMenu({ width: '90px', height: 35 + 'px', autoOpenPopup: false, mode: 'popup' });
		contextMenu.jqxMenu('open', parseInt(event.clientX) + 5, parseInt(event.clientY) + 5);
		return false;
	});
	$('[id^="visionVisualizeChartIcons"]').click(function(event) {

		var target = event.currentTarget;
		var id = target['id'];
		var divId = $("#" + id).find("div.visionVisualizeDashBoardIconsClass").attr('id');
		if (divId != null && divId != '' && divId != undefined) {
			divId = divId.replace("visionVisualizeDashBoardIcons", "");
		}
		var div = "<li onclick=convertOptions('Buttons','" + divId + "')>Buttons</li>"
			+ "<li onclick=convertOptions('List','" + divId + "')>List</li>"
			+ "<li onclick=convertOptions('Dropdown','" + divId + "')>Dropdown</li>"
			+ "<li onclick=convertOptions('Remove','" + divId + "')>Remove</li>";
		$("#jqxMenu").remove();
		$('body').append("<div id='jqxMenu'><ul></ul></div>");
		$("#jqxMenu ul").html(div);
		var contextMenu = $("#jqxMenu").jqxMenu({ width: '90px', height: 115 + 'px', autoOpenPopup: false, mode: 'popup' });
		contextMenu.jqxMenu('open', parseInt(event.clientX) + 5, parseInt(event.clientY) + 5);
		return false;
	});
	$('#visualizeArea').mousedown(function(event) {
		if ($(event.target).parents('div.visionVisualizeChartBoxClass').length > 0 || $(event.target).hasClass('visionVisualizeChartBoxClass')) {
			var id = $(event.target).parents("div.visionVisualizeChartBoxClass").attr('id');
			var childDivid = $(event.target).parents("div.visionVisualChartBoxClass").attr('id');
			if (!(childDivid != null && childDivid != '' && childDivid != undefined)) {
				childDivid = $(event.target).attr('id');
			}

			$(".visionVisualChartBoxClass").removeClass("visionVisualChartBoxSelected");
			$("#" + childDivid).addClass("visionVisualChartBoxSelected");
			var spanclass = $(event.target).parents("span.visionVisualizeCardLevelSpanClass").attr('id');
			if (!(id != null && id != '' && id != undefined)) {
				id = $(event.target).attr('id');
			}
			//            $("#" + id).find(".visionVisualizeCardLevelSpanClass").attr("contenteditable", "true");
			var length = $("#" + id).find(".ui-resizable-handle").length;
			if (length <= 0) {
				$(".ui-resizable-handle").remove();

				if ($("#" + id).find(".visionVisualizeHorizontalDotsClass").length > 0) {
					$("#visualizeArea").find(".visionVisualizeHorizontalDotsClass").hide();
					$("#" + id).find(".visionVisualizeHorizontalDotsClass").show();
					$("#" + id).removeClass('visionVisualizeChartBorderRemoveClass');
				}
				$("#" + id).append(resizableDIv);
				$(".chartelements").show();
				$(".visionVisualizationDataChartViewCLass").css("column-gap", "40px");
				$('#' + id).resizable({
					handles: {
						'nw': '#nwgrip',
						'ne': '#negrip',
						'sw': '#swgrip',
						'se': '#segrip',
						'n': '#ngrip',
						'e': '#egrip',
						's': '#sgrip',
						'w': '#wgrip'
					}, resize: function(event, ui) {
						var uiId = ui.element[0]['id'];
						var width = $("#" + uiId).width();
						var height = $("#" + uiId).height();

						if ($("#" + uiId).find(".visionVisualizeChartIconsClass").length > 0) {
							$("#" + uiId).find(".visionVisualChartBoxClass").css("width", (width - 5) + "px");
							$("#" + uiId).find(".visionVisualChartBoxClass").css("height", (height - 16) + "px");
							$("#" + uiId).find(".visionVisualizeChartIconsClass").css("width", (width - 5) + "px");
							$("#" + uiId).find(".visionVisualizeChartIconsClass").css("height", 16 + "px");
						} else {
							$("#" + uiId).find(".visionVisualChartImageClass").css("width", (width - 5) + "px");
							$("#" + uiId).find(".visionVisualChartImageClass").css("height", (height - 5) + "px");

						}

					}, stop: function(event, ui) {
						var uiId = ui.element[0]['id'];
						$(".ui-resizable-handle").remove();
						$("#" + uiId).append(resizableDIv);
						$('#' + uiId).resizable({
							handles: {
								'nw': '#nwgrip',
								'ne': '#negrip',
								'sw': '#swgrip',
								'se': '#segrip',
								'n': '#ngrip',
								'e': '#egrip',
								's': '#sgrip',
								'w': '#wgrip'
							}
						});
						$('#' + uiId).draggable({
							revert: "invalid",
							containment: "#visualizeArea"
						});
					}
				});
				var columnDivs = $("#visualizeChartConfigColumns").children();
				$.each(columnDivs, function(index, val) {
					var columnChildDiv = val;
					$('#' + columnChildDiv['id']).hide();
				});
				var chartCount;
				if (id != null && id != '' && id != undefined) {
					chartCount = id.replace("visionVisualizeChart", "");
				}
				$("#visualizeChartConfigProperties").hide();
				$("#visualizeChartConfigFilters").hide();
				$("#visualizeChartConfigColumns").show();
				$("#visionVisualizeChartColumns" + chartCount).show();
				$("#visionVisualizeConfig").find('li.visionVisualizeConfigActiveClass').removeClass('visionVisualizeConfigActiveClass');
				$("#visionVisualizeFields").addClass('visionVisualizeConfigActiveClass');

			}
			chartType = chartDivObj[id];
			//			return false;
		} else {

			if ($("#visualizeArea").find(".visionVisualizeChartIconsClass").length > 0) {
				var parentDivId = $("#visualizeArea").find(".visionVisualizeChartIconsClass").parent();
				$.each(parentDivId, function(index, val) {
					$('#' + val['id']).addClass('visionVisualizeChartBorderRemoveClass');
				});
				$("#visualizeArea").find(".visionVisualizeHorizontalDotsClass").hide();
			}
			$(event.target).find('.visionVisualChartBoxSelected').removeClass("visionVisualChartBoxSelected");
			$(".ui-resizable-handle").remove();
			$(".chartelements").hide();
			$(".visionVisualizationDataChartViewCLass").css("column-gap", "40px");
		}

	});
	$('[id^="visionVisualizeChartFiltersField"]').droppable({//filters field
		revert: "invalid",
		refreshPositions: true,
		cursor: 'move',
		drop: function(event, ui) {
			if ($("#" + this.id).is(':visible')) {
				var id = ui.draggable[0].id;
				var label = ui.draggable[0].innerText;
				if (id != null && id != '' && id != undefined) {
					id = id.replace("_" + label, "");
				}
				var divid = this.id;
				if (divid != null && divid != '' && divid != undefined) {
					var count = divid.split("_")[1];
					$("#Loader").css("display", "block");
					$("body").css({ "pointer-events": "auto" });
					var chartTargetType = chartDivObj["visionVisualizeChart" + count];
					if (!(chartTargetType != null && chartTargetType != '' && chartTargetType != undefined)) {
						chartTargetType = chartType;
					}
					addFilterValues(count, id, label, divid, filterCount, chartTargetType);
					filterCount++;
				}
			}
		}

	});

	$('[id^="visionVisualizeChartAxisId"]').droppable({//cube changes
		revert: "invalid",
		refreshPositions: true,
		cursor: 'move',
		drop: function(event, ui) {
			if ($("#" + this.id).is(':visible')) {
				var id = ui.draggable[0].id;
				var label = ui.draggable[0].innerText;
				if (id != null && id != '' && id != undefined) {
					id = id.replace("_" + label, "");
				}
				var divid = this.id;
				if (divid != null && divid != '' && divid != undefined) {
					var count = divid.split("_")[1];
					var valueId = "visionVisualizeChartValuesId_" + count;
					var columnName = ui.draggable[0].innerText;
					var chartId = "visionVisualizeChartId" + count;
					var columnId = "COLUMN_" + id + '_' + columnName + "";
					var columnData = '<div id="COLUMN_' + id + "_" + columnName + '" class="visualizeDivData"' //group
						+ ' title="' + columnName + '" data-table-name="' + id + '" '
						+ ' data-column-name="' + id + "." + columnName + '" ><span class="visionColsText" >' + columnName
						+ '</span><img src="images/close_white.png" title="Remove Column"'
						+ ' onclick="removeColumn(this,' + columnId + ',' + chartId + ')" class="visionCloseColumnBtn" style="display: inline;">'
						+ '</div>';
					$("#" + this.id).append(columnData);
					if ($.trim($("#" + valueId).html()).length > 0) {
						getChart(chartId, count, chartType, "", "", "");
					}
				}
			}
		}

	});
	$('[id^="visionVisualizeChartValuesId"]').droppable({
		revert: "invalid",
		refreshPositions: true,
		cursor: 'move',
		drop: function(event, ui) {
			if ($("#" + this.id).is(':visible')) {
				var id = ui.draggable[0].id;
				var label = ui.draggable[0].innerText;
				if (id != null && id != '' && id != undefined) {
					id = id.replace("_" + label, "");
				}
				var divid = this.id;
				if (divid != null && divid != '' && divid != undefined) {
					var count = divid.split("_")[1];
					var axisId = "visionVisualizeChartAxisId_" + count;
					var chartId = "visionVisualizeChartId" + count;
					var columnName = ui.draggable[0].innerText;
					var columnId = "COLUMN_" + id + '_' + columnName + count + "";
					var columnData = '<div id="COLUMN_' + id + "_" + columnName + count + '" class="visualizeDivData"' //group
						+ ' title="' + columnName + '" data-table-name="' + id + '" '
						+ ' data-column-name="' + id + "." + columnName + '" ><span class="visionColsText" >' + columnName
						+ '</span><img src="images/Horizontal_Dots.svg" title="Aggregate Functions"'
						+ ' onclick=getAggregateFunctions(this,\'' + columnId + '\',\'' + chartId + '\',' + count + ',\'' + columnName + '\',\'' + id + '\') class="visionAggregateColumnBtn" style="display: inline; "><img src="images/close_white.png" title="Remove Column"'
						+ ' onclick="removeColumn(this,' + columnId + ',' + chartId + ')" class="visionValuesColumnCloseBtn" style="display: inline;">'
						+ '</div>';
					$("#" + this.id).append(columnData);
					if ($.trim($("#" + axisId).html()).length > 0) {
						getChart(chartId, count, chartType, "", "", "");
					}

				}
			}
		}

	});

	$('[id^="visionVisualizeCardChartValuesId"]').droppable({
		revert: "invalid",
		refreshPositions: true,
		cursor: 'move',
		drop: function(event, ui) {
			if ($("#" + this.id).is(':visible')) {
				var id = ui.draggable[0].id;
				var label = ui.draggable[0].innerText;
				if (id != null && id != '' && id != undefined) {
					id = id.replace("_" + label, "");
				}
				var divid = this.id;
				if (divid != null && divid != '' && divid != undefined) {
					var count = divid.split("_")[1];
					var chartId = "visionVisualizeChartId" + count;
					var columnName = ui.draggable[0].innerText;
					var columnId = "COLUMN_" + id + '_' + columnName + "";
					var columnData = '<div id="COLUMN_' + id + "_" + columnName + '" class="visualizeDivData"' //group
						+ ' title="' + columnName + '" data-table-name="' + id + '" '
						+ ' data-column-name="' + id + "." + columnName + '" ><span class="visionColsText" >' + columnName
						+ '</span><img src="images/Horizontal_Dots.svg" title="Aggregate Functions"'
						+ ' onclick=getCardAggregateFunctions(this,\'' + columnId + '\',\'' + chartId + '\',' + count + ',\'' + columnName + '\',\'' + id + '\') class="visionAggregateColumnBtn" style="display: inline; "><img src="images/close_white.png" title="Remove Column"'
						+ ' onclick="removeColumn(this,' + columnId + ',' + chartId + ')" class="visionValuesColumnCloseBtn" style="display: inline;">'
						+ '</div>';
					$("#" + this.id).append(columnData);

					getCardData('COUNT', count, "");
				}
			}
		}

	});

	$(".filter-container").unbind('click').on('click', function(event) {
		$(this).parent().siblings(':last').toggle();
		$(this).find('img').toggleClass('open');
	});


	$(".toggle-btn").unbind('click').on('click', function(event) {
		$(this).toggleClass('active');
		var onOfftext = $(this).children(':first').text();
		if (onOfftext === 'off') {
			$(this).children(':first').text('on');
			$(this).parents('.main-container').siblings(':last').find('*').attr('disabled', false);
		} else {
			$(this).children(':first').text('off');
			$(this).parents('.main-container').siblings(':last').find('*').attr('disabled', true);
		}
		var isActive = $(this).hasClass('active');
		var currentToggleSelector = $(this).closest("li");
		//        var divWithChartCount = $(this).closest("div:has(*[data-charttype = " + chartType + "])").children().attr('id');
		var divWithChartCount = $(this).closest(".visionVisualizeChartPropConfigClass").attr('id');
		var paramsObjet = getParamsToSendToGetChart(divWithChartCount, chartType);
		var chartTargetId = paramsObjet['chartTargetId'];
		var targetCount = paramsObjet['targetCount'];
		var chartTargetType = paramsObjet['chartTargetType'];
		var toBeToggledSelectors = currentToggleSelector.children("ul").children();
		var currentElementId = $(this).attr('id');
		var upperChartType = chartType.toUpperCase();
		if (isActive) {
			$.each(toBeToggledSelectors, function(index, element) {
				$(this).addClass('active-filter');
			});
			if (currentElementId !== '' && currentElementId !== null && currentElementId !== undefined) {
				if (currentElementId === 'toggleButtonForchartHover' + upperChartType) {
					$('#' + upperChartType + 'HOVERLABELDATA').attr('disabled', false);
					$('#' + upperChartType + 'HOVERLABELDATA').val('x+y');
				}
			}
		} else {
			$.each(toBeToggledSelectors, function(index, element) {
				$(this).removeClass('active-filter');
			});
			if (currentElementId !== '' && currentElementId !== null && currentElementId !== undefined) {
				if (currentElementId === 'toggleButtonForchartHover' + upperChartType) {
					$('#' + upperChartType + 'HOVERLABELDATA').attr('disabled', true);
					$('#' + upperChartType + 'HOVERLABELDATA').val('none');
				}
			}
		}
		getChart(chartTargetId, targetCount, chartTargetType, "", "", "", "TestingCheck");
	});
}

function getParamsToSendToGetChart(configTargetId, chartType) {
	var paramsObj = {};
	var targetCount = configTargetId.replace("visionVisualizeChartProperties", "");
	var axisTargetId = "visionVisualizeChartAxisId_" + targetCount;
	var valuesTargetId = "visionVisualizeChartValuesId_" + targetCount;
	var chartTargetId = "visionVisualizeChartId" + targetCount;
	paramsObj['chartTargetId'] = chartTargetId;
	paramsObj['targetCount'] = targetCount;
	if ($.trim($("#" + axisTargetId).html()).length > 0 && $.trim($("#" + valuesTargetId).html()).length > 0) {
		var chartTargetType = chartDivObj["visionVisualizeChart" + targetCount];
		if (!(chartTargetType != null && chartTargetType != '' && chartTargetType != undefined)) {
			chartTargetType = chartType;
		}
		paramsObj['chartTargetType'] = chartTargetType;
	}
	return paramsObj;
}
function getsliceDiv(img, chartType, tableName, columnName) {
	if (chartType != null && chartType != '' && chartType != undefined && chartType == 'Slicer') {
		var id = "<div id='visionVisualizeChart" + count + "' type='" + chartType + "' class='visionVisualizeChartBoxClass'>"
			+ "<div id='visionVisualizeChartIcons" + count + "' class='visionVisualizeChartIconsClass'>"
			+ "<img src='images/Horizontal_Dots.svg'  class='visionVisualizeHorizontalDotsClass'/>"
			+ "<div id='visionVisualizeDashBoardIcons" + count + "' class='visionVisualizeDashBoardIconsClass'></div></div>"
			+ "<div id='visionVisualizeChartId" + count + "' class='visionVisualChartBoxClass'></div>"
			+ "<div class='ui-resizable-handle ui-resizable-nw' id='nwgrip'></div>"
			+ "<div class='ui-resizable-handle ui-resizable-ne' id='negrip'></div>"
			+ "<div class='ui-resizable-handle ui-resizable-sw' id='swgrip'></div>"
			+ "<div class='ui-resizable-handle ui-resizable-se' id='segrip'></div>"
			+ "<div class='ui-resizable-handle ui-resizable-n' id='ngrip'></div>"
			+ "<div class='ui-resizable-handle ui-resizable-s' id='sgrip'></div>"
			+ "<div class='ui-resizable-handle ui-resizable-e' id='egrip'></div>"
			+ "<div class='ui-resizable-handle ui-resizable-w' id='wgrip'></div>"
			+ "</div>";
		$("#visionVisualizationDataChartViewId").append(id);

		$('#visionVisualizeChart' + count).draggable({
			containment: "#visualizeArea",
			revert: "invalid",
		});
		var slicerId = 'visionVisualizeChart' + count;
		addSlicerValues(count, tableName, columnName, slicerId);
		$("#visionVisualizeTableName" + count).remove();
		$("#visionVisualizeColumnName" + count).remove();
		var hiddenFields = "<input type='hidden' id='visionVisualizeTableName" + count + "' value='" + tableName + "'/>"
			+ "<input type='hidden' id='visionVisualizeColumnName" + count + "' value='" + columnName + "'/>";
		$("#VisualizePageBody").append(hiddenFields);
		var width = $("#visionVisualizeChart" + count).width();
		var height = $("#visionVisualizeChart" + count).height();
		$("#visionVisualizeChartId" + count).css("width", (width - 10) + "px");
		$("#visionVisualizeChartId" + count).css("height", (height - 20) + "px");
		count++;

		$("#" + slicerId).click(function() {
			var callflag = false;
			var valesArr = [];
			$("#" + slicerId).find('input[type="checkbox"]:checked').each(function() {
				callflag = true;
				var value = $(this).val();
				valesArr.push(value);
			}),
				$("#" + slicerId).find('input[type="button"]:selected').each(function() {
					callflag = true;
					var value = $(this).val();
					valesArr.push(value);
				});
			//  var SliceColumn = $('.ms-selectall global').find('data-search-term').text();
			if (callflag) {
				filterData("visionVisualizationDataChartViewId", valesArr, tableName);
			}
		});


	}

	$(".filter-container").unbind('click').on('click', function(event) {
		$(this).parent().siblings(':last').toggle();
		$(this).find('img').toggleClass('open');
	});


	$(".toggle-btn").unbind('click').on('click', function(event) {
		$(this).toggleClass('active');
		var onOfftext = $(this).children(':first').text();
		if (onOfftext === 'off') {
			$(this).children(':first').text('on');
			$(this).parents('.main-container').siblings(':last').find('*').attr('disabled', false);
		} else {
			$(this).children(':first').text('off');
			$(this).parents('.main-container').siblings(':last').find('*').attr('disabled', true);
		}
	});
}
function getCardData(type, count, selectedvalue) {
	var cardType = $("#visionVisualizeChart" + count).attr("cardType");
	var cardTrend = $("#visionVisualizeChartId" + count).attr("cardTrend");
	//var valuesId = "visionVisualizeChartValuesId_" + count;
	var valuesId = "visionVisualizeCardChartValuesId_" + count;
	var filtersId = "visionVisualizeChartFiltersValues" + count;
	var SliceColumn = $($('.visionVisualizeSlicerValuesDivClass').find('span')[0]).text();
	var parentId = "visionVisualizeChart" + count;
	var visualizeAreaCardImageName = $("#visionVisualizeChart" + count).attr("data-cardImageName");
	if (!(jQuery.inArray(parentId, cardDivArr) > -1)) {
		cardDivArr.push(parentId);
	}
	$("#Loader").css("display", "block");
	$("body").css({ "pointer-events": "auto" });
	var valuesId = "visionVisualizeCardChartValuesId_" + count;
	var dateId = "visionVisualizeCardChartDateValuesId_" + count;
	var axisColumns = [];
	var tableName;
	var aggregateName;
	var columndata;
	var dateColumndata;
	var aggregateColsObj = [];
	var FilterType = $("#Cardtype").text();
	if (FilterType != null && FilterType != '' && selectedvalue != null && selectedvalue != '') {
		type = FilterType;
	}
	$('#' + valuesId + ' div').each(function(i, ele) {
		var divId = $(this).attr("id");
		tableName = $("#" + divId).attr("data-table-name");
		var column = $("#" + divId).attr("data-column-name");
		aggregateName = $("#" + divId).attr("data-aggregate-name");
		if (column != null && column != '' && column != undefined && column.indexOf("(") > -1) {
			var columnAggName = column.split("(");
			type = columnAggName[0];
		}
		var columnName = column.split(".");
		columndata = columnName[1].split(")");
	});

	$('#' + dateId + ' div').each(function(i, ele) {
		var divId = $(this).attr("id");
		tableName = $("#" + divId).attr("data-table-name");
		var column = $("#" + divId).attr("data-column-name");
		var columnName = column.split(".");
		dateColumndata = columnName[1].split(")");
	});

	var filterArr = [];
	$('#' + filtersId + ' div.visionVisualizeChartFiltersFieldDivClass').each(function(i, ele) {
		//        var colName = $(this).children('div:nth-child(1)').children('div:nth-child(1)').find("span").text();
		var colName = $(this).children('div:nth-child(1)').children('div:nth-child(1)').find("input").val();
		var operator = $(this).children('div:nth-child(1)').children('div:nth-child(2)').find("select").val();
		var values = $(this).children('div:nth-child(2)').find('input[name="visionVisualizeChartFiltersValuesCheckName"]:checked').map(function() {
			return this.value;
		}).get().join(",");
		var filterObj = {};
		filterObj['colName'] = colName;
		filterObj['operator'] = operator;
		filterObj['values'] = values;
		filterArr.push(filterObj);
		alert("values");
	});

	var chartOptAllObj = {};
	var errorMessageStr = "";
	var errorCount = 0;
	var chartConfigId = "visionVisualizeChartProperties" + count + " ul li";
	$('#' + chartConfigId).each(function(i, ele) {
		var optColName = $(this).attr("data-column-name");
		var optName = $("#" + optColName).attr("data-opt-name");
		var optMan = $("#" + optColName).attr("data-man");
		var inputType = $("#" + optColName).attr("type");
		var optValue = $("#" + optColName).val();
		if (inputType == 'checkbox') {
			if ($("#" + optColName).is(':checked')) {
				optValue = true;
			} else {
				optValue = false;
			}
		}
		if (inputType == 'number') { //nested
			if (optValue != null && optValue != '' && optValue >= 1) {
				optValue = parseInt(optValue);
			}
		}

		if (optValue != null && optValue != '') {
			chartOptAllObj[optColName] = optValue;
		} else if (optMan == 'M') {
			errorCount++;
			errorMessageStr += "<tr><td>  " + '<p class="visionGenericTabStatusDialog">' + " " + '<span style="color:blue;">' + " " + optName + "</span><b>:</b> Should not be null.</tr></td><br>";
		}

	});

	var data = {};
	data['columnName'] = columndata[0];
	data['dateColumnName'] = (dateColumndata != null && dateColumndata != undefined && !jQuery.isEmptyObject(dateColumndata)) ? dateColumndata[0] : "";
	data['aggregateColumns'] = aggregateName;
	data['filterColumns'] = JSON.stringify(filterArr);
	data['tableName'] = tableName;
	data['type'] = type;
	data['SliceColumn'] = SliceColumn;
	data['selectedValue'] = selectedvalue;
	data['cardType'] = cardType;
	data['cardTrend'] = cardTrend;
	data['visualizeAreaCardImageName'] = visualizeAreaCardImageName;
	//    data['chartCOnfigObjStr'] = JSON.stringify(chartOptAllObj);
	$.ajax({
		url: 'fetchCardDetails',
		type: "POST",
		data: data,
		dataType: 'json',
		traditional: true,
		cache: false,
		success: function(response) {
			stopLoader();
			$("#visualizeChartConfigJoins").hide();
			$("#Loader").css("display", "none");
			$("body").css({ "pointer-events": "auto" });
			if (response != null && !jQuery.isEmptyObject(response)) {
				var result = response['result'];
				$("#visionVisualizeChartId" + count).html(result);

				// colorObj['color'] = 'rgb(26, 118, 255)';
				$("#visionVisualizeChartId" + count).css('width', '100%', '!important');
				$("#visionVisualizeChartId" + count).css('height', '100%', '!important');

				$("#visionVisualizeCardTitle").focus(function(event) {
					$(this).select();
				});

			}

		}, error: function(e) {
			console.log("The Error Message is:::" + e.message);
			sessionTimeout(e);
		}
	});

}
function getCardVisualizeData(type, count, selectedvalue, fromFilterArr, toFilterArr) {

	var cardType = $("#visionVisualizeChart" + count).attr("cardType");
	var cardTrend = $("#visionVisualizeChart" + count).attr("cardTrend");
	var valuesId = "visionVisualizeChartValuesId_" + count;
	var filtersId = "visionVisualizeChartFiltersValues" + count;
	var SliceColumn = $($('.visionVisualizeSlicerValuesDivClass').find('span')[0]).text();
	var parentId = "visionVisualizeChart" + count;
	var visualizeAreaCardImageName = $("#visionVisualizeChart" + count).attr("data-cardImageName");
	if (!(jQuery.inArray(parentId, cardDivArr) > -1)) {
		cardDivArr.push(parentId);
	}
	$("#Loader").css("display", "block");
	$("body").css({ "pointer-events": "auto" });
	var valuesId = "visionVisualizeCardChartValuesId_" + count;
	var dateId = "visionVisualizeCardChartDateValuesId_" + count;
	var tableName;
	var aggregateName;
	var columndata;
	var dateColumndata;
	var FilterType = $("#Cardtype").text();
	if (FilterType != null && FilterType != '' && selectedvalue != null && selectedvalue != '') {
		type = FilterType;
	}
	$('#' + valuesId + ' div').each(function(i, ele) {
		var divId = $(this).attr("id");
		tableName = $("#" + divId).attr("data-table-name");
		var column = $("#" + divId).attr("data-column-name");
		aggregateName = $("#" + divId).attr("data-aggregate-name");
		var columnName = column.split(".");
		columndata = columnName[1].split(")");
	});

	$('#' + dateId + ' div').each(function(i, ele) {
		var divId = $(this).attr("id");
		tableName = $("#" + divId).attr("data-table-name");
		var column = $("#" + divId).attr("data-column-name");
		var columnName = column.split(".");
		dateColumndata = columnName[1].split(")");
	});

	if (aggregateName != null && aggregateName != '' && aggregateName != undefined) {
		type = aggregateName;
	}
	var filterArr = [];
	$('#' + filtersId + ' div.visionVisualizeChartFiltersFieldDivClass').each(function(i, ele) {
		//        var colName = $(this).children('div:nth-child(1)').children('div:nth-child(1)').find("span").text();
		var colName = $(this).children('div:nth-child(1)').children('div:nth-child(1)').find("input").val();
		var operator = $(this).children('div:nth-child(1)').children('div:nth-child(2)').find("select").val();
		var values = $(this).children('div:nth-child(2)').find('input[name="visionVisualizeChartFiltersValuesCheckName"]:checked').map(function() {
			return this.value;
		}).get().join(",");
		var filterObj = {};
		filterObj['colName'] = colName;
		filterObj['operator'] = operator;
		filterObj['values'] = values;
		filterArr.push(filterObj);
		alert("values");
	});



	var data = {};
	data['columnName'] = columndata[0];
	if (dateColumndata != null && !jQuery.isEmptyObject(dateColumndata)) {
		data['dateColumnName'] = dateColumndata[0];
	}
	data['aggregateColumns'] = aggregateName;
	data['filterColumns'] = JSON.stringify(filterArr);
	data['tableName'] = tableName;
	data['type'] = type;
	data['SliceColumn'] = SliceColumn;
	data['selectedValue'] = selectedvalue;
	data['fromFilterArr'] = JSON.stringify(fromFilterArr);
	data['toFilterArr'] = JSON.stringify(toFilterArr);
	data['cardType'] = cardType;
	data['cardTrend'] = cardTrend;
	data['count'] = count;
	data['visualizeAreaCardImageName'] = visualizeAreaCardImageName;
	$.ajax({
		url: 'fetchCardDetails',
		type: "POST",
		data: data,
		dataType: 'json',
		traditional: true,
		cache: false,
		success: function(response) {
			stopLoader();
			$("#visualizeChartConfigJoins").hide();
			$("#Loader").css("display", "none");
			$("body").css({ "pointer-events": "auto" });
			if (response != null && !jQuery.isEmptyObject(response)) {
				var result = response['result'];
				var trendDataArr = response['trendDataArr'];
				var trendLabelsArr = response['trendLabelsArr'];
				$("#visionVisualizeChartId" + count).html(result);
				if (trendDataArr != null && !jQuery.isEmptyObject(trendDataArr) && trendLabelsArr != null && !jQuery.isEmptyObject(trendLabelsArr)) {
					var type = "";
					if (cardTrendDivArr != null && !jQuery.isEmptyObject(cardTrendDivArr)) {
						type = cardTrendDivArr["visionVisualizeChart" + count];
					} else {
						cardTrendDivArr[parentId] = "lines";
						type = "lines";
					}
					var dataObjct = {};
					if (type != null && type != '' && type != undefined && (type == 'pie' || type == 'donut')) {
						dataObjct['labels'] = trendLabelsArr;
						dataObjct['values'] = trendDataArr;
						if (type != null && type != '' && type != undefined && type == 'donut') {
							dataObjct['hole'] = '0.4';
						}
						dataObjct['type'] = "pie";
					} else {
						dataObjct['x'] = trendLabelsArr;
						dataObjct['y'] = trendDataArr;
						if (type != null && type != '' && type != undefined && type == 'bar') {
							dataObjct['orientation'] = 'h';
							dataObjct['type'] = type;
						} else if (type != null && type != '' && type != undefined && type == 'lines') {
							dataObjct['type'] = type;
						} else if (type != null && type != '' && type != undefined && type == 'column') {
							dataObjct['type'] = "bar";
						}

					}

					var data = [dataObjct];
					var margin = {
						l: 0,
						r: 0,
						b: 0,
						t: 0,
						pad: 0
					};
					var layout = {
						margin: margin,
						xaxis: {
							visible: false
						},
						yaxis: {
							visible: false
						},
						width: 150,
						height: 100,
						showlegend: false,
						/*plot_bgcolor:"transparent",
						paper_bgcolor:"transparent",*/
						background: "transparent",
					};
					var config = {
						displayModeBar: false
					}
					$("#visionVisualizeCardTrendGraph" + count).empty();
					Plotly.newPlot('visionVisualizeCardTrendGraph' + count, data, layout, config);


					var graphDiv = document.getElementById('visionVisualizeCardTrendGraph' + count);
					var plotData = Plotly.toImage(graphDiv, { format: 'png', height: 100, width: 100 }).then(function(url) {
						var image = "<img src='images/cardGraphImage.png' id='visionVisualizeCardTrendGraphImage" + count + "' class='visionVisualizeChartTrendLineImage'/>"
						$("#visionVisualizeCardTrendGraph" + count).html(image);
						$("#visionVisualizeCardTrendGraphImage" + count).attr('src', url);
					});
				}
				$("#visionVisualizeChartId" + count).css('width', '100%', '!important');
				$("#visionVisualizeChartId" + count).css('height', '100%', '!important');

				$("#visionVisualizeCardTitle").focus(function(event) {
					$(this).select();
				});
			}

		}, error: function(e) {
			console.log("The Error Message is:::" + e.message);
			sessionTimeout(e);
		}
	});

}
function getHomePageCardData(Lebel, aggregateType, chartid, tablename, selectedvalue, filterCondition, paramCardDateObj, cardType, cardTrendType,cardTrend) {
	var tableName;
	var colValue;
	var aggregateType;
	var columnName;
	if (selectedvalue != null && selectedvalue != '' && selectedvalue != undefined) {
		var valuesArr = JSON.parse(selectedvalue);
		$.each(valuesArr, function(index, value) {
			if (value != null && !jQuery.isEmptyObject(value)) {
				tableName = value['tableName'];
				columnName = value['columnName'];
				aggregateType = value['aggColumnName'];
				if (columnName != null && columnName != '' && columnName != undefined) {
					colValue = columnName.replace(aggregateType + "(", '');
					colValue = colValue.replace(")", '');
					colValue = colValue.replace(tableName + ".", '');
				}

			}
		});
	}

	var data = {};
	data['columnName'] = colValue;
	data['tableName'] = tableName;
	data['type'] = aggregateType;
	data['selectedValue'] = columnName;
	data['Lebel'] = Lebel;
	data['filterCondition'] = filterCondition;
	data['cardType'] = cardType;
	data['cardTrendType'] = cardTrendType;
	data['cardId'] = chartid;
	data['cardTrend'] = cardTrend;
	var isApplyEvt = $("#"+ chartid).attr("data-isApplyEvt");
	data['isApplyEvt'] = isApplyEvt;
	//    data['chartCOnfigObjStr'] = JSON.stringify(chartOptAllObj);
	if (paramCardDateObj != null && paramCardDateObj != '' && paramCardDateObj != undefined) {
		paramCardDateObj = JSON.parse(paramCardDateObj);
		if (paramCardDateObj != null && !jQuery.isEmptyObject(paramCardDateObj)) {
			var paramFromArr = paramCardDateObj['paramFromArr'];
			var paramToArr = paramCardDateObj['paramToArr'];
			var paramDateArr = paramCardDateObj['paramDateArr'];
			if (paramToArr != null && !jQuery.isEmptyObject(paramToArr) &&
				paramFromArr != null && !jQuery.isEmptyObject(paramFromArr)) {
				data['fromFilterArr'] = paramFromArr;
				data['toFilterArr'] = paramToArr;
			} else {
				data['paramDateArr'] = paramDateArr;
			}

		}
	}
	$.ajax({
		url: 'fetchHomeCardDetails',
		type: "POST",
		data: data,
		dataType: 'json',
		traditional: true,
		cache: false,
		success: function(response) {
			stopLoader();
			$("#visualizeChartConfigJoins").hide();
			$("#Loader").css("display", "none");
			$("body").css({ "pointer-events": "auto" });
			if (response != null && !jQuery.isEmptyObject(response)) {
				var result = response['result'];
				$("#" + chartid).html(result);
				var trendDataArr = response['trendDataArr'];
				var trendLabelsArr = response['trendLabelsArr'];
				var type = response['cardTrendType'];
				var randNum = response['randNum'];
				var dateColumnName = response['dateColumnName'];
				$("#visionVisualizeChartId" + count).html(result);
				if (trendDataArr != null && !jQuery.isEmptyObject(trendDataArr) && trendLabelsArr != null && !jQuery.isEmptyObject(trendLabelsArr)) {
					var dataObjct = {};
					if (type != null && type != '' && type != undefined && (type == 'pie' || type == 'donut')) {
						dataObjct['labels'] = trendLabelsArr;
						dataObjct['values'] = trendDataArr;
						if (type != null && type != '' && type != undefined && type == 'donut') {
							dataObjct['hole'] = '0.4';
						}
						dataObjct['type'] = "pie";
					} else {
						dataObjct['x'] = trendLabelsArr;
						dataObjct['y'] = trendDataArr;
						if (type != null && type != '' && type != undefined && type == 'bar') {
							dataObjct['orientation'] = 'h';
							dataObjct['type'] = type;
						} else if (type != null && type != '' && type != undefined && type == 'lines') {
							dataObjct['type'] = type;
						} else if (type != null && type != '' && type != undefined && type == 'column') {
							dataObjct['type'] = "bar";
						}

					}

					var data = [dataObjct];
					var margin = {
						l: 0,
						r: 0,
						b: 0,
						t: 0,
						pad: 0
					};
					var layout = {
						margin: margin,
						xaxis: {
							visible: false
						},
						yaxis: {
							visible: false
						},
						width: 150,
						height: 100,
						showlegend: false,
						plot_bgcolor: "transparent",
						paper_bgcolor: "transparent"
					};
					var config = {
						displayModeBar: false
					}
					$("#visionVisualizeCardTrendGraph" + randNum).empty();
					Plotly.newPlot('visionVisualizeCardTrendGraph' + randNum, data, layout, config);




					var graphDiv = document.getElementById('visionVisualizeCardTrendGraph' + randNum);
					var plotData = Plotly.toImage(graphDiv, { format: 'png', height: 100, width: 100 }).then(function(url) {
						var image = "<img src='images/cardGraphImage.png' id='visionVisualizeCardTrendGraphImage" + randNum + "' "
							+ "onclick = \"getCardImageData('" + chartid + "','" + dateColumnName + "')\" class='visionVisualizeChartTrendLineImage'/>"
						$("#visionVisualizeCardTrendGraph" + randNum).html(image);
						$("#visionVisualizeCardTrendGraphImage" + randNum).attr('src', url);
					});



				}

			}
			var dashBoardCardCurrImg = $("#" + chartid).find('.cardImageHomepage');
			$(dashBoardCardCurrImg).click(function(e) {
				var homepageCardImgChngEvt = {};
				homepageCardImgChngEvt['isCardImgChngEvt'] = true;
				homepageCardImgChngEvt['chartId'] = chartid;
				encodeImageFileAndAppendAsSrc(e.currentTarget.id, homepageCardImgChngEvt);
			})
			
			$("#" + chartid).hover(function () {
                    $(this).find(".homepageCardEdit").show();
                    $("#" + chartid).addClass("hoverEffectsCard");
                    $("#" + chartid+ " .visionVisualizeNormalCardHomeClass").addClass("hoverEffectsCard");
                }, function () {
                    $(this).find(".homepageCardEdit").hide();
                    $("#" + chartid).removeClass("hoverEffectsCard");
                 $("#" + chartid+ " .visionVisualizeNormalCardHomeClass").removeClass("hoverEffectsCard");
               
                });

		}, error: function(e) {
			console.log("The Error Message is:::" + e.message);
			sessionTimeout(e);
		}
	});

}
function showStr(message) {
	$("#dialog").html(message);
	$("#dialog").dialog({
		title: (labelObject['Message'] != null ? labelObject['Message'] : 'Message'),
		width: 600,
		maxWidth: 600,
		height: 350,
		maxHeight: 1000,
		fluid: true,
		buttons: [{

		}],
		open: function() {
			$("#Loader").css("display", "none");
			$("body").css({ "pointer-events": "auto" });
		},
		beforeClose: function(event, ui) {

		}
	});
}
function getChart(chartId, count, chartType, joinQuery, selectedValue, dragtableName, emptyCheckLabel) {
	var icon = {
		'width': 1000,
		'path': 'm250 850l-187 0-63 0 0-62 0-188 63 0 0 188 187 0 0 62z m688 0l-188 0 0-62 188 0 0-188 62 0 0 188 0 62-62 0z m-875-938l0 188-63 0 0-188 0-62 63 0 187 0 0 62-187 0z m875 188l0-188-188 0 0-62 188 0 62 0 0 62 0 188-62 0z m-125 188l-1 0-93-94-156 156 156 156 92-93 2 0 0 250-250 0 0-2 93-92-156-156-156 156 94 92 0 2-250 0 0-250 0 0 93 93 157-156-157-156-93 94 0 0 0-250 250 0 0 0-94 93 156 157 156-157-93-93 0 0 250 0 0 250z" transform="matrix(1 0 0 -1 0 850)"',
		'ascent': 850,
		'descent': -150
	};
	var chartTypeUpper = '';
	$("#Loader").css("display", "block");
	$("body").css({ "pointer-events": "auto" });
	var SliceColumn = $($('.visionVisualizeSlicerValuesDivClass').find('span')[0]).text();

	var axisId = "visionVisualizeChartAxisId_" + count;
	var valuesId = "visionVisualizeChartValuesId_" + count;
	var comboValuesId = "visionVisualizeChartComboValuesId_" + count;
	var percentValuesId = "visionVisualizeChartPercentValuesId_" + count;
	var filtersId = "visionVisualizeChartFiltersValues" + count;
	// var joinQuery = $("#visionVisualizeConfigJoinQuery0").val();
	var axisColumns = [];
	var valuesColumns = [];
	var tablesObj = [];
	var comboColumns = [];
	var percentColumns =[];
	$('#' + axisId + ' div').each(function(i, ele) {
		var divId = $(this).attr("id");
		var tableName = $("#" + divId).attr("data-table-name");
		var columnName = $("#" + divId).attr("data-column-name");
		if (tableName != null
			&& tableName != ''
			&& columnName != null && columnName != '') {
			var columnObj = {};
			columnObj['tableName'] = tableName;
			columnObj['columnName'] = columnName;
			axisColumns.push(columnObj);
			if (!(tablesObj.indexOf(tableName) > -1)) {
				tablesObj.push(tableName);
			}
		}
	});
	if (chartType != '' && chartType != null && (chartType == 'heatMap' || chartType == 'sunburst' || chartType == 'sankey') && axisColumns != null &&
		axisColumns.length < 2) {
showStr("Message","Select at least Two Axis Column(s)");       
		stopLoader();
		return;
	}
	
	var legendLablesObj = {};
	$('#' + valuesId + ' div').each(function(i, ele) {
		var divId = $(this).attr("id");
		var tableName = $("#" + divId).attr("data-table-name");
		var columnName = $("#" + divId).attr("data-column-name");
		var columnNameLabel = $("#" + divId).attr("data-column-label");
		var legendLable = $("#" + columnNameLabel + "LEGENDLABEL").val();
		if (emptyCheckLabel != null && emptyCheckLabel != '' && emptyCheckLabel != undefined) {
			legendLablesObj[columnNameLabel] = legendLable;
			$("#" + divId).attr("data-label-name", legendLable);

		} else {
			if (legendLable != null && legendLable != '' && legendLable != undefined) {
				legendLablesObj[columnNameLabel] = legendLable;
				$("#" + divId).attr("data-label-name", legendLable);
			} else {
				legendLablesObj[columnNameLabel] = columnNameLabel;
				$("#" + divId).attr("data-label-name", columnNameLabel);
			}
		}
		var aggregateName = $("#" + divId).attr("data-aggregate-name");
		var columnLabel = $("#" + divId).attr("data-label-name");
		if (tableName != null
			&& tableName != ''
			&& columnName != null && columnName != '') {
			var columnObj = {};
			columnObj['tableName'] = tableName;
			columnObj['columnName'] = columnName;
			columnObj['columnLabel'] = columnLabel;
			if (aggregateName != null && aggregateName != '' && aggregateName != undefined) {
				columnObj['aggColumnName'] = aggregateName;
			}
			valuesColumns.push(columnObj);
			if (!(tablesObj.indexOf(tableName) > -1)) {
				tablesObj.push(tableName);
			}
		}

	});
	if (chartType != '' && chartType != null && chartType == 'indicator' ) {
		if(axisColumns != null && axisColumns.length > 0)
		{
			showStr("Message","Please Select Only One Value Column");
			stopLoader();
		return;   
		}else if(valuesColumns != null && valuesColumns.length > 1)
		{
			showStr("Message","Please Select Only One Value Column");
			stopLoader();
		return;
		}
    
		
	}
	if (chartType != '' && chartType != null && chartType == 'StackedAreaChart' && valuesColumns != null &&
		valuesColumns.length < 2) {
showStr("Message","Select at least Two Value Column(s)");       
		stopLoader();
		return;
	}

	$('#' + comboValuesId + ' div').each(function(i, ele) {
		var divId = $(this).attr("id");
		var tableName = $("#" + divId).attr("data-table-name");
		var columnName = $("#" + divId).attr("data-column-name");
		var columnNameLabel = $("#" + divId).attr("data-column-label");
		var legendLable = $("#" + columnNameLabel + "LEGENDLABEL").val();
		if (emptyCheckLabel != null && emptyCheckLabel != '' && emptyCheckLabel != undefined) {
			legendLablesObj[columnNameLabel] = legendLable;
			$("#" + divId).attr("data-label-name", legendLable);

		} else {
			if (legendLable != null && legendLable != '' && legendLable != undefined) {
				legendLablesObj[columnNameLabel] = legendLable;
				$("#" + divId).attr("data-label-name", legendLable);
			} else {
				legendLablesObj[columnNameLabel] = columnNameLabel;
				$("#" + divId).attr("data-label-name", columnNameLabel);
			}
		}
		var aggregateName = $("#" + divId).attr("data-aggregate-name");
		var columnLabel = $("#" + divId).attr("data-label-name");
		if (tableName != null
			&& tableName != ''
			&& columnName != null && columnName != '') {
			var columnObj = {};
			columnObj['tableName'] = tableName;
			columnObj['columnName'] = columnName;
			columnObj['columnLabel'] = columnLabel;
			if (aggregateName != null && aggregateName != '' && aggregateName != undefined) {
				columnObj['aggColumnName'] = aggregateName;
			}
			comboColumns.push(columnObj);
			if (!(tablesObj.indexOf(tableName) > -1)) {
				tablesObj.push(tableName);
			}
		}

	});
	
	if (chartType != null && chartType != '' && chartType == 'BarAndLine') {
		if (comboColumns != null && comboColumns.length <= 0) {
              showStr("Message","Please Select Combo Column for Line Chart or Create New Bar and Line Chart");       
		stopLoader();
		return;
		}
	}
	
	$('#' + percentValuesId + ' div').each(function(i, ele) {
		var divId = $(this).attr("id");
		var tableName = $("#" + divId).attr("data-table-name");
		var columnName = $("#" + divId).attr("data-column-name");
		var columnNameLabel = $("#" + divId).attr("data-column-label");
		var legendLable = $("#" + columnNameLabel + "LEGENDLABEL").val();
		if (emptyCheckLabel != null && emptyCheckLabel != '' && emptyCheckLabel != undefined) {
			legendLablesObj[columnNameLabel] = legendLable;
			$("#" + divId).attr("data-label-name", legendLable);

		} else {
			if (legendLable != null && legendLable != '' && legendLable != undefined) {
				legendLablesObj[columnNameLabel] = legendLable;
				$("#" + divId).attr("data-label-name", legendLable);
			} else {
				legendLablesObj[columnNameLabel] = columnNameLabel;
				$("#" + divId).attr("data-label-name", columnNameLabel);
			}
		}
		var aggregateName = $("#" + divId).attr("data-aggregate-name");
		var columnLabel = $("#" + divId).attr("data-label-name");
		if (tableName != null
			&& tableName != ''
			&& columnName != null && columnName != '') {
			var columnObj = {};
			columnObj['tableName'] = tableName;
			columnObj['columnName'] = columnName;
			columnObj['columnLabel'] = columnLabel;
			if (aggregateName != null && aggregateName != '' && aggregateName != undefined) {
				columnObj['aggColumnName'] = aggregateName;
			}
			percentColumns.push(columnObj);
			if (!(tablesObj.indexOf(tableName) > -1)) {
				tablesObj.push(tableName);
			}
		}

	});
	
	if (chartType != null && chartType != '' && chartType == 'ganttChart') {
		if (percentColumns != null && percentColumns.length <= 0) {
              showStr("Message","Please Select percent Column for Gantt Chart");       
		stopLoader();
		return;
		}
	}

	$("#visionVisualizeChartPropertiesLegend" + count).remove();
	var legendNameLi = "<li id='visionVisualizeChartPropertiesLegend" + count + "' class=\"general-filters\" data-column-name=\"" + chartTypeUpper + "LEGENDLABEL\" data-key-type=\"data\">"
		+ "<div class=\"sub-filterItems\">"
		+ "<p>Legend Names</p>";
	$.each(legendLablesObj, function(key, value) {
		var legendColLable = legendLablesObj[key];
		legendNameLi += "<input type=\"text\" id=\"" + key + "LEGENDLABEL\" data-opt-name=\"legendLabel\" data-man=\"O\" value='" + legendColLable + "' title=\"Legend Label\"/></br>";
	});
	legendNameLi += "</div>"
		+ "</li>";

	$("#legend-filter").hide();
	if (Object.keys(legendLablesObj).length > 1) {
		$("#visionVisualizeChartProperties" + count + " ul.conigProperties").prepend(legendNameLi);
		$("#legend-filter").show();
	}

	var filterArr = [];
	$('#' + filtersId + ' div.visionVisualizeChartFiltersFieldDivClass').each(function(i, ele) {
		//        var colName = $(this).children('div:nth-child(1)').children('div:nth-child(1)').find("span").text();
		var colName = $(this).children('div:nth-child(1)').children('div:nth-child(1)').find("input").val();
		var operator = $(this).children('div:nth-child(1)').children('div:nth-child(2)').find("select").val();
		var checkId = $(this).children('div:nth-child(2)');
		var checkValues = $("#" + checkId[0]['id']).jqxListBox('getCheckedItems');
		var values = [];
		$.each(checkValues, function(index) {
			values.push(this.value);
		});
		if (values != null && !jQuery.isEmptyObject(values)) {
			values = values.toString();
		}
		var filterObj = {};
		if (values != null && values != '' && values != undefined) {
			filterObj['colName'] = colName;
			filterObj['operator'] = operator;
			filterObj['values'] = values;
			filterArr.push(filterObj);
		}
		alert("values");
	});
	var errorMessageStr = "";
	var errorCount = 0;
	var joinHtmlQuery = "";
	if (tablesObj != null && !jQuery.isEmptyObject(tablesObj) && Object.keys(tablesObj).length > 1 && chartType != 'sankey') {
		var joinHtmlQuery = $("#visionVisualizeConfigJoinQuery" + count).html();
		if (!(joinHtmlQuery != null && joinHtmlQuery != '' && joinHtmlQuery != undefined) || (joinHtmlQuery == 'For single table there is no join'
			|| joinHtmlQuery == 'Please Drag columns for Join')) {
			showStr("Joins","<p>Please Select Joins Column</p>");
			return;
		}
	}


	var chartOptAllObj = {};
	var chartConfigPositionKeyObj = {};
	var chartConfigToggleStatus = {};
	var errorMessageStr = "";
	var errorCount = 0;
	var chartConfigId = "visionVisualizeChartProperties" + count + " ul li";
	$('#' + chartConfigId).each(function(i, ele) {
		var optColName = $(this).attr("data-column-name");
		var optKeyType = $(this).attr("data-key-type");
		if (optKeyType != null && optKeyType != '' && optKeyType != undefined) {
			chartConfigPositionKeyObj[optColName] = optKeyType;
		}
		var optName = $("#" + optColName).attr("data-opt-name");
		var optMan = $("#" + optColName).attr("data-man");
		var inputType = $("#" + optColName).attr("type");
		var optValue = $("#" + optColName).val();
		if (inputType == 'checkbox') {
			if ($("#" + optColName).is(':checked')) {
				optValue = true;
			} else {
				optValue = false;
			}
		}
		if (inputType == 'number') { //nested
			if (optValue != null && optValue != '' && optValue >= 1) {
				optValue = parseInt(optValue);
			}
		}
		chartTypeUpper = chartType.toUpperCase();
		//        var isChartHoverActive = $("#toggleButtonForchartHover" + chartTypeUpper).hasClass('active');
		if (optColName.includes('HOVERLABELDATA')) {
			if (optValue !== '' && optValue !== null && optValue !== undefined) {
				if (optValue === 'none') {
					$("#toggleButtonForchartHover" + chartTypeUpper).removeClass('active');
					$("#toggleButtonForchartHover" + chartTypeUpper).find('.on-off-text').text('off');
				} else {
					$("#toggleButtonForchartHover" + chartTypeUpper).addClass('active');
					$("#toggleButtonForchartHover" + chartTypeUpper).find('.on-off-text').text('on');
				}
			}
		}
		//        else if (!isChartHoverActive && optColName.includes('HOVERLABELDATA')) {
		//            optValue = 'none';
		//        }
		var isToggleActive = $(this).hasClass('active-filter');
		if (optValue != null && optValue != '' && isToggleActive) {
			chartOptAllObj[optColName] = optValue;
		} else if (optMan == 'M') {
			errorCount++;
			errorMessageStr += "<tr><td>  " + '<p class="visionGenericTabStatusDialog">' + " " + '<span style="color:blue;">' + " " + optName + "</span><b>:</b> Should not be null.</tr></td><br>";
		} else if (!isToggleActive && optColName.includes('SHOWLEGEND')) {
			chartOptAllObj[optColName] = false;
		}

	});

	var data = {};
	var filteredchartOptAllObj = {};
	$.each(chartConfigPositionKeyObj, function(key, value) {
		var newKey = key.replace(/[0-9]/g, '');
		filteredchartOptAllObj[newKey] = value;
	});
	data['axisColumns'] = JSON.stringify(axisColumns);
	data['valuesColumns'] = JSON.stringify(valuesColumns);
	data['comboColumns'] = JSON.stringify(comboColumns);
	data['zAxixValues'] = JSON.stringify(percentColumns);
	data['filterColumns'] = JSON.stringify(filterArr);
	data['tablesObj'] = JSON.stringify(tablesObj);
	data['selectedValue'] = selectedValue;
	data['SliceColumn'] = SliceColumn;
	data['dragtableName'] = dragtableName;
	data['chartType'] = chartType;
	data['chartId'] = chartId;
	data['joinQuery'] = joinQuery;
	data['chartCOnfigObjStr'] = JSON.stringify(chartOptAllObj);
	var chartData = JSON.stringify(chartOptAllObj);
	$('#' + chartId).parent().attr("chart-data", chartData);
	var plotlyChartLabelType = $("#" + chartTypeUpper + "LABELDATA" + count).val();
	var plotlyChartHoverType = $("#" + chartTypeUpper + "HOVERLABELDATA" + count).val();
	data['chartConfigPositionKeyStr'] = JSON.stringify(filteredchartOptAllObj);
	var isCurrencyConversionEvent = $("#isCurrencyConversionEvent").val();
	var fromCurrencyDropDownValue = $("#fromCurrencyDropDown").val();
	var toCurrencyDropDownValue = $("#toCurrencyDropDown").val();
	data['isCurrencyConversionEvent'] = isCurrencyConversionEvent;
	data['fromCurrencyDropDownValue'] = fromCurrencyDropDownValue;
	data['toCurrencyDropDownValue'] = toCurrencyDropDownValue;
	if (errorCount == 0) {
		$.ajax({
			url: 'fetchChartData',
			type: "POST",
			data: data,
			dataType: 'json',
			traditional: true,
			cache: false,
			success: function(response) {
				stopLoader();
				$(".visionVisualizeHorizontalDotsClass").show();
				$("#visualizeChartConfigJoins").hide();
				$("#Loader").css("display", "none");
				$("body").css({ "pointer-events": "auto" });
				if (response != null && !jQuery.isEmptyObject(response)) {
					if (chartType != null && chartType != '' && chartType == 'heatMap') {
						getEchartHeatMap(chartId, response, count);
						//getHetaMap(chartId, response, count);
						return;
					} else if (chartType != null && chartType != '' && chartType == 'barRotation') {
						getBarChartRotation(chartId, response, count, chartType);
						return;
					} else if (chartType != null && chartType != '' && chartType == 'sunburst') {
						getSunburstChart(chartId, response, count, chartType);
						return;
					} else if (chartType != null && chartType != '' && chartType == 'geochart') {
						getGeoChart(chartId, response, count, chartType);
						return;
					} else if (chartType != null && chartType != '' && chartType == 'BarAndLine') {
						getBarAndLineChart(chartId, response, count, chartType);
						return;
					} else if (chartType != null && chartType != '' && chartType == 'treemap') {
						getTreeMapChart(chartId, response, count, chartType);
						return;
					} else if (chartType != null && chartType != '' && chartType == 'boxplot') {
						getBoxPlotChart(chartId, response, count, chartType);
						return;
					}
					else if (chartType != null && chartType != '' && chartType == 'sankey') {
						getSankeyChart(chartId, response, count, chartType);
						return;
					} else if (chartType != null && chartType != '' && chartType == 'horizontal_bar') {
						getHorizontalBarChart(chartId, response, count, chartType);
						return;
					}
					else if (chartType != null && chartType != '' && chartType == 'BasicAreaChart') {
						getBasicAreaChart(chartId, response, count, chartType);
						return;
					
					} else if (chartType != null && chartType != '' && chartType == 'StackedAreaChart') {
						getStackedAreaChart(chartId, response, count, chartType);
						return;
					
					} else if (chartType != null && chartType != '' && chartType == 'GradStackAreaChart') {
						getGradientStackedAreaChart(chartId, response, count, chartType);
						return;
					}
					 else if (chartType != null && chartType != '' && chartType == 'AreaPiecesChart') {
						getAreaPiecesChart(chartId, response, count, chartType);
						return;
					}else if (chartType != null && chartType != '' && chartType == 'ganttChart') {
						google.charts.setOnLoadCallback(getGanttChart(chartId, response, count, chartType));
						return;
					}else if (chartType != null && chartType != '' && chartType != undefined && chartType == 'candlestick') {
						getCandlestickChart(chartId, response, count, chartType);
						return;
					}

					var resultObj = response;
					var dataPropObject = resultObj['dataPropObject'];
					var chartDataObj = resultObj['data'];
					var layoutObj = resultObj['layout'];
					var treeMapColObj = resultObj['treeMapCol'];
					var compareChartFlag = resultObj['compareChartFlag'];
					var data = [];
					var dataObj = {};
					var config = {
						responsive: true,
						displayModeBar: true,
						downloadImage: true,
						displaylogo: false,

						modeBarButtonsToRemove: ['zoom2d', 'pan', 'pan2d', 'zoomIn2d', 'zoomOut2d', 'resetViewMapbox', 'resetScale2d', 'sendDataToCloud', 'hoverClosestCartesian', 'autoScale2d', 'lasso2d', 'select2d', 'zoom2d']
					};
					$("#visionVisualizeChartId" + count).css('width', '100%', '!important');
					$("#visionVisualizeChartId" + count).css('height', '100%', '!important');
					//shakir
					var axisColumnName;
					var valuesColumnName;
					var chartName = {};
					var defaultLegendNames = {};
					var userProvidedLegendNames = {};

					$.each(axisColumns, function(index, value) {
						var axisName = value.columnName.split(".")[1];
						axisColumnName = axisName.replace(/[()]/g, "");
						axisColumnName = axisColumnName.replace(/_/g, " ");
						defaultLegendNames[axisColumnName] = axisColumnName;
					});
					$.each(valuesColumns, function(index, value) {
						var columnLabel = value.columnLabel;
						var valueName = value.columnName.split(".")[1];
						valuesColumnName = valueName.replace(/[()]/g, "");
						valuesColumnName = valuesColumnName.replace(/_/g, " ");
						defaultLegendNames[valuesColumnName] = valuesColumnName;
						//if (columnLabel != '' && columnLabel != null && columnLabel != undefined) {
						userProvidedLegendNames[valuesColumnName] = columnLabel;
						//}
					});

					//shakir
					if (chartType !== null && chartType !== '' && chartType !== undefined && chartType === 'pie') {
						$.each(chartDataObj, function(key) {
							var traceObj = {};
							var colorObj = {};
							if (key !== axisColumnName) {
								traceObj['labels'] = chartDataObj[axisColumnName];
								traceObj['values'] = chartDataObj[key];
								traceObj['type'] = chartType;
								traceObj['name'] = '';
								traceObj['marker'] = colorObj;
								traceObj = getChartLabelOrHoverDataFormatter('texttemplate', traceObj, chartDataObj[key], plotlyChartLabelType, 'label', 'value');
								traceObj = getChartLabelOrHoverDataFormatter('hovertemplate', traceObj, chartDataObj[key], plotlyChartHoverType, 'label', 'value');
								$.each(dataPropObject, function(key, val) {
									traceObj[key] = val;
								});
							}
							if (traceObj !== null && !jQuery.isEmptyObject(traceObj)) {
								data.push(traceObj);
							}
						});
					} else if (chartType != null && chartType != '' && chartType != undefined && chartType == 'donut') {
						$.each(chartDataObj, function(key) {
							var traceObj = {};
							var colorObj = {};
							if (key !== axisColumnName) {
								traceObj['labels'] = chartDataObj[axisColumnName];
								traceObj['values'] = chartDataObj[key];
								traceObj['hole'] = 0.4;
								traceObj['type'] = 'pie';
								traceObj['name'] = '';
								traceObj['marker'] = colorObj;
								traceObj = getChartLabelOrHoverDataFormatter('texttemplate', traceObj, chartDataObj[key], plotlyChartLabelType, 'label', 'value');
								traceObj = getChartLabelOrHoverDataFormatter('hovertemplate', traceObj, chartDataObj[key], plotlyChartHoverType, 'label', 'value');
								$.each(dataPropObject, function(key, val) {
									traceObj[key] = val;
								});
							}
							if (traceObj !== null && !jQuery.isEmptyObject(traceObj)) {
								data.push(traceObj);
							}
						});
					} else if (chartType != null && chartType != '' && chartType != undefined && chartType == 'bar') {
						var colorCount = 0;
						colorArray = ['#1864ab', '#fd7e14', '#0b7285', '#ff6b6b'];
						$.each(chartDataObj, function(keyName) {
							var traceObj = {};
							var colorObj = {};
							if (keyName !== axisColumnName) {
								traceObj['y'] = chartDataObj[axisColumnName];
								traceObj['x'] = chartDataObj[keyName];
								traceObj['type'] = chartType;
								traceObj['orientation'] = 'h';
								traceObj = getChartLabelOrHoverDataFormatter('texttemplate', traceObj, chartDataObj[keyName], plotlyChartLabelType, 'y', 'x');
								traceObj = getChartLabelOrHoverDataFormatter('hovertemplate', traceObj, chartDataObj[keyName], plotlyChartHoverType, 'y', 'x');
								var keys = keyName.split("ASCOL");
								keyName = keys[0];
								traceObj = addlegendLabelToTrace(traceObj, keyName, defaultLegendNames, userProvidedLegendNames);
								$.each(dataPropObject, function(key, val) {
									if (key === 'marker' && !jQuery.isEmptyObject(val) && val !== null) {
										var colorsArray = val['colors'];
										if (colorsArray !== undefined && colorsArray !== null && !$.isArray(colorsArray)) {
											colorObj['color'] = colorsArray;
										} else if (colorsArray !== undefined && colorsArray !== null && $.isArray(colorsArray)) {
											colorObj['color'] = colorsArray[colorCount++];
										} else {
											colorObj['color'] = colorArray[colorCount++];
										}
										traceObj[key] = colorObj;
									} else if (key === 'marker' && (jQuery.isEmptyObject(val) || val === null)) {
										colorObj['color'] = colorArray[colorCount++];
										traceObj[key] = colorObj;
									} else {
										traceObj[key] = val;
									}
								});
							}
							if (traceObj !== null && !jQuery.isEmptyObject(traceObj)) {
								data.push(traceObj);
							}
						});
					} else if (chartType != null && chartType != '' && chartType != undefined && chartType == 'column') {
						var colorCount = 0;
						colorArray = ['#1864ab', '#fd7e14', '#0b7285', '#ff6b6b'];
						$.each(chartDataObj, function(keyName, val) {
							var traceObj = {};
							var colorObj = {};
							if (keyName !== axisColumnName) {
								traceObj['x'] = chartDataObj[axisColumnName];
								traceObj['y'] = chartDataObj[keyName];
								traceObj['type'] = 'bar';
								traceObj = getChartLabelOrHoverDataFormatter('texttemplate', traceObj, chartDataObj[keyName], plotlyChartLabelType, 'x', 'y');
								traceObj = getChartLabelOrHoverDataFormatter('hovertemplate', traceObj, chartDataObj[keyName], plotlyChartHoverType, 'x', 'y');
								var keys = keyName.split("ASCOL");
								keyName = keys[0];
								traceObj = addlegendLabelToTrace(traceObj, keyName, defaultLegendNames, userProvidedLegendNames);
								$.each(dataPropObject, function(key, val) {
									if (key === 'marker' && !jQuery.isEmptyObject(val) && val !== null) {
										var colorsArray = val['colors'];
										if (colorsArray !== undefined && colorsArray !== null && !$.isArray(colorsArray)) {
											colorObj['color'] = colorsArray;
										} else if (colorsArray !== undefined && colorsArray !== null && $.isArray(colorsArray)) {
											colorObj['color'] = colorsArray[colorCount++];
										} else {
											colorObj['color'] = colorArray[colorCount++];
										}
										traceObj[key] = colorObj;
									} else if (key === 'marker' && (jQuery.isEmptyObject(val) || val === null)) {
										colorObj['color'] = colorArray[colorCount++];
										traceObj[key] = colorObj;
									} else {
										traceObj[key] = val;
									}
								});
							}
							if (traceObj !== null && !jQuery.isEmptyObject(traceObj)) {
								data.push(traceObj);
							}
						});
					} else if (chartType != null && chartType != '' && chartType != undefined && chartType == 'lines') {
						var colorCount = 0;
						var lineColorCount = 0;
						colorArray = ['#1864ab', '#fd7e14', '#0b7285', '#ff6b6b'];
						$.each(chartDataObj, function(keyName, val) {
							var traceObj = {};
							var colorObj = {};
							if (keyName !== axisColumnName) {
								traceObj['x'] = chartDataObj[axisColumnName];
								traceObj['y'] = chartDataObj[keyName];
								traceObj['type'] = chartType;
								traceObj = getChartLabelOrHoverDataFormatter('texttemplate', traceObj, chartDataObj[keyName], plotlyChartLabelType, 'x', 'y');
								traceObj = getChartLabelOrHoverDataFormatter('hovertemplate', traceObj, chartDataObj[keyName], plotlyChartHoverType, 'x', 'y');
								var keys = keyName.split("ASCOL");
								keyName = keys[0];
								traceObj = addlegendLabelToTrace(traceObj, keyName, defaultLegendNames, userProvidedLegendNames);
								$.each(dataPropObject, function(key, val) {
									if (key === 'marker' && !jQuery.isEmptyObject(val) && val !== null) {
										var colorsArray = val['color'];
										if (colorsArray !== undefined && colorsArray !== null && !$.isArray(colorsArray)) {
											colorObj['color'] = colorsArray;
										} else if (colorsArray !== undefined && colorsArray !== null && $.isArray(colorsArray)) {
											colorObj['color'] = colorsArray[colorCount++];
										} else {
											colorObj['color'] = colorArray[colorCount++];
										}
										colorObj['size'] = val['size'];
										traceObj[key] = colorObj;
									} else if (key === 'marker' && (jQuery.isEmptyObject(val) || val === null)) {
										colorObj['color'] = colorArray[colorCount++];
										traceObj[key] = colorObj;
									} else if (key === 'line' && !jQuery.isEmptyObject(val) && val !== null) {
										var lineObject = Object.assign({}, val);
										var colorsArray = lineObject['color'];
										if (colorsArray !== undefined && colorsArray !== null && !$.isArray(colorsArray)) {
											lineObject['color'] = colorsArray;
										} else if (colorsArray !== undefined && colorsArray !== null && $.isArray(colorsArray)) {
											lineObject['color'] = colorsArray[lineColorCount++];
										} else {
											lineObject['color'] = colorArray[lineColorCount++];
										}
										traceObj[key] = lineObject;
									} else {
										traceObj[key] = val;
									}
								});
							}
							if (traceObj !== null && !jQuery.isEmptyObject(traceObj)) {
								data.push(traceObj);
							}
						});
					} else if (chartType != null && chartType != '' && chartType != undefined && chartType == 'scatter') {
						var colorCount = 0;
						colorArray = ['#1864ab', '#fd7e14', '#0b7285', '#ff6b6b'];
						$.each(chartDataObj, function(keyName, val) {
							var traceObj = {};
							var colorObj = {};
							if (keyName !== axisColumnName) {
								traceObj['x'] = chartDataObj[axisColumnName];
								traceObj['y'] = chartDataObj[keyName];
								traceObj['type'] = chartType;
								traceObj['mode'] = 'markers';
								traceObj = getChartLabelOrHoverDataFormatter('texttemplate', traceObj, chartDataObj[keyName], plotlyChartLabelType, 'x', 'y');
								traceObj = getChartLabelOrHoverDataFormatter('hovertemplate', traceObj, chartDataObj[keyName], plotlyChartHoverType, 'x', 'y');
								var keys = keyName.split("ASCOL");
								keyName = keys[0];
								traceObj = addlegendLabelToTrace(traceObj, keyName, defaultLegendNames, userProvidedLegendNames);
								traceObj['marker'] = colorObj;
								$.each(dataPropObject, function(key, val) {
									if (key === 'marker' && !jQuery.isEmptyObject(val) && val !== null) {
										var colorsArray = val['color'];
										if (colorsArray !== undefined && colorsArray !== null && !$.isArray(colorsArray)) {
											colorObj['color'] = colorsArray;
										} else if (colorsArray !== undefined && colorsArray !== null && $.isArray(colorsArray)) {
											colorObj['color'] = colorsArray[colorCount++];
										} else {
											colorObj['color'] = colorArray[colorCount++];
										}
										colorObj['size'] = val['size'];
										traceObj[key] = colorObj;
									} else if (key === 'marker' && (jQuery.isEmptyObject(val) || val === null)) {
										colorObj['color'] = colorArray[colorCount++];
										traceObj[key] = colorObj;
									} else {
										traceObj[key] = val;
									}
								});
							}
							if (traceObj !== null && !jQuery.isEmptyObject(traceObj)) {
								data.push(traceObj);
							}
						});
					} else if (chartType != null && chartType != '' && chartType != undefined && chartType == 'treemap') {
						var treeDomain = 0
						for (var key in chartDataObj) {
							var treeDataObj = chartDataObj[key];
							var treeObj = {};
							treeObj['type'] = chartType;
							treeObj['labels'] = treeDataObj[treeMapColObj['labels']];
							treeObj['parents'] = treeDataObj[treeMapColObj['parents']];
							treeObj['values'] = treeDataObj[treeMapColObj['values']];
							treeObj['textinfo'] = "label+value";
							treeObj['branchvalues'] = "total";
							var length = Object.keys(chartDataObj).length;
							var split = ((100 / length) / 100);
							if (chartDataObj != null && !jQuery.isEmptyObject(chartDataObj) && Object.keys(chartDataObj).length > 1) {
								treeObj['domain'] = { x: [treeDomain, ((treeDomain + split) - 0.02)] };
								treeDomain = treeDomain + split + 0.02;
							}
							data.push(treeObj);
						}



						//                        dataObj['type'] = chartType;
						//                        dataObj['labels'] = ['Eve', "Cain", "Seth", "Enos", "Noam", "Abel", "Awan", "Enoch", "Azura"];
						//                        dataObj['parents'] = ["", "Eve", "Eve", "Seth", "Seth", "Eve", "Eve", "Awan", "Eve"];
						//                        dataObj['values'] = [10, 14, 12, 10, 2, 6, 6, 1, 4];
						//                        dataObj['textinfo'] = "label+value";

					} else if (chartType != null && chartType != '' && chartType != undefined && chartType == 'histogram') {
						dataObj['x'] = chartDataObj[0];
						dataObj['y'] = chartDataObj[key];
						dataObj['type'] = chartType;
						colorObj['size'] = 20;
						dataObj['name'] = 'value';
						dataObj['marker'] = colorObj;
					} else if (chartType != null && chartType != '' && chartType != undefined && chartType == 'funnel') {
						var colorCount = 0;
						colorArray = ['#1864ab', '#fd7e14', '#0b7285', '#ff6b6b'];
						$.each(chartDataObj, function(keyName) {
							var traceObj = {};
							var colorObj = {};
							if (keyName !== axisColumnName) {
								traceObj['y'] = chartDataObj[axisColumnName];
								traceObj['x'] = chartDataObj[keyName];
								traceObj['type'] = chartType;
								//traceObj['orientation'] = 'h';
								traceObj['name'] = '';
								traceObj = getChartLabelOrHoverDataFormatter('texttemplate', traceObj, chartDataObj[keyName], plotlyChartLabelType, 'y', 'x');
								traceObj = getChartLabelOrHoverDataFormatter('hovertemplate', traceObj, chartDataObj[keyName], plotlyChartHoverType, 'y', 'x');
								var keys = keyName.split("ASCOL");
								keyName = keys[0];
								$.each(dataPropObject, function(key, val) {
									if (key === 'marker' && !jQuery.isEmptyObject(val) && val !== null) {
										var colorsArray = val['colors'];
										if (colorsArray !== undefined && colorsArray !== null && colorsArray.length !== null) {
											colorObj['color'] = colorsArray[colorCount++];
										} else {
											colorObj['color'] = colorArray[colorCount++];
										}
										traceObj[key] = colorObj;
									} else if (key === 'marker' && (jQuery.isEmptyObject(val) || val === null)) {
										colorObj['color'] = colorArray[colorCount++];
										traceObj[key] = colorObj;
									} else {
										traceObj[key] = val;
									}
								});
							}
							if (traceObj !== null && !jQuery.isEmptyObject(traceObj)) {
								data.push(traceObj);
							}
						});
					} else if (chartType != null && chartType != '' && chartType != undefined && chartType == 'waterfall') {
						var colorCount = 0;
						colorArray = ['#1864ab', '#fd7e14', '#0b7285', '#ff6b6b'];
						$.each(chartDataObj, function(key) {
							var traceObj = {};
							var colorObj = {};
							if (key !== axisColumnName) {
								var measureArr = [];
								var axisCols = chartDataObj[axisColumnName];
								if (axisCols != null && !jQuery.isEmptyObject(axisCols)) {
									var axisLength = axisCols.length;
									for (var l = 0; l < axisLength; l++) {
										measureArr.push("relative");
									}
									traceObj['measure'] = measureArr;
								}
								traceObj['x'] = chartDataObj[axisColumnName];
								traceObj['y'] = chartDataObj[key];
								traceObj['type'] = chartType;
								traceObj['orientation'] = 'v';
								traceObj['name'] = 'value';
								$.each(dataPropObject, function(key, val) {
									if (key === 'marker' && !jQuery.isEmptyObject(val) && val !== null) {
										var colorsArray = val['colors'];
										if (colorsArray !== undefined && colorsArray !== null && colorsArray.length !== null) {
											colorObj['color'] = colorsArray[colorCount++];
										} else {
											colorObj['color'] = colorArray[colorCount++];
										}
										traceObj[key] = colorObj;
									} else if (key === 'marker' && (jQuery.isEmptyObject(val) || val === null)) {
										colorObj['color'] = colorArray[colorCount++];
										traceObj[key] = colorObj;
									} else {
										traceObj[key] = val;
									}
								});
							}
							if (traceObj !== null && !jQuery.isEmptyObject(traceObj)) {
								data.push(traceObj);
							}
						});
					} else if (chartType != null && chartType != '' && chartType != undefined && chartType == 'scatterpolar') {
						var colorCount = 0;
						colorArray = ['#1864ab', '#fd7e14', '#0b7285', '#ff6b6b'];
						$.each(chartDataObj, function(keyName) {
							var traceObj = {};
							var colorObj = {};
							if (keyName !== axisColumnName) {
								traceObj['r'] = chartDataObj[keyName];
								traceObj['theta'] = chartDataObj[axisColumnName];
								traceObj['type'] = chartType;
								traceObj['fill'] = 'toself';
								var keys = keyName.split("ASCOL");
								keyName = keys[0];
								traceObj = addlegendLabelToTrace(traceObj, keyName, defaultLegendNames, userProvidedLegendNames);
								$.each(dataPropObject, function(key, val) {
									if (key === 'marker' && !jQuery.isEmptyObject(val) && val !== null) {
										var colorsArray = val['colors'];
										if (colorsArray !== undefined && colorsArray !== null && !$.isArray(colorsArray)) {
											colorObj['color'] = colorsArray;
										} else if (colorsArray !== undefined && colorsArray !== null && $.isArray(colorsArray)) {
											colorObj['color'] = colorsArray[colorCount++];
										} else {
											colorObj['color'] = colorArray[colorCount++];
										}
										traceObj[key] = colorObj;
									} else if (key === 'marker' && (jQuery.isEmptyObject(val) || val === null)) {
										colorObj['color'] = colorArray[colorCount++];
										traceObj[key] = colorObj;
									} else {
										traceObj[key] = val;
									}
								});
							}
							if (traceObj !== null && !jQuery.isEmptyObject(traceObj)) {
								data.push(traceObj);
							}
						});
					} else if (chartType != null && chartType != '' && chartType != undefined && chartType == 'indicator') {
						var traceObj = {};
						var domainObj = {};
						var domainArr = [];
						domainArr.push(0);
						domainArr.push(1);
						domainObj["x"] = domainArr;
						domainObj["y"] = domainArr;
						traceObj['domain'] = domainObj;
						traceObj['value'] = chartDataObj;
						traceObj['type'] = chartType;
						traceObj['mode'] = "gauge+number";
						traceObj['gauge'] = resultObj['gauge'];
						if (dataPropObject != null && !jQuery.isEmptyObject(dataPropObject)) {
							$.each(dataPropObject, function(key, val) {
								traceObj[key] = val;
							});
						}
						if (traceObj !== null && !jQuery.isEmptyObject(traceObj)) {
							data.push(traceObj);
						}
					} else {
						dataObj['x'] = chartDataObj[0];
						dataObj['y'] = chartDataObj[key];
						dataObj['type'] = chartType;
						dataObj['name'] = 'value';
						dataObj['marker'] = colorObj;
					}
					var chartOuterId = 'visionVisualizeChart' + count;
					let observer = new MutationObserver(function(mutations) {
						window.dispatchEvent(new Event('resize'));
					});

					let child = document.getElementById(chartOuterId);
					observer.observe(child, { attributes: true });
					if (chartOuterId != null && chartOuterId != '' && jQuery.inArray(chartOuterId, chartDivArr) <= -1) {
						chartDivArr.push(chartOuterId);
					}
					var margin = {};
					if (chartType != null && chartType != '' && chartType != undefined && chartType == 'treemap') {
						margin = {
							l: 0,
							r: 0,
							b: 0,
							t: 0,
							pad: 0
						};
					} else {
						margin = {
							l: 40,
							r: 30,
							b: 30,
							t: 40,
							pad: 4
						};
					}
					var layout = {
						margin: margin,
						dragmode: false

					};
					//                    if (Object.keys(chartDataObj).length > 2)
					//                    {
					//                        layout['showlegend'] = true;
					//  
					if(layoutObj !=null && !jQuery.isEmptyObject(layoutObj))
					{                  
					$.each(layoutObj, function(key, val) {
						layout[key] = val;
					});
					}
					var polar = {
						radialaxis: {
							visible: true
						},
						showlegend: false
					};
					if (chartType == 'scatterpolar') {
						layout['polar'] = polar;
						layout['dragmode'] = true;
					}
					if (compareChartFlag == 'Y') {
						if (chartType == 'bar' || chartType == 'column') {
							var grid = {
								rows: 1,
								columns: 2,
								pattern: 'independent'
							};
						} else if (chartType == 'lines') {
							var grid = {
								rows: 2,
								columns: 1,
								pattern: 'independent',
								subplots: [['xy'], ['xy2']]
							};
						}
						layout['grid'] = grid;
						layout['showlegend'] = false;
					}
					$("#" + chartId).empty();
					if (chartType != null && chartType != '' && chartType != undefined && chartType != 'lines' && chartType != 'treemap') {
						for (var m = 0; m < data.length; m++) {
							var markerObj = data[m]['marker'];
							if ((!(markerObj != null && !jQuery.isEmptyObject(markerObj))) ||
								(markerObj != null && !jQuery.isEmptyObject(markerObj) &&
									!(markerObj['colors'] != null && !jQuery.isEmptyObject(markerObj['colors'])))) {
								var colorObj = [];
								var colorsMarker = {};
								if (chartType == 'pie' || chartType == 'donut') {
									colorObj = ['#2F6345', '#40875E', '#58B07E', '#C48C00', '#F0AB00', '#FFBE1D', '#FFCC4B', '#827E32', '#A8A240', '#C5C169'];
									markerObj['colors'] = colorObj;
								} else {
									var x = data[m]['x'];
									colorObj = ['#1864B1', '#FF7F0E']
									var colorsX = [];
									if (x != null && x != '' && x != undefined && !jQuery.isEmptyObject(x)) {
										for (var p = 0; p < x.length; p++) {
											colorsX.push(colorObj[m]);
										}
										markerObj['color'] = colorsX;
									}

								}
								if (markerObj != null && !jQuery.isEmptyObject(markerObj)) {
									data[m]['marker'] = markerObj;
								}
							}
						}
					}
					if (isCurrencyConversionEvent !== undefined && isCurrencyConversionEvent !== ''
						&& isCurrencyConversionEvent === 'true') {
						var chartTraceArray = [];
						$.each(data, function(index, value) {
							var chartTraceData = value;
							if (chartType != null && chartType != '' && chartType != undefined
								&& (chartType == 'pie' || chartType == 'donut')) {
								var chartData = chartTraceData['values'];
								chartTraceData = getChartLabelOrHoverDataFormatter('texttemplate', chartTraceData, chartData, plotlyChartLabelType, 'label', 'value', isCurrencyConversionEvent);
								chartTraceData = getChartLabelOrHoverDataFormatter('hovertemplate', chartTraceData, chartData, plotlyChartHoverType, 'label', 'value', isCurrencyConversionEvent);
							} else {
								if (chartType == 'bar') {
									var chartData = chartTraceData['x'];
									chartTraceData = getChartLabelOrHoverDataFormatter('texttemplate', chartTraceData, chartData, plotlyChartLabelType, 'y', 'x', isCurrencyConversionEvent);
									chartTraceData = getChartLabelOrHoverDataFormatter('hovertemplate', chartTraceData, chartData, plotlyChartHoverType, 'y', 'x', isCurrencyConversionEvent);
								} else {
									var chartData = chartTraceData['y'];
									chartTraceData = getChartLabelOrHoverDataFormatter('texttemplate', chartTraceData, chartData, plotlyChartLabelType, 'x', 'y', isCurrencyConversionEvent);
									chartTraceData = getChartLabelOrHoverDataFormatter('hovertemplate', chartTraceData, chartData, plotlyChartHoverType, 'x', 'y', isCurrencyConversionEvent);
								}
							}
							chartTraceArray.push(chartTraceData);
						});
						data = chartTraceArray;
					}
					if(layout.hoverlabel !=null ){
					layout.hoverlabel.font.family=layout.hoverlabel.font.family.join(",");
					}
					Plotly.newPlot(chartId, data, layout, config);
					var myPlot = document.getElementById(chartId);
					if (chartType != null && chartType != '' && chartType != undefined) {
						myPlot.on('plotly_click', function(data) {
							applyChartClickColours(data, chartId, chartType);
						});

						var colorsObj = $("#" + chartId).attr("colors");
						if (colorsObj != null && !jQuery.isEmptyObject(colorsObj)) {
							applyChartColors(colorsObj, chartId, chartType);
						}
					}
				}

			}, error: function(e) {
				console.log("The Error Message is:::" + e.message);
				sessionTimeout(e);
			}
		});

	} else {
		showStr(errorMessageStr);
	}

}


function selectHomeAggregateFunction(chartId, chartType, axisColumns, filterCondition, colorsObj) {
	axisColumns = JSON.stringify(axisColumns);
	if(typeof colorsObj === 'object')
	{
		colorsObj = JSON.stringify(colorsObj); 
	}
	var tn = colorsObj['tn'];
	var pn = colorsObj['pn'];
	/*commented by Nikhil*/
	/*if (tn == null && tn == undefined) {
		colorsObj = JSON.stringify(colorsObj);
	}*/
	if (filterCondition != null && filterCondition != '' && filterCondition != undefined) {
		filterCondition = JSON.parse(filterCondition);
		if (filterCondition != null && !jQuery.isEmptyObject(filterCondition)) {
			filterCondition.forEach((item) => {
				if (item['values'] != null && !jQuery.isEmptyObject(item['values'])) {
					item['values'] = item['values'].replace(/\s+/g, ";");
				}
			});

			filterCondition = JSON.stringify(filterCondition);
		}
	}
	$("#" + chartId).attr("colorDataFilters", filterCondition);
	var div = "<li onclick=applyHomeColorDataFunctions('Color','" + chartId + "','" + chartType + "','" + axisColumns + "','" + colorsObj + "')>Change Color</li>"
		+ "<li onclick=applyHomeColorDataFunctions('Data','" + chartId + "','" + chartType + "','" + axisColumns + "','" + colorsObj + "')>View Data</li>"
		+ "<li onclick=applyHomeColorDataFunctions('DrillDown','" + chartId + "','" + chartType + "','" + axisColumns + "','" + colorsObj + "')>Drill Down Charts</li>";
	$("#chartAggregate").remove();
	$('body').append("<div id='chartAggregate'><ul></ul></div>");
	$("#chartAggregate ul").html(div);
	var contextMenu = $("#chartAggregate").jqxMenu({ width: '100px', height: 140 + 'px', autoOpenPopup: false, mode: 'popup' });
	contextMenu.jqxMenu('open', parseInt(event.clientX) + 5, parseInt(event.clientY) + 5);

}
function applyHomeColorDataFunctions(value, chartId, chartType, axisColumns, colorsObj) {
	var data = chartClickDataObj[chartId];
	var filterCondition = $("#" + chartId).attr("colorDataFilters");
	var filterString = '';
	for (var i = 0; i < data.points.length; i++) {
		if (chartType != null && chartType == 'funnel') {
			filterString = data.points[i].y;
		} else if (chartType != null && chartType == 'lines') {
			filterString = data.points[i].x;
		} else {
			filterString = data.points[i].label;
		}

	}
	if (axisColumns != null && axisColumns != '' && axisColumns != undefined) {
		axisColumns = JSON.parse(axisColumns);
		if (axisColumns != null && !jQuery.isEmptyObject(axisColumns)) {
			axisColumns = axisColumns[0]['columnName'];
		}
	}
	if (value != null && value != '' && value != undefined && value == 'Color') {
		applyChartClickColours(data, chartId, chartType, "Save", colorsObj);
	} else if (value != null && value != '' && value != undefined && value == 'DrillDown') {
		drillDownCharts(axisColumns, filterString, chartId, chartType, filterCondition);
	} else if (value != null && value != '' && value != undefined && value == 'Data') {

		if (filterCondition != null && filterCondition != '' && filterCondition != undefined) {
			filterCondition = JSON.parse(filterCondition);
			if (filterCondition != null && !jQuery.isEmptyObject(filterCondition)) {
				filterCondition.forEach((item) => {
					item['values'] = item['values'].replace(";", ' ');
				});

				filterCondition = JSON.stringify(filterCondition);
			}
		}

		getGridData(axisColumns, filterString, chartId, filterCondition);
	}
}
function drillDownCharts(filterCol, filterValue, chartId, chartType, filterCondition) {
	var paramArray = [];
	var filtercolumn = {};
	var paramObj = {};
	if (filterValue != null && filterValue != '' && filterValue != undefined) {

		paramObj.colName = filterCol;
		paramObj.operator = 'IN';
		paramObj.values = "" + filterValue + "";
		paramArray.push(paramObj);
	}
	if (filterCondition != null && filterCondition != '') {
		filtercolumn = JSON.parse(filterCondition);
		if (filtercolumn != null && !jQuery.isEmptyObject(filtercolumn) && filtercolumn.length > 0) {
			var filterobj = {};
			filterobj.colName = filtercolumn[0].colName;
			filterobj.operator = filtercolumn[0].operator;
			filterobj.values = filtercolumn[0].values;
			paramArray.push(filterobj);
		}
	}
	$.ajax({
		type: "post",
		traditional: true,
		dataType: 'json',
		url: "getDrillDownFilterColumns",
		cache: false,
		data: {
			id: chartId,
			type: chartType,
			excludeColumn: filterCol,
			filterCondition: JSON.stringify(paramArray)
		},
		success: function(response) {
			if (response != null && !jQuery.isEmptyObject(response)) {
				var result = response['result'];
				var Resultstr = response['Resultstr'];
				var tableName = response['tableName'];
				var chartConfigObj = response['chartConfigObj'];
				var chartTypes = response['chartTypes'];
				var filterDivId = "<div id='visionVisualizeChartFilters' class='visionVisualizeChartFiltersClass'>"
					+ "<div id='visionChartDrillDownChartTypesId' class='visionVisualizeDrillDownChartTypeClass'>"
					+ "<div><span class='visionChartDrillDownChartTypesClass'>Chart Type :</span></div>"
					+ "<div id='visionVisualizeChartDrillDownChartTypesId' class='visionVisualizeChartDrillDownChartTypesClass'></div></div>"
					+ "<div id='visionVisualizeChartFiltersXAxisField' class='visionVisualizeChartFiltersXAxisFieldClass'>"
					+ "<span class='visionVisualizeChartFiltersXAxisFieldSpanClass'>Add Fields Here</span></div>"
					+ "<div id='visionVisualizeChartXAxisFiltersValues' class='visionVisualizeChartXAxisFiltersValuesClass'></div>"
					+ "<div id='visionVisualizeChartDrillDownConfigureId' class='visionVisualizeChartDrillDownConfigureClass'></div>"
					+ "</div>";

				$("#dialog").html(Resultstr);
				$("#dialog").dialog({
					title: (labelObject['Message'] != null ? labelObject['Message'] : 'Message'),
					width: 650,
					maxWidth: 650,
					height: 400,
					maxHeight: 1000,
					fluid: true,
					buttons: [{
						text: (labelObject['Create Chart'] != null ? labelObject['Create Chart'] : 'Create Chart'),
						click: function() {
							var colTableName;
							$('#visionVisualizeChartXAxisFiltersValues div').each(function(event) {
								let value = $(this).text();
								var id = $(this).attr('id');
								if (id != null && id != null && id != undefined) {
									id = id.replace("_" + value + "_divId", "");
								}
								colTableName = id + "." + value;
							});

							var chartOptAllObj = {};
							var chartConfigPositionKeyObj = {};
							var chartConfigToggleStatus = {};
							var filteredchartOptAllObj = {};
							var errorMessageStr = "";
							var errorCount = 0;
							var chartConfigId = "visionVisualizeChartDrillDownConfigureId ul li";
							$('#' + chartConfigId).each(function(i, ele) {
								var optColName = $(this).attr("data-column-name");
								var optKeyType = $(this).attr("data-key-type");
								if (optKeyType != null && optKeyType != '' && optKeyType != undefined) {
									chartConfigPositionKeyObj[optColName] = optKeyType;
								}
								var optName = $("#" + optColName).attr("data-opt-name");
								var optMan = $("#" + optColName).attr("data-man");
								var inputType = $("#" + optColName).attr("type");
								var optValue = $("#" + optColName).val();
								if (inputType == 'checkbox') {
									if ($("#" + optColName).is(':checked')) {
										optValue = true;
									} else {
										optValue = false;
									}
								}
								if (inputType == 'number') { //nested
									if (optValue != null && optValue != '' && optValue >= 1) {
										optValue = parseInt(optValue);
									}
								}
								//                    var isChartHoverActive = $("#toggleButtonForchartHover" + upperChartType).hasClass('active');
								//                    if (!isChartHoverActive && optColName.includes('HOVERLABELDATA')) {
								//                        $("#" + optColName).val('none');
								//                        optValue = 'none';
								//                    } else if (optColName.includes('HOVERLABELDATA') && optValue === 'none') {
								//                        $("#" + optColName).val('x+y');
								//                        optValue = 'x+y';
								//                    }
								if (optColName.includes('HOVERLABELDATA')) {
									if (optValue !== '' && optValue !== null && optValue !== undefined) {
										if (optValue === 'none') {
											$("#toggleButtonForchartHover" + chartType).removeClass('active');
											$("#toggleButtonForchartHover" + chartType).find('.on-off-text').text('off');
										} else {
											$("#toggleButtonForchartHover" + chartType).addClass('active');
											$("#toggleButtonForchartHover" + chartType).find('.on-off-text').text('on');
										}
									}
								}
								var toggleBtnClasses = $(this).find('.toggle-btn').attr('class');
								if (toggleBtnClasses !== null && toggleBtnClasses !== '' && toggleBtnClasses !== undefined) {
									if (toggleBtnClasses.includes('active')) {
										chartConfigToggleStatus[optColName] = true;
									} else {
										chartConfigToggleStatus[optColName] = false;
									}
								}
								var isToggleActive = $(this).hasClass('active-filter');
								if (optValue != null && optValue != '' && isToggleActive) {
									chartOptAllObj[optColName] = optValue;
								} else if (optMan == 'M') {
									errorCount++;
									errorMessageStr += "<tr><td>  " + '<p class="visionGenericTabStatusDialog">' + " " + '<span style="color:blue;">' + " " + optName + "</span><b>:</b> Should not be null.</tr></td><br>";
								} else if (!isToggleActive && optColName.includes('SHOWLEGEND')) {
									chartOptAllObj[optColName] = false;
								}
							});

							$.each(chartConfigPositionKeyObj, function(key, value) {
								var newKey = key.replace(/[0-9]/g, '');
								filteredchartOptAllObj[newKey] = value;
							});
							var chartPropObj = JSON.stringify(chartOptAllObj);
							var chartConfigObj = JSON.stringify(filteredchartOptAllObj);
							var drillDownChartType = $("#drillDownChartTypeId").val();
							$(this).html("");
							$(this).dialog("close");
							$(this).dialog("destroy");
							if (colTableName != null && colTableName != '' && colTableName != undefined && colTableName != 'null') {
								showDrillDownCharts(colTableName, tableName, paramArray, drillDownChartType, chartPropObj, chartConfigObj);
							}


						}

					},
					{
						text: (labelObject['Cancel'] != null ? labelObject['Cancel'] : 'Cancel'),
						click: function() {
							$(this).html("");
							$(this).dialog("close");
							$(this).dialog("destroy");

						}
					}],
					open: function() {
						$("#visualizeChartConfigFiltersData").append(filterDivId);
						$("#VisualizeBIFilterColumns").append(result);
						$("#visionVisualizeChartDrillDownChartTypesId").html(chartTypes);
						$("#visionVisualizeChartDrillDownChartTypesId").attr('chartTypes', JSON.stringify(chartConfigObj));
						$("#visionVisualizeChartDrillDownConfigureId").html(chartConfigObj[chartType]);
						$(".VisionImageVisualizationTableClass").unbind().click(function() {
							$(this).parent().parent().find('ul').toggle();
							if ($(this).parent().parent().find('ul').is(":visible")) {

								$(this).css({ transform: "rotate(90deg)" });
							} else {
								$(this).css({ transform: "rotate(360deg)" });
							}
						});

						$(".filter-container").unbind('click').on('click', function(event) {
							$(this).parent().siblings(':last').toggle();
							$(this).find('img').toggleClass('open');
						});
						$(".toggle-btn").unbind('click').on('click', function(event) {
							$(this).toggleClass('active');
							var onOfftext = $(this).children(':first').text();
							if (onOfftext === 'off') {
								$(this).children(':first').text('on');
								$(this).parents('.main-container').siblings(':last').find('*').attr('disabled', false);
							} else {
								$(this).children(':first').text('off');
								$(this).parents('.main-container').siblings(':last').find('*').attr('disabled', true);
							}
							var isActive = $(this).hasClass('active');
							var currentToggleSelector = $(this).closest("li");
							var currentElementId = $(this).attr('id');
							var toBeToggledSelectors = currentToggleSelector.children("ul").children();
							var upperChartType = chartType.toUpperCase();
							if (isActive) {
								$.each(toBeToggledSelectors, function(index, element) {
									$(this).addClass('active-filter');
								});
								if (currentElementId !== '' && currentElementId !== null && currentElementId !== undefined) {
									if (currentElementId === 'toggleButtonForchartHover' + upperChartType) {
										$('#' + upperChartType + 'HOVERLABELDATA').attr('disabled', false);
										$('#' + upperChartType + 'HOVERLABELDATA').val('x+y');
									}
								}
							} else {
								$.each(toBeToggledSelectors, function(index, element) {
									$(this).removeClass('active-filter');
								});
								if (currentElementId !== '' && currentElementId !== null && currentElementId !== undefined) {
									if (currentElementId === 'toggleButtonForchartHover' + upperChartType) {
										$('#' + upperChartType + 'HOVERLABELDATA').attr('disabled', true);
										$('#' + upperChartType + 'HOVERLABELDATA').val('none');
									}
								}
							}
							$("#visionChartProperties").trigger('change');
						});



						$("#Loader").css("display", "none");
						$("body").css({ "pointer-events": "auto" });
						$(".visionVisualizationDragColumns").addClass('visionVisualizationDragFilterColumns');
						$("#dialog").addClass('filterPopUp');
						$(".ui-dialog").css("z-index", "99999"); //jaggu
					},
					beforeClose: function(event, ui) {

					}
				});
				$(".columnFilterationClass").unbind('keyup').keyup(function(event) {
					tableColumnsFilteration(event, $(this));
				});



			}
		},
		error: function(e) {
			console.log(e);
			sessionTimeout(e);
			stopLoader();
		}
	});

}
function showStr(message) {
	//        $("#dialog").html(message);
	var modalObj = {
		title: 'Joins',
		body: message
	};
	var buttonArray = [
		{
			text: 'Close',
			click: function() {

			},
			isCloseButton: true
		}
	];
	modalObj['buttons'] = buttonArray;
	createModal("dataDxpSplitterValue", modalObj);
	$("#Loader").css("display", "none");
	$("body").css({ "pointer-events": "auto" });

}
function resizeDiv(id) {
	$("#" + id).resizable({
		//        handle: "all",
		handles: "nw,ne,sw,se,n,e,s,w",
		stop: function(event, ui) {

			var resizeHeight = ui.size.height;
			var resizewidth = ui.size.width;
			var target = event.target;
		}
	});
}
function removeColumn($this, id, chartId) {
	$("#isCurrencyConversionEvent").val('false');
	$($this).parent().remove();
	$("#" + id['id']).remove();
	$("#" + chartId['id']).empty();
}
function showChartConfigurationDIv(divId, listId) {
	var divChildId = divId;
	$("#visualizeChartConfigColumns").hide();
	$("#visualizeChartConfigProperties").hide();
	$("#visualizeChartConfigFilters").hide();
	$("#visualizeChartConfigJoins").hide();
	$("#" + listId).parent().find('li.visionVisualizeConfigActiveClass').removeClass('visionVisualizeConfigActiveClass');
	$("#" + listId).addClass('visionVisualizeConfigActiveClass');
	var parentDiv = $("#visionVisualizationDataChartViewId").find(".ui-resizable-handle").parent();
	if (parentDiv.length > 0) {
		var id = parentDiv[0]['id'];
		var chartCount;
		if (id != null && id != '' && id != undefined) {
			chartCount = id.replace("visionVisualizeChart", "");
		}
		$("#" + divId).show();
		if (chartCount != null) {
			chartCount = parseInt(chartCount);
			if (divChildId != null && divChildId != '' && divChildId != undefined && divChildId == 'visualizeChartConfigColumns') {
				var columnDivs = $("#visualizeChartConfigColumns").children();
				$.each(columnDivs, function(index, val) {
					var columnChildDiv = val;
					$('#' + columnChildDiv['id']).hide();
				});
				$("#visionVisualizeChartColumns" + chartCount).show();
			} else if (divChildId != null && divChildId != '' && divChildId != undefined && divChildId == 'visualizeChartConfigProperties') {
				var columnDivs = $("#visualizeChartConfigProperties").children();
				$.each(columnDivs, function(index, val) {
					var columnChildDiv = val;
					$('#' + columnChildDiv['id']).hide();
				});
				$("#visionVisualizeChartProperties" + chartCount).show();
			} else if (divChildId != null && divChildId != '' && divChildId != undefined && divChildId == 'visualizeChartConfigFilters') {
				var columnDivs = $("#visualizeChartConfigFilters").children();
				$.each(columnDivs, function(index, val) {
					var columnChildDiv = val;
					$('#' + columnChildDiv['id']).hide();
				});
				$("#visionVisualizeChartFilters" + chartCount).show();
				$("#visionVisualizeChartFiltersValues" + chartCount).show();
			}
		}
	}
}
function addFilterValues(count, id, label, divid, filterCount, chartType, columnLabel) {
	var data = {};
	data['count'] = count;
	data['id'] = id;
	data['label'] = label;
	data['divid'] = divid;
	data['filterCount'] = filterCount;
	data['chartType'] = chartType;
	data['columnLabel'] = columnLabel;

	$.ajax({
		url: 'fetchFiltersValues',
		type: "POST",
		data: data,
		dataType: 'json',
		traditional: true,
		cache: false,
		success: function(response) {
			stopLoader();
			$("#Loader").css("display", "none");
			$("body").css({ "pointer-events": "auto" });
			if (response != null && !jQuery.isEmptyObject(response)) {
				var result = response['result'];
				$("#visionVisualizeChartFiltersValues" + count).append(result);
				var checkBoxList = response['checkBoxList'];
				$("#visionVisualizeChartFiltersFieldValuesId" + filterCount).jqxListBox({
					filterable: true,
					checkboxes: true,
					source: checkBoxList,
					theme: 'energyblue',
					displayMember: 'text',
					valueMember: 'value'
				});
				var timeOut = null;
				$('[id^="visionVisualizeChartFiltersFieldDivId"]').unbind('keyup').on('keyup', function(event) {
					clearTimeout(timeOut);
					timeOut = setTimeout(function() {
						var axisTargetId = "visionVisualizeChartAxisId_" + count;
						var valuesTargetId = "visionVisualizeChartValuesId_" + count;
						var chartTargetId = "visionVisualizeChartId" + count;
						var chartTargetType = chartDivObj["visionVisualizeChart" + count];
						if (!(chartTargetType != null && chartTargetType != '' && chartTargetType != undefined)) {
							chartTargetType = chartType;
						}
						if ($.trim($("#" + valuesTargetId).html()).length > 0 && chartTargetType != null && chartTargetType != '' && chartTargetType == 'indicator') {
							getChart(chartTargetId, count, chartTargetType, "", "", "");
						} else if ($.trim($("#" + axisTargetId).html()).length > 0 && $.trim($("#" + valuesTargetId).html()).length > 0) {
							getChart(chartTargetId, count, chartTargetType, "", "", "");
						} else {
							if (chartType != null && chartType != undefined && chartType != '' && chartType == 'Card') {
								var FilterType = $("#Cardtype").text();
								getCardDateDataFilterChange(count);
							}
						}

					}, 3000);
				});
				$('[id^="visionVisualizeChartFiltersFieldDivId"]').unbind('change').on('change', function(event) {
					var axisTargetId = "visionVisualizeChartAxisId_" + count;
					var valuesTargetId = "visionVisualizeChartValuesId_" + count;
					var chartTargetId = "visionVisualizeChartId" + count;
					var chartTargetType = chartDivObj["visionVisualizeChart" + count];
					if (!(chartTargetType != null && chartTargetType != '' && chartTargetType != undefined)) {
						chartTargetType = chartType;
					}
					if ($.trim($("#" + valuesTargetId).html()).length > 0 && chartTargetType != null && chartTargetType != '' && chartTargetType == 'indicator') {
						getChart(chartTargetId, count, chartTargetType, "", "", "");
					} else if ($.trim($("#" + axisTargetId).html()).length > 0 && $.trim($("#" + valuesTargetId).html()).length > 0) {
						getChart(chartTargetId, count, chartTargetType, "", "", "");
					} else {
						if (chartType != null && chartType != undefined && chartType != '' && chartType == 'Card') {
							var FilterType = $("#Cardtype").text();
							getCardDateDataFilterChange(count);
						}
					}
				});
				$('[id^="visionVisualizeChartFiltersFieldDivId"]').on('checkChange', function(event) {
					clearTimeout(timeOut);
					timeOut = setTimeout(function() {
						var axisTargetId = "visionVisualizeChartAxisId_" + count;
						var valuesTargetId = "visionVisualizeChartValuesId_" + count;
						var chartTargetId = "visionVisualizeChartId" + count;
						var chartTargetType = chartDivObj["visionVisualizeChart" + count];
						if (!(chartTargetType != null && chartTargetType != '' && chartTargetType != undefined)) {
							chartTargetType = chartType;
						}
						if ($.trim($("#" + valuesTargetId).html()).length > 0 && chartTargetType != null && chartTargetType != '' && chartTargetType == 'indicator') {
							getChart(chartTargetId, count, chartTargetType, "", "", "");
						} else if ($.trim($("#" + axisTargetId).html()).length > 0 && $.trim($("#" + valuesTargetId).html()).length > 0) {
							getChart(chartTargetId, count, chartTargetType, "", "", "");
						} else {
							if (chartType != null && chartType != undefined && chartType != '' && chartType == 'Card') {
								var FilterType = $("#Cardtype").text();
								getCardDateDataFilterChange(count);
							}
						}

					}, 3000);

				});
			}

		}, error: function(e) {
			console.log("The Error Message is:::" + e.message);
			sessionTimeout(e);
		}
	});
}
function RemoveFilterColumns(filterCount, chartType, count) {
	$("#visionVisualizeChartFiltersFieldDivId" + filterCount).remove();
	var axisTargetId = "visionVisualizeChartAxisId_" + count;
	var valuesTargetId = "visionVisualizeChartValuesId_" + count;
	var chartTargetId = "visionVisualizeChartId" + count;
	if ($.trim($("#" + axisTargetId).html()).length > 0 && $.trim($("#" + valuesTargetId).html()).length > 0) {
		var chartTargetType = chartDivObj["visionVisualizeChart" + count];
		if (!(chartTargetType != null && chartTargetType != '' && chartTargetType != undefined)) {
			chartTargetType = chartType;
		}
		getChart(chartTargetId, count, chartTargetType, "", "", "");
	}
}
function showSlicerField(id) {
	$("#" + id).show();
}
function convertOptions(optionType, count) {
	if (optionType == 'Remove') {
		$("#visionVisualizeChart" + count).remove();
	} else if (optionType == 'Buttons') {
		var checkBoxIds = $('.visionVisualizeChartFiltersValuesCheckBox:checked').map(function() {
			return this.value;
		}).get();

		if (checkBoxIds == null || jQuery.isEmptyObject(checkBoxIds)) {
			checkBoxIds = $('.visionVisualizeChartSlicersButtons:checked').map(function() {
				return this.value;
			}).get();
		}
		var columnName = $("#visionVisualizeColumnName" + count).val();
		var tableName = $("#visionVisualizeTableName" + count).val();
		var data = {};
		data['count'] = count;
		data['tableName'] = tableName;
		data['columnName'] = columnName;
		data['checkBoxIds'] = JSON.stringify(checkBoxIds);
		$.ajax({
			url: 'fetchSlicerButtonValues',
			type: "POST",
			data: data,
			dataType: 'json',
			traditional: true,
			cache: false,
			success: function(response) {
				stopLoader();
				$("#Loader").css("display", "none");
				$("body").css({ "pointer-events": "auto" });
				if (response != null && !jQuery.isEmptyObject(response)) {
					var result = response['result'];
					$("#visionVisualizeChartId" + count).html(result);
				}

			}, error: function(e) {
				console.log("The Error Message is:::" + e.message);
				sessionTimeout(e);
			}
		});
	} else if (optionType == 'List') {

		var columnName = $("#visionVisualizeColumnName" + count).val();
		var tableName = $("#visionVisualizeTableName" + count).val();
		var data = {};
		data['count'] = count;
		data['tableName'] = tableName;
		data['columnName'] = columnName;
		$.ajax({
			url: 'fetchSlicerListValues',
			type: "POST",
			data: data,
			dataType: 'json',
			traditional: true,
			cache: false,
			success: function(response) {
				stopLoader();
				$("#Loader").css("display", "none");
				$("body").css({ "pointer-events": "auto" });
				if (response != null && !jQuery.isEmptyObject(response)) {
					var result = response['result'];
					$("#visionVisualizeChartId" + count).html(result);
				}

			}, error: function(e) {
				console.log("The Error Message is:::" + e.message);
				sessionTimeout(e);
			}
		});
	} else if (optionType == 'Dropdown') {
		var columnName = $("#visionVisualizeColumnName" + count).val();
		var tableName = $("#visionVisualizeTableName" + count).val();
		var data = {};
		data['count'] = count;
		data['tableName'] = tableName;
		data['columnName'] = columnName;
		$.ajax({
			url: 'fetchSlicerDropdownValues',
			type: "POST",
			data: data,
			dataType: 'json',
			traditional: true,
			cache: false,
			success: function(response) {
				stopLoader();
				$("#Loader").css("display", "none");
				$("body").css({ "pointer-events": "auto" });
				if (response != null && !jQuery.isEmptyObject(response)) {
					var result = response['result'];
					$("#visionVisualizeChartId" + count).html(result);
					//                   $('select[multiple]').multiselect();
					$('#slicerOpt').multiselect({
						columns: 1,
						placeholder: 'Select',
						search: true,
						selectAll: true
					});
				}

			}, error: function(e) {
				console.log("The Error Message is:::" + e.message);
				sessionTimeout(e);
			}
		});
	}
}
function getAggregateFunctions($event, columnId, chartId, count, columnName, id, appendId) {
	clearTimeout(dragEventTimeout);
	var chartInnerId = chartId.replace("visionVisualizeChartId", "visionVisualizeChart")
	var chartType = chartDivObj[chartInnerId];
	var chartTypes = ['pie','donut','bar','column','lines'];
	var div = "<li onclick=applyAggregateFunctions('AVG','" + columnId + "','" + chartId + "','" + count + "','" + columnName + "','" + id + "','" + appendId + "')>Average</li>"
		+ "<li onclick=applyAggregateFunctions('Count','" + columnId + "','" + chartId + "','" + count + "','" + columnName + "','" + id + "','" + appendId + "')>Count</li>"
		+ "<li onclick=applyAggregateFunctions('Sum','" + columnId + "','" + chartId + "','" + count + "','" + columnName + "','" + id + "','" + appendId + "')>Sum</li>";
	if (chartType != null && chartType != '' && chartType != undefined && chartTypes.indexOf(chartType) > -1) {
		div += "<li onclick=applyAggregateFunctions('UniqueCount','" + columnId + "','" + chartId + "','" + count + "','" + columnName + "','" + id + "','" + appendId + "')>Count(Distinct)</li>";
	}
	div += "<li onclick=applyAggregateFunctions('Max','" + columnId + "','" + chartId + "','" + count + "','" + columnName + "','" + id + "','" + appendId + "')>Max</li>"
		+ "<li onclick=applyAggregateFunctions('Min','" + columnId + "','" + chartId + "','" + count + "','" + columnName + "','" + id + "','" + appendId + "')>Min</li>";
	$("#jqxAggregate").remove();
	$('body').append("<div id='jqxAggregate'><ul></ul></div>");
	$("#jqxAggregate ul").html(div);
	var contextMenu = $("#jqxAggregate").jqxMenu({ width: '90px', height: 140 + 'px', autoOpenPopup: false, mode: 'popup' });
	contextMenu.jqxMenu('open', parseInt(event.clientX) + 5, parseInt(event.clientY) + 5);
	$(".dxpPageContent").scroll(function(event) {
		if ($("#jqxAggregate ul").length > 0) {
			var pos = $(".dxpPageContent").scrollTop();
			$("#jqxAggregate").css("top", $event.offsetTop - pos);
		}
	});
}
function getCardAggregateFunctions($event, columnId, chartId, count, columnName, id,divId) {
	var div = "<li onclick=applyCardAggregateFunctions('AVG','" + columnId + "','" + chartId + "','" + count + "','" + columnName + "','" + id + "','"+divId+"')>Average</li>"
		+ "<li onclick=applyCardAggregateFunctions('Count','" + columnId + "','" + chartId + "','" + count + "','" + columnName + "','" + id + "','"+divId+"')>Count</li>"
		+ "<li onclick=applyCardAggregateFunctions('UniqueCount','" + columnId + "','" + chartId + "','" + count + "','" + columnName + "','" + id + "','"+divId+"')>Count(Distinct)</li>"
		+ "<li onclick=applyCardAggregateFunctions('Sum','" + columnId + "','" + chartId + "','" + count + "','" + columnName + "','" + id + "','"+divId+"')>Sum</li>"
		+ "<li onclick=applyCardAggregateFunctions('Max','" + columnId + "','" + chartId + "','" + count + "','" + columnName + "','" + id + "','"+divId+"')>Max</li>"
		+ "<li onclick=applyCardAggregateFunctions('Min','" + columnId + "','" + chartId + "','" + count + "','" + columnName + "','" + id + "','"+divId+"')>Min</li>";

	$("#jqxAggregate").remove();
	$('body').append("<div id='jqxAggregate'><ul></ul></div>");
	$("#jqxAggregate ul").html(div);
	var contextMenu = $("#jqxAggregate").jqxMenu({ width: '90px', height: 140 + 'px', autoOpenPopup: false, mode: 'popup' });
	contextMenu.jqxMenu('open', parseInt(event.clientX) + 5, parseInt(event.clientY) + 5);
}
function applyAggregateFunctions(aggregateType, columnId, chartId, Count, columnName, id, appendId) {
	var legendLabel = $("#" + columnId).attr("data-label-name");
	var columnLabel = $("#" + columnId).attr("data-column-label");
	$("#" + columnId).remove();
	var aggregateColumn = aggregateType + "(" + columnName + ")";
	var columnData = '<div id="COLUMN_' + id + "_" + columnName + "_" + Count + '" class="visualizeDivData"' //group
		+ ' title="' + columnName + '" data-table-name="' + id + '" '
		+ ' data-column-name="' + aggregateType + "(" + id + "." + columnName + ')" data-aggregate-name="' + aggregateType + '" data-label-name="' + legendLabel + '"><span class="visionColsText" >' + aggregateColumn
		+ '</span><img src="images/Horizontal_Dots.svg" title="Aggregate Functions"'
		+ ' onclick="getAggregateFunctions(this,\'' + columnId + '\',\'' + chartId + '\',' + Count + ',\'' + columnName + '\',\'' + id + '\')" class="visionAggregateColumnBtn" style="display: inline;"><img src="images/close_white.png" '
		+ ' onclick="removeColumn(this,' + columnId + ',' + chartId + ')" class="visionValuesColumnCloseBtn" style="display: inline;margin-left:8px">'
		+ '</div>';
	$("#" + appendId).append(columnData)
	$("#" + columnId).attr("data-column-label", columnLabel);
	var chartInnerId = chartId.replace("visionVisualizeChartId", "visionVisualizeChart")
	var chartType = chartDivObj[chartInnerId];
	var axisId = "visionVisualizeChartAxisId_" + Count;
	var valuesId = "visionVisualizeChartValuesId_" + Count;
	var comboValuesId = "visionVisualizeChartComboValuesId_" + Count;
	if (chartType != null && chartType != '' && chartType == 'indicator') {
		getChart(chartId, Count, chartType, "", "", "");
	} else if (chartType != null && chartType != '' && chartType == 'BarAndLine') {
		if ($.trim($("#" + axisId).html()).length > 0 && $.trim($("#" + valuesId).html()).length > 0
			&& $.trim($("#" + comboValuesId).html()).length > 0) {
			getChart(chartId, Count, chartType, "", "", "");
		}

	} else if ($.trim($("#" + axisId).html()).length > 0) {
		getChart(chartId, Count, chartType, "", "", "");
	}
}
function applyCardAggregateFunctions(aggregateType, columnId, chartId, Count, columnName, id,divId) {
	$("#" + columnId).remove();
	var columnLabel = $("#" + divId).attr("columnLabel");
	var aggregateColumn = aggregateType + "(" + columnLabel + ")";
	var columnData = '<div id="COLUMN_' + id + "_" + columnName + '" class="visualizeDivData"' //group
		+ ' title="' + columnName + '" data-table-name="' + id + '" '
		+ ' data-column-name="' + aggregateType + "(" + id + "." + columnName + ')" data-aggregate-name="' + aggregateType + '"><span class="visionColsText" >' + aggregateColumn
		+ '</span><img src="images/Horizontal_Dots.svg" title="Aggregate Functions"'
		+ ' onclick="getCardAggregateFunctions(this,\'' + columnId + '\',\'' + chartId + '\',' + Count + ',\'' + columnName + '\',\'' + id + '\',\'' + divId + '\')" class="visionAggregateColumnBtn" style="display: inline;"><img src="images/close_white.png" title="Remove Column"'
		+ ' onclick="removeColumn(this,' + columnId + ',' + chartId + ')" class="visionValuesColumnCloseBtn" style="display: inline;margin-left:8px">'
		+ '</div>';
	$("#visionVisualizeCardChartValuesId_" + Count).append(columnData);
	getCardData(aggregateType, Count, "");
	
}
function chartOptions(type, count) {
	if (type != '' && type != '' && type != undefined) {
		$("#visionVisualizeChart" + count).remove();
	}
}
function populateSelectedColor(id, inputId, selectionFlag) {
	inputId = id.split("_")[0];
	inputId = $.trim(inputId);
	if (selectionFlag == 'S') {
		$("#" + inputId).val($("#" + id).val());

	} else {
		var inputIdVal = $("#" + inputId).val();
		if (inputIdVal != null && inputIdVal != '') {
			$("#" + inputId).val(inputIdVal + "," + $("#" + id).val());
		} else {
			$("#" + inputId).val($("#" + id).val());
		}

		$("#" + inputId + "_CLR_DIV").css('display', 'block');
		$("#" + inputId + "_CLR_DIV").append("<div style='background-color:" + $("#" + id).val() + ";position: relative;float: left;margin-left: 10px;width:30px;height:30px'><img src='images/X_icon-04.svg' title='Remove Color' "
			+ " onclick=removeColor(this,\'" + inputId + "\',\'" + $("#" + id).val() + "\') class='visionCloseColorBox' style=''></div>");

	}
}
function removeColor($this, inputId, colorCode) {
	$($this).parent().remove();
	var inputIdVal = $("#" + inputId).val();
	if (inputIdVal != null && inputIdVal != '' && inputIdVal.indexOf(colorCode) > -1) {
		inputIdVal = inputIdVal.replace("," + colorCode, "");
		inputIdVal = inputIdVal.replace(colorCode + ",", "");
		inputIdVal = inputIdVal.replace(colorCode, "");
		$("#" + inputId).val(inputIdVal);
		if (!($("#" + inputId).val() != null && $("#" + inputId).val() != '')) {
			$("#" + inputId + "_CLR_DIV").css('display', '');

		}

		var childLength = $('#visualizeArea').find("div.ui-resizable-handle").length;
		if (childLength > 0) {
			var parentDivId = $('#visualizeArea').find("div#nwgrip").parent();
			parentDivId = parentDivId[0]['id'];
			if (parentDivId != null && parentDivId != '' && parentDivId != undefined) {
				var chartCount = parentDivId.replace("visionVisualizeChart", "");
				var chartType = chartDivObj["visionVisualizeChart" + chartCount];
				var chartId = parentDivId.replace("visionVisualizeChart", "visionVisualizeChartId");
				getChart(chartId, chartCount, chartType, "", "", "");
			}

		}
	}
}
function showDxpJoinsPopup(chartid, count, charttype) {
	var axisId = "visionVisualizeChartAxisId_" + count;
	var valuesId = "visionVisualizeChartValuesId_" + count;
	var tablesObj = [];
	var columns = {};
	$('#' + axisId + ' div').each(function(i, ele) {
		console.log(i + ': ' + ele);
		var divId = $(this).attr("id");
		console.log("divId:::" + divId);
		var connType = $("#" + divId).attr("data-coon-type");
		var tableName = $("#" + divId).attr("data-table-name");
		var columnName = $("#" + divId).attr("data-column-name");
		if (tableName != null
			&& tableName != ''
			&& columnName != null && columnName != '') {
			var columnObj = {};
			columnObj['connType'] = connType;
			columnObj['tableName'] = tableName;
			columnObj['columnName'] = columnName;
			columns[i] = columnObj;
			if (!(tablesObj.indexOf(tableName) > -1)) {
				tablesObj.push(tableName);
			}
		}

	});
	console.log("columns:::" + JSON.stringify(columns));
	var rows = {};
	$('#' + valuesId + ' div').each(function(i, ele) {
		console.log(i + ': ' + ele);
		var divId = $(this).attr("id");
		console.log("divId:::" + divId);
		var connType = $("#" + divId).attr("data-coon-type");
		var tableName = $("#" + divId).attr("data-table-name");
		var columnName = $("#" + divId).attr("data-column-name");

		if (tableName != null
			&& tableName != ''
			&& columnName != null && columnName != '') {

			var columnObj = {};
			columnObj['connType'] = connType;
			columnObj['tableName'] = tableName;
			columnObj['columnName'] = columnName;
			rows[i] = columnObj;
			if (!(tablesObj.indexOf(tableName) > -1)) {
				tablesObj.push(tableName);
			}
		}

	});
	if (tablesObj != null && tablesObj.length > 1) {
		//$("#visionVisualizeConfigJoinQuery" + count).empty();
		$.ajax({
			type: "post",
			traditional: true,
			dataType: 'json',
			url: "chartDxpJoinTables",
			data: {
				'tablesObj': JSON.stringify(tablesObj)
			},
			cache: false,
			success: function(response) {
				if (response != null) {
					var tabsString = response['tabsString'];
					$("#dialog").html(tabsString);
					$("#dialog").dialog({
						title: (labelObject['Join Clauses'] != null ? labelObject['Join Clauses '] : 'Join Clauses'),
						modal: true,
						width: 965,
						maxWidth: 1015,
						height: 350,
						maxHeight: 1000,
						fluid: true,
						buttons: [{
							text: (labelObject['Ok'] != null ? labelObject['Ok'] : 'Ok'),
							click: function() {
								viewDxpJoinQuery();
								var parentDOM = document.getElementById("visualizeChartConfigJoins");
								var test = parentDOM.getElementsByClassName("visionVisualizeConfigJoinQueryClass"); // a list of matching elements, *not* the element itself
								var testTarget = parentDOM.getElementsByClassName("visionVisualizeConfigJoinQueryClass")[0];
								var joinQuery = testTarget.value;
								if (joinQuery != null && joinQuery != '') {
									$("#visualizeChartConfigJoins").hide();
									getChart(chartid, count, charttype, joinQuery, "", "");
								}
								$(this).html("");
								$(this).dialog("close");
								$(this).dialog("destroy");
							}
						},
						{
							text: (labelObject['Cancel'] != null ? labelObject['Cancel'] : 'Cancel'),
							click: function() {
								$(this).html("");
								$(this).dialog("close");
								$(this).dialog("destroy");
								// $("#labeld").empty();

							}

						}],
						open: function() {

						},
						beforeClose: function(event, ui) {

						}
					});
					var selectedJoinTables = response['selectedJoinTables'];
					$('#tabs-1').html(selectedJoinTables);
					$(".visionETLColMapImage").mousedown(function(event) {
						treeIconClickEvent = event;
					})
				}
			},
			error: function(e) {
				console.log(e);
				sessionTimeout(e);
				stopLoader();
			}
		});
	} else {
		var showStr = "";
		if (tablesObj != null && tablesObj.length == 0) {

			showStr = "Please Drag Multiple Table Columns in Axis and Values for Join";
		} else {
			showStr = "For single table there is no join";
		}
		$("#visionVisualizeConfigJoinQuery" + count).html(showStr);
	}
}
function showStr(message) {
	$("#dialog").html(message);
	$("#dialog").dialog({
		title: (labelObject['Join Clauses'] != null ? labelObject['Join Clauses '] : 'Join Clauses'),
		width: 450,
		maxWidth: 450,
		height: 350,
		maxHeight: 1000,
		fluid: true,
		buttons: [{

		}],
		open: function() {
			$("#Loader").css("display", "none");
			$("body").css({ "pointer-events": "auto" });
		},
		beforeClose: function(event, ui) {

		}
	});
}
function showDxpJoinsTables(event, tableName, tableMapId, iconIndex) {

	showLoader();
	var prevTables = [];
	$(event.target).closest('tr').prevAll('tr').each(function(index) {
		if (this.rowIndex != 0) {
			var tableName = this.cells[0].children[0].value;
			prevTables.push(tableName)
		}
	});
	tableName = $("#SOURCE_SELECT_JOIN_TABLES_" + iconIndex).val();
	var joinColumnMapping = $("#" + tableMapId).attr("data-mappedcolumns");
	if (!(joinColumnMapping != null && joinColumnMapping != '' && joinColumnMapping != undefined)) {
		joinColumnMapping = $("#" + tableMapId + "_hidden").val();
	}
	var currentJoinTableId = $("#currentJoinTableId").val();
	if (currentJoinTableId != null && currentJoinTableId != '') {
		var columnJoinMapping = {};
		var joinType = $("#joinType").val();
		var i = 1;
		$("#etlJoinClauseTable tbody tr").each(function() {
			var tdArray = this.cells;
			if (tdArray != null && tdArray.length != 0) {
				var joinObj = {};
				var childTableColumn = $(tdArray[1]).find("input").val();
				var operator = $(tdArray[2]).find("option:selected").val();
				var masterTableColumn = $(tdArray[3]).find("input").val();
				var staticValue = $(tdArray[4]).find("input").val();
				var andOrOperator = $(tdArray[5]).find("option:selected").val();
				if (childTableColumn != null && childTableColumn != '') {
					joinObj['childTableColumn'] = (childTableColumn != null && childTableColumn == 'Select') ? "" : childTableColumn;
					joinObj['operator'] = operator;
					joinObj['masterTableColumn'] = (masterTableColumn != null && masterTableColumn == 'Select') ? "" : masterTableColumn;
					joinObj['andOrOperator'] = andOrOperator;
					joinObj['staticValue'] = staticValue;
					joinObj['joinType'] = joinType;
					//$("#operatorId option:selected").text();
					console.log("childTableColumn::" + childTableColumn);
					console.log("operator::" + operator);
					console.log("masterTableColumn::" + masterTableColumn);
					console.log("andOrOperator::" + andOrOperator);
					columnJoinMapping[i] = joinObj;
					i++;
				}

			}

		});
		if (columnJoinMapping != null) {
			$("#" + currentJoinTableId).attr("data-mappedcolumns", JSON.stringify(columnJoinMapping));
			$("#" + currentJoinTableId + "_hidden").remove(); //joins
			$("#analyticsJoinClauseImg").append("<input type='hidden' id='" + currentJoinTableId + "_hidden' value='" + JSON.stringify(columnJoinMapping) + "'/>");
		}
	}
	$.ajax({
		type: 'post',
		traditional: true,
		dataType: 'html',
		cache: false,
		url: 'fetchChartJoinDxpTablesData',
		async: true,
		data: {
			tableName: tableName,
			sourceTables: JSON.stringify(prevTables),
			iconIndex: iconIndex,
			joinColumnMapping: joinColumnMapping
		},
		success: function(response) {
			stopLoader();
			if (response != null) {
				var response = JSON.parse(response);
				var joinsDataStr = response['joinsDataStr'];
				var trString = response['trString'];
				$("#joinMapColumnsDivId").html(joinsDataStr);
				var hiddenData = "<input type='hidden' id='childTableColsArray_hidden'/>\n\
                       <input type='hidden' id='masterTableColsArray_hidden'/><input type='hidden' id='currentJoinTableId'/>";
				$('#joinMapColumnsDivId').append(hiddenData);
				$("#childTableColsArray_hidden").val(JSON.stringify(response['childTableColsArray']));
				$("#masterTableColsArray_hidden").val(JSON.stringify(response['masterTableColsArray']));
				$("#currentJoinTableId").val(tableMapId);
				$("#joinTableColumnTr").html(trString);
				var currentJoinTableId = $("#currentJoinTableId").val();
				if (currentJoinTableId != null && currentJoinTableId != '') {
					var columnJoinMapping = {};
					var joinType = $("#joinType").val();
					var i = 1;
					$("#etlJoinClauseTable tbody tr").each(function() {
						var tdArray = this.cells;
						if (tdArray != null && tdArray.length != 0) {
							var joinObj = {};
							var childTableColumn = $(tdArray[1]).find("input").val();
							var operator = $(tdArray[2]).find("option:selected").val();
							var masterTableColumn = $(tdArray[3]).find("input").val();
							var staticValue = $(tdArray[4]).find("input").val();
							var andOrOperator = $(tdArray[5]).find("option:selected").val();
							if (childTableColumn != null && childTableColumn != '') {
								joinObj['childTableColumn'] = (childTableColumn != null && childTableColumn == 'Select') ? "" : childTableColumn;
								joinObj['operator'] = operator;
								joinObj['masterTableColumn'] = (masterTableColumn != null && masterTableColumn == 'Select') ? "" : masterTableColumn;
								joinObj['andOrOperator'] = andOrOperator;
								joinObj['staticValue'] = staticValue;
								joinObj['joinType'] = joinType;
								//$("#operatorId option:selected").text();
								console.log("childTableColumn::" + childTableColumn);
								console.log("operator::" + operator);
								console.log("masterTableColumn::" + masterTableColumn);
								console.log("andOrOperator::" + andOrOperator);
								columnJoinMapping[i] = joinObj;
								i++;
							}

						}

					});
					if (columnJoinMapping != null) {
						$("#" + currentJoinTableId).attr("data-mappedcolumns", JSON.stringify(columnJoinMapping));
					}
				}

			}

		},
		error: function(e) {
			sessionTimeout(e);
			stopLoader();
		}

	});
}
function selectDxpColumn($this, tableColType, dataArray) {
	labelObject = {};
	try {
		labelObject = JSON.parse($("#labelObjectHidden").val());
	} catch (e) {

	}
	//dddw
	// prepare the data
	var data = [];
	if (tableColType == 'fromColumn') {
		var dataStr = $("#fromTableColsArray_hidden").val();
		if (dataStr != null && dataStr != '') {
			data = JSON.parse(dataStr);
		}
	} else if (tableColType == 'toColumn') {
		var dataStr = $("#toTableColsArray_hidden").val();
		if (dataStr != null && dataStr != '') {
			data = JSON.parse(dataStr);
		}
	} else if (tableColType == 'childColumn') {
		var dataStr = $("#childTableColsArray_hidden").val();
		if (dataStr != null && dataStr != '') {
			data = JSON.parse(dataStr);
		}
	} else if (tableColType == 'masterColumn') {
		var dataStr = $("#masterTableColsArray_hidden").val();
		if (dataStr != null && dataStr != '') {
			data = JSON.parse(dataStr);
		}
	} else if (tableColType == 'fromWhereClauseColumn') {
		var dataStr = $("#whereClauseTableColsObj_hidden").val();
		if (dataStr != null && dataStr != '') {
			data = JSON.parse(dataStr);
		}
	} else if (tableColType == 'LOOKUP_TABLE,COLUMN') {
		data = dataArray;
	} else if (tableColType == 'fromFilterClauseColumn') {
		var dataStr = $("#filterClauseTableColsObj_hidden").val();
		if (dataStr != null && dataStr != '') {
			data = JSON.parse(dataStr);
		}
	}

	var source =
	{
		datatype: "json",
		datafields: [
			{ name: 'id' },
			{ name: 'parentid' },
			{ name: 'text' },
			{ name: 'icon' },
			{ name: 'value' }
		],
		id: 'id',
		icon: 'icon',
		localdata: data
	};
	// create data adapter.
	var dataAdapter = new $.jqx.dataAdapter(source);
	// perform Data Binding.
	dataAdapter.dataBind();
	var records = dataAdapter.getRecordsHierarchy('id', 'parentid', 'items', [{ name: 'text', map: 'label' }]);
	$("#columnMappingDialog").html("<div class='treeSearchInputDiv'><input id='treeSearchValue' type='text' class='treeSearchValueInput' placeholder='Search'/>\n\
    <img id='treeNodeSearchIconId' src='images/icon.png' style='height:12px;width:12px;cursor:pointer;' onclick=searchTreeNode('columnMappingTree')  /><div id='searchTreeErrorMesg' style='color:red;'></div></div>\n\
<div id='columnMappingTree' class='columnMappingTree'></div>");
	$("#columnMappingDialog").dialog({
		title: (labelObject['Columns'] != null ? labelObject['Columns'] : 'Columns'),
		modal: true,
		width: 'auto',
		maxWidth: 500,
		height: 330,
		fluid: true,
		buttons: [{
			text: (labelObject['Ok'] != null ? labelObject['Ok'] : 'Ok'),
			click: function() {
				var selectedItem = $("#columnMappingTree").jqxTree('getSelectedItem');
				if (selectedItem != null) {
					$($this).parents("td").find("input").val(selectedItem['value']);
					$($this).parents("td").find("input").attr("title", selectedItem['value']);
					//                       $($this).parent.find("input").val(selectedItem['value']); 
					trfmRulesChanged = true;
				}

				$(this).html("");
				$(this).dialog("close");
				$(this).dialog("destroy");
			}

		}],
		open: function() {
			$('#columnMappingTree').jqxTree({
				source: records, width: 300,
				toggleMode: 'click', theme: 'energyblue',
				enableHover: true,
				incrementalSearch: true,
				keyboardNavigation: true
			});
			$("#treeSearchValue").keyup(function(event) {
				if (event.keyCode === 13) {
					// Cancel the default action, if needed
					//            event.preventDefault();
					$("#treeNodeSearchIconId").click();
				}
			});
			$('#columnMappingTree').jqxTree('expandItem', $("#columnMappingTree").find('li:first')[0]);
			$("#columnMappingTree li").on('dblclick', function(event) {
				var selectedItem = $("#columnMappingTree").jqxTree('getSelectedItem');
				if (selectedItem != null && !(selectedItem['icon'] != null && selectedItem['icon'] != '')) {
					$($this).parents("td").find("input").val(selectedItem['value']);
					$($this).parents("td").find("input").attr("title", selectedItem['value']);
					$("#columnMappingDialog").dialog("close");
					$("#columnMappingDialog").dialog("destroy");
					trfmRulesChanged = true;
				}

			});
			var inputFieldsArray = [];
			var columnIndex = treeIconClickEvent.target.parentElement.cellIndex;
			var trs = treeIconClickEvent.target.parentElement.offsetParent.children[1].children;
			;
			$.each(trs, function(index) {
				var inputVal = this.children[columnIndex].children[0].value.trim()
				inputFieldsArray.push(inputVal);
			})

			var columnsArray = $(this).find('li');
			$.each(columnsArray, function(index) {
				var _this = this;
				var colVal = this.id.trim();
				$.each(inputFieldsArray, function(index) {
					var inputVal = this.trim();
					if (colVal == inputVal) {
						if ($(_this).find(".tickMark").length == 0) {
							$(_this.children[0]).prepend("<div class='tickMark'></div>");
						}
					}
				})
			});
			$(this).closest(".ui-dialog").find(".ui-button").eq(1).addClass("dialogyes");
			$(".visionHeaderMain").css("z-index", "999");
			$(".visionFooterMain").css("z-index", "999");
			$(".ui-dialog").addClass('visionDMTreePopup');
		},
		beforeClose: function(event, ui) {

			$(".visionHeaderMain").css("z-index", "99999");
			$(".visionFooterMain").css("z-index", "99999");
		}, close: function(event, ui) {

			$(this).html("");
			try {
				$("#columnMappingTree").jqxTree('destroy');
				$("#columnMappingTree").remove();
				$("#treeSearchInputDiv").remove();
			} catch (e) {
			}

		}

	});
}
function addNewJoinsRow(event, dbObject, id) {
	var trstring = $("#joinTableColumnTr").html();
	$("#etlJoinClauseTable tbody").append(trstring);
	$("#tabs-2").animate({
		scrollTop: $("#tabs-2").prop("scrollHeight")
	}, 1000);
}
function viewDxpJoinQuery(viewDivId) {
	//EtlMappingTable
	var query = "<ul><li><font color='#0071c5'>FROM</font>";
	var joinQuery = "FROM";
	var i = 0;
	$("#EtlMappingTable thead tr").each(function() {
		if (i != 0) {
			var tdArray = this.cells;
			if (tdArray != null && tdArray.length != 0) {
				var tableName = $(tdArray[0]).find("option:selected").val();
				var joinTableName = $(tdArray[0]).find("option:selected").val();
				tableName = "<font color='#F911E9'>" + tableName + "</font>"
				if (i == 1) {
					query += " " + tableName + " " + tableName +"</li><li><ul>";
					joinQuery += " " + joinTableName + " "+joinTableName +" ";
				} else {
					var mappedcolumnsObjStr = $(tdArray[1]).find("img").attr("data-mappedcolumns");
					//data-mappedcolumns  
					console.log("mappedcolumnsObjStr:::" + mappedcolumnsObjStr);
					if (mappedcolumnsObjStr != null && mappedcolumnsObjStr != '') {
						var mappedcolumnsObj = JSON.parse(mappedcolumnsObjStr);
						if (mappedcolumnsObj != null && !jQuery.isEmptyObject(mappedcolumnsObj)) {
							var j = 0;
							var mapObjLength = Object.keys(mappedcolumnsObj).length;
							for (var key in mappedcolumnsObj) {
								var mappedColObj = mappedcolumnsObj[key];
								if (mappedColObj != null && !jQuery.isEmptyObject(mappedColObj)) {
									var childTableColumn = mappedColObj['childTableColumn'];
									var joinChildTableColumn = mappedColObj['childTableColumn'];
									if (childTableColumn != null && childTableColumn != '') {
										var childTableColumnArray = childTableColumn.split(":");
										childTableColumn = "<font color='#F911E9'>" + childTableColumnArray[0] + "</font>." + childTableColumnArray[1];
										joinChildTableColumn = " " + childTableColumnArray[0] + "." + childTableColumnArray[1];
									}
									var masterTableColumn = mappedColObj['masterTableColumn'];
									var joinMasterTableColumn = mappedColObj['masterTableColumn'];
									if (masterTableColumn != null && masterTableColumn != '') {
										var masterTableColumnArray = masterTableColumn.split(":");
										masterTableColumn = "<font color='#F911E9'>" + masterTableColumnArray[0] + "</font>." + masterTableColumnArray[1];
										joinMasterTableColumn = " " + masterTableColumnArray[0] + "." + masterTableColumnArray[1];
									}
									if (j == 0) {
										query += "<li><font color='#0071c5'> " + mappedColObj['joinType'] + "</font> " + tableName + " "+tableName+" <font color='#0071c5'>ON</font> </li><li><ul>"
										joinQuery += mappedColObj['joinType'] + " " + joinTableName + " "+joinTableName+" ON ";
									}
									query += " <li> " + childTableColumn + " <font color='#0071c5'>" + mappedColObj['operator'] + "</font> "
										+ ((mappedColObj['staticValue'] != null && mappedColObj['staticValue'] != '') ? (" <font color='#FF0000'>'" + mappedColObj['staticValue'] + "'</font> ") : masterTableColumn); //staticValue
									joinQuery += joinChildTableColumn + " " + mappedColObj['operator'] + " "
										+ ((mappedColObj['staticValue'] != null && mappedColObj['staticValue'] != '') ? (mappedColObj['staticValue']) : joinMasterTableColumn) + " "; //staticValue

									if (j != parseInt(mapObjLength) - 1) {
										query += " <font color='#0071c5'>" + mappedColObj['andOrOperator'] + "</font> ";
										joinQuery += " " + mappedColObj['andOrOperator'] + " ";
									}
									query += "</li>";
								}
								j++;
							}
							query += "</ul></li>";
						}
					}
				}
			}
		}

		i++;
	});
	query += "</ul></li></ul>";
	console.log("Query:::" + query);
	if(!(viewDivId !=null && viewDivId !='' && viewDivId !=undefined)){
       $('.visionVisualizeConfigJoinQueryClass').html(query);
	   $('.visionVisualizeConfigJoinQueryClass').val(joinQuery);
	}else{
		$("#"+viewDivId).html(query);
		$("#"+viewDivId).val(joinQuery);
		$("#viewMergeJoinQueryErrorDivId").html("");
	}
}
function saveDxpJoinMapping(event, id) {
	var currentJoinTableId = $("#currentJoinTableId").val();
	if (currentJoinTableId != null && currentJoinTableId != '') {
		var columnJoinMapping = {};
		var joinType = $("#joinType").val();
		var i = 1;
		$("#etlJoinClauseTable tbody tr").each(function() {
			var tdArray = this.cells;
			if (tdArray != null && tdArray.length != 0) {
				var joinObj = {};
				var childTableColumn = $(tdArray[1]).find("input").val();
				var operator = $(tdArray[2]).find("option:selected").val();
				var masterTableColumn = $(tdArray[3]).find("input").val();
				var staticValue = $(tdArray[4]).find("input").val();
				var andOrOperator = $(tdArray[5]).find("option:selected").val();
				if (childTableColumn != null && childTableColumn != '') {
					joinObj['childTableColumn'] = (childTableColumn != null && childTableColumn == 'Select') ? "" : childTableColumn;
					joinObj['operator'] = operator;
					joinObj['masterTableColumn'] = (masterTableColumn != null && masterTableColumn == 'Select') ? "" : masterTableColumn;
					joinObj['andOrOperator'] = andOrOperator;
					joinObj['staticValue'] = staticValue;
					joinObj['joinType'] = joinType;
					//$("#operatorId option:selected").text();
					console.log("childTableColumn::" + childTableColumn);
					console.log("operator::" + operator);
					console.log("masterTableColumn::" + masterTableColumn);
					console.log("andOrOperator::" + andOrOperator);
					columnJoinMapping[i] = joinObj;
					i++;
				}

			}

		});
		if (columnJoinMapping != null) {
			$("#" + currentJoinTableId).attr("data-mappedcolumns", JSON.stringify(columnJoinMapping));
			$("#" + currentJoinTableId + "_hidden").remove();
			$("#analyticsJoinClauseImg").append("<input type='hidden' id='" + currentJoinTableId + "_hidden' value='" + JSON.stringify(columnJoinMapping) + "'/>");
		}
	}
	var dialogSplitMessage = dialogSplitIconText((labelObject['Saved Successfully'] != null ? labelObject['Saved Successfully'] : 'Saved Successfully'), "Y");
	$("#dialog1").html(dialogSplitMessage);
	$("#dialog1").dialog({
		title: (labelObject['Message'] != null ? labelObject['Message'] : 'Message'),
		modal: true,
		height: 'auto',
		minWidth: 300,
		maxWidth: 'auto',
		fluid: true,
		buttons: [{
			text: (labelObject['Ok'] != null ? labelObject['Ok'] : 'Ok'),
			click: function() {
				viewDxpJoinQuery('viewMergeJoinQueryDivId');
				$(this).html("");
				$(this).dialog("close");
				$(this).dialog("destroy");
			}
		}],
		open: function() {
			stopLoader();
			$(this).closest(".ui-dialog").find(".ui-button").eq(1).addClass("dialogyes");
			$(this).closest(".ui-dialog").find(".ui-button").eq(2).addClass("dialogno");
			$(".visionHeaderMain").css("z-index", "999");
			$(".visionFooterMain").css("z-index", "999");
		},
		beforeClose: function(event, ui) {
			$(".visionHeaderMain").css("z-index", "99999");
			$(".visionFooterMain").css("z-index", "99999");
		}
	});
}
function filterData(chartid, valesArr, tableName) {

	var offsetDivs = $("[id^='visionVisualizeChartId']");
	$.each(offsetDivs, function(index, val) {
		var chartId = val['id'];
		var chartType = $("#" + chartId).attr("type");
		var count = chartId.replace("visionVisualizeChartId", "");
		var parentId = "visionVisualizeChart" + count;
		if (chartType != null && chartType != '' && chartType != undefined && chartType != "Slicer" && chartType != "Card") {
			if (jQuery.inArray(parentId, chartDivArr) > -1) {
				getChart(chartId, count, chartType, "", valesArr.toString(), tableName);
			}
		}

	});




	//    var count = 0
	//    $('#' + chartid + ' div').each(function (i, ele) {
	//        var chartId = $(this).attr("id");
	//        var Charttype = $(this).attr("type");
	//        if (Charttype != null && Charttype != '' && Charttype != undefined && Charttype != "Slicer" && Charttype != "Card") {
	//            count = chartId.slice(-1);
	//            getChart(chartId, count, Charttype, "", valesArr.toString(), tableName);
	//            console.log("testing");
	//        }
	//
	//    });
}
$("#visualizeChartConfigFilters").click(function() {
	var callflag = false;
	var valesArr = []
	$("#visualizeChartConfigFilters").find('input[type="checkbox"]:checked').each(function() {
		callflag = true;
		var value = $(this).val();
		valesArr.push(value);
	})
	//  var SliceColumn = $('.ms-selectall global').find('data-search-term').text();
	if (callflag) {
		filterData("visionVisualizationDataChartViewId", valesArr, "ZZ_BI_VISU");
	}

})
function searchElement(chartid, count, charttype) {
	$.ajax({
		type: "POST",
		url: "getchartElement",
		cache: false,
		data: {
			count: count,
			chartid: chartid
		},
		success: function(response) {
			$("#filterDxpResults" + count).html(response);
			$("#dxpFilterPopOver" + count).jqxPopover('open');
			$("#dxpFilterPopOver" + count).jqxPopover({
				offset: { left: -50, top: 0 },
				arrowOffsetValue: 50,
				title: "Charts Elements",
				showCloseButton: true,
				selector: $("#chartelement" + count)

			});
			$("#dxpFilterPopOver" + count).addClass('dxpFilterPopOverClass');
			$('#dxpFilterPopOver' + count).jqxPopover('open');
			$("#filterDxpResults" + count).html(response);
			$('.searchFilterResultsList').hover(
				function(event) {
					// MOUSE ENTER
					if (event.target) {
						$(event.target).find('.chartElementImgClass').show();
					}

				}, function() {
					// MOUSE LEAVE
					$('.chartElementImgClass').hide();
				}
			);

		},
		error: function(e) {
			console.log(e);
			sessionTimeout(e);
			stopLoader();
		}
	});



}
function getChartContent(id, chartId) {

	$.ajax({
		type: "POST",
		url: "getchartchildElement",
		cache: false,
		data: {
			chartId: chartId
		},
		success: function(response) {
			//  var response = "twoPriode Moving Average";
			$("#filterDxpResult2").html(response);
			$("#dxpFilterPopOver2").jqxPopover('open');
			$("#dxpFilterPopOver2").jqxPopover({
				offset: { left: -5, top: 0 },
				arrowOffsetValue: -5,
				showCloseButton: false,
				position: 'left',
				selector: $("#" + id)

			});
			$("#dxpFilterPopOver2").addClass('dxpFilterPopOverChildClass');
			//   $("#dxpFilterPopOver" + count).addClass('dxpFilterPopOverClass');
			$("#dxpFilterPopOver2").jqxPopover('open');
			$("#filterDxpResult2").html(response);

		},
		error: function(e) {
			console.log(e);
			sessionTimeout(e);
			stopLoader();
		}
	});



}
function getpredictivechart(chartId) {
	$("#Loader").css("display", "block");
	$("body").css({ "pointer-events": "auto" });
	var SliceColumn = $($('.visionVisualizeSlicerValuesDivClass').find('span')[0]).text();

	var axisId = "visionVisualizeChartAxisId_" + count;
	var valuesId = "visionVisualizeChartValuesId_" + count;
	var filtersId = "visionVisualizeChartFiltersValues" + count;
	// var joinQuery = $("#visionVisualizeConfigJoinQuery0").val();
	var axisColumns = [];
	var valuesColumns = [];
	var tablesObj = [];
	$('#' + axisId + ' div').each(function(i, ele) {
		var divId = $(this).attr("id");
		var tableName = $("#" + divId).attr("data-table-name");
		var columnName = $("#" + divId).attr("data-column-name");
		if (tableName != null
			&& tableName != ''
			&& columnName != null && columnName != '') {
			var columnObj = {};
			columnObj['tableName'] = tableName;
			columnObj['columnName'] = columnName;
			axisColumns.push(columnObj);
			if (!(tablesObj.indexOf(tableName) > -1)) {
				tablesObj.push(tableName);
			}

		}

	});
	var aggregateColsObj = [];
	$('#' + valuesId + ' div').each(function(i, ele) {
		var divId = $(this).attr("id");
		var tableName = $("#" + divId).attr("data-table-name");
		var columnName = $("#" + divId).attr("data-column-name");
		var aggregateName = $("#" + divId).attr("data-aggregate-name");
		if (tableName != null
			&& tableName != ''
			&& columnName != null && columnName != '') {
			var columnObj = {};
			columnObj['tableName'] = tableName;
			columnObj['columnName'] = columnName;
			if (aggregateName != null && aggregateName != '' && aggregateName != undefined) {
				aggregateColsObj.push(aggregateName);
			}
			valuesColumns.push(columnObj);
			if (!(tablesObj.indexOf(tableName) > -1)) {
				tablesObj.push(tableName);
			}

		}

	});
	var data = {};
	data['axisColumns'] = JSON.stringify(axisColumns);
	data['valuesColumns'] = JSON.stringify(valuesColumns);
	data['aggregateColumns'] = JSON.stringify(aggregateColsObj);
	data['tablesObj'] = JSON.stringify(tablesObj);
	data['SliceColumn'] = SliceColumn;
	//    var chartData = JSON.stringify(chartOptAllObj);
	//    $('#' + chartId).parent().attr("chart-data", chartData);
	//    data['chartConfigPositionKeyStr'] = JSON.stringify(chartConfigPositionKeyObj);
	$.ajax({
		url: 'fetchPredictiveChartData',
		type: "POST",
		data: data,
		dataType: 'json',
		traditional: true,
		cache: false,
		success: function(response) {
			stopLoader();
			$("#visualizeChartConfigJoins").hide();
			$("#Loader").css("display", "none");
			$("body").css({ "pointer-events": "auto" });
			if (response != null && !jQuery.isEmptyObject(response)) {
				var resultObj = response;
				var dataPropObject = resultObj['dataPropObject'];
				var chartDataObj = resultObj['data'];
				var layoutObj = resultObj['layout'];
				var data = [];
				var dataObj = {};
				var config = {
					responsive: true,
					displayModeBar: true,
					downloadImage: true,
					displaylogo: false,
					modeBarButtonsToRemove: ['zoom2d', 'pan', 'pan2d', 'zoomIn2d', 'zoomOut2d', 'resetViewMapbox', 'resetScale2d', 'sendDataToCloud', 'hoverClosestCartesian', 'autoScale2d', 'lasso2d', 'select2d', 'zoom2d']
				};
				$("#visionVisualizeChartId" + count).css('width', '100%', '!important');
				$("#visionVisualizeChartId" + count).css('height', '100%', '!important');
				var chartType = 'pie';
				if (chartType !== null && chartType !== '' && chartType !== undefined && chartType === 'pie') {
					$.each(chartDataObj, function(key) {
						var axisColumnName = axisColumns[0].columnName;
						axisColumnName = axisColumnName.split(".")[1];
						var traceObj = {};
						var colorObj = {};
						if (key !== axisColumnName) {
							traceObj['labels'] = chartDataObj[axisColumnName];
							traceObj['values'] = chartDataObj[key];
							traceObj['type'] = chartType;
							traceObj['name'] = 'value';
							traceObj['marker'] = colorObj;
							$.each(dataPropObject, function(key, val) {
								traceObj[key] = val;
							});
						}
						if (traceObj !== null && !jQuery.isEmptyObject(traceObj)) {
							data.push(traceObj);
						}
					});
				} else {
					dataObj['x'] = chartDataObj[0];
					dataObj['y'] = chartDataObj[key];
					dataObj['type'] = chartType;
					dataObj['name'] = 'value';
					dataObj['marker'] = colorObj;
				}
				var chartOuterId = 'visionVisualizeChart' + count;
				let observer = new MutationObserver(function(mutations) {
					window.dispatchEvent(new Event('resize'));
				});

				let child = document.getElementById(chartOuterId);
				observer.observe(child, { attributes: true });
				if (chartOuterId != null && chartOuterId != '' && jQuery.inArray(chartOuterId, chartDivArr) <= -1) {
					chartDivArr.push(chartOuterId);
				}
				var layout = {
					margin: {
						l: 40,
						r: 30,
						b: 30,
						t: 40,
						pad: 4
					},
					dragmode: false

				};
				layout['showlegend'] = true;
				$.each(layoutObj, function(key, val) {
					layout[key] = val;
				});
				var polar = {
					radialaxis: {
						visible: true
					},
					showlegend: false
				};
				if (chartType == 'scatterpolar') {
					layout['polar'] = polar;
				}
				$("#" + chartId).empty();
				Plotly.newPlot(chartId, data, layout, config);
			}

		}, error: function(e) {
			console.log("The Error Message is:::" + e.message);
			sessionTimeout(e);
		}
	});

}
function saveVisualizationData() {
	var dataArr = [];
	var totalChartDivs = $("[class^='visionVisualizeChartBoxClass']");
	$.each(totalChartDivs, function(index, val) {
		var chartId = val['id'];
		var count = chartId.replace("visionVisualizeChart", "");
		//    var type = $($(".visionVisualChartBoxSelected")[0]).attr("type"); jaggu
		var type = chartDivObj['visionVisualizeChart' + count]; //jaggu
		var axisId = "visionVisualizeChartAxisId_" + count;
		var columnLebel = $("#CardColumnLebel").val();
		if (type != null && type != '' && type != undefined && type == 'Card') {
			var valuesId = "visionVisualizeCardChartValuesId_" + count;
		} else {
			var valuesId = "visionVisualizeChartValuesId_" + count;
		}
		var comboValuesId = "visionVisualizeChartComboValuesId_" + count;
	    var percentValuesId = "visionVisualizeChartPercentValuesId_" + count;
		var filtersId = "visionVisualizeChartFiltersValues" + count;

		var axisColumns = [];
		var valuesColumns = [];
		var comboColumns = [];
	    var percentColumns = [];
		var tablesObj = [];
		var dateColumnData;

		$('#' + axisId + ' div').each(function(i, ele) {
			var divId = $(this).attr("id");
			var tableName = $("#" + divId).attr("data-table-name");
			var columnName = $("#" + divId).attr("data-column-name");
			if (tableName != null
				&& tableName != ''
				&& columnName != null && columnName != '') {
				var columnObj = {};
				columnObj['tableName'] = tableName;
				columnObj['columnName'] = columnName;
				axisColumns.push(columnObj);
				if (!(tablesObj.indexOf(tableName) > -1)) {
					tablesObj.push(tableName);
				}
			}

		});
		var aggregateColsObj = [];
		$('#' + valuesId + ' div').each(function(i, ele) {
			var divId = $(this).attr("id");
			var tableName = $("#" + divId).attr("data-table-name");
			var columnName = $("#" + divId).attr("data-column-name");
			var splittedColName = columnName.split('.')[1];
			var droppedColumnName = splittedColName.substring(0, splittedColName.length - 1);
			var userProvidedLegendLabel = $("#" + droppedColumnName + 'LEGENDLABEL').val();
			var aggregateName = $("#" + divId).attr("data-aggregate-name");
			if (type != null && type != '' && type == 'Card' && !(aggregateName != null && aggregateName != '' && aggregateName != undefined)) {
				aggregateName = "COUNT";
			}
			if (tableName != null
				&& tableName != ''
				&& columnName != null && columnName != '') {
				var columnObj = {};
				columnObj['tableName'] = tableName;
				columnObj['columnName'] = columnName;
				columnObj['userProvidedLegendLabel'] = userProvidedLegendLabel;
				if (aggregateName != null && aggregateName != '' && aggregateName != undefined) {
					columnObj['aggColumnName'] = aggregateName;
				}
				valuesColumns.push(columnObj);
				if (!(tablesObj.indexOf(tableName) > -1)) {
					tablesObj.push(tableName);
				}
			}

		});
		
		
		$('#' + comboValuesId + ' div').each(function(i, ele) {
		var divId = $(this).attr("id");
		var tableName = $("#" + divId).attr("data-table-name");
		var columnName = $("#" + divId).attr("data-column-name");
		var columnNameLabel = $("#" + divId).attr("data-column-label");
		var legendLable = $("#" + columnNameLabel + "LEGENDLABEL").val();
		
		var aggregateName = $("#" + divId).attr("data-aggregate-name");
		var columnLabel = $("#" + divId).attr("data-label-name");
		if (tableName != null
			&& tableName != ''
			&& columnName != null && columnName != '') {
			var columnObj = {};
			columnObj['tableName'] = tableName;
			columnObj['columnName'] = columnName;
			columnObj['columnLabel'] = columnLabel;
			if (aggregateName != null && aggregateName != '' && aggregateName != undefined) {
				columnObj['aggColumnName'] = aggregateName;
			}
			comboColumns.push(columnObj);
			if (!(tablesObj.indexOf(tableName) > -1)) {
				tablesObj.push(tableName);
			}
		}

	});

		$('#' + percentValuesId + ' div').each(function(i, ele) {
		var divId = $(this).attr("id");
		var tableName = $("#" + divId).attr("data-table-name");
		var columnName = $("#" + divId).attr("data-column-name");
		var columnNameLabel = $("#" + divId).attr("data-column-label");
		var legendLable = $("#" + columnNameLabel + "LEGENDLABEL").val();
		
		var aggregateName = $("#" + divId).attr("data-aggregate-name");
		var columnLabel = $("#" + divId).attr("data-label-name");
		if (tableName != null
			&& tableName != ''
			&& columnName != null && columnName != '') {
			var columnObj = {};
			columnObj['tableName'] = tableName;
			columnObj['columnName'] = columnName;
			columnObj['columnLabel'] = columnLabel;
			if (aggregateName != null && aggregateName != '' && aggregateName != undefined) {
				columnObj['aggColumnName'] = aggregateName;
			}
			percentColumns.push(columnObj);
			if (!(tablesObj.indexOf(tableName) > -1)) {
				tablesObj.push(tableName);
			}
		}

	});



		var filterConditions = [];

		$('#' + filtersId).children().each(function(i1) {
			var filterObj = {}

			var fieldName = $(this).find(".visionVisualizeChartFiltersFieldsClass").find("span").text();
			var operator = $(this).find(".visionVisualizeChartFiltersFieldOperatorsClass").find(".visionVisualizeChartFiltersOperatorsClass").val();
			var checkId = $(this).children('div:nth-child(2)');
			var checkValues = $("#" + checkId[0]['id']).jqxListBox('getCheckedItems'); //26-5-2022
			var values = [];
			$.each(checkValues, function(index) {
				values.push(this.value);
			});
			if (values != null && !jQuery.isEmptyObject(values)) {
				values = values.toString();
			}
			filterObj['colName'] = fieldName;
			filterObj['operator'] = operator;
			filterObj['values'] = values;
			filterConditions.push(filterObj);
		})
		var parmaFromArr = [];
		var parmaToArr = [];
		var paramDateArr = {};
		if (type != null && type != '' && type != undefined && type == 'Card') {
			var paramFromObj1 = {};
			var paramToObj1 = {};
			var colName = $("#visionVisualizeCardChartDateValuesId_" + count).find('div.visualizeDivData').attr("data-column-name");
			var innerFilterDivClassArray = $("#visionVisualizeCardChartDateSelectValuesId_" + count).find(".innerFilterDivClass");
			if (innerFilterDivClassArray != null && !jQuery.isEmptyObject(innerFilterDivClassArray) && innerFilterDivClassArray.length > 0) {
				var fromSelectId = $(innerFilterDivClassArray[0]).find("#ddwFrom" + count).attr("id");
				paramFromObj1.colName = colName;
				paramToObj1.colName = colName;
				if (fromSelectId != null && fromSelectId != '' && fromSelectId != undefined) {
					var fromMinval;
					var fromMaxval;
					var toMinval;
					var toMaxval
					var fromSelectValue = $("#" + fromSelectId).val();
					if (fromSelectValue != null && fromSelectValue != '' && fromSelectValue != undefined) {
						paramFromObj1.operator = fromSelectValue;
						if (fromSelectValue == "BETWEEN") {
							fromMinval = $("#tbminFrom" + count).val();
							fromMaxval = $("#tbmaxFrom" + count).val();
							paramFromObj1.minvalue = fromMinval;
							paramFromObj1.maxvalue = fromMaxval;
						}
						parmaFromArr.push(paramFromObj1);
					}
					var toSelectId = $(innerFilterDivClassArray[1]).find("select").attr("id");
					var toSelectValue = $("#" + toSelectId).val();
					if (toSelectValue != null && toSelectValue != '' && toSelectValue != undefined) {
						paramToObj1.operator = toSelectValue;
						if (toSelectValue == "BETWEEN") {
							toMinval = $("#tbminTo" + count).val();
							toMaxval = $("#tbmaxTo" + count).val();
							paramToObj1.minvalue = toMinval;
							paramToObj1.maxvalue = toMaxval;
						}
						parmaToArr.push(paramToObj1);
					}

				} else {
					paramToObj1.operator = "EQUALS";
					paramFromObj1.operator = "EQUALS";
					var fromValue = $("#visionVisualizeCardDateFromSelectValueId" + count).val();
					var toValue = $("#visionVisualizeCardDateToSelectValueId" + count).val();
					paramFromObj1.values = fromValue;
					paramToObj1.values = toValue;
					parmaFromArr.push(paramFromObj1);
					parmaToArr.push(paramToObj1);

				}

			} else if (dateColumnData != null && dateColumnData != '' && dateColumnData != undefined) {
				paramDateArr['dateColumnData'] = dateColumnData;
			}

		}

		var chartOptAllObj = {};
		var chartConfigToggleStatus = {};
		var chartConfigPositionKeyObj = {};
		var errorMessageStr = "";
		var errorCount = 0;
		var chartConfigId = "visionVisualizeChartProperties" + count + " ul li";
		if(['BasicAreaChart','StackedAreaChart','GradStackAreaChart','AreaPiecesChart' ,'ganttChart'].includes(type)){
			chartOptAllObj = getChartPropertiesEchart(type.toUpperCase(),count);
		}
		else{
		$('#' + chartConfigId).each(function(i, ele) {
			var optColName = $(this).attr("data-column-name");
			var optKeyType = $(this).attr("data-key-type");
			if (optKeyType != null && optKeyType != '' && optKeyType != undefined) {
				chartConfigPositionKeyObj[optColName] = optKeyType;
			}
			var optName = $("#" + optColName).attr("data-opt-name");
			var optMan = $("#" + optColName).attr("data-man");
			var inputType = $("#" + optColName).attr("type");
			var optValue = $("#" + optColName).val();
			if (inputType == 'checkbox') {
				if ($("#" + optColName).is(':checked')) {
					optValue = true;
				} else {
					optValue = false;
				}
			}
			var isChartHoverActive = $("#toggleButtonForchartHover" + type.toUpperCase()).hasClass('active');
			if (!isChartHoverActive && optColName.includes('HOVERLABELDATA')) {
				optValue = 'none';
			}
			if (inputType == 'number') { //nested
				if (optValue != null && optValue != '' && optValue >= 1) {
					optValue = parseInt(optValue);
				}
			}
			var toggleBtnClasses = $(this).find('.toggle-btn').attr('class');
			if (toggleBtnClasses !== null && toggleBtnClasses !== '' && toggleBtnClasses !== undefined) {
				if (toggleBtnClasses.includes('active')) {
					chartConfigToggleStatus[optColName] = true;
				} else {
					chartConfigToggleStatus[optColName] = false;
				}
			}
			var isToggleActive = $(this).hasClass('active-filter');
			if (optValue != null && optValue != '' && isToggleActive) {
				chartOptAllObj[optColName] = optValue;
			} else if (optMan == 'M') {
				errorCount++;
				errorMessageStr += "<tr><td>  " + '<p class="visionGenericTabStatusDialog">' + " " + '<span style="color:blue;">' + " " + optName + "</span><b>:</b> Should not be null.</tr></td><br>";
			} else if (optColName.includes('SHOWLEGEND') && !isToggleActive) {
				chartOptAllObj[optColName] = false;
			}

		});
		}
		var currencyConversionObject = {};
		var isCurrencyConversionEvent = $("#isCurrencyConversionEvent").val();
		var fromCurrencyDropDownValue = $("#fromCurrencyDropDown").val();
		var toCurrencyDropDownValue = $("#toCurrencyDropDown").val();
		var currencySymbol = $("#toCurrencyDropDown_jqxDropDownList option:selected").attr('data-currencySymbol');
		if (isCurrencyConversionEvent !== null && isCurrencyConversionEvent !== undefined && isCurrencyConversionEvent !== '') {
			currencyConversionObject['isCurrencyConversionEvent'] = isCurrencyConversionEvent;
		}
		if (fromCurrencyDropDownValue !== null && fromCurrencyDropDownValue !== undefined && fromCurrencyDropDownValue !== '') {
			currencyConversionObject['fromCurrencyDropDownValue'] = fromCurrencyDropDownValue;
		}
		if (toCurrencyDropDownValue !== null && toCurrencyDropDownValue !== undefined && toCurrencyDropDownValue !== '') {
			currencyConversionObject['toCurrencyDropDownValue'] = toCurrencyDropDownValue;
		}
		if (currencySymbol !== null && currencySymbol !== undefined && currencySymbol !== '') {
			currencyConversionObject['currencySymbol'] = currencySymbol;
		}
		var data = {};
		var filteredchartPositionAllObj = {};
		$.each(chartConfigPositionKeyObj, function(key, value) {
			var newKey = key.replace(/[0-9]/g, '');
			filteredchartPositionAllObj[newKey] = value;
		});
		var filteredChartOptAllObj = {};
		$.each(chartOptAllObj, function(key, value) {
			var newKey = key.replace(/[0-9]/g, '');
			filteredChartOptAllObj[newKey] = value;
		});
		var totChartId = chartId.replace("visionVisualizeChart", "visionVisualizeChartId");
		var colorsObj = $("#" + totChartId).attr("colors");

		var data = {};
		data['axisColumns'] = JSON.stringify(axisColumns);
		data['valuesColumns'] = JSON.stringify(valuesColumns);
		data['comboColumns'] = JSON.stringify(comboColumns);
        data['percentColumns'] = JSON.stringify(percentColumns);
		data['tablesObj'] = JSON.stringify(tablesObj);
		if(type === 'GradientStackedAreaChart')
			type='GradStackAreaChart';
		data['chartType'] = type;
		data['chartId'] = chartId;
		data['columnLebel'] = columnLebel;
		data['filterConditions'] = JSON.stringify(filterConditions);
		data['chartPropObj'] = JSON.stringify(filteredChartOptAllObj);
		data['chartConfigPositionKeyStr'] = JSON.stringify(filteredchartPositionAllObj);
		data['colorsObj'] = colorsObj;
		data['chartConfigToggleStatus'] = JSON.stringify(chartConfigToggleStatus);
		data['currencyConversionObject'] = JSON.stringify(currencyConversionObject);
		if (type != null && type != '' && type != undefined && type == 'Card') {
			var cardType = $("#" + chartId).attr("cardType");
			var cardTrend = $("#" + chartId).attr("cardTrend");
			data['cardType'] = cardType;
			data['cardTrend'] = cardTrend;
			data['cardTrendsChartType'] = cardTrendDivArr[chartId];
			if (parmaFromArr != null && !jQuery.isEmptyObject(parmaFromArr) &&
				parmaToArr != null && !jQuery.isEmptyObject(parmaToArr)) {
				data['paramFromArr'] = JSON.stringify(parmaFromArr);
				data['paramToArr'] = JSON.stringify(parmaToArr);
			} else if (paramDateArr != null && !jQuery.isEmptyObject(paramDateArr)) {
				data['paramDateArr'] = JSON.stringify(paramDateArr);
			}
			var visualAreaCardTitle = $("#visionVisualizeCardTitle").val();
			var cardImageEncodedStr = $("#cardImageVisualizeArea").attr("src");
			data['cardTitle'] = visualAreaCardTitle;
			data['cardImageEncodedStr'] = cardImageEncodedStr;

		}
		dataArr.push(data);
	});
	var value = "";
	if (dataArr != null && dataArr != '' && !jQuery.isEmptyObject(dataArr)) {
		$.ajax({
			url: 'getdashbordname',
			type: "POST",
			dataType: 'html',
			traditional: true,
			cache: false,
			success: function(response) {
				if (response != null && response !='' && response !=undefined) {
					var dashBoardArrFromDB = JSON.parse(response);
					var jqxddl = "<div id='dropDownDashBoardList'></div>";
					jqxddl += "<div id='textReason'><textarea id='reasonId' class='visionDeleteReason' style='display:none' placeholder='Please type a new dashboard name ...'></textarea><br></div>";
					jqxddl += "<div id='dailog_error_id' style='display:none;color:red'>" + (labelObject['Please give any DashBoard Name'] != null ? labelObject['Please give any DashBoard Name'] : 'Please give any DashBoard Name') + "</div>";
					$("#dialog").html(jqxddl);
                    $("#dialog").dialog({
						title: (labelObject['DashBoard Name'] != null ? labelObject['DashBoard Name'] : 'DashBoard Name'),
						modal: true,
						height: 'auto',
						minWidth: 300,
						maxWidth: 'auto',
						fluid: true,
						buttons: [{
							text: (labelObject['Ok'] != null ? labelObject['Ok'] : 'Ok'),
							click: function() {
								var dashBoardName = $("#dropDownDashBoardList").val();
								if (!(dashBoardName != null && dashBoardName != '' && dashBoardName != undefined) || dashBoardName == 'New') {
									dashBoardName = $("#reasonId").val();
								}
								if (dashBoardName != null && dashBoardName != '' && dashBoardName != undefined && dashBoardName != 'Select' && dashBoardName != 'New') {
									$("#dailog_error_id").hide();
									$(this).html("");
									$(this).dialog("destroy");
									$.ajax({
										url: 'saveVisualizeData',
										type: "POST",
										data:
										{
											'data': JSON.stringify(dataArr),
											'dashBoardName': dashBoardName
										},
										traditional: true,
										cache: false,
										success: function(response) {
											console.log("testing");
											var msg = " Charts " + response;
											try{
											$("#dialog1").html("");
											$(".ui-dialog-content").html("");
											$("#intelliSenseChartVisualizeDivId"+intellisenseViewChartCount).remove();
											showNextConversationAiMessage('2');
											}catch(e)
											{}
											var modalObj = {
												title: 'Save',
												body: msg
											};
											var buttonArray = [
												{
													text: 'Close',
													click: function() {
													},
													isCloseButton: true
												}
											];
											modalObj['buttons'] = buttonArray;
											createModal("dataDxpSplitterValue", modalObj);
											$(".modal-dialog").addClass("opacity-animate3");
										}, error: function(e) {
											sessionTimeout(e);
										}
									});
								} else {
									$("#dailog_error_id").show();
								}
							}
						},
						{
							text: (labelObject['Cancel'] != null ? labelObject['Cancel'] : 'Cancel'),
							click: function() {
								$(this).html("");
								$(this).dialog("destroy");
							}
						}],
						open: function() {
							setTimeout(function() { 
								$("#dropDownDashBoardList").jqxDropDownList({
									source: dashBoardArrFromDB,
									theme: 'energyblue',
									width: '200px',
									height: '30px',
									filterable: true,
								});
								$("#dropDownDashBoardList").jqxDropDownList('selectItem', 'Select');
								$("#dropDownDashBoardList").unbind('change').on('change', function(event) {
									var selectedItem = event.args.item;
									if (selectedItem) {
										var selectedValue = selectedItem.value;
										if (selectedValue === 'New') {

											$("#reasonId").show();
										} else {
											$("#reasonId").hide();
										}
									}
								});
							}, 1000);
							
							
							$(this).closest(".ui-dialog").find(".ui-button").eq(1).addClass("dialogyes");
							$(this).closest(".ui-dialog").find(".ui-button").eq(2).addClass("dialogno");
							$(".visionHeaderMain").css("z-index", "999");
							$(".visionFooterMain").css("z-index", "999");
						},
						beforeClose: function(event, ui) {
							$(".visionHeaderMain").css("z-index", "99999");
							$(".visionFooterMain").css("z-index", "99999");
						}
					});
				}
			}, error: function(e) {
				sessionTimeout(e);
			}
		});
	}
}
function getDashBoardCharts(event, id) //jaggu
{
	var dashBoardName = $("#" + id).val();
	if (dashBoardName != null && dashBoardName != '' && dashBoardName != undefined) {
		dashBoardName = dashBoardName.trim();
	}
	getVisualizationchart(dashBoardName, "");
}
function getChartDataonScroll(chartId, chartType) {
	var chartIds = [];
	chartIds.push(chartId);
	$.ajax({
		url: 'getChartData',
		type: "POST",
		dataType: 'json',
		traditional: true,
		cache: false,
		async: true,
		data: {
			chartIds: JSON.stringify(chartIds)
		},
		success: function(response) {
			stopLoader();

			if (response != null && !jQuery.isEmptyObject(response)) {
				var dataarr = response['dataarr'];
				if (dataarr != null && dataarr != '' && dataarr != undefined) {
					var count = 0;
					for (var i = 0; i < dataarr.length; i++) {
						var XAxix = dataarr[i]['xAxix'];
						var yAxix = dataarr[i]['yAxix'];
						var type = dataarr[i]['type'];
						var table = dataarr[i]['table'];
						var id = dataarr[i]['chartid'];
						var Lebel = dataarr[i]['Lebel'];
						var aggColumnName = dataarr[i]['aggColumnName'];
						var filterCondition = dataarr[i]['filterCondition'];
						var chartPropObj = dataarr[i]['chartPropObj'];
						var chartConfigObj = dataarr[i]['chartConfigObj'];
						var labelLegend = dataarr[i]['labelLegend'];
						var colorsObj = dataarr[i]['colorsObj'];
						var chartConfigToggleStatus = dataarr[i]['chartConfigToggleStatus'];
						var homeFilterColumn = dataarr[i]['homeFilterColumn'];
						var fetchQuery = dataarr[i]['fetchQuery'];
						var radioButtons = dataarr[i]['radioButtons'];
						var comboValue = dataarr[i]['comboValue'];
						var filterConditions = $("#" + chartId + "_filter").val();
						if (filterCondition != null && filterCondition != '' && filterCondition != undefined) {
							filterCondition = JSON.parse(filterCondition);
							if (filterCondition != null && !jQuery.isEmptyObject(filterCondition)) {
								if (filterConditions != null && filterConditions != '' && filterConditions != undefined) {
									filterConditions = JSON.parse(filterConditions);
									for (var key in filterCondition) {
										var paramObj = filterCondition[key];
										filterConditions.push(paramObj);
									}
									if (filterConditions != null && !jQuery.isEmptyObject(filterConditions)) {
										filterConditions = JSON.stringify(filterConditions);
									}
								} else {
									filterConditions = JSON.stringify(filterCondition);
								}
							}
						} else if (filterConditions != null && filterConditions != '' && filterConditions != undefined) {
							filterConditions = JSON.parse(filterConditions);
							if (filterConditions != null && !jQuery.isEmptyObject(filterConditions)) {
								if (filterCondition != null && filterCondition != '' && filterCondition != undefined) {
									filterCondition = JSON.parse(filterCondition);
									for (var key in filterCondition) {
										var paramObj = filterCondition[key];
										filterConditions.push(paramObj);
									}
									if (filterConditions != null && !jQuery.isEmptyObject(filterConditions)) {
										filterConditions = JSON.stringify(filterConditions);
									}
								}
							} else {
								filterConditions = JSON.stringify(filterConditions);
							}
						}
						if (yAxix != null && yAxix != '' && yAxix != 'undefined' && type != 'Card') {
							var chartid = id;
							getVisualizeChart(chartid, type, XAxix, yAxix, table, aggColumnName, filterCondition, chartPropObj, chartConfigObj, count, labelLegend, colorsObj, comboValue, chartConfigToggleStatus, "", "", fetchQuery, radioButtons);
							count++
						}

					}
				}

			}
		}, error: function(e) {
			sessionTimeout(e);
		}
	});
}
function getVisualizationchart(dashbordname, dashbordTittle) {
	$("#dasboardtypeID").html("");
	$("#DxpdashbordTypeid").html("");
	$("#infographicsDIvId").html("");
	$("#infographicsCardDIvId").html("");
	$("#visualizechartId").html("");
	$("#singleChartDiv").html("");
	$("#CMR_DASHBOARD_MULTI_DIM1").html("");
	localStorage.removeItem("htmlSlicerString");
	compareChartsArr = [];
	//    if (dashbordname == null || dashbordname == '' || dashbordname == undefined) { jaggu
	//        dashbordname = 'BASICCHARTS';
	//        dashbordTittle = "Basic Graph"
	//    }
	$.ajax({
		url: 'getChartData',
		type: "POST",
		dataType: 'json',
		traditional: true,
		cache: false,
		async: true,
		data: {
			dashbordname: dashbordname
		},
		success: function(response) {
			stopLoader();

			if (response != null && !jQuery.isEmptyObject(response)) {
				var dashBordlist = response['dashBordlist'];
				var dashBordName = response['dashBordName'];
				chartFilterConfigObj = response['jsonChartFilterObj'];
				try{
					$("#OptionDropdownData").jqxDropDownList('destroy');
				}catch(e)
				{
					
				}
				$("#OptionListData").html("<div id='OptionDropdownData'></div>");
				$("#OptionDropdownData").jqxDropDownList({
					source: dashBordlist,
					theme: 'energyblue',
					width: '200px',
					height: '25px',
					filterable: true,
				});
				$("#OptionDropdownData").jqxDropDownList('selectItem',dashBordName);
				$("#visionHomePageSlicer").html("<div id='visionHomePageSlicerId' class='dashboardTypeClass'><span class='slicerImage'><img onclick='getHomeDashboardSlicer()' src='images/Chart_Slicer.svg' title='Slicer' style='width:20px;margin-left: 7px;'></span></div>");
				$("#visionFilterData").html("<div id='visionHomePageFilterId' class='visionHomePageFilterClass'><span class='FilterImage'><img onclick='getHomeDashboardHeaderFilters()' src='images/filter.png' title='Header Filter' style='width:20px;margin-left: 7px;'></span></div>"
					+ "<div id='visionHomePageCompareFilterId' class='visionHomePageCompareFilterClass'><span class='FilterImage'><img onclick='getHomeDashboardCompareFilters()' src='images/Sort-icon.svg' title='Compare Filter' style='width:20px;margin-left: 7px;'></span></div>"
					+ "<div id='visionHomePageDeleteDashboard' class='visionHomePageDeleteDashboardClass'><span class='FilterImage'><img onclick='showDashboardList()' src='images/delete_icon1.png' title='Delete Dashboard' style='width:20px;margin-left: 7px;'></span></div>"
					+ "<div id='visionHomePageEditDashboard' class='visionHomePageEditDashboardClass'><span class='FilterImage'><img onclick='getEditDashBoardNames()' src='images/Master_Detail_Editable.png' title='Edit Dashboard' style='width:20px;margin-left: 7px;'></span></div>"
					+ "<div id='visionHomePageDownloadChartsId' class='visionHomePageDownloadChartsClass'><span class='FilterImage'><img onclick='getAllImagesInPdf()' src='images/Download-Iocn.svg' title='Download Charts' style='width:20px;margin-left: 7px;'></span></div>");
				$("#visionChartColorPalleteId").html("<div id='visionHomePageColorFilterId' class='visionHomePageColorFilterClass'><span class='FilterImage'><img onclick='updatechartColor()' src='images/palette.png' id='imageid' title='Color Palette' style='width:22px;margin-left: 7px;'></span></div>");
				var kanbanViewNameList = response['kanbanViewNameList'];
				$("#visionHomeKanbanView").html(kanbanViewNameList);
				$(".visualizationDashboardView").css("display", "block");
				var dataarr = response['dataarr'];
				
				
				$('#OptionDropdownData').unbind('change').on('change', function(event) {
					var args = event.args;
					if (args) {
						var dashBoardValue = args.item.value;
						if (dashBoardValue != null && dashBoardValue != '' && dashBoardValue != undefined) {
							dashBoardValue = dashBoardValue.trim();
						}
						getVisualizationchart(dashBoardValue, "");
					}
				});
				
				
				
				
				if (dataarr != null && dataarr != '' && dataarr != undefined) {
					var count = 0;
					$("#visionCardView").empty();
					var compareChartFilterFlag = false;
					var headerChartFilterFlag = false;
					for (var i = 0; i < dataarr.length; i++) {
						var XAxix = dataarr[i]['xAxix'];
						var yAxix = dataarr[i]['yAxix'];
						var type = dataarr[i]['type'];
						var table = dataarr[i]['table'];
						var id = dataarr[i]['chartid'];
						var Lebel = dataarr[i]['Lebel'];
						var aggColumnName = dataarr[i]['aggColumnName'];
						var filterCondition = dataarr[i]['filterCondition'];
						var chartPropObj = dataarr[i]['chartPropObj'];
						var chartConfigObj = dataarr[i]['chartConfigObj'];
						var labelLegend = dataarr[i]['labelLegend'];
						var colorsObj = dataarr[i]['colorsObj'];
						var chartConfigToggleStatus = dataarr[i]['chartConfigToggleStatus'];
						var homeFilterColumn = dataarr[i]['homeFilterColumn'];
						var fetchQuery = dataarr[i]['fetchQuery'];
						var radioButtons = dataarr[i]['radioButtons'];
						var comboValue = dataarr[i]['comboValue'];
						var currencyConversionStrObject = dataarr[i]['currencyConversionStrObject'];
						var paramCardDateObj = dataarr[i]['paramCardDateObj'];
						var cardType = dataarr[i]['cardType'];
						var cardTrendType = dataarr[i]['cardTrendType'];
						var cardTrend = dataarr[i]['cardTrend'];
						var zAxix = dataarr[i]['zAxis']; 
						var echarts = ['treemap', 'sunburst', 'BarAndLine', 'heatMap','BasicAreaChart','StackedAreaChart','GradStackAreaChart','AreaPiecesChart','ganttChart','candlestick','geochart'];
						if (type != null && type != '' && type != undefined && type == 'COMPARE_FILTER') {
							$("#visionDashBoardHomeFilterId").show();
							$("#visionDashBoardHomeCompareFilterId").hide();
							compareChartFilterFlag = true;
							getHomeCompareChartFilterData("visionDashBoardHomeCompareFilterId", dashbordname, homeFilterColumn);
						} else if (type != null && type != '' && type != undefined && type == "FILTER") {
							$("#visionDashBoardHomeCompareFilterId").hide();
							$("#visionDashBoardHomeFilterId").show();
							headerChartFilterFlag = true;
							createFilterHeader('visionDashBoardHomeFilterId', type, homeFilterColumn, dashbordname);
						} else if (yAxix != null && yAxix != '' && yAxix != 'undefined' && type != 'Card') {
							var chartid = id;
							var divClass;
							if (type == 'heatMap' || type =='ganttChart' || type =='sankey') {
								divClass = "";
							} else {
								divClass = "col-md-6 col-sm-6 col-lg-3";
							}
							var chartDivId = "<div class='" + divClass + " homeChartWrapDiv' id ='visionVisualizeChartHome" + count + "'><div class ='flip-chart' id='chart-container" + count + "'><div class='flip-chart-inner' id='chart-card" + count + "'><div class='flip-chart-front' id = 'chart-front-id" + count + "'><div id='homeChartParentDiv" + count + "' class='homeChartParentDiv'><div class='chartMain' id='" + chartid + "'></div>"
							+ "<div id='" + id + "_traces' class='legendTraces'></div><div class='rightControls'><div class='iconDiv'><img src='images/Plus-Icon-02.svg'  class='visionVisualizeHorizontalDotsClass visionVisualChartBoxSelected'></div>"
							+ "<div class='iconDiv'><img src='images/FeedBack_Icon.svg'  class='visionVisualizeHorizontalDotsClass visionVisualChartBoxSelected'></div>"
							+ "<div class='iconDiv'><img src='images/Settings_Icon.svg'  class='visionVisualizeHorizontalDotsClass visionVisualChartBoxSelected'></div>"
							+ "<div class='iconDiv'><img src='images/Filter.svg' class='visionVisualizeHorizontalDotsClass visionVisualChartBoxSelected'></div>"
							+ "<div class='iconDiv'><img src='images/search_blue.png'  class='visionVisualizeHorizontalDotsClass visionVisualChartBoxSelected'></div></div></div></div>"
							+ "<div class='flip-chart-back' id='chart-back-id" + count + "'></div></div><div>"

								+ "<div class='chartDialogClass' id='chartDialog" + count + "' style='display: none;'></div>"
								+ "<div class='createpopupClass' id='homepagecreatepopupId" + count + "' style='display: none;'></div>"
								+ "<input type='hidden' id='" + chartid + "_filter' value=''/>"
								+ "<input type='hidden' id='" + chartid + "_homePageFilter' value=''/>"
								+ "<input type='hidden' id='" + chartid + "_chartFilter' value=''/>"
								+ "<input type='hidden' id='" + chartid + "_startIndex' value='0'/>"
								+ "<input type='hidden' id='" + chartid + "_endIndex' value='10'/>"
								+ "<input type='hidden' id='" + chartid + "_pageSize' value='10'/>"
								+ "<input type='hidden' id='" + chartid + "_TotalChartCount' value='0'/>"
								+ "<input type='hidden' id='" + chartid + "_options' value=''/>"
								+ "<input type='hidden' id='" + chartid + "_chartType' value='" + type + "'/>"
								+ "<input type='hidden' id='" + chartid +"_count' value='"+count +"'/>";
							if (type != null && type != '' && type != undefined && echarts.indexOf(type) > -1) {
								chartDivId += "<div id = '" + chartid + "_toolBox' class='iconsDiv' style='position: absolute;top: 2px;right: 3px;height: 99%; background: #f1f1f1;height: 349px;'><ul></ul></div>"
									+ "<div id='" + chartid + "_radioButtons' class='visionVisualizeRadioButtonsClass'></div>";
							}
							chartDivId += "</div>";
							$("#visualizechartId").append(chartDivId);
							if (type != null && type != '' && type != undefined && (type == 'donut' || type == 'pie')) {
								// $("#" + id + "_traces").html("<div id='" + id + "_legendId'></div>")
							}
							getVisualizeChart(chartid, type, XAxix, yAxix, table, aggColumnName, filterCondition, chartPropObj, chartConfigObj, count, labelLegend, colorsObj, comboValue, chartConfigToggleStatus, "", "", fetchQuery, radioButtons, currencyConversionStrObject,zAxix);
							count++;
						} else {
							var chartid = id;
							var aggregateType = XAxix;
							$("#visionCardView").append("<div id='" + chartid + "' class='visionHomeCardViewClass' ></div>");
							getHomePageCardData(Lebel, aggregateType, chartid, table, yAxix, filterCondition, paramCardDateObj, cardType, cardTrendType,cardTrend);

						}

					}
					if (!compareChartFilterFlag) {
						$("#visionDashBoardHomeCompareFilterId").hide();
					}
					if (!headerChartFilterFlag) {
						$("#visionDashBoardHomeFilterId").hide();
					}
				}

			}
		}, error: function(e) {
			sessionTimeout(e);
		}
	});

}
function getVisualizeChart(chartId, chartType, axix, values, table, aggColumnName, filterCondition, chartPropObj, chartConfigObj, createcount, labelLegend, colorsObj, comboValue, chartConfigToggleStatus, compareChartsFlag, comparechartFilterObj, fetchQuery, radioButtons, currencyConversionStrObject,zAxix) {
	// var joinQuery = $("#visionVisualizeConfigJoinQuery0").val();
	var axisColumns = [];
	var valuesColumns = []; 
	var tablesObj = [];

	if (axix != null && axix != '' && axix != undefined) {
		var axisArr = JSON.parse(axix);
		$.each(axisArr, function(index, value) {
			if (value != null && !jQuery.isEmptyObject(value)) {
				var columnObj = {};
				var tableName = value['tableName'];
				columnObj['tableName'] = value['tableName'];
				columnObj['columnName'] = value['columnName'];
				axisColumns.push(columnObj);
				if (!(tablesObj.indexOf(tableName) > -1)) {
					tablesObj.push(tableName);
				}
			}
		});
	}

	if (values != null && values != '' && values != undefined) {
		var valuesArr = JSON.parse(values);
		$.each(valuesArr, function(index, value) {
			if (value != null && !jQuery.isEmptyObject(value)) {
				var columnObj = {};
				columnObj['tableName'] = value['tableName'];
				columnObj['columnName'] = value['columnName'];
				columnObj['aggColumnName'] = value['aggColumnName'];
				columnObj['userProvidedLegendLabel'] = value['userProvidedLegendLabel'];
				valuesColumns.push(columnObj);
				if (compareChartsFlag != null && compareChartsFlag != '' && compareChartsFlag != undefined && compareChartsFlag == 'Y' || compareChartsFlag == 'YF') {
					valuesColumns.push(columnObj);
				}
				var tableName = value['tableName'];
				if (!(tablesObj.indexOf(tableName) > -1)) {
					tablesObj.push(tableName);
				}
			}
		});
	}
	
	
	var comboValues = [];
if (comboValue != null && comboValue != '' && comboValue != undefined) {
        var comboValueArr = JSON.parse(comboValue);
        $.each(comboValueArr, function(index, value) {
            if (value != null && !jQuery.isEmptyObject(value)) {
                var comboValueObj = {};
                comboValueObj['tableName'] = value['tableName'];
                comboValueObj['columnName'] = value['columnName'];
                comboValueObj['aggColumnName'] = value['aggColumnName'];
                comboValueObj['columnLabel'] = value['columnLabel'];
                comboValueObj['userProvidedLegendLabel'] = value['userProvidedLegendLabel'];
                comboValues.push(comboValueObj);
                if (compareChartsFlag != null && compareChartsFlag != '' && compareChartsFlag != undefined && compareChartsFlag == 'Y' || compareChartsFlag == 'YF') {
                    comboValues.push(comboValueObj);
                }
                var tableName = value['tableName'];
                if (!(tablesObj.indexOf(tableName) > -1)) {
                    tablesObj.push(tableName);
                }
            }
        });
    }
	var zAxixValues = [];
if (zAxix != null && zAxix != '' && zAxix != undefined) {
        var zAxixArr = JSON.parse(zAxix);
        $.each(zAxixArr, function(index, value) {
            if (value != null && !jQuery.isEmptyObject(value)) {
                var zAxixObj = {};
                zAxixObj['tableName'] = value['tableName'];
                zAxixObj['columnName'] = value['columnName'];
                zAxixObj['aggColumnName'] = value['aggColumnName'];
                zAxixObj['columnLabel'] = value['columnLabel'];
                zAxixObj['userProvidedLegendLabel'] = value['userProvidedLegendLabel'];
                zAxixValues.push(zAxixObj);
                if (compareChartsFlag != null && compareChartsFlag != '' && compareChartsFlag != undefined && compareChartsFlag == 'Y' || compareChartsFlag == 'YF') {
                    zAxixValues.push(zAxixObj);
                }
                var tableName = value['tableName'];
                if (!(tablesObj.indexOf(tableName) > -1)) {
                    tablesObj.push(tableName);
                }
            }
        });
    }
	
	
	
	
	var startIndex = $("#" + chartId + "_startIndex").val();
	var endIndex = $("#" + chartId + "_endIndex").val();
	var pageSize = $("#" + chartId + "_pageSize").val();
	var data = {};
	var currencySymbol = '';
	var isCurrencyConversionEvent = '';
	var toCurrencyDropDownValue = '';
	if (currencyConversionStrObject !== undefined && currencyConversionStrObject != null
		&& currencyConversionStrObject !== '') {
		var currencyConversionObject = JSON.parse(currencyConversionStrObject);
		isCurrencyConversionEvent = currencyConversionObject['isCurrencyConversionEvent'];
		var fromCurrencyDropDownValue = currencyConversionObject['fromCurrencyDropDownValue'];
		toCurrencyDropDownValue = currencyConversionObject['toCurrencyDropDownValue'];
		currencySymbol = currencyConversionObject['currencySymbol'];
		data['isCurrencyConversionEvent'] = isCurrencyConversionEvent;
		data['fromCurrencyDropDownValue'] = fromCurrencyDropDownValue;
		data['toCurrencyDropDownValue'] = toCurrencyDropDownValue;
	}
	
	
	
	
	
	
	data['axisColumns'] = JSON.stringify(axisColumns);
	data['valuesColumns'] = JSON.stringify(valuesColumns);
	data['comboColumns'] = JSON.stringify(comboValues);
	data['zAxixValues'] = JSON.stringify(zAxixValues);
	data['tablesObj'] = JSON.stringify(tablesObj);
	data['chartType'] = chartType;
	data['chartId'] = chartId;
	data['filterColumns'] = filterCondition;
	data['chartCOnfigObjStr'] = chartPropObj;
	data['chartConfigPositionKeyStr'] = chartConfigObj;
	data['compareChartsFlag'] = compareChartsFlag;
	data['compareChartFilters'] = JSON.stringify(comparechartFilterObj);
	data['radioButtons'] = radioButtons;
	data['startIndex'] = startIndex;
	data['endIndex'] = endIndex;
	data['pageSize'] = pageSize;
	var chartPropObject = JSON.parse(chartPropObj);
	var title = chartPropObject[chartType.toUpperCase() + 'CHARTTITLE'];
	$.ajax({
		url: 'fetchChartData',
		type: "POST",
		data: data,
		dataType: 'json',
		traditional: true,
		cache: false,
		success: function(response) {
			$("#Loader").css("display", "none");
			$("body").css("pointer-events", "auto");
			if (response != null && !jQuery.isEmptyObject(response)) {
				$("#" + chartId).addClass("chartMainBorderBox");
				var compareChartTypes = ['column', 'lines', 'scatterpolar'];
				response['isCurrencyConversionEvent'] = isCurrencyConversionEvent;
				response['currencySymbol'] = currencySymbol;
				response['toCurrencyDropDownValue'] = toCurrencyDropDownValue;
				if (chartType != null && chartType != '' && chartType == 'heatMap') {
					getEchartHeatMap(chartId, response, createcount, chartType);
					//getHetaMap(chartId, response, createcount);
					return;
				} else if (chartType != null && chartType != '' && chartType == 'sunburst') {
					getSunburstChart(chartId, response, createcount, chartType);
					return;
				} else if (chartType != null && chartType != '' && chartType == 'BarAndLine') {
					getBarAndLineChart(chartId, response, createcount, chartType);
					return;
				} else if (chartType != null && chartType != '' && chartType == 'treemap') {
					getTreeMapChart(chartId, response, createcount, chartType);
					return;
				}else if (chartType !== null && chartType !== '' && chartType !== undefined && chartType === 'BasicAreaChart') {
				
						getBasicAreaChartTypeFromDashBoard(chartId, response, createcount, chartType);
						return;
					}
					else if (chartType !== null && chartType !== '' && chartType !== undefined && chartType === 'StackedAreaChart') {
				getStackedAreaChartFromDashBoard(chartId, response, createcount, chartType);
						return;
					}
					 else if (chartType !== null && chartType !== '' && chartType !== undefined && chartType === 'GradStackAreaChart') {
				
						getGradientStackedAreaChartFromDashBoard(chartId, response, createcount, chartType)
						return;
					}
					else if (chartType !== null && chartType !== '' && chartType !== undefined && chartType === 'AreaPiecesChart') {
				//	 73
						getAreaPiecesChartFromDashBoard(chartId, response, createcount, chartType);
						return;
					}else if(chartType !== null && chartType !== '' && chartType !== undefined && chartType === 'ganttChart')
				    {
					    google.charts.setOnLoadCallback(getGanttChart(chartId, response, createcount, chartType));
					     return; 
					}
					else if (chartType != null && chartType != '' && chartType != undefined && chartType == 'candlestick') {
						getCandlestickChart(chartId, response, createcount, chartType,"Y");
						return;
					}
					else if (chartType != null && chartType != '' && chartType != undefined && chartType == 'geochart') {
						google.charts.setOnLoadCallback(getGeoChart(chartId, response, createcount, chartType,"Y"));
						return;
					}
					else if (chartType != null && chartType != '' && chartType != undefined && chartType == 'sankey') {
						getSankeyChart(chartId, response, createcount, chartType,"Y");
						return;
					}
				var iconArrowUp = {
					'height': 20,
					'width': 20,
					'path': 'M4.29289 15.7071C3.90237 15.3166 3.90237 14.6834 4.29289 14.2929L9.29289 9.29289C9.68342 8.90237 10.3166 8.90237 10.7071 9.29289L15.7071 14.2929C16.0976 14.6834 16.0976 15.3166 15.7071 15.7071C15.3166 16.0976 14.6834 16.0976 14.2929 15.7071L10 11.4142L5.70711 15.7071C5.31658 16.0976 4.68342 16.0976 4.29289 15.7071ZM4.29289 9.70711C3.90237 9.31658 3.90237 8.68342 4.29289 8.29289L9.29289 3.29289C9.68342 2.90237 10.3166 2.90237 10.7071 3.29289L15.7071 8.29289C16.0976 8.68342 16.0976 9.31658 15.7071 9.70711C15.3166 10.0976 14.6834 10.0976 14.2929 9.70711L10 5.41421L5.70711 9.70711C5.31658 10.0976 4.68342 10.0976 4.29289 9.70711Z',
					'color': 'rgb(31,119,180)'
				};

				var icon = {
					'height': 512,
					'width': 512,
					'path': 'M3.853 54.87C10.47 40.9 24.54 32 40 32H472C487.5 32 501.5 40.9 508.1 54.87C514.8 68.84 512.7 85.37 502.1 97.33L320 320.9V448C320 460.1 313.2 471.2 302.3 476.6C291.5 482 278.5 480.9 268.8 473.6L204.8 425.6C196.7 419.6 192 410.1 192 400V320.9L9.042 97.33C-.745 85.37-2.765 68.84 3.854 54.87L3.853 54.87z',
					'color': 'rgb(31,119,180)'
				};
				var icon1 = {
					'height': 512,
					'width': 448,
					'path': 'M448 32C483.3 32 512 60.65 512 96V416C512 451.3 483.3 480 448 480H64C28.65 480 0 451.3 0 416V96C0 60.65 28.65 32 64 32H448zM152 96H64V160H152V96zM208 160H296V96H208V160zM448 96H360V160H448V96zM64 288H152V224H64V288zM296 224H208V288H296V224zM360 288H448V224H360V288zM152 352H64V416H152V352zM208 416H296V352H208V416zM448 352H360V416H448V352z',
					'color': 'rgb(31,119,180)'
				};
				var deleteicon = {
					'height': 512,
					'width': 448,
					'path': 'M135.2 17.69C140.6 6.848 151.7 0 163.8 0H284.2C296.3 0 307.4 6.848 312.8 17.69L320 32H416C433.7 32 448 46.33 448 64C448 81.67 433.7 96 416 96H32C14.33 96 0 81.67 0 64C0 46.33 14.33 32 32 32H128L135.2 17.69zM31.1 128H416V448C416 483.3 387.3 512 352 512H95.1C60.65 512 31.1 483.3 31.1 448V128zM111.1 208V432C111.1 440.8 119.2 448 127.1 448C136.8 448 143.1 440.8 143.1 432V208C143.1 199.2 136.8 192 127.1 192C119.2 192 111.1 199.2 111.1 208zM207.1 208V432C207.1 440.8 215.2 448 223.1 448C232.8 448 240 440.8 240 432V208C240 199.2 232.8 192 223.1 192C215.2 192 207.1 199.2 207.1 208zM304 208V432C304 440.8 311.2 448 320 448C328.8 448 336 440.8 336 432V208C336 199.2 328.8 192 320 192C311.2 192 304 199.2 304 208z',
					'color': 'rgb(31,119,180)'
				};
				var Expand = {
					'height': 512,
					'width': 448,
					'path': 'M447.1 319.1v135.1c0 13.26-10.75 23.1-23.1 23.1h-135.1c-12.94 0-24.61-7.781-29.56-19.75c-4.906-11.1-2.203-25.72 6.937-34.87l30.06-30.06L224 323.9l-71.43 71.44l30.06 30.06c9.156 9.156 11.91 22.91 6.937 34.87C184.6 472.2 172.9 479.1 160 479.1H24c-13.25 0-23.1-10.74-23.1-23.1v-135.1c0-12.94 7.781-24.61 19.75-29.56C23.72 288.8 27.88 288 32 288c8.312 0 16.5 3.242 22.63 9.367l30.06 30.06l71.44-71.44L84.69 184.6L54.63 214.6c-9.156 9.156-22.91 11.91-34.87 6.937C7.798 216.6 .0013 204.9 .0013 191.1v-135.1c0-13.26 10.75-23.1 23.1-23.1h135.1c12.94 0 24.61 7.781 29.56 19.75C191.2 55.72 191.1 59.87 191.1 63.1c0 8.312-3.237 16.5-9.362 22.63L152.6 116.7l71.44 71.44l71.43-71.44l-30.06-30.06c-9.156-9.156-11.91-22.91-6.937-34.87c4.937-11.95 16.62-19.75 29.56-19.75h135.1c13.26 0 23.1 10.75 23.1 23.1v135.1c0 12.94-7.781 24.61-19.75 29.56c-11.1 4.906-25.72 2.203-34.87-6.937l-30.06-30.06l-71.43 71.43l71.44 71.44l30.06-30.06c9.156-9.156 22.91-11.91 34.87-6.937C440.2 295.4 447.1 307.1 447.1 319.1z',
					'color': 'rgb(31,119,180)'
				};

				var EditIcon = {
					'height': 512,
					'width': 512,
					'id': chartId,
					'path': 'M490.3 40.4C512.2 62.27 512.2 97.73 490.3 119.6L460.3 149.7L362.3 51.72L392.4 21.66C414.3-.2135 449.7-.2135 471.6 21.66L490.3 40.4zM172.4 241.7L339.7 74.34L437.7 172.3L270.3 339.6C264.2 345.8 256.7 350.4 248.4 353.2L159.6 382.8C150.1 385.6 141.5 383.4 135 376.1C128.6 370.5 126.4 361 129.2 352.4L158.8 263.6C161.6 255.3 166.2 247.8 172.4 241.7V241.7zM192 63.1C209.7 63.1 224 78.33 224 95.1C224 113.7 209.7 127.1 192 127.1H96C78.33 127.1 64 142.3 64 159.1V416C64 433.7 78.33 448 96 448H352C369.7 448 384 433.7 384 416V319.1C384 302.3 398.3 287.1 416 287.1C433.7 287.1 448 302.3 448 319.1V416C448 469 405 512 352 512H96C42.98 512 0 469 0 416V159.1C0 106.1 42.98 63.1 96 63.1H192z',
					'color': 'rgb(31,119,180)'
				};
				var pridictiveAnalysis = {
					'height': 512,
					'width': 512,
					'id': chartId,
					'path': 'M384 160C366.3 160 352 145.7 352 128C352 110.3 366.3 96 384 96H544C561.7 96 576 110.3 576 128V288C576 305.7 561.7 320 544 320C526.3 320 512 305.7 512 288V205.3L342.6 374.6C330.1 387.1 309.9 387.1 297.4 374.6L191.1 269.3L54.63 406.6C42.13 419.1 21.87 419.1 9.372 406.6C-3.124 394.1-3.124 373.9 9.372 361.4L169.4 201.4C181.9 188.9 202.1 188.9 214.6 201.4L320 306.7L466.7 159.1L384 160z',
					'color': 'rgb(31,119,180)'
				};
				var AssignUser = {
					'height': 512,
					'width': 512,
					'id': chartId,
					'path': 'M424.1 287c-15.13-15.12-40.1-4.426-40.1 16.97V352H336L153.6 108.8C147.6 100.8 138.1 96 128 96H32C14.31 96 0 110.3 0 128s14.31 32 32 32h80l182.4 243.2C300.4 411.3 309.9 416 320 416h63.97v47.94c0 21.39 25.86 32.12 40.99 17l79.1-79.98c9.387-9.387 9.387-24.59 0-33.97L424.1 287zM336 160h47.97v48.03c0 21.39 25.87 32.09 40.1 16.97l79.1-79.98c9.387-9.391 9.385-24.59-.0013-33.97l-79.1-79.98c-15.13-15.12-40.99-4.391-40.99 17V96H320c-10.06 0-19.56 4.75-25.59 12.81L254 162.7L293.1 216L336 160zM112 352H32c-17.69 0-32 14.31-32 32s14.31 32 32 32h96c10.06 0 19.56-4.75 25.59-12.81l40.4-53.87L154 296L112 352z',
					'color': 'rgb(31,119,180)'
				};
				var ColorPallete = {
					'height': 512,
					'width': 512,
					'id': chartId,
					'path': 'M512 255.1C512 256.9 511.1 257.8 511.1 258.7C511.6 295.2 478.4 319.1 441.9 319.1H344C317.5 319.1 296 341.5 296 368C296 371.4 296.4 374.7 297 377.9C299.2 388.1 303.5 397.1 307.9 407.8C313.9 421.6 320 435.3 320 449.8C320 481.7 298.4 510.5 266.6 511.8C263.1 511.9 259.5 512 256 512C114.6 512 0 397.4 0 256C0 114.6 114.6 0 256 0C397.4 0 512 114.6 512 256V255.1zM96 255.1C78.33 255.1 64 270.3 64 287.1C64 305.7 78.33 319.1 96 319.1C113.7 319.1 128 305.7 128 287.1C128 270.3 113.7 255.1 96 255.1zM128 191.1C145.7 191.1 160 177.7 160 159.1C160 142.3 145.7 127.1 128 127.1C110.3 127.1 96 142.3 96 159.1C96 177.7 110.3 191.1 128 191.1zM256 63.1C238.3 63.1 224 78.33 224 95.1C224 113.7 238.3 127.1 256 127.1C273.7 127.1 288 113.7 288 95.1C288 78.33 273.7 63.1 256 63.1zM384 191.1C401.7 191.1 416 177.7 416 159.1C416 142.3 401.7 127.1 384 127.1C366.3 127.1 352 142.3 352 159.1C352 177.7 366.3 191.1 384 191.1z',
					'color': 'rgb(31,119,180)'
				};
				var compareChart = {
					'height': 512,
					'width': 512,
					'id': chartId,
					'path': 'M320 488C320 497.5 314.4 506.1 305.8 509.9C297.1 513.8 286.1 512.2 279.9 505.8L199.9 433.8C194.9 429.3 192 422.8 192 416C192 409.2 194.9 402.7 199.9 398.2L279.9 326.2C286.1 319.8 297.1 318.2 305.8 322.1C314.4 325.9 320 334.5 320 344V384H336C371.3 384 400 355.3 400 320V153.3C371.7 140.1 352 112.8 352 80C352 35.82 387.8 0 432 0C476.2 0 512 35.82 512 80C512 112.8 492.3 140.1 464 153.3V320C464 390.7 406.7 448 336 448H320V488zM456 79.1C456 66.74 445.3 55.1 432 55.1C418.7 55.1 408 66.74 408 79.1C408 93.25 418.7 103.1 432 103.1C445.3 103.1 456 93.25 456 79.1zM192 24C192 14.52 197.6 5.932 206.2 2.076C214.9-1.78 225-.1789 232.1 6.161L312.1 78.16C317.1 82.71 320 89.2 320 96C320 102.8 317.1 109.3 312.1 113.8L232.1 185.8C225 192.2 214.9 193.8 206.2 189.9C197.6 186.1 192 177.5 192 168V128H176C140.7 128 112 156.7 112 192V358.7C140.3 371 160 399.2 160 432C160 476.2 124.2 512 80 512C35.82 512 0 476.2 0 432C0 399.2 19.75 371 48 358.7V192C48 121.3 105.3 64 176 64H192V24zM56 432C56 445.3 66.75 456 80 456C93.25 456 104 445.3 104 432C104 418.7 93.25 408 80 408C66.75 408 56 418.7 56 432z',
					'color': 'rgb(31,119,180)'
				};

				var refreshChart = {
					'height': 512,
					'width': 512,
					'id': chartId,
					'path': 'M464 16c-17.67 0-32 14.31-32 32v74.09C392.1 66.52 327.4 32 256 32C161.5 32 78.59 92.34 49.58 182.2c-5.438 16.81 3.797 34.88 20.61 40.28c16.89 5.5 34.88-3.812 40.3-20.59C130.9 138.5 189.4 96 256 96c50.5 0 96.26 24.55 124.4 64H336c-17.67 0-32 14.31-32 32s14.33 32 32 32h128c17.67 0 32-14.31 32-32V48C496 30.31 481.7 16 464 16zM441.8 289.6c-16.92-5.438-34.88 3.812-40.3 20.59C381.1 373.5 322.6 416 256 416c-50.5 0-96.25-24.55-124.4-64H176c17.67 0 32-14.31 32-32s-14.33-32-32-32h-128c-17.67 0-32 14.31-32 32v144c0 17.69 14.33 32 32 32s32-14.31 32-32v-74.09C119.9 445.5 184.6 480 255.1 480c94.45 0 177.4-60.34 206.4-150.2C467.9 313 458.6 294.1 441.8 289.6z',
					'color': 'rgb(31,119,180)'
				};
				var reset = {
					'width': 928.6,
					'height': 1000,
					'id': chartId,
					'path': 'm786 296v-267q0-15-11-26t-25-10h-214v214h-143v-214h-214q-15 0-25 10t-11 26v267q0 1 0 2t0 2l321 264 321-264q1-1 1-4z m124 39l-34-41q-5-5-12-6h-2q-7 0-12 3l-386 322-386-322q-7-4-13-4-7 2-12 7l-35 41q-4 5-3 13t6 12l401 334q18 15 42 15t43-15l136-114v109q0 8 5 13t13 5h107q8 0 13-5t5-13v-227l122-102q5-5 6-12t-4-13z',
					'transform': 'matrix(1 0 0 -1 0 850)'
				};
				var AIChart = {
					'height': 512,
					'width': 512,
					'id': chartId,
					'path': 'M184 0c30.9 0 56 25.1 56 56V456c0 30.9-25.1 56-56 56c-28.9 0-52.7-21.9-55.7-50.1c-5.2 1.4-10.7 2.1-16.3 2.1c-35.3 0-64-28.7-64-64c0-7.4 1.3-14.6 3.6-21.2C21.4 367.4 0 338.2 0 304c0-31.9 18.7-59.5 45.8-72.3C37.1 220.8 32 207 32 192c0-30.7 21.6-56.3 50.4-62.6C80.8 123.9 80 118 80 112c0-29.9 20.6-55.1 48.3-62.1C131.3 21.9 155.1 0 184 0zM328 0c28.9 0 52.6 21.9 55.7 49.9c27.8 7 48.3 32.1 48.3 62.1c0 6-.8 11.9-2.4 17.4c28.8 6.2 50.4 31.9 50.4 62.6c0 15-5.1 28.8-13.8 39.7C493.3 244.5 512 272.1 512 304c0 34.2-21.4 63.4-51.6 74.8c2.3 6.6 3.6 13.8 3.6 21.2c0 35.3-28.7 64-64 64c-5.6 0-11.1-.7-16.3-2.1c-3 28.2-26.8 50.1-55.7 50.1c-30.9 0-56-25.1-56-56V56c0-30.9 25.1-56 56-56z',
					'color': 'rgb(31,119,180)'
				};
				var camera = {
					'width': 1000,
					'height': 1000,
					'path': 'm500 450c-83 0-150-67-150-150 0-83 67-150 150-150 83 0 150 67 150 150 0 83-67 150-150 150z m400 150h-120c-16 0-34 13-39 29l-31 93c-6 15-23 28-40 28h-340c-16 0-34-13-39-28l-31-94c-6-15-23-28-40-28h-120c-55 0-100-45-100-100v-450c0-55 45-100 100-100h800c55 0 100 45 100 100v450c0 55-45 100-100 100z m-400-550c-138 0-250 112-250 250 0 138 112 250 250 250 138 0 250-112 250-250 0-138-112-250-250-250z m365 380c-19 0-35 16-35 35 0 19 16 35 35 35 19 0 35-16 35-35 0-19-16-35-35-35z',
					'transform': 'matrix(1 0 0 -1 0 850)',
					'color': 'rgb(31,119,180)'
				};
				var iconArrowDown = {
					'height': 20,
					'width': 20,
					'path': 'M15.7071 4.29289C16.0976 4.68342 16.0976 5.31658 15.7071 5.70711L10.7071 10.7071C10.3166 11.0976 9.68342 11.0976 9.29289 10.7071L4.29289 5.70711C3.90237 5.31658 3.90237 4.68342 4.29289 4.29289C4.68342 3.90237 5.31658 3.90237 5.70711 4.29289L10 8.58579L14.2929 4.29289C14.6834 3.90237 15.3166 3.90237 15.7071 4.29289ZM15.7071 10.2929C16.0976 10.6834 16.0976 11.3166 15.7071 11.7071L10.7071 16.7071C10.3166 17.0976 9.68342 17.0976 9.29289 16.7071L4.29289 11.7071C3.90237 11.3166 3.90237 10.6834 4.29289 10.2929C4.68342 9.90237 5.31658 9.90237 5.70711 10.2929L10 14.5858L14.2929 10.2929C14.6834 9.90237 15.3166 9.90237 15.7071 10.2929Z',
					'color': 'rgb(31,119,180)'
				};
				$(".visualizationDashboardView").css("display", "block");
				var resultObj = response;
				var dataPropObject = resultObj['dataPropObject'];
				var chartDataObj = [];
				if (chartType !== null && chartType !== '' && chartType !== undefined && chartType === 'indicator') {
					chartDataObj['data'] = resultObj['data'];
				} else {
					chartDataObj = resultObj['data'];
				}
				var layoutObj = resultObj['layout'];
				var treeMapColObj = resultObj['treeMapCol'];
				var compareChartFlag = resultObj['compareChartFlag'];
				var dashbordname;
				var item = $("#OptionDropdownData").jqxDropDownList('getSelectedItem');
				if (item != null) {
					dashbordname = item.value;
				}
				var totalChartCount = resultObj['totalChartCount'];
				$('#' + chartId + "_TotalChartCount").val(totalChartCount);
				var plotlyChartLabelType = dataPropObject['textinfo'];
				var plotlyChartHoverType = dataPropObject['hoverinfo'];
				var data = [];
				var chartLabels = [];
				var dataObj = {};
				var layout = {};
				var config = {
					responsive: true,
					displayModeBar: true,
					downloadImage: true,
					displaylogo: false,
					dragmode: false,
					modeBarButtonsToAdd: [
						{
							name: 'Scroll Up', icon: iconArrowUp, click: function() {
								scrollUp(chartId, chartType);
							}
						}, {
							name: 'Name',
							title: 'Download as Image',
							icon: camera, click: function(gd) {
								Plotly.downloadImage(gd, {
									format: 'png',
									height: 500,
									width: 500,
									filename: 'Download plot'
								})
							}
						},
						{
							name: 'Show Data', icon: icon1, click: function() {
								//								var homepageFilterParamsObj = getHomepageFilterParamsArr();
								//								var mainFilterConditionsObj = homepageFilterParamsObj['mainFilterConditions'];
								//								var mainFilterConditionsStr = "";
								//								if(!isNullOrUndefined(mainFilterConditionsObj) && !jQuery.isEmptyObject(mainFilterConditionsObj)) {
								//									mainFilterConditionsStr = JSON.stringify(mainFilterConditionsObj);
								//								}
								getGridData(axix, "", chartId, filterCondition);
							}
						}, {
							name: 'Filters', icon: icon, click: function() {
								getfilterData(chartId, table, chartType);
							}
						}, {
							name: 'Delete', icon: deleteicon, click: function() {
								deleteVisualizeChart(chartId, table, chartType);
							}
						}, {
							name: 'Expand', icon: Expand, click: function() {
								expandChart(chartType, layout, data, chartId, createcount, table, axix, chartLabels, filterCondition); //jaggu
							}
						}, {
							name: 'Edit', icon: EditIcon, click: function() {
								homePageChartSetting(chartId, chartType, layout, data, createcount, event, "", chartConfigToggleStatus);
							}
						}, {
							name: 'Trends', icon: pridictiveAnalysis, click: function(event) {
								getChartContent(chartId, createcount, chartType, 'pridictiveAnalysis');
							}
						}, {
							name: 'Color Pallete', icon: ColorPallete, click: function() {
								updatechartColor(chartId, createcount, data);
							}
						}, {
							name: 'Chart Types', icon: AssignUser, click: function() {
								changegraph(chartId, chartType, layout, data, createcount, event);
							}
						}, {
							name: 'Reset', icon: reset, click: function(chartId) {
								getVisualizationchart(dashbordname, "");
							}
						}, {
							name: 'AI Insights', icon: AIChart, click: function() {
								getArtIntAPI(chartId, chartType, table);
							}
						},
						{
							name: 'Notes', icon: AIChart, click: function() {
								getChartNotes(chartId);
							}
						},
						{
							name: 'Flip Data' , icon :icon1 ,click: function(){
								getChartDataonFlip(chartId,chartDataObj);
							}
						},
					],
					//                     modeBarButtonsToRemove: ['lasso2d']
					//                    
					modeBarButtonsToRemove: ['toImage', 'zoomin', 'resetViews', 'resetScale2d', 'zoomout', 'pan2d', 'sendDataToCloud', 'hoverClosestCartesian', 'autoScale2d', 'lasso2d', 'select2d', 'zoom2d']
				};
				var compareChartButton = {
					name: 'Compare Charts', icon: compareChart, click: function(chartId) {
						getCompareChart(chartId['id'], chartType);
					}
				};
				var normalChartButton = {
					name: 'Remove Compare Charts', icon: refreshChart, click: function(chartId) {
						getRemoveCompareChart(chartId['id'], chartType);
					}
				};
				var downArrow = {
					name: 'Scroll Down',
					icon: iconArrowDown,
					click: function() {
						scrollDownArrow(chartId, chartType);
					}
				}
				if (chartType != null && chartType != '' && chartType != undefined && compareChartTypes.indexOf(chartType) > -1) {
					var modeBarButtonsToAdd = config['modeBarButtonsToAdd'];
					modeBarButtonsToAdd.push(compareChartButton);
					modeBarButtonsToAdd.push(normalChartButton);
					modeBarButtonsToAdd.push(downArrow);
				} else {
					var modeBarButtonsToAdd = config['modeBarButtonsToAdd'];
					modeBarButtonsToAdd.push(downArrow);
				}

				var axisColumnName;
				var valuesColumnName;
				var defaultLegendNames = {};
				var userProvidedLegendNames = {};

				$.each(axisColumns, function(index, value) {
					var axisName = value.columnName.split(".")[1];
					axisColumnName = axisName.replace(/[()]/g, "");
					axisColumnName = axisColumnName.replace(/_/g, " ");
					defaultLegendNames[axisColumnName] = axisColumnName;
				});
				$.each(valuesColumns, function(index, value) {
					var valueName = value.columnName.split(".")[1];
					valuesColumnName = valueName.replace(/[()]/g, "");
					valuesColumnName = valuesColumnName.replace(/_/g, " ");
					defaultLegendNames[valuesColumnName] = valuesColumnName;
					var legendLabels = value['userProvidedLegendLabel'];
					if (legendLabels !== '' && legendLabels !== undefined && legendLabels !== null) {
						userProvidedLegendNames[valuesColumnName] = legendLabels;
					}
				});

				if (chartDataObj != null && !jQuery.isEmptyObject(chartDataObj)) {
					var traceHeight = 0;
						
	
             if (chartType !== null && chartType !== '' && chartType !== undefined && chartType === 'pie') {
						$.each(chartDataObj, function(key) {
							var traceObj = {};
							var colorObj = {};
							if (key !== axisColumnName) {
								chartLabels = chartDataObj[axisColumnName];
								traceObj['labels'] = chartDataObj[axisColumnName];
								traceObj['values'] = chartDataObj[key];
								traceObj['type'] = chartType;
								traceObj['name'] = '';
								traceObj['marker'] = colorObj;
								traceObj = getChartLabelOrHoverDataFormatter('texttemplate', traceObj, chartDataObj[key], plotlyChartLabelType, 'label', 'value', "", currencySymbol);
								traceObj = getChartLabelOrHoverDataFormatter('hovertemplate', traceObj, chartDataObj[key], plotlyChartHoverType, 'label', 'value', "", currencySymbol);
								$.each(dataPropObject, function(key, val) {
									traceObj[key] = val;
								});
								traceHeight = traceObj['labels'].length;
							}
							if (traceObj !== null && !jQuery.isEmptyObject(traceObj)) {
								data.push(traceObj);
							}
						});
					} else if (chartType != null && chartType != '' && chartType != undefined && chartType == 'donut') {
						$.each(chartDataObj, function(key) {

							var traceObj = {};
							var colorObj = {};
							if (key !== axisColumnName) {
								chartLabels = chartDataObj[axisColumnName];
								traceObj['labels'] = chartDataObj[axisColumnName];
								traceObj['values'] = chartDataObj[key];
								traceObj['hole'] = 0.4;
								traceObj['type'] = 'pie';
								traceObj['name'] = '';
								traceObj['marker'] = colorObj;
								traceObj = getChartLabelOrHoverDataFormatter('texttemplate', traceObj, chartDataObj[key], plotlyChartLabelType, 'label', 'value', "", currencySymbol);
								traceObj = getChartLabelOrHoverDataFormatter('hovertemplate', traceObj, chartDataObj[key], plotlyChartHoverType, 'label', 'value', "", currencySymbol);
								$.each(dataPropObject, function(key, val) {
									traceObj[key] = val;
								});
								traceHeight = traceObj['labels'].length;
							}
							if (traceObj !== null && !jQuery.isEmptyObject(traceObj)) {
								data.push(traceObj);
							}
						});
					} else if (chartType != null && chartType != '' && chartType != undefined && chartType == 'bar') {
						var colorCount = 0;
						colorArray = ['#1864ab', '#fd7e14', '#0b7285', '#ff6b6b'];
						$.each(chartDataObj, function(keyName) {

							var traceObj = {};
							var colorObj = {};
							if (keyName !== axisColumnName) {
								traceObj['y'] = chartDataObj[axisColumnName];
								traceObj['x'] = chartDataObj[keyName];
								traceObj['type'] = chartType;
								traceObj['orientation'] = 'h';
								traceObj = getChartLabelOrHoverDataFormatter('texttemplate', traceObj, chartDataObj[keyName], plotlyChartLabelType, 'y', 'x', "", currencySymbol);
								traceObj = getChartLabelOrHoverDataFormatter('hovertemplate', traceObj, chartDataObj[keyName], plotlyChartHoverType, 'y', 'x', "", currencySymbol);
								var keys = keyName.split("ASCOL");
								keyName = keys[0];
								traceObj = addlegendLabelToTrace(traceObj, keyName, defaultLegendNames, userProvidedLegendNames);
								$.each(dataPropObject, function(key, val) {
									if (key === 'marker' && !jQuery.isEmptyObject(val) && val !== null) {
										var colorsArray = val['colors'];
										if (colorsArray !== undefined && colorsArray !== null && !$.isArray(colorsArray)) {
											colorObj['color'] = colorsArray;
										} else if (colorsArray !== undefined && colorsArray !== null && $.isArray(colorsArray)) {
											colorObj['color'] = colorsArray[colorCount++];
										} else {
											colorObj['color'] = colorArray[colorCount++];
										}
										traceObj[key] = colorObj;
									} else if (key === 'marker' && (jQuery.isEmptyObject(val) || val === null)) {
										colorObj['color'] = colorArray[colorCount++];
										traceObj[key] = colorObj;
									} else {
										traceObj[key] = val;
									}
								});
							}
							if (traceObj !== null && !jQuery.isEmptyObject(traceObj)) {
								data.push(traceObj);
							}
						});
					} else if (chartType != null && chartType != '' && chartType != undefined && chartType == 'column') {
						var colorCount = 0;
						colorArray = ['#1864ab', '#fd7e14', '#0b7285', '#ff6b6b'];
						var i = 1;
						$.each(chartDataObj, function(keyName, val) {
							var traceObj = {};
							var colorObj = {};
							if (keyName !== axisColumnName) {
								traceObj['x'] = chartDataObj[axisColumnName];
								traceObj['y'] = chartDataObj[keyName];
								traceObj['type'] = 'bar';
								traceObj = getChartLabelOrHoverDataFormatter('texttemplate', traceObj, chartDataObj[keyName], plotlyChartLabelType, 'x', 'y', "", currencySymbol);
								traceObj = getChartLabelOrHoverDataFormatter('hovertemplate', traceObj, chartDataObj[keyName], plotlyChartHoverType, 'x', 'y', "", currencySymbol);
								var keys = keyName.split("ASCOL");
								keyName = keys[0];
								if (compareChartsFlag == 'YF') {
									traceObj = addlegendLabelToTraceFilter(traceObj, i);
								} else {
									traceObj = addlegendLabelToTrace(traceObj, keyName, defaultLegendNames, userProvidedLegendNames);
								}
								i++;
								$.each(dataPropObject, function(key, val) {
									if (key === 'marker' && !jQuery.isEmptyObject(val) && val !== null) {
										var colorsArray = val['colors'];
										if (colorsArray !== undefined && colorsArray !== null && !$.isArray(colorsArray)) {
											colorObj['color'] = colorsArray;
										} else if (colorsArray !== undefined && colorsArray !== null && $.isArray(colorsArray)) {
											colorObj['color'] = colorsArray[colorCount++];
										} else {
											colorObj['color'] = colorArray[colorCount++];
										}
										traceObj[key] = colorObj;
									} else if (key === 'marker' && (jQuery.isEmptyObject(val) || val === null)) {
										colorObj['color'] = colorArray[colorCount++];
										traceObj[key] = colorObj;
									} else {
										traceObj[key] = val;
									}
								});
							}

							if (traceObj !== null && !jQuery.isEmptyObject(traceObj)) {
								data.push(traceObj);
							}
						});
					} else if (chartType != null && chartType != '' && chartType != undefined && chartType == 'lines') {
						var colorCount = 0;
						var lineColorCount = 0;
						colorArray = ['#1864ab', '#fd7e14', '#0b7285', '#ff6b6b'];
						var i = 1;
						$.each(chartDataObj, function(keyName, val) {
							var traceObj = {};
							var colorObj = {};
							if (keyName !== axisColumnName) {
								traceObj['x'] = chartDataObj[axisColumnName];
								traceObj['y'] = chartDataObj[keyName];
								traceObj['type'] = chartType;
								traceObj = getChartLabelOrHoverDataFormatter('texttemplate', traceObj, chartDataObj[keyName], plotlyChartLabelType, 'x', 'y', "", currencySymbol);
								traceObj = getChartLabelOrHoverDataFormatter('hovertemplate', traceObj, chartDataObj[keyName], plotlyChartHoverType, 'x', 'y', "", currencySymbol);
								var keys = keyName.split("ASCOL");
								keyName = keys[0];
								if (compareChartsFlag == 'YF') {
									traceObj = addlegendLabelToTraceFilter(traceObj, i);
								} else {
									traceObj = addlegendLabelToTrace(traceObj, keyName, defaultLegendNames, userProvidedLegendNames);
								}
								i++;
								$.each(dataPropObject, function(key, val) {
									if (key === 'marker' && !jQuery.isEmptyObject(val) && val !== null) {
										var colorsArray = val['color'];
										if (colorsArray !== undefined && colorsArray !== null && !$.isArray(colorsArray)) {
											colorObj['color'] = colorsArray;
										} else if (colorsArray !== undefined && colorsArray !== null && $.isArray(colorsArray)) {
											colorObj['color'] = colorsArray[colorCount++];
										} else {
											colorObj['color'] = colorArray[colorCount++];
										}
										colorObj['size'] = val['size'];
										traceObj[key] = colorObj;
									} else if (key === 'marker' && (jQuery.isEmptyObject(val) || val === null)) {
										colorObj['color'] = colorArray[colorCount++];
										traceObj[key] = colorObj;
									} else if (key === 'line' && !jQuery.isEmptyObject(val) && val !== null) {
										var lineObject = Object.assign({}, val);
										var colorsArray = lineObject['color'];
										if (colorsArray !== undefined && colorsArray !== null && !$.isArray(colorsArray)) {
											lineObject['color'] = colorsArray;
										} else if (colorsArray !== undefined && colorsArray !== null && $.isArray(colorsArray)) {
											lineObject['color'] = colorsArray[lineColorCount++];
										} else {
											lineObject['color'] = colorArray[lineColorCount++];
										}
										traceObj[key] = lineObject;
									} else {
										traceObj[key] = val;
									}
								});
							}

							if (traceObj !== null && !jQuery.isEmptyObject(traceObj)) {
								data.push(traceObj);
							}
						});
					} else if (chartType != null && chartType != '' && chartType != undefined && chartType == 'scatter') {
						var colorCount = 0;
						colorArray = ['#1864ab', '#fd7e14', '#0b7285', '#ff6b6b'];
						$.each(chartDataObj, function(keyName, val) {

							var traceObj = {};
							var colorObj = {};
							if (keyName !== axisColumnName) {
								traceObj['x'] = chartDataObj[axisColumnName];
								traceObj['y'] = chartDataObj[keyName];
								traceObj['type'] = chartType;
								traceObj['mode'] = 'markers';
								traceObj['marker'] = colorObj;
								traceObj = getChartLabelOrHoverDataFormatter('texttemplate', traceObj, chartDataObj[keyName], plotlyChartLabelType, 'x', 'y', "", currencySymbol);
								traceObj = getChartLabelOrHoverDataFormatter('hovertemplate', traceObj, chartDataObj[keyName], plotlyChartHoverType, 'x', 'y', "", currencySymbol);
								var keys = keyName.split("ASCOL");
								keyName = keys[0];
								traceObj = addlegendLabelToTrace(traceObj, keyName, defaultLegendNames, userProvidedLegendNames);
								$.each(dataPropObject, function(key, val) {
									if (key === 'marker' && !jQuery.isEmptyObject(val) && val !== null) {
										var colorsArray = val['color'];
										if (colorsArray !== undefined && colorsArray !== null && !$.isArray(colorsArray)) {
											colorObj['color'] = colorsArray;
										} else if (colorsArray !== undefined && colorsArray !== null && $.isArray(colorsArray)) {
											colorObj['color'] = colorsArray[colorCount++];
										} else {
											colorObj['color'] = colorArray[colorCount++];
										}
										colorObj['size'] = val['size'];
										traceObj[key] = colorObj;
									} else if (key === 'marker' && (jQuery.isEmptyObject(val) || val === null)) {
										colorObj['color'] = colorArray[colorCount++];
										traceObj[key] = colorObj;
									} else {
										traceObj[key] = val;
									}
								});
							}
							if (traceObj !== null && !jQuery.isEmptyObject(traceObj)) {
								data.push(traceObj);
							}
						});
					} else if (chartType != null && chartType != '' && chartType != undefined && chartType == 'waterfall') {
						var colorCount = 0;
						colorArray = ['#1864ab', '#fd7e14', '#0b7285', '#ff6b6b'];
						$.each(chartDataObj, function(keyName) {

							var traceObj = {};
							var colorObj = {};
							if (keyName !== axisColumnName) {
								var measureArr = [];
								var axisCols = chartDataObj[axisColumnName];
								if (axisCols != null && !jQuery.isEmptyObject(axisCols)) {
									var axisLength = axisCols.length;
									for (var l = 0; l < axisLength; l++) {
										measureArr.push("relative");
									}
									traceObj['measure'] = measureArr;
								}
								traceObj['x'] = chartDataObj[axisColumnName];
								traceObj['y'] = chartDataObj[key];
								traceObj['type'] = chartType;
								traceObj['orientation'] = 'v';
								traceObj = getChartLabelOrHoverDataFormatter('texttemplate', traceObj, chartDataObj[keyName], plotlyChartLabelType, 'y', 'x', "", currencySymbol);
								traceObj = getChartLabelOrHoverDataFormatter('hovertemplate', traceObj, chartDataObj[keyName], plotlyChartHoverType, 'y', 'x', "", currencySymbol);
								var keys = keyName.split("ASCOL");
								keyName = keys[0];
								traceObj = addlegendLabelToTrace(traceObj, keyName, defaultLegendNames, userProvidedLegendNames);
								$.each(dataPropObject, function(key, val) {
									if (key === 'marker' && !jQuery.isEmptyObject(val) && val !== null) {
										var colorsArray = val['colors'];
										if (colorsArray !== undefined && colorsArray !== null && colorsArray.length !== null) {
											colorObj['color'] = colorsArray[colorCount++];
										} else {
											colorObj['color'] = colorArray[colorCount++];
										}
										traceObj[key] = colorObj;
									} else if (key === 'marker' && (jQuery.isEmptyObject(val) || val === null)) {
										colorObj['color'] = colorArray[colorCount++];
										traceObj[key] = colorObj;
									} else {
										traceObj[key] = val;
									}
								});
							}
							if (traceObj !== null && !jQuery.isEmptyObject(traceObj)) {
								data.push(traceObj);
							}
						});
					} else if (chartType != null && chartType != '' && chartType != undefined && chartType == 'treemap') {
						var treeDomain = 0
						for (var key in chartDataObj) {
							var treeDataObj = chartDataObj[key];
							var treeObj = {};
							treeObj['type'] = chartType;
							treeObj['labels'] = treeDataObj[treeMapColObj['labels']];
							treeObj['parents'] = treeDataObj[treeMapColObj['parents']];
							treeObj['values'] = treeDataObj[treeMapColObj['values']];
							treeObj['textinfo'] = "label+value";
							treeObj['branchvalues'] = "total";
							var length = Object.keys(chartDataObj).length;
							var split = ((100 / length) / 100);
							if (chartDataObj != null && !jQuery.isEmptyObject(chartDataObj) && Object.keys(chartDataObj).length > 1) {
								treeObj['domain'] = { x: [treeDomain, ((treeDomain + split) - 0.02)] };
								treeDomain = treeDomain + split + 0.02;
							}
							if (dataPropObject != null && !jQuery.isEmptyObject(dataPropObject)) {
								$.each(dataPropObject, function(key, val) {
									treeObj[key] = val;
								});
							}

							data.push(treeObj);
						}

					} else if (chartType != null && chartType != '' && chartType != undefined && chartType == 'histogram') {
						dataObj['x'] = chartDataObj[0];
						dataObj['y'] = chartDataObj[key];
						dataObj['type'] = chartType;
						colorObj['size'] = 20;
						dataObj['name'] = 'value';
						dataObj['marker'] = colorObj;
					} else if (chartType != null && chartType != '' && chartType != undefined && chartType == 'scatterpolar') {
						var colorCount = 0;
						var labelCount = 0;
						colorArray = ['#1864ab', '#fd7e14', '#0b7285', '#ff6b6b'];
						var i = 1;
						$.each(chartDataObj, function(keyName) {
							var traceObj = {};
							var colorObj = {};
							if (keyName !== axisColumnName) {
								traceObj['r'] = chartDataObj[keyName];
								traceObj['theta'] = chartDataObj[axisColumnName];
								traceObj['type'] = chartType;
								traceObj['fill'] = 'toself';
								var keys = keyName.split("ASCOL");
								keyName = keys[0];
								if (compareChartsFlag == 'YF') {
									traceObj = addlegendLabelToTraceFilter(traceObj, i);
								} else {
									traceObj = addlegendLabelToTrace(traceObj, keyName, defaultLegendNames, userProvidedLegendNames);
								}
								i++;
								$.each(dataPropObject, function(key, val) {
									if (key === 'marker' && !jQuery.isEmptyObject(val) && val !== null) {
										var colorsArray = val['colors'];
										if (colorsArray !== undefined && colorsArray !== null && !$.isArray(colorsArray)) {
											colorObj['color'] = colorsArray;
										} else if (colorsArray !== undefined && colorsArray !== null && $.isArray(colorsArray)) {
											colorObj['color'] = colorsArray[colorCount++];
										} else {
											colorObj['color'] = colorArray[colorCount++];
										}
										traceObj[key] = colorObj;
									} else if (key === 'marker' && (jQuery.isEmptyObject(val) || val === null)) {
										colorObj['color'] = colorArray[colorCount++];
										traceObj[key] = colorObj;
									} else {
										traceObj[key] = val;
									}
								});
							}
							if (traceObj !== null && !jQuery.isEmptyObject(traceObj)) {
								data.push(traceObj);
							}
						});
					} else if (chartType != null && chartType != '' && chartType != undefined && chartType == 'funnel') {
						var colorCount = 0;
						colorArray = ['#1864ab', '#fd7e14', '#0b7285', '#ff6b6b'];
						$.each(chartDataObj, function(keyName) {

							var traceObj = {};
							var colorObj = {};
							if (keyName !== axisColumnName) {
								traceObj['y'] = chartDataObj[axisColumnName];
								traceObj['x'] = chartDataObj[keyName];
								traceObj['type'] = chartType;
								traceObj = getChartLabelOrHoverDataFormatter('texttemplate', traceObj, chartDataObj[keyName], plotlyChartLabelType, 'y', 'x', "", currencySymbol);
								traceObj = getChartLabelOrHoverDataFormatter('hovertemplate', traceObj, chartDataObj[keyName], plotlyChartHoverType, 'y', 'x', "", currencySymbol);
								var keys = keyName.split("ASCOL");
								keyName = keys[0];
								traceObj = addlegendLabelToTrace(traceObj, keyName, defaultLegendNames, userProvidedLegendNames);
								$.each(dataPropObject, function(key, val) {
									if (key === 'marker' && !jQuery.isEmptyObject(val) && val !== null) {
										var colorsArray = val['colors'];
										if (colorsArray !== undefined && colorsArray !== null && colorsArray.length !== null) {
											colorObj['color'] = colorsArray[colorCount++];
										} else {
											colorObj['color'] = colorArray[colorCount++];
										}
										traceObj[key] = colorObj;
									} else if (key === 'marker' && (jQuery.isEmptyObject(val) || val === null)) {
										colorObj['color'] = colorArray[colorCount++];
										traceObj[key] = colorObj;
									} else {
										traceObj[key] = val;
									}
								});
							}
							if (traceObj !== null && !jQuery.isEmptyObject(traceObj)) {
								data.push(traceObj);
							}
						});
					} else if (chartType != null && chartType != '' && chartType != undefined && chartType == 'indicator') {
						var traceObj = {};
						var domainObj = {};
						var domainArr = [];
						domainArr.push(0);
						domainArr.push(1);
						domainObj["x"] = domainArr;
						domainObj["y"] = domainArr;
						traceObj['domain'] = domainObj;
						traceObj['value'] = chartDataObj['data'];
						traceObj['type'] = chartType;
						traceObj['mode'] = "gauge+number";
						traceObj['gauge'] = resultObj['gauge'];
						if (dataPropObject != null && !jQuery.isEmptyObject(dataPropObject)) {
							$.each(dataPropObject, function(key, val) {
								traceObj[key] = val;
							});
						}
						if (traceObj !== null && !jQuery.isEmptyObject(traceObj)) {
							data.push(traceObj);
						}
					} else {
						dataObj['x'] = chartDataObj[0];
						dataObj['y'] = chartDataObj[key];
						dataObj['type'] = chartType;
						dataObj['name'] = 'value';
						dataObj['marker'] = colorObj;
					}

					var margin = {};
					if (chartType != null && chartType != '' && chartType != undefined && chartType == 'treemap') {
						margin = {
							l: 0,
							r: 0,
							b: 0,
							t: 30,
							pad: 0
						};
					} else if (chartType != null && chartType != '' && chartType != undefined && (chartType == 'pie' || chartType == 'donut')) {
						margin = {
							l: 10,
							r: 20,
							b: 10,
							t: 30,
							autoexpand: true,
							pad: 0
						};
					} else {
						margin = {
							l: 50,
							r: 60,
							b: 50,
							t: 50
						};
					}
					layout = {
						margin: margin,
						height: 270,
						dragmode: false,
						font: {
							size: 9
						},
						modebar: {
							orientation: 'v',
							color: '#0b4a99',
							activecolor: '#9ED3CD'
						},

						title: {
							text: title,
							font: {
								family: '"Open Sans", verdana, arial, sans-serif',
								size: 24
							},
							xref: 'paper',
							x: 0.1,
						}
					};
					var legend = {
						"x": -0.2,
						"y": 0.2,
						"orientation": "h"
					};
					if (layoutObj != null && !jQuery.isEmptyObject(layoutObj)) {
						$.each(layoutObj, function(key, val) {
							layout[key] = val;
						});
					}


					if (chartType != null && chartType != '' && chartType != undefined && (chartType == 'donut' || chartType == 'pie')) {
						layout['showlegend'] = true;
						var updatemenus = [{
							type: 'buttons',
							buttons: [{
								label: '≡',
								method: 'relayout',
								args: ['showlegend', false],
								args2: ['showlegend', true]
							}]
						}];
						//                    layout['updatemenus'] = updatemenus;
						layout['legend'] = legend;
						layout['showlegend'] = false;
					} else {
						layout['height'] = 330;
					}
					var polar = {
						radialaxis: {
							visible: true
						},
						showlegend: true
					};
					if (chartType == 'scatterpolar') {
						layout['polar'] = polar;
						layout['dragmode'] = true;
					}

					if (compareChartFlag == 'Y' || compareChartFlag == 'YF') {
						if (chartType == 'bar' || chartType == 'column') {
							layout['barmode'] = 'group';
						}
						$("#" + chartId).closest(".homeChartWrapDiv").attr("class", "col-md-6 col-sm-6 col-lg-6 homeChartWrapDiv");
						layout['legend'] = legend;
					} else if (compareChartFlag == 'N') {
						if (compareChartsArr != null && !jQuery.isEmptyObject(compareChartsArr) && compareChartsArr.indexOf(chartId) > -1) {
							var index = compareChartsArr.indexOf(chartId);
							$("#" + chartId).closest(".homeChartWrapDiv").attr("class", "col-md-6 col-sm-6 col-lg-3 homeChartWrapDiv");
							if (index > -1) {
								compareChartsArr.splice(compareChartsArr.indexOf(chartId), 1);
								if (compareChartsArr.length <= 0) {
									$("#visionDashBoardHomeFilterId").show();
									$("#visionDashBoardHomeCompareFilterId").hide();
								}
							}

						}

					}
					$("#" + chartId).empty();
					if (chartType != null && chartType != '' && chartType != undefined && (chartType != 'lines' && chartType != 'treemap')) {
						for (var m = 0; m < data.length; m++) {
							var markerObj = data[m]['marker'];
							if ((!(markerObj != null && !jQuery.isEmptyObject(markerObj))) ||
								(markerObj != null && !jQuery.isEmptyObject(markerObj) &&
									!(markerObj['colors'] != null && !jQuery.isEmptyObject(markerObj['colors'])))) {
								var colorObj = [];
								if (chartType == 'pie' || chartType == 'donut') {
									colorObj = ['#2F6345', '#40875E', '#58B07E', '#C48C00', '#F0AB00', '#FFBE1D', '#FFCC4B', '#827E32', '#A8A240', '#C5C169'];
									markerObj['colors'] = colorObj;
								} else {
									var x = data[m]['x'];
									colorObj = ['#1864B1', '#FF7F0E']
									var colorsX = [];
									if (x != null && x != '' && x != undefined && !jQuery.isEmptyObject(x)) {
										for (var p = 0; p < x.length; p++) {
											colorsX.push(colorObj[m]);
										}
										markerObj['color'] = colorsX;
									}
								}
								if (markerObj != null && !jQuery.isEmptyObject(markerObj)) {
									data[m]['marker'] = markerObj;
								}
							}
						}
					}
					if (isCurrencyConversionEvent !== undefined && isCurrencyConversionEvent !== ''
						&& isCurrencyConversionEvent === 'true') {
						var chartTraceArray = [];
						$.each(data, function(index, value) {
							var chartTraceData = value;
							if (chartType != null && chartType != '' && chartType != undefined
								&& (chartType == 'pie' || chartType == 'donut')) {
								var chartData = chartTraceData['values'];
								chartTraceData = getChartLabelOrHoverDataFormatter('texttemplate', chartTraceData, chartData, plotlyChartLabelType, 'label', 'value', isCurrencyConversionEvent, currencySymbol);
								chartTraceData = getChartLabelOrHoverDataFormatter('hovertemplate', chartTraceData, chartData, plotlyChartHoverType, 'label', 'value', isCurrencyConversionEvent, currencySymbol);
							} else {
								if (chartType == 'bar') {
									var chartData = chartTraceData['x'];
									chartTraceData = getChartLabelOrHoverDataFormatter('texttemplate', chartTraceData, chartData, plotlyChartLabelType, 'y', 'x', isCurrencyConversionEvent, currencySymbol);
									chartTraceData = getChartLabelOrHoverDataFormatter('hovertemplate', chartTraceData, chartData, plotlyChartHoverType, 'y', 'x', isCurrencyConversionEvent, currencySymbol);
								} else {
									var chartData = chartTraceData['y'];
									chartTraceData = getChartLabelOrHoverDataFormatter('texttemplate', chartTraceData, chartData, plotlyChartLabelType, 'x', 'y', isCurrencyConversionEvent, currencySymbol);
									chartTraceData = getChartLabelOrHoverDataFormatter('hovertemplate', chartTraceData, chartData, plotlyChartHoverType, 'x', 'y', isCurrencyConversionEvent, currencySymbol);
								}
							}
							chartTraceArray.push(chartTraceData);
						});
						data = chartTraceArray;
					}
					Plotly.newPlot(chartId, data, layout, config);
				} else {
					$("#" + chartId).parent().parent().remove();
				}
				var myPlot = document.getElementById(chartId);
				//                if (chartType != null && chartType != '' && chartType != undefined && (chartType == 'donut' || chartType == 'pie'))
				//                {
				//                    var height = (traceHeight * 19) + 10;
				//                    // $("#" + chartId).append("<div id='" + chartId + "_legendDivId' class='pieChartLegendTraces'></div>");
				//                    var traces = $("#" + chartId).find(".legend").find(".groups").html();
				//                    var groups = $("#" + chartId).find("g.infolayer").find("g.legend").find("g.scrollbox").find("g.groups");
				//                    $("#" + chartId).find(".legend").find(".groups").html("<foreignObject class='chartLegendScroll' width='353.05' height='75' style='overflow-y:scroll'>"
				//                            + "<span id='" + chartId + "_legendId' style='height:75px'></span></foreignObject>");
				//                    $("#" + chartId + "_legendId").attr("class", "pieLegendTraces");
				//                    $("#" + chartId + "_legendId").html("<svg class='legend_main-svg' "
				//                            + "height ='" + height + "' style='position:fixed;left:-12px;'>"
				//                            + traces + "</svg>");
				//                    //$("#" + chartId).find(".plot-container").find(".legend").hide();
				//
				//                }
				//                $('.homeChartParentDiv .chartMain .svg-container').unbind('scroll').on('scroll', function (event) {
				//                    if ($(this).scrollTop() + $(this).innerHeight() >= ($(this)[0].scrollHeight - 5)) {
				//                        var parentTarget = $(event.target).parent().parent();
				//                        var scrollChartId = parentTarget[0]['id']
				//                        var startIndex = $('#' + scrollChartId + '_startIndex').val();
				//                        var endIndex = $('#' + scrollChartId + '_endIndex').val();
				//                        var pageSize = $('#' + scrollChartId + '_pageSize').val();
				//                        if (parseInt(startIndex) >= 0) {
				//                            startIndex = endIndex;
				//                            endIndex = (parseInt(startIndex) + parseInt(pageSize)) - 1;
				//                            $("#" + scrollChartId + "_startIndex").val(startIndex);
				//                            $("#" + scrollChartId + "_endIndex").val(endIndex);
				//                            var TOTALUSERCOUNT = $("#" + scrollChartId + "_TotalChartCount").val();
				//                            if (TOTALUSERCOUNT != null && TOTALUSERCOUNT != '' && parseInt(TOTALUSERCOUNT) >= parseInt(startIndex)) {
				//                                getChartDataonScroll(scrollChartId, chartType)
				//                            }
				//                        }
				//                    }
				//                });

				if (chartType != null && chartType != '' && chartType != undefined && chartType == 'scatterpolar1') {
					myPlot.on('plotly_hover', function(data) {
						var filterString = '';
						for (var i = 0; i < data.points.length; i++) {
							if (chartType != null && chartType == 'funnel') {
								filterString = data.points[i].y;
							} else {
								filterString = data.points[i].label;
							}

						}
						//getGridData(axix, filterString, chartId, "DXP_DASHBOARD_GRID", filterCondition);
						alert('Closest point clicked:\n\n');
					});
				} else {
					myPlot.on('plotly_click', function(data) {
						chartClickDataObj = {};
						chartClickDataObj[chartId] = data;
						if (colorsObj != null && colorsObj != '' && colorsObj != undefined) {
							selectHomeAggregateFunction(chartId, chartType, axisColumns, filterCondition, colorsObj);
						} else {
							colorsObj = '';
							selectHomeAggregateFunction(chartId, chartType, axisColumns, filterCondition, colorsObj);
						}
					});
				}
				
				
				if (colorsObj != null && colorsObj != '' && colorsObj != undefined) {
                    var colorobj = JSON.parse(colorsObj);
                    var pn = colorobj['pn'];
                    var tn = colorobj['tn'];
                    if (pn != null && pn != undefined && tn != null && tn != undefined) {
                        applyChartColors(colorsObj, chartId, chartType);
                    } else {
                        var graphDiv = document.getElementById(chartId);
                        var data = graphDiv.data;
                        if (colorsObj != null && colorsObj != '' && colorsObj != undefined) {
                            colorsObj = JSON.parse(colorsObj);
                            if (colorsObj != null && !jQuery.isEmptyObject(colorsObj)) {
                                /*var colors = colorsObj['clrs'];*/
                                var colorarr = [];
                                var n = colorsObj['clrs'].length;
                                var len = 10;
                                if (chartType == 'pie' || chartType == 'donut') {
                                    len = data[0]['labels'].length;
                                } else if (chartType == 'scatterpolar') {
                                    len = data[0]['r'].length;
                                } else {
                                    if (chartType !== 'indicator')
                                        len = data[0]['x'].length;
                                }
                                for (var i = 0; i < len; i++) {
                                    var color = colorsObj['clrs'][i % n];
                                    colorarr.push(color);
                                }
                                if (colorarr != null && !jQuery.isEmptyObject(colorarr) && colorarr.length > 0) {
                                    var update;
                                    if (chartType != null && chartType != '' && chartType != undefined && (chartType == 'pie' || chartType == 'donut')) {
                                        update = {
                                            'marker': {
                                                'colors': colorarr
                                            }
                                        };

                                    } else {
                                        if (chartType != null && chartType != undefined && chartType == 'lines') {
                                            update = {
                                                'line': {
                                                    'color': colorarr[0],
                                                    width: 3
                                                }
                                            };

                                        } else if (chartType != null && chartType != undefined && chartType == 'indicator') {

                                            update = {
                                                'gauge.bar.color': colorarr[0]
                                            };
                                        } else if (chartType != null && chartType != undefined && chartType == 'waterfall') {
                                            update = {
                                                'increasing': {
                                                    'marker': {
                                                        'color': colorarr[0]
                                                    }
                                                }
                                            };
                                        } else if (chartType != null && chartType != undefined && chartType == 'scatterpolar') {
                                            update = {
                                                'fillcolor': colorarr[0]
                                            };
                                        } else {
                                            update = {
                                                'marker': {
                                                    'color': colorarr
                                                }
                                            };

                                        }
                                    }
                                    Plotly.restyle(chartId, update);

                                }
                            }
                        }
                    }

                }

				$("#" + chartId + " .modebar-container").unbind("mouseenter").mouseenter(function() {
					console.log("hovered");
					$(this).addClass("modeBarMainContainer");
				});

				$("#" + chartId + " .modebar-container").unbind("mouseleave").mouseleave(function() {
					console.log("hovered");
					$(this).removeClass("modeBarMainContainer");
				});
				if (chartType != null && chartType != '' && chartType != undefined && (chartType == 'donut' || chartType == 'pie')) {
					var colors = [];
					if (colorsObj != null && colorsObj != '' && colorsObj != undefined) {
						var colorobj;
						if (colorsObj.constructor === String) {
							colorobj = JSON.parse(colorsObj);
						} else {
							colorobj = colorsObj;
						}

						if (colorobj != null && !jQuery.isEmptyObject(colorobj)) {
							colors = colorobj['clrs'];
						} else {
							colors = ['#2F6345', '#40875E', '#58B07E', '#C48C00', '#F0AB00', '#FFBE1D', '#FFCC4B', '#827E32', '#A8A240', '#C5C169'];
						}
					} else {
						colors = ['#2F6345', '#40875E', '#58B07E', '#C48C00', '#F0AB00', '#FFBE1D', '#FFCC4B', '#827E32', '#A8A240', '#C5C169'];
					}
					positionChartLegend(chartType, chartId, colors, chartLabels, data, layout, config);
				} else {
					$("#" + chartId + "_legends").remove();
				}




				// jaggu
				//                $("#" + chartId).draggable({
				$(".homeChartParentDiv").draggable({
                    revert: true,
                    refreshPositions: true,
                    cursor: 'move',
                    zindex: false,
                    opacity: false,
                    start: function (event, ui) {
                        var charts = $(".homeChartWrapDiv");
                        var zindexMaxVal = 999;
                        $.each(charts, function (i, val) {
                            var zIndex = $(this).css("z-index");
                            if (zIndex != null && zIndex != '' && zIndex == 'auto') {
                                zIndex = 999;
                            }
                            zIndex = parseInt(zIndex);
                            if (zIndex > zindexMaxVal) {
                                zindexMaxVal = zIndex
                            }

                        })
                        var target = event.target;
                        var chartDragId = target['id'];
                        //                        $("#" + chartDragId).css("z-index", zindexMaxVal + 1);
                    },
                    stop: function (event, ui) {
                        ui.helper.removeClass("draggableTable");
                    }
                });
                //                $("#visualizechartId").droppable({
                $(".homeChartWrapDiv").droppable({
                    //                $("#" + chartId).droppable({
                    revert: "invalid",
                    refreshPositions: true,
                    cursor: 'move',
                    accept: '.homeChartParentDiv',
                    drop: function (event, ui) {

                        var $this = $(this);
                        var children = $(this).children().children().children();
                        var draggable = $(ui.draggable);
                        if (children.length > 0) {
                            var move = children.detach();
                            $(ui.draggable).parent().append(move);
                            if (children.length >= 3) {
                                $(ui.draggable).append(children[1]);
                            }
                        }

                        $(this).append($(ui.draggable));
                    }
                });
                $("#" + chartId).parent().resizable();
                if (resizeData != null && resizeData != '' && resizeData != undefined && resizeData != 'undefined')
                {
                    var width = resizeData.split(":")[0];
                    var height = resizeData.split(":")[1];
                    var fontSize = ((width * height) / 1000);
                    var parentElement = $("#" + chartId).parent().parent().parent().parent().parent().attr("id");
                    $("#" + parentElement).css({ width: width + 'px', height: height + 'px' });
                    $("#" + parentElement).trigger('resize');
                    $("#" + parentElement).attr("class", "homeChartWrapDiv resizableChartDiv");
                    
                    var update =
                            {
                                width: width,
                                height: height,
                                //	margin: margin,

                            }

                    Plotly.relayout(chartId, update);
                    $("#" + chartId + "_legends").css("width", width, "!important");
                    }
                $("#" + chartId).parent().resizable();
                $("#" + chartId).parent().resize(function (event, ui) {
                    var target = event.currentTarget;
                    var id = target['id'];
                    var type = event.currentTarget.firstChild.data[0].type;
                    var parentId = $("#" + id).parent().parent().parent().parent().attr("id");
                    //var parentId = $("#" + id).parent().parent().attr("id");
                    $("#" + parentId).attr("class", "homeChartWrapDiv resizableChartDiv");
                    var width = ui.size.width;
                    var height = ui.size.height;
                    if (type == 'lines') {
                        margin = {
                            l: 100,
                            r: 50,
                            b: 180,
                            t: 20,
                            pad: 4
                        };
                    } else {
                        margin = {
                            l: 100,
                            r: 50,
                            b: 120,
                            t: 20,
                            pad: 4
                        };
                    }
                    //                    margin = calculateLegendMargins(chartId);
                    if (type == 'pie' || type == 'donut') {
                        height = height - 60;
                    }
                    var update =
                            {
                                width: width,
                                height: height,
                                //	margin: margin,

                            }

                    Plotly.relayout(chartId, update);
                    $("#" + chartId + "_legends").css("width", width, "!important");
                     $("#dialog1").html("Are you want to save card size?");
                    $("#dialog1").dialog({
                        title: (labelObject['Card Size'] != null ? labelObject['Card Size'] : 'Card Size'),
                        modal: true,
                        width: 400,
                        maxWidth: "auto",
                        height: 150,
                        maxHeight: "auto",
                        fluid: true,
                        buttons: [{
                                text: (labelObject['Save'] != null ? labelObject['Save'] : 'Save'),
                                click: function () {
                                    saveHomePageCardResizeDetails(chartId, width, height);
                                    closeDialogBox("#dialog1");
                                    $(this).html("");
                                    $(this).dialog("close");
                                    $(this).dialog("destroy");
                                }
                            },
                            {
                                text: (labelObject['Cancel'] != null ? labelObject['Cancel'] : 'Cancel'),
                                click: function () {
                                    $(this).html("");
                                    $(this).dialog("close");
                                    $(this).dialog("destroy");
                                    // $("#labeld").empty();

                                }

                            }],
                        open: function () {

                        },
                        beforeClose: function (event, ui) {

                        }
                    });
                    //$("#"+chartId+"_legends").css("height","60px","!important");
                });




				//shakir
				var axisLabelCountToShow = 6;
				$("#" + chartId + " .svg-container").append("<div class='xAxisLabelTooltip'></div>");
				var currentChartXaxisLabelSelector = $("#" + chartId).find(".xaxislayer-above").children();
				currentChartXaxisLabelSelector.each(function(index, element) {
					var labelTitle = $(this).children().text();
					var result = labelTitle.slice(0, axisLabelCountToShow) + (labelTitle.length > axisLabelCountToShow ? "..." : "");
					$("#" + chartId + " .xAxisLabelTooltip").append('<span class="xlabelTooltipText">' + labelTitle + "</span>");
					$(this).children().text(result);

				});
				$("#" + chartId + " .xtick").unbind("mouseenter").mouseenter(function(e) {
					var cssTransformProp = $(this).children().attr("transform");
					var firstIndexOfTransformProp = cssTransformProp.split(",")[0];
					var indexOfTransformOpenPar = firstIndexOfTransformProp.indexOf("(");
					var transformHorStr = firstIndexOfTransformProp.substring(indexOfTransformOpenPar + 1, cssTransformProp.length);
					var transformHorVal = parseInt(transformHorStr) - 15;
					showAxisLabelsTooltipOnHover($(this), "xAxisLabelTooltip", chartId, transformHorVal, 0);
				});
				$("#" + chartId + " .xtick").unbind("mouseleave").mouseleave(function(e) {
					hideAxisLabelsTooltipOnHover($(this), "xAxisLabelTooltip", chartId);
				});

				$("#" + chartId + " .svg-container").append("<div class='yAxisLabelTooltip'></div>");
				var currentChartXaxisLabelSelector = $("#" + chartId).find(".yaxislayer-above").children();
				currentChartXaxisLabelSelector.each(function(index, element) {
					var labelTitle = $(this).children().text();
					var result = labelTitle.slice(0, axisLabelCountToShow) + (labelTitle.length > axisLabelCountToShow ? "..." : "");
					$("#" + chartId + " .yAxisLabelTooltip").append('<span class="ylabelTooltipText">' + labelTitle + "</span>");
					$(this).children().text(result);
				});
				$("#" + chartId + " .ytick").unbind("mouseenter").mouseenter(function(e) {
					var cssTransformProp = $(this).children().attr("transform");
					var firstIndexOfTransformProp = cssTransformProp.split(",")[1];
					var transformVerStr = firstIndexOfTransformProp.substring(0, firstIndexOfTransformProp.length - 1);
					var transformVerVal = parseInt(transformVerStr) - 230;
					showAxisLabelsTooltipOnHover($(this), "yAxisLabelTooltip", chartId, 0, transformVerVal);
				});
				$("#" + chartId + " .ytick").unbind("mouseleave").mouseleave(function(e) {
					hideAxisLabelsTooltipOnHover($(this), "yAxisLabelTooltip", chartId);
				});
				//jaggu

				
			}

		}, error: function(e) {
			console.log("The Error Message is:::" + e.message);
			sessionTimeout(e);
		}
	});

}
function getApplyVisualizeChart(chartId, chartType, axix, values, table, aggColumnName, filterCondition, chartPropObj, chartConfigObj, createcount, labelLegend, colorsObj, comboValue, chartConfigToggleStatus, compareChartsFlag, comparechartFilterObj, fetchQuery, radioButtons, currencyConversionStrObject) {
	// var joinQuery = $("#visionVisualizeConfigJoinQuery0").val();
	var axisColumns = [];
	var valuesColumns = [];
	var tablesObj = [];

	if (axix != null && axix != '' && axix != undefined) {
		var axisArr = JSON.parse(axix);
		$.each(axisArr, function(index, value) {
			if (value != null && !jQuery.isEmptyObject(value)) {
				var columnObj = {};
				var tableName = value['tableName'];
				columnObj['tableName'] = value['tableName'];
				columnObj['columnName'] = value['columnName'];
				axisColumns.push(columnObj);
				if (!(tablesObj.indexOf(tableName) > -1)) {
					tablesObj.push(tableName);
				}
			}
		});
	}

	if (values != null && values != '' && values != undefined) {
		var valuesArr = JSON.parse(values);
		$.each(valuesArr, function(index, value) {
			if (value != null && !jQuery.isEmptyObject(value)) {
				var columnObj = {};
				columnObj['tableName'] = value['tableName'];
				columnObj['columnName'] = value['columnName'];
				columnObj['aggColumnName'] = value['aggColumnName'];
				columnObj['userProvidedLegendLabel'] = value['userProvidedLegendLabel'];
				valuesColumns.push(columnObj);
				if (compareChartsFlag != null && compareChartsFlag != '' && compareChartsFlag != undefined && compareChartsFlag == 'Y' || compareChartsFlag == 'YF') {
					valuesColumns.push(columnObj);
				}
				var tableName = value['tableName'];
				if (!(tablesObj.indexOf(tableName) > -1)) {
					tablesObj.push(tableName);
				}
			}
		});
	}
	var data = {};
	var currencySymbol = '';
	var isCurrencyConversionEvent = '';
	var toCurrencyDropDownValue = '';
	if (currencyConversionStrObject !== undefined && currencyConversionStrObject != null
		&& currencyConversionStrObject !== '') {
		var currencyConversionObject = JSON.parse(currencyConversionStrObject);
		isCurrencyConversionEvent = currencyConversionObject['isCurrencyConversionEvent'];
		var fromCurrencyDropDownValue = currencyConversionObject['fromCurrencyDropDownValue'];
		toCurrencyDropDownValue = currencyConversionObject['toCurrencyDropDownValue'];
		currencySymbol = currencyConversionObject['currencySymbol'];
		data['isCurrencyConversionEvent'] = isCurrencyConversionEvent;
		data['fromCurrencyDropDownValue'] = fromCurrencyDropDownValue;
		data['toCurrencyDropDownValue'] = toCurrencyDropDownValue;
	}

	var startIndex = $("#" + chartId + "_startIndex").val();
	var endIndex = $("#" + chartId + "_endIndex").val();
	var pageSize = $("#" + chartId + "_pageSize").val();
	data['startIndex'] = startIndex;
	data['endIndex'] = endIndex;
	data['axisColumns'] = JSON.stringify(axisColumns);
	data['valuesColumns'] = JSON.stringify(valuesColumns);
	data['tablesObj'] = JSON.stringify(tablesObj);
	data['chartType'] = chartType;
	data['chartId'] = chartId;
	data['filterColumns'] = filterCondition;
	data['chartCOnfigObjStr'] = chartPropObj;
	data['chartConfigPositionKeyStr'] = chartConfigObj;
	data['compareChartsFlag'] = compareChartsFlag;
	data['compareChartFilters'] = JSON.stringify(comparechartFilterObj);
	data['radioButtons'] = radioButtons;
	var chartPropObject = JSON.parse(chartPropObj);
	var title = chartPropObject[chartType.toUpperCase() + 'CHARTTITLE'];
	$.ajax({
		url: 'fetchChartData',
		type: "POST",
		data: data,
		dataType: 'json',
		traditional: true,
		cache: false,
		success: function(response) {
			$("#Loader").css("display", "none");
			$("body").css("pointer-events", "auto");
			if (response != null && !jQuery.isEmptyObject(response)) {
				$("#" + chartId).addClass("chartMainBorderBox");
				var compareChartTypes = ['column', 'lines', 'scatterpolar'];
				response['isCurrencyConversionEvent'] = isCurrencyConversionEvent;
				response['currencySymbol'] = currencySymbol;
				response['toCurrencyDropDownValue'] = toCurrencyDropDownValue;
				if (chartType != null && chartType != '' && chartType == 'heatMap') {
					getHetaMap(chartId, response, createcount, chartType, "Apply");
					return;
				} else if (chartType != null && chartType != '' && chartType == 'sunburst') {
					getSunburstChart(chartId, response, createcount, chartType, "Apply");
					return;
				} else if (chartType != null && chartType != '' && chartType == 'BarAndLine') {
					getBarAndLineChart(chartId, response, createcount, chartType, "Apply");
					return;
				} else if (chartType != null && chartType != '' && chartType == 'treemap') {
					getTreeMapChart(chartId, response, createcount, chartType, "Apply", axisColumns, filterCondition);
					return;
				}

				var icon = {
					'height': 512,
					'width': 512,
					'path': 'M3.853 54.87C10.47 40.9 24.54 32 40 32H472C487.5 32 501.5 40.9 508.1 54.87C514.8 68.84 512.7 85.37 502.1 97.33L320 320.9V448C320 460.1 313.2 471.2 302.3 476.6C291.5 482 278.5 480.9 268.8 473.6L204.8 425.6C196.7 419.6 192 410.1 192 400V320.9L9.042 97.33C-.745 85.37-2.765 68.84 3.854 54.87L3.853 54.87z',
					'color': 'rgb(31,119,180)'
				};
				var icon1 = {
					'height': 512,
					'width': 448,
					'path': 'M448 32C483.3 32 512 60.65 512 96V416C512 451.3 483.3 480 448 480H64C28.65 480 0 451.3 0 416V96C0 60.65 28.65 32 64 32H448zM152 96H64V160H152V96zM208 160H296V96H208V160zM448 96H360V160H448V96zM64 288H152V224H64V288zM296 224H208V288H296V224zM360 288H448V224H360V288zM152 352H64V416H152V352zM208 416H296V352H208V416zM448 352H360V416H448V352z',
					'color': 'rgb(31,119,180)'
				};
				var deleteicon = {
					'height': 512,
					'width': 448,
					'path': 'M135.2 17.69C140.6 6.848 151.7 0 163.8 0H284.2C296.3 0 307.4 6.848 312.8 17.69L320 32H416C433.7 32 448 46.33 448 64C448 81.67 433.7 96 416 96H32C14.33 96 0 81.67 0 64C0 46.33 14.33 32 32 32H128L135.2 17.69zM31.1 128H416V448C416 483.3 387.3 512 352 512H95.1C60.65 512 31.1 483.3 31.1 448V128zM111.1 208V432C111.1 440.8 119.2 448 127.1 448C136.8 448 143.1 440.8 143.1 432V208C143.1 199.2 136.8 192 127.1 192C119.2 192 111.1 199.2 111.1 208zM207.1 208V432C207.1 440.8 215.2 448 223.1 448C232.8 448 240 440.8 240 432V208C240 199.2 232.8 192 223.1 192C215.2 192 207.1 199.2 207.1 208zM304 208V432C304 440.8 311.2 448 320 448C328.8 448 336 440.8 336 432V208C336 199.2 328.8 192 320 192C311.2 192 304 199.2 304 208z',
					'color': 'rgb(31,119,180)'
				};
				var Expand = {
					'height': 512,
					'width': 448,
					'path': 'M447.1 319.1v135.1c0 13.26-10.75 23.1-23.1 23.1h-135.1c-12.94 0-24.61-7.781-29.56-19.75c-4.906-11.1-2.203-25.72 6.937-34.87l30.06-30.06L224 323.9l-71.43 71.44l30.06 30.06c9.156 9.156 11.91 22.91 6.937 34.87C184.6 472.2 172.9 479.1 160 479.1H24c-13.25 0-23.1-10.74-23.1-23.1v-135.1c0-12.94 7.781-24.61 19.75-29.56C23.72 288.8 27.88 288 32 288c8.312 0 16.5 3.242 22.63 9.367l30.06 30.06l71.44-71.44L84.69 184.6L54.63 214.6c-9.156 9.156-22.91 11.91-34.87 6.937C7.798 216.6 .0013 204.9 .0013 191.1v-135.1c0-13.26 10.75-23.1 23.1-23.1h135.1c12.94 0 24.61 7.781 29.56 19.75C191.2 55.72 191.1 59.87 191.1 63.1c0 8.312-3.237 16.5-9.362 22.63L152.6 116.7l71.44 71.44l71.43-71.44l-30.06-30.06c-9.156-9.156-11.91-22.91-6.937-34.87c4.937-11.95 16.62-19.75 29.56-19.75h135.1c13.26 0 23.1 10.75 23.1 23.1v135.1c0 12.94-7.781 24.61-19.75 29.56c-11.1 4.906-25.72 2.203-34.87-6.937l-30.06-30.06l-71.43 71.43l71.44 71.44l30.06-30.06c9.156-9.156 22.91-11.91 34.87-6.937C440.2 295.4 447.1 307.1 447.1 319.1z',
					'color': 'rgb(31,119,180)'
				};

				var EditIcon = {
					'height': 512,
					'width': 512,
					'id': chartId,
					'path': 'M490.3 40.4C512.2 62.27 512.2 97.73 490.3 119.6L460.3 149.7L362.3 51.72L392.4 21.66C414.3-.2135 449.7-.2135 471.6 21.66L490.3 40.4zM172.4 241.7L339.7 74.34L437.7 172.3L270.3 339.6C264.2 345.8 256.7 350.4 248.4 353.2L159.6 382.8C150.1 385.6 141.5 383.4 135 376.1C128.6 370.5 126.4 361 129.2 352.4L158.8 263.6C161.6 255.3 166.2 247.8 172.4 241.7V241.7zM192 63.1C209.7 63.1 224 78.33 224 95.1C224 113.7 209.7 127.1 192 127.1H96C78.33 127.1 64 142.3 64 159.1V416C64 433.7 78.33 448 96 448H352C369.7 448 384 433.7 384 416V319.1C384 302.3 398.3 287.1 416 287.1C433.7 287.1 448 302.3 448 319.1V416C448 469 405 512 352 512H96C42.98 512 0 469 0 416V159.1C0 106.1 42.98 63.1 96 63.1H192z',
					'color': 'rgb(31,119,180)'
				};
				var pridictiveAnalysis = {
					'height': 512,
					'width': 512,
					'id': chartId,
					'path': 'M384 160C366.3 160 352 145.7 352 128C352 110.3 366.3 96 384 96H544C561.7 96 576 110.3 576 128V288C576 305.7 561.7 320 544 320C526.3 320 512 305.7 512 288V205.3L342.6 374.6C330.1 387.1 309.9 387.1 297.4 374.6L191.1 269.3L54.63 406.6C42.13 419.1 21.87 419.1 9.372 406.6C-3.124 394.1-3.124 373.9 9.372 361.4L169.4 201.4C181.9 188.9 202.1 188.9 214.6 201.4L320 306.7L466.7 159.1L384 160z',
					'color': 'rgb(31,119,180)'
				};
				var AssignUser = {
					'height': 512,
					'width': 512,
					'id': chartId,
					'path': 'M424.1 287c-15.13-15.12-40.1-4.426-40.1 16.97V352H336L153.6 108.8C147.6 100.8 138.1 96 128 96H32C14.31 96 0 110.3 0 128s14.31 32 32 32h80l182.4 243.2C300.4 411.3 309.9 416 320 416h63.97v47.94c0 21.39 25.86 32.12 40.99 17l79.1-79.98c9.387-9.387 9.387-24.59 0-33.97L424.1 287zM336 160h47.97v48.03c0 21.39 25.87 32.09 40.1 16.97l79.1-79.98c9.387-9.391 9.385-24.59-.0013-33.97l-79.1-79.98c-15.13-15.12-40.99-4.391-40.99 17V96H320c-10.06 0-19.56 4.75-25.59 12.81L254 162.7L293.1 216L336 160zM112 352H32c-17.69 0-32 14.31-32 32s14.31 32 32 32h96c10.06 0 19.56-4.75 25.59-12.81l40.4-53.87L154 296L112 352z',
					'color': 'rgb(31,119,180)'
				};
				var ColorPallete = {
					'height': 512,
					'width': 512,
					'id': chartId,
					'path': 'M512 255.1C512 256.9 511.1 257.8 511.1 258.7C511.6 295.2 478.4 319.1 441.9 319.1H344C317.5 319.1 296 341.5 296 368C296 371.4 296.4 374.7 297 377.9C299.2 388.1 303.5 397.1 307.9 407.8C313.9 421.6 320 435.3 320 449.8C320 481.7 298.4 510.5 266.6 511.8C263.1 511.9 259.5 512 256 512C114.6 512 0 397.4 0 256C0 114.6 114.6 0 256 0C397.4 0 512 114.6 512 256V255.1zM96 255.1C78.33 255.1 64 270.3 64 287.1C64 305.7 78.33 319.1 96 319.1C113.7 319.1 128 305.7 128 287.1C128 270.3 113.7 255.1 96 255.1zM128 191.1C145.7 191.1 160 177.7 160 159.1C160 142.3 145.7 127.1 128 127.1C110.3 127.1 96 142.3 96 159.1C96 177.7 110.3 191.1 128 191.1zM256 63.1C238.3 63.1 224 78.33 224 95.1C224 113.7 238.3 127.1 256 127.1C273.7 127.1 288 113.7 288 95.1C288 78.33 273.7 63.1 256 63.1zM384 191.1C401.7 191.1 416 177.7 416 159.1C416 142.3 401.7 127.1 384 127.1C366.3 127.1 352 142.3 352 159.1C352 177.7 366.3 191.1 384 191.1z',
					'color': 'rgb(31,119,180)'
				};
				var compareChart = {
					'height': 512,
					'width': 512,
					'id': chartId,
					'path': 'M320 488C320 497.5 314.4 506.1 305.8 509.9C297.1 513.8 286.1 512.2 279.9 505.8L199.9 433.8C194.9 429.3 192 422.8 192 416C192 409.2 194.9 402.7 199.9 398.2L279.9 326.2C286.1 319.8 297.1 318.2 305.8 322.1C314.4 325.9 320 334.5 320 344V384H336C371.3 384 400 355.3 400 320V153.3C371.7 140.1 352 112.8 352 80C352 35.82 387.8 0 432 0C476.2 0 512 35.82 512 80C512 112.8 492.3 140.1 464 153.3V320C464 390.7 406.7 448 336 448H320V488zM456 79.1C456 66.74 445.3 55.1 432 55.1C418.7 55.1 408 66.74 408 79.1C408 93.25 418.7 103.1 432 103.1C445.3 103.1 456 93.25 456 79.1zM192 24C192 14.52 197.6 5.932 206.2 2.076C214.9-1.78 225-.1789 232.1 6.161L312.1 78.16C317.1 82.71 320 89.2 320 96C320 102.8 317.1 109.3 312.1 113.8L232.1 185.8C225 192.2 214.9 193.8 206.2 189.9C197.6 186.1 192 177.5 192 168V128H176C140.7 128 112 156.7 112 192V358.7C140.3 371 160 399.2 160 432C160 476.2 124.2 512 80 512C35.82 512 0 476.2 0 432C0 399.2 19.75 371 48 358.7V192C48 121.3 105.3 64 176 64H192V24zM56 432C56 445.3 66.75 456 80 456C93.25 456 104 445.3 104 432C104 418.7 93.25 408 80 408C66.75 408 56 418.7 56 432z',
					'color': 'rgb(31,119,180)'
				};

				var refreshChart = {
					'height': 512,
					'width': 512,
					'id': chartId,
					'path': 'M464 16c-17.67 0-32 14.31-32 32v74.09C392.1 66.52 327.4 32 256 32C161.5 32 78.59 92.34 49.58 182.2c-5.438 16.81 3.797 34.88 20.61 40.28c16.89 5.5 34.88-3.812 40.3-20.59C130.9 138.5 189.4 96 256 96c50.5 0 96.26 24.55 124.4 64H336c-17.67 0-32 14.31-32 32s14.33 32 32 32h128c17.67 0 32-14.31 32-32V48C496 30.31 481.7 16 464 16zM441.8 289.6c-16.92-5.438-34.88 3.812-40.3 20.59C381.1 373.5 322.6 416 256 416c-50.5 0-96.25-24.55-124.4-64H176c17.67 0 32-14.31 32-32s-14.33-32-32-32h-128c-17.67 0-32 14.31-32 32v144c0 17.69 14.33 32 32 32s32-14.31 32-32v-74.09C119.9 445.5 184.6 480 255.1 480c94.45 0 177.4-60.34 206.4-150.2C467.9 313 458.6 294.1 441.8 289.6z',
					'color': 'rgb(31,119,180)'
				};
				var reset = {
					'width': 928.6,
					'height': 1000,
					'id': chartId,
					'path': 'm786 296v-267q0-15-11-26t-25-10h-214v214h-143v-214h-214q-15 0-25 10t-11 26v267q0 1 0 2t0 2l321 264 321-264q1-1 1-4z m124 39l-34-41q-5-5-12-6h-2q-7 0-12 3l-386 322-386-322q-7-4-13-4-7 2-12 7l-35 41q-4 5-3 13t6 12l401 334q18 15 42 15t43-15l136-114v109q0 8 5 13t13 5h107q8 0 13-5t5-13v-227l122-102q5-5 6-12t-4-13z',
					'transform': 'matrix(1 0 0 -1 0 850)'
				};
				var AIChart = {
					'height': 512,
					'width': 512,
					'id': chartId,
					'path': 'M184 0c30.9 0 56 25.1 56 56V456c0 30.9-25.1 56-56 56c-28.9 0-52.7-21.9-55.7-50.1c-5.2 1.4-10.7 2.1-16.3 2.1c-35.3 0-64-28.7-64-64c0-7.4 1.3-14.6 3.6-21.2C21.4 367.4 0 338.2 0 304c0-31.9 18.7-59.5 45.8-72.3C37.1 220.8 32 207 32 192c0-30.7 21.6-56.3 50.4-62.6C80.8 123.9 80 118 80 112c0-29.9 20.6-55.1 48.3-62.1C131.3 21.9 155.1 0 184 0zM328 0c28.9 0 52.6 21.9 55.7 49.9c27.8 7 48.3 32.1 48.3 62.1c0 6-.8 11.9-2.4 17.4c28.8 6.2 50.4 31.9 50.4 62.6c0 15-5.1 28.8-13.8 39.7C493.3 244.5 512 272.1 512 304c0 34.2-21.4 63.4-51.6 74.8c2.3 6.6 3.6 13.8 3.6 21.2c0 35.3-28.7 64-64 64c-5.6 0-11.1-.7-16.3-2.1c-3 28.2-26.8 50.1-55.7 50.1c-30.9 0-56-25.1-56-56V56c0-30.9 25.1-56 56-56z',
					'color': 'rgb(31,119,180)'
				};
				var config = {
					responsive: true,
					displayModeBar: true,
					downloadImage: true,
					displaylogo: false,
					dragmode: false,
					modeBarButtonsToAdd: [
						{
							name: 'Show Data', icon: icon1, click: function() {
								getGridData(axix, "", chartId, '');
							}
						}, {
							name: 'Filters', icon: icon, click: function() {
								getfilterData(chartId, table, chartType);
							}
						}, {
							name: 'Delete', icon: deleteicon, click: function() {
								deleteVisualizeChart(chartId, table, chartType);
							}
						}, {
							name: 'Expand', icon: Expand, click: function() {
								expandChart(chartType, layout, data, chartId, createcount, table, axix); //jaggu
							}
						}, {
							name: 'Edit', icon: EditIcon, click: function() {
								homePageChartSetting(chartId, chartType, layout, data, createcount, event, "", chartConfigToggleStatus);
							}
						}, {
							name: 'Trends', icon: pridictiveAnalysis, click: function(event) {
								getChartContent(chartId, createcount, chartType, 'pridictiveAnalysis');
							}
						}, {
							name: 'Color Pallete', icon: ColorPallete, click: function() {
								updatechartColor(chartId, createcount, data);
							}
						}, {
							name: 'Chart Types', icon: AssignUser, click: function() {
								changegraph(chartId, chartType, layout, data, createcount, event);
							}
						}, {
							name: 'Reset', icon: reset, click: function(chartId) {
								getVisualizationchart(dashbordname, "");
							}
						}, {
							name: 'AI Insights', icon: AIChart, click: function() {
								getArtIntAPI(chartId, chartType, table);
							}
						}

					],
					//                     modeBarButtonsToRemove: ['lasso2d']
					//                    
					modeBarButtonsToRemove: ['zoomin', 'resetViews', 'resetScale2d', 'zoomout', 'pan2d', 'sendDataToCloud', 'hoverClosestCartesian', 'autoScale2d', 'lasso2d', 'select2d', 'zoom2d']
				};
				var compareChartButton = {
					name: 'Compare Charts', icon: compareChart, click: function(chartId) {
						getCompareChart(chartId['id'], chartType);
					}
				};
				var normalChartButton = {
					name: 'Remove Compare Charts', icon: refreshChart, click: function(chartId) {
						getRemoveCompareChart(chartId['id'], chartType);
					}
				};
				if (chartType != null && chartType != '' && chartType != undefined && compareChartTypes.indexOf(chartType) > -1) {
					var modeBarButtonsToAdd = config['modeBarButtonsToAdd'];
					modeBarButtonsToAdd.push(compareChartButton);
					modeBarButtonsToAdd.push(normalChartButton);
				}

				$(".visualizationDashboardView").css("display", "block");
				var resultObj = response;
				var dataPropObject = resultObj['dataPropObject'];
				var chartDataObj = resultObj['data'];
				var layoutObj = resultObj['layout'];
				var treeMapColObj = resultObj['treeMapCol'];
				var compareChartFlag = resultObj['compareChartFlag'];
				var dashbordname;
				var item = $("#OptionDropdownData").jqxDropDownList('getSelectedItem');
				if (item != null) {
					dashbordname = item.value;
				}
				var data = [];
				var dataObj = {};
				var layout = {};


				var axisColumnName;
				var valuesColumnName;
				var defaultLegendNames = {};
				var userProvidedLegendNames = {};

				$.each(axisColumns, function(index, value) {
					var axisName = value.columnName.split(".")[1];
					axisColumnName = axisName.replace(/[()]/g, "");
					axisColumnName = axisColumnName.replace(/_/g, " ");
					defaultLegendNames[axisColumnName] = axisColumnName;
				});
				$.each(valuesColumns, function(index, value) {
					var valueName = value.columnName.split(".")[1];
					valuesColumnName = valueName.replace(/[()]/g, "");
					valuesColumnName = valuesColumnName.replace(/_/g, " ");
					defaultLegendNames[valuesColumnName] = valuesColumnName;
					var legendLabels = value['userProvidedLegendLabel'];
					if (legendLabels !== '' && legendLabels !== undefined && legendLabels !== null) {
						userProvidedLegendNames[valuesColumnName] = legendLabels;
					}
				});
				var chartLabels = [];
				var traceHeight = 0;
				if (chartType !== null && chartType !== '' && chartType !== undefined && chartType === 'pie') {
					$.each(chartDataObj, function(key) {

						var traceObj = {};
						var colorObj = {};
						if (key !== axisColumnName) {
							chartLabels = chartDataObj[axisColumnName];
							traceObj['labels'] = chartDataObj[axisColumnName];
							traceObj['values'] = chartDataObj[key];
							traceObj['type'] = chartType;
							traceObj['name'] = 'value';
							traceObj['marker'] = colorObj;
							$.each(dataPropObject, function(key, val) {
								traceObj[key] = val;
							});
							traceHeight = traceObj['labels'].length;
						}
						if (traceObj !== null && !jQuery.isEmptyObject(traceObj)) {
							data.push(traceObj);
						}
					});
				} else if (chartType != null && chartType != '' && chartType != undefined && chartType == 'donut') {
					$.each(chartDataObj, function(key) {

						var traceObj = {};
						var colorObj = {};
						if (key !== axisColumnName) {
							chartLabels = chartDataObj[axisColumnName];
							traceObj['labels'] = chartDataObj[axisColumnName];
							traceObj['values'] = chartDataObj[key];
							traceObj['hole'] = 0.4;
							traceObj['type'] = 'pie';
							traceObj['name'] = 'value';
							traceObj['marker'] = colorObj;
							$.each(dataPropObject, function(key, val) {
								traceObj[key] = val;
							});
							traceHeight = traceObj['labels'].length;
						}
						if (traceObj !== null && !jQuery.isEmptyObject(traceObj)) {
							data.push(traceObj);
						}
					});
				} else if (chartType != null && chartType != '' && chartType != undefined && chartType == 'bar') {
					var colorCount = 0;
					colorArray = ['#1864ab', '#fd7e14', '#0b7285', '#ff6b6b'];
					$.each(chartDataObj, function(keyName) {

						var traceObj = {};
						var colorObj = {};
						if (keyName !== axisColumnName) {
							traceObj['y'] = chartDataObj[axisColumnName];
							traceObj['x'] = chartDataObj[keyName];
							traceObj['type'] = chartType;
							traceObj['orientation'] = 'h';
							var keys = keyName.split("ASCOL");
							keyName = keys[0];
							traceObj = addlegendLabelToTrace(traceObj, keyName, defaultLegendNames, userProvidedLegendNames);
							$.each(dataPropObject, function(key, val) {
								if (key === 'marker' && !jQuery.isEmptyObject(val) && val !== null) {
									var colorsArray = val['colors'];
									if (colorsArray !== undefined && colorsArray !== null && !$.isArray(colorsArray)) {
										colorObj['color'] = colorsArray;
									} else if (colorsArray !== undefined && colorsArray !== null && $.isArray(colorsArray)) {
										colorObj['color'] = colorsArray[colorCount++];
									} else {
										colorObj['color'] = colorArray[colorCount++];
									}
									traceObj[key] = colorObj;
								} else if (key === 'marker' && (jQuery.isEmptyObject(val) || val === null)) {
									colorObj['color'] = colorArray[colorCount++];
									traceObj[key] = colorObj;
								} else {
									traceObj[key] = val;
								}
							});
						}
						if (traceObj !== null && !jQuery.isEmptyObject(traceObj)) {
							data.push(traceObj);
						}
					});
				} else if (chartType != null && chartType != '' && chartType != undefined && chartType == 'column') {
					var colorCount = 0;
					colorArray = ['#1864ab', '#fd7e14', '#0b7285', '#ff6b6b'];
					var i = 1;
					$.each(chartDataObj, function(keyName, val) {
						var traceObj = {};
						var colorObj = {};
						if (keyName !== axisColumnName) {
							traceObj['x'] = chartDataObj[axisColumnName];
							traceObj['y'] = chartDataObj[keyName];
							traceObj['type'] = 'bar';
							var keys = keyName.split("ASCOL");
							keyName = keys[0];
							if (compareChartsFlag == 'YF') {
								traceObj = addlegendLabelToTraceFilter(traceObj, i);
							} else {
								traceObj = addlegendLabelToTrace(traceObj, keyName, defaultLegendNames, userProvidedLegendNames);
							}
							i++;
							$.each(dataPropObject, function(key, val) {
								if (key === 'marker' && !jQuery.isEmptyObject(val) && val !== null) {
									var colorsArray = val['colors'];
									if (colorsArray !== undefined && colorsArray !== null && !$.isArray(colorsArray)) {
										colorObj['color'] = colorsArray;
									} else if (colorsArray !== undefined && colorsArray !== null && $.isArray(colorsArray)) {
										colorObj['color'] = colorsArray[colorCount++];
									} else {
										colorObj['color'] = colorArray[colorCount++];
									}
									traceObj[key] = colorObj;
								} else if (key === 'marker' && (jQuery.isEmptyObject(val) || val === null)) {
									colorObj['color'] = colorArray[colorCount++];
									traceObj[key] = colorObj;
								} else {
									traceObj[key] = val;
								}
							});
						}

						if (traceObj !== null && !jQuery.isEmptyObject(traceObj)) {
							data.push(traceObj);
						}
					});
				} else if (chartType != null && chartType != '' && chartType != undefined && chartType == 'lines') {
					var colorCount = 0;
					var lineColorCount = 0;
					colorArray = ['#1864ab', '#fd7e14', '#0b7285', '#ff6b6b'];
					var i = 1;
					$.each(chartDataObj, function(keyName, val) {
						var traceObj = {};
						var colorObj = {};
						if (keyName !== axisColumnName) {
							traceObj['x'] = chartDataObj[axisColumnName];
							traceObj['y'] = chartDataObj[keyName];
							traceObj['type'] = chartType;
							var keys = keyName.split("ASCOL");
							keyName = keys[0];
							if (compareChartsFlag == 'YF') {
								traceObj = addlegendLabelToTraceFilter(traceObj, i);
							} else {
								traceObj = addlegendLabelToTrace(traceObj, keyName, defaultLegendNames, userProvidedLegendNames);
							}
							i++;
							$.each(dataPropObject, function(key, val) {
								if (key === 'marker' && !jQuery.isEmptyObject(val) && val !== null) {
									var colorsArray = val['color'];
									if (colorsArray !== undefined && colorsArray !== null && !$.isArray(colorsArray)) {
										colorObj['color'] = colorsArray;
									} else if (colorsArray !== undefined && colorsArray !== null && $.isArray(colorsArray)) {
										colorObj['color'] = colorsArray[colorCount++];
									} else {
										colorObj['color'] = colorArray[colorCount++];
									}
									colorObj['size'] = val['size'];
									traceObj[key] = colorObj;
								} else if (key === 'marker' && (jQuery.isEmptyObject(val) || val === null)) {
									colorObj['color'] = colorArray[colorCount++];
									traceObj[key] = colorObj;
								} else if (key === 'line' && !jQuery.isEmptyObject(val) && val !== null) {
									var lineObject = Object.assign({}, val);
									var colorsArray = lineObject['color'];
									if (colorsArray !== undefined && colorsArray !== null && !$.isArray(colorsArray)) {
										lineObject['color'] = colorsArray;
									} else if (colorsArray !== undefined && colorsArray !== null && $.isArray(colorsArray)) {
										lineObject['color'] = colorsArray[lineColorCount++];
									} else {
										lineObject['color'] = colorArray[lineColorCount++];
									}
									traceObj[key] = lineObject;
								} else {
									traceObj[key] = val;
								}
							});
						}

						if (traceObj !== null && !jQuery.isEmptyObject(traceObj)) {
							data.push(traceObj);
						}
					});
				} else if (chartType != null && chartType != '' && chartType != undefined && chartType == 'scatter') {
					var colorCount = 0;
					colorArray = ['#1864ab', '#fd7e14', '#0b7285', '#ff6b6b'];
					$.each(chartDataObj, function(keyName, val) {

						var traceObj = {};
						var colorObj = {};
						if (keyName !== axisColumnName) {
							traceObj['x'] = chartDataObj[axisColumnName];
							traceObj['y'] = chartDataObj[keyName];
							traceObj['type'] = chartType;
							traceObj['mode'] = 'markers';
							traceObj['marker'] = colorObj;
							var keys = keyName.split("ASCOL");
							keyName = keys[0];
							traceObj = addlegendLabelToTrace(traceObj, keyName, defaultLegendNames, userProvidedLegendNames);
							$.each(dataPropObject, function(key, val) {
								if (key === 'marker' && !jQuery.isEmptyObject(val) && val !== null) {
									var colorsArray = val['color'];
									if (colorsArray !== undefined && colorsArray !== null && !$.isArray(colorsArray)) {
										colorObj['color'] = colorsArray;
									} else if (colorsArray !== undefined && colorsArray !== null && $.isArray(colorsArray)) {
										colorObj['color'] = colorsArray[colorCount++];
									} else {
										colorObj['color'] = colorArray[colorCount++];
									}
									colorObj['size'] = val['size'];
									traceObj[key] = colorObj;
								} else if (key === 'marker' && (jQuery.isEmptyObject(val) || val === null)) {
									colorObj['color'] = colorArray[colorCount++];
									traceObj[key] = colorObj;
								} else {
									traceObj[key] = val;
								}
							});
						}
						if (traceObj !== null && !jQuery.isEmptyObject(traceObj)) {
							data.push(traceObj);
						}
					});
				} else if (chartType != null && chartType != '' && chartType != undefined && chartType == 'waterfall') {
					var colorCount = 0;
					colorArray = ['#1864ab', '#fd7e14', '#0b7285', '#ff6b6b'];
					$.each(chartDataObj, function(keyName) {

						var traceObj = {};
						var colorObj = {};
						if (keyName !== axisColumnName) {
							traceObj['y'] = chartDataObj[axisColumnName];
							traceObj['x'] = chartDataObj[keyName];
							traceObj['type'] = chartType;
							traceObj['orientation'] = 'v';
							var keys = keyName.split("ASCOL");
							keyName = keys[0];
							traceObj = addlegendLabelToTrace(traceObj, keyName, defaultLegendNames, userProvidedLegendNames);
							$.each(dataPropObject, function(key, val) {
								if (key === 'marker' && !jQuery.isEmptyObject(val) && val !== null) {
									var colorsArray = val['colors'];
									if (colorsArray !== undefined && colorsArray !== null && colorsArray.length !== null) {
										colorObj['color'] = colorsArray[colorCount++];
									} else {
										colorObj['color'] = colorArray[colorCount++];
									}
									traceObj[key] = colorObj;
								} else if (key === 'marker' && (jQuery.isEmptyObject(val) || val === null)) {
									colorObj['color'] = colorArray[colorCount++];
									traceObj[key] = colorObj;
								} else {
									traceObj[key] = val;
								}
							});
						}
						if (traceObj !== null && !jQuery.isEmptyObject(traceObj)) {
							data.push(traceObj);
						}
					});
				} else if (chartType != null && chartType != '' && chartType != undefined && chartType == 'treemap') {
					var treeDomain = 0
					for (var key in chartDataObj) {
						var treeDataObj = chartDataObj[key];
						var treeObj = {};
						treeObj['type'] = chartType;
						treeObj['labels'] = treeDataObj[treeMapColObj['labels']];
						treeObj['parents'] = treeDataObj[treeMapColObj['parents']];
						treeObj['values'] = treeDataObj[treeMapColObj['values']];
						treeObj['textinfo'] = "label+value";
						treeObj['branchvalues'] = "total";
						var length = Object.keys(chartDataObj).length;
						var split = ((100 / length) / 100);
						if (chartDataObj != null && !jQuery.isEmptyObject(chartDataObj) && Object.keys(chartDataObj).length > 1) {
							treeObj['domain'] = { x: [treeDomain, ((treeDomain + split) - 0.02)] };
							treeDomain = treeDomain + split + 0.02;
						}
						if (dataPropObject != null && !jQuery.isEmptyObject(dataPropObject)) {
							$.each(dataPropObject, function(key, val) {
								treeObj[key] = val;
							});
						}

						data.push(treeObj);
					}

				} else if (chartType != null && chartType != '' && chartType != undefined && chartType == 'histogram') {
					dataObj['x'] = chartDataObj[0];
					dataObj['y'] = chartDataObj[key];
					dataObj['type'] = chartType;
					colorObj['size'] = 20;
					dataObj['name'] = 'value';
					dataObj['marker'] = colorObj;
				} else if (chartType != null && chartType != '' && chartType != undefined && chartType == 'scatterpolar') {
					var colorCount = 0;
					var labelCount = 0;
					colorArray = ['#1864ab', '#fd7e14', '#0b7285', '#ff6b6b'];
					var i = 1;
					$.each(chartDataObj, function(keyName) {
						var traceObj = {};
						var colorObj = {};
						if (keyName !== axisColumnName) {
							traceObj['r'] = chartDataObj[keyName];
							traceObj['theta'] = chartDataObj[axisColumnName];
							traceObj['type'] = chartType;
							traceObj['fill'] = 'toself';
							var keys = keyName.split("ASCOL");
							keyName = keys[0];
							if (compareChartsFlag == 'YF') {
								traceObj = addlegendLabelToTraceFilter(traceObj, i);
							} else {
								traceObj = addlegendLabelToTrace(traceObj, keyName, defaultLegendNames, userProvidedLegendNames);
							}
							i++;
							$.each(dataPropObject, function(key, val) {
								if (key === 'marker' && !jQuery.isEmptyObject(val) && val !== null) {
									var colorsArray = val['colors'];
									if (colorsArray !== undefined && colorsArray !== null && !$.isArray(colorsArray)) {
										colorObj['color'] = colorsArray;
									} else if (colorsArray !== undefined && colorsArray !== null && $.isArray(colorsArray)) {
										colorObj['color'] = colorsArray[colorCount++];
									} else {
										colorObj['color'] = colorArray[colorCount++];
									}
									traceObj[key] = colorObj;
								} else if (key === 'marker' && (jQuery.isEmptyObject(val) || val === null)) {
									colorObj['color'] = colorArray[colorCount++];
									traceObj[key] = colorObj;
								} else {
									traceObj[key] = val;
								}
							});
						}
						if (traceObj !== null && !jQuery.isEmptyObject(traceObj)) {
							data.push(traceObj);
						}
					});
				} else if (chartType != null && chartType != '' && chartType != undefined && chartType == 'funnel') {
					var colorCount = 0;
					colorArray = ['#1864ab', '#fd7e14', '#0b7285', '#ff6b6b'];
					$.each(chartDataObj, function(keyName) {

						var traceObj = {};
						var colorObj = {};
						if (keyName !== axisColumnName) {
							traceObj['y'] = chartDataObj[axisColumnName];
							traceObj['x'] = chartDataObj[keyName];
							traceObj['type'] = chartType;
							//                                traceObj['orientation'] = 'h';
							var keys = keyName.split("ASCOL");
							keyName = keys[0];
							traceObj = addlegendLabelToTrace(traceObj, keyName, defaultLegendNames, userProvidedLegendNames);
							$.each(dataPropObject, function(key, val) {
								if (key === 'marker' && !jQuery.isEmptyObject(val) && val !== null) {
									var colorsArray = val['colors'];
									if (colorsArray !== undefined && colorsArray !== null && colorsArray.length !== null) {
										colorObj['color'] = colorsArray[colorCount++];
									} else {
										colorObj['color'] = colorArray[colorCount++];
									}
									traceObj[key] = colorObj;
								} else if (key === 'marker' && (jQuery.isEmptyObject(val) || val === null)) {
									colorObj['color'] = colorArray[colorCount++];
									traceObj[key] = colorObj;
								} else {
									traceObj[key] = val;
								}
							});
						}
						if (traceObj !== null && !jQuery.isEmptyObject(traceObj)) {
							data.push(traceObj);
						}
					});
				} else if (chartType != null && chartType != '' && chartType != undefined && chartType == 'indicator') {
					var traceObj = {};
					var domainObj = {};
					var domainArr = [];
					domainArr.push(0);
					domainArr.push(1);
					domainObj["x"] = domainArr;
					domainObj["y"] = domainArr;
					traceObj['domain'] = domainObj;
					traceObj['value'] = chartDataObj;
					traceObj['type'] = chartType;
					traceObj['mode'] = "gauge+number";
					traceObj['gauge'] = resultObj['gauge'];
					if (dataPropObject != null && !jQuery.isEmptyObject(dataPropObject)) {
						$.each(dataPropObject, function(key, val) {
							traceObj[key] = val;
						});
					}
					if (traceObj !== null && !jQuery.isEmptyObject(traceObj)) {
						data.push(traceObj);
					}
				} else {
					dataObj['x'] = chartDataObj[0];
					dataObj['y'] = chartDataObj[key];
					dataObj['type'] = chartType;
					dataObj['name'] = 'value';
					dataObj['marker'] = colorObj;
				}

				var margin = {};
				if (chartType != null && chartType != '' && chartType != undefined && chartType == 'treemap') {
					margin = {
						l: 0,
						r: 0,
						b: 0,
						t: 30,
						pad: 0
					};
				} else if (chartType != null && chartType != '' && chartType != undefined && (chartType == 'pie' || chartType == 'donut')) {
					margin = {
						l: 10,
						r: 20,
						b: 10,
						t: 30,
						autoexpand: true,
						pad: 0
					};
				} else {
					margin = {
						l: 30,
						r: 50,
						b: 50,
						t: 50
					};
				}
				layout = {
					margin: margin,
					height: 270,
					dragmode: false,
					font: {
						size: 9
					},
					modebar: {
						orientation: 'v',
						color: '#0b4a99',
						activecolor: '#9ED3CD'
					},

					title: {
						text: title,
						font: {
							family: '"Open Sans", verdana, arial, sans-serif',
							size: 24
						},
						xref: 'paper',
						x: 0.1,
					}
				};
				var legend = {
					"x": -0.2,
					"y": 0.2,
					"orientation": "h"
				};
				if (layoutObj != null && !jQuery.isEmptyObject(layoutObj)) {
					$.each(layoutObj, function(key, val) {
						layout[key] = val;
					});
				}


				if (chartType != null && chartType != '' && chartType != undefined && (chartType == 'donut' || chartType == 'pie')) {
					layout['showlegend'] = true;
					var updatemenus = [{
						type: 'buttons',
						buttons: [{
							label: '≡',
							method: 'relayout',
							args: ['showlegend', false],
							args2: ['showlegend', true]
						}]
					}];
					//                    layout['updatemenus'] = updatemenus;
					layout['legend'] = legend;
					layout['showlegend'] = false;
				} else {
					layout['height'] = 330;
				}
				var polar = {
					radialaxis: {
						visible: true
					},
					showlegend: true
				};
				if (chartType == 'scatterpolar') {
					layout['polar'] = polar;
					layout['dragmode'] = true;
				}

				if (compareChartFlag == 'Y' || compareChartFlag == 'YF') {
					if (chartType == 'bar' || chartType == 'column') {
						layout['barmode'] = 'group';
					}
					$("#" + chartId).parent().parent().attr("class", "col-md-6 col-sm-6 col-lg-6 homeChartWrapDiv");
					layout['legend'] = legend;
				} else if (compareChartFlag == 'N') {
					if (compareChartsArr != null && !jQuery.isEmptyObject(compareChartsArr) && compareChartsArr.indexOf(chartId) > -1) {
						var index = compareChartsArr.indexOf(chartId);
						$("#" + chartId).parent().parent().attr("class", "col-md-6 col-sm-6 col-lg-3 homeChartWrapDiv");
						if (index > -1) {
							compareChartsArr.splice(compareChartsArr.indexOf(chartId), 1);
							if (compareChartsArr.length <= 0) {
								$("#visionDashBoardHomeFilterId").show();
								$("#visionDashBoardHomeCompareFilterId").hide();
							}
						}

					}

				}
				$("#" + chartId).empty();
				if (chartType != null && chartType != '' && chartType != undefined && (chartType != 'lines' && chartType != 'treemap')) {
					for (var m = 0; m < data.length; m++) {
						var markerObj = data[m]['marker'];
						if ((!(markerObj != null && !jQuery.isEmptyObject(markerObj))) ||
							(markerObj != null && !jQuery.isEmptyObject(markerObj) &&
								!(markerObj['colors'] != null && !jQuery.isEmptyObject(markerObj['colors'])))) {
							var colorObj = [];
							if (chartType == 'pie' || chartType == 'donut') {
								colorObj = ['#2F6345', '#40875E', '#58B07E', '#C48C00', '#F0AB00', '#FFBE1D', '#FFCC4B', '#827E32', '#A8A240', '#C5C169'];
								markerObj['colors'] = colorObj;
							} else {
								var x = data[m]['x'];
								colorObj = ['#1864B1', '#FF7F0E']
								var colorsX = [];
								if (x != null && x != '' && x != undefined && !jQuery.isEmptyObject(x)) {
									for (var p = 0; p < x.length; p++) {
										colorsX.push(colorObj[m]);
									}
									markerObj['color'] = colorsX;
								}
							}
							if (markerObj != null && !jQuery.isEmptyObject(markerObj)) {
								data[m]['marker'] = markerObj;
							}
						}
					}
				}

				Plotly.newPlot(chartId, data, layout);
				var myPlot = document.getElementById(chartId);
				if (chartType != null && chartType != '' && chartType != undefined && (chartType == 'donut' || chartType == 'pie')) {
					var height = (traceHeight * 19) + 10;
					// $("#" + chartId).append("<div id='" + chartId + "_legendDivId' class='pieChartLegendTraces'></div>");
					var traces = $("#" + chartId).find(".legend").find(".groups").html();
					var groups = $("#" + chartId).find("g.infolayer").find("g.legend").find("g.scrollbox").find("g.groups");
					$("#" + chartId).find(".legend").find(".groups").html("<foreignObject class='chartLegendScroll' width='353.05' height='75' style='overflow-y:scroll'>"
						+ "<span id='" + chartId + "_legendId' style='height:75px'></span></foreignObject>");
					$("#" + chartId + "_legendId").attr("class", "pieLegendTraces");
					$("#" + chartId + "_legendId").html("<svg class='legend_main-svg' "
						+ "height ='" + height + "' style='position:fixed;left:-12px;'>"
						+ traces + "</svg>");
					//$("#" + chartId).find(".plot-container").find(".legend").hide();

				}


				if (chartType != null && chartType != '' && chartType != undefined && chartType == 'scatterpolar1') {
					myPlot.on('plotly_hover', function(data) {
						var filterString = '';
						for (var i = 0; i < data.points.length; i++) {
							if (chartType != null && chartType == 'funnel') {
								filterString = data.points[i].y;
							} else {
								filterString = data.points[i].label;
							}

						}
						//getGridData(axix, filterString, chartId, "DXP_DASHBOARD_GRID", filterCondition);
						alert('Closest point clicked:\n\n');
					});
				} else {
					myPlot.on('plotly_click', function(data) {
						chartClickDataObj = {};
						chartClickDataObj[chartId] = data;
						if (colorsObj != null && colorsObj != '' && colorsObj != undefined) {
							selectHomeAggregateFunction(chartId, chartType, axisColumns, filterCondition, colorsObj);
						} else {
							colorsObj = '';
							selectHomeAggregateFunction(chartId, chartType, axisColumns, filterCondition, colorsObj);
						}
					});
				}
				if (colorsObj != null && colorsObj != '' && colorsObj != undefined) {
					applyChartColors(colorsObj, chartId, chartType);
				}


				if (chartType != null && chartType != '' && chartType != undefined && (chartType == 'donut' || chartType == 'pie')) {
					var colors = [];
					if (colorsObj != null && colorsObj != '' && colorsObj != undefined) {
						var colorobj;
						if (colorsObj.constructor === String) {
							colorobj = JSON.parse(colorsObj);
						} else {
							colorobj = colorsObj;
						}

						if (colorobj != null && !jQuery.isEmptyObject(colorobj)) {
							colors = colorobj['clrs'];
						} else {
							colors = ['#2F6345', '#40875E', '#58B07E', '#C48C00', '#F0AB00', '#FFBE1D', '#FFCC4B', '#827E32', '#A8A240', '#C5C169'];
						}
					} else {
						colors = ['#2F6345', '#40875E', '#58B07E', '#C48C00', '#F0AB00', '#FFBE1D', '#FFCC4B', '#827E32', '#A8A240', '#C5C169'];
					}
					positionChartLegend(chartType, chartId, colors, chartLabels, data, layout, config);
				} else {
					$("#" + chartId + "_legends").remove();
				}


				// jaggu
				//                $("#" + chartId).draggable({
				$(".chartMain").draggable({
					revert: true,
					refreshPositions: true,
					cursor: 'move',
					zindex: false,
					opacity: false,
					start: function(event, ui) {
						var charts = $(".homeChartWrapDiv");
						var zindexMaxVal = 999;
						$.each(charts, function(i, val) {
							var zIndex = $(this).css("z-index");
							if (zIndex != null && zIndex != '' && zIndex == 'auto') {
								zIndex = 999;
							}
							zIndex = parseInt(zIndex);
							if (zIndex > zindexMaxVal) {
								zindexMaxVal = zIndex
							}

						})
						var target = event.target;
						var chartDragId = target['id'];
						//                        $("#" + chartDragId).css("z-index", zindexMaxVal + 1);
					},
					stop: function(event, ui) {
						ui.helper.removeClass("draggableTable");

					}
				});
				//                $("#visualizechartId").droppable({
				$(".homeChartParentDiv").droppable({
					//                $("#" + chartId).droppable({
					revert: "invalid",
					refreshPositions: true,
					cursor: 'move',
					accept: '.chartMain',
					drop: function(event, ui) {

						var $this = $(this);
						var children = $(this).children();
						var draggable = $(ui.draggable);
						if ($(this).children().length > 0) {
							var move = $(this).children().detach();
							$(ui.draggable).parent().append(move);
							if (children.length >= 3) {
								$(ui.draggable).append(children[1]);
							}
						}

						$(this).append($(ui.draggable));
					}
				});

				$("#" + chartId).resizable();
				$("#" + chartId).resize(function(event, ui) {
					var target = event.currentTarget;
					var id = target['id'];
					var type = event.currentTarget.data[0].type;
					var parentId = $("#" + id).parent().parent().attr("id");
					$("#" + parentId).attr("class", "col-md-6 col-sm-6 col-lg-6 homeChartWrapDiv resizableChartDiv");
					var width = ui.size.width;
					var height = ui.size.height;
					if (type == 'lines') {
						margin = {
							l: 100,
							r: 50,
							b: 180,
							t: 20,
							pad: 4
						};
					} else {
						margin = {
							l: 100,
							r: 50,
							b: 120,
							t: 20,
							pad: 4
						};
					}



					//                    margin = calculateLegendMargins(chartId);
					var update =
					{
						width: width,
						height: height,
						margin: margin,

					}

					Plotly.relayout(chartId, update);
				});





				//shakir
				$("#" + chartId + " .svg-container").append("<div class='xAxisLabelTooltip'></div>");
				var currentChartXaxisLabelSelector = $("#" + chartId).find(".xaxislayer-above").children();
				currentChartXaxisLabelSelector.each(function(index, element) {
					var labelTitle = $(this).children().text();
					$("#" + chartId + " .xAxisLabelTooltip").append('<span class="xlabelTooltipText">' + labelTitle + "</span>");
				});
				$("#" + chartId + " .xtick").unbind("mouseenter").mouseenter(function(e) {
					var cssTransformProp = $(this).children().attr("transform");
					var firstIndexOfTransformProp = cssTransformProp.split(",")[0];
					var indexOfTransformOpenPar = firstIndexOfTransformProp.indexOf("(");
					var transformHorStr = firstIndexOfTransformProp.substring(indexOfTransformOpenPar + 1, cssTransformProp.length);
					var transformHorVal = parseInt(transformHorStr) - 15;
					showAxisLabelsTooltipOnHover($(this), "xAxisLabelTooltip", chartId, transformHorVal, 0);
				});
				$("#" + chartId + " .xtick").unbind("mouseleave").mouseleave(function(e) {
					hideAxisLabelsTooltipOnHover($(this), "xAxisLabelTooltip", chartId);
				});

				$("#" + chartId + " .svg-container").append("<div class='yAxisLabelTooltip'></div>");
				var currentChartXaxisLabelSelector = $("#" + chartId).find(".yaxislayer-above").children();
				currentChartXaxisLabelSelector.each(function(index, element) {
					var labelTitle = $(this).children().text();
					$("#" + chartId + " .yAxisLabelTooltip").append('<span class="ylabelTooltipText">' + labelTitle + "</span>");
				});
				$("#" + chartId + " .ytick").unbind("mouseenter").mouseenter(function(e) {
					var cssTransformProp = $(this).children().attr("transform");
					var firstIndexOfTransformProp = cssTransformProp.split(",")[1];
					var transformVerStr = firstIndexOfTransformProp.substring(0, firstIndexOfTransformProp.length - 1);
					var transformVerVal = parseInt(transformVerStr) - 230;
					showAxisLabelsTooltipOnHover($(this), "yAxisLabelTooltip", chartId, 0, transformVerVal);
				});
				$("#" + chartId + " .ytick").unbind("mouseleave").mouseleave(function(e) {
					hideAxisLabelsTooltipOnHover($(this), "yAxisLabelTooltip", chartId);
				});
				//jaggu






			}

		}, error: function(e) {
			console.log("The Error Message is:::" + e.message);
			sessionTimeout(e);
		}
	});

}

function changeElementsId(chartCount, chartType) {
	var perviousAdjacentElements = $('#visionVisualizeChartProperties' + chartCount).prevAll();
	var nextAdjacentElements = $('#visionVisualizeChartProperties' + chartCount).siblings();
	var setOfCharts = new Set();
	setOfCharts.add(chartType);
	$.each(perviousAdjacentElements, function() {
		var chartType = $(this).attr('data-chartType');
		if (setOfCharts.has(chartType)) {
			return;
		} else {
			setOfCharts.add(chartType);
		}
	});

	$.each(nextAdjacentElements, function() {
		var chartType = $(this).attr('data-chartType');
		if (setOfCharts.has(chartType)) {
			return;
		} else {
			setOfCharts.add(chartType);
		}
	});

	if (setOfCharts.size !== 0 && setOfCharts !== null && setOfCharts.has(chartType)) {
		var chartConfigId = "visionVisualizeChartProperties" + chartCount + " ul li";
		$('#' + chartConfigId).each(function(index, element) {
			var optColName = $(this).attr("data-column-name");
			if (optColName !== null && optColName !== '' && optColName !== undefined) {
				$("#" + chartConfigId).find("#" + optColName).attr("id", optColName + chartCount);
				$(this).attr("data-column-name", optColName + chartCount);
			}
			if (optColName.includes(chartType.toUpperCase() + 'COLOR')) {
				var chartColorsSiblings = $("#" + optColName).siblings();
				if (chartColorsSiblings.length !== 0) {
					chartColorsSiblings.each(function(index, element) {
						if ($(this).prop("tagName").toLowerCase() === 'input') {
							$("#" + chartConfigId).find("#" + optColName + '_CLR').attr('id', optColName + chartCount + '_CLR');
						} else if ($(this).prop("tagName").toLowerCase() === 'div') {
							$("#" + chartConfigId).find("#" + optColName + '_CLR_DIV').attr('id', optColName + chartCount + '_CLR_DIV');
						}
					});
				} else {
					$("#" + optColName + chartCount).siblings().each(function(index, element) {
						if ($(this).prop("tagName").toLowerCase() === 'input') {
							$("#" + chartConfigId).find("#" + optColName + '_CLR').attr('id', optColName + chartCount + '_CLR');
						} else if ($(this).prop("tagName").toLowerCase() === 'div') {
							$("#" + chartConfigId).find("#" + optColName + '_CLR_DIV').attr('id', optColName + chartCount + '_CLR_DIV');
						}
					});
				}
			}

		});
	}
}
function treeDxpConnections1(treeObj, treeId) {
	$("#visionVisualizationDataSourcesId").css("display", "none");
	//     $("#columnsMainDivwrapperID").css("display", "none");
	$("#ivisualizationConnections").css("display", "block");
	//    var connectionObj;
	var treeConfigObj = treeObj['treeConfigObj'];
	var dragEndFunction = treeObj['dragEndFunction'];
	treeConfigObj.allowDrag = true;
	treeConfigObj.allowDrop = true;
	treeConfigObj.hasThreeStates = true;
	treeConfigObj.checkboxes = true;
	treeConfigObj.dragEnd = eval('(' + dragEndFunction + ')');
	var columnsObj = treeObj['treeColumnObj'];
	$('#' + treeId).jqxTree(treeConfigObj);
	var filterItems = ['TABLES', 'VIEWS', 'SYNONYMS'];
	$('#' + treeId).on('select', function(event) {
		var selectedItem = $('#' + treeId).jqxTree('getItem', event.args.element);
		var $selectedElement = $(event.args.element);
		if (selectedItem != null && !jQuery.isEmptyObject(selectedItem) && selectedItem['value'] != null
			&& selectedItem['value'] != '' && filterItems.indexOf(selectedItem['value']) > -1) {
			selectColumnsObj = columnsObj
			var parentSelectId = selectedItem['parentId'];
			var parentDiv = $("#" + parentSelectId);
			var childObj = parentDiv[0].children[1];
			var valueObj = childObj.treeItem['value'];
			selectedDataBase = valueObj;
			if (savedDBData != null && !jQuery.isEmptyObject(savedDBData)) {

				var selectConnsObj = savedDBData[valueObj];
				if (selectConnsObj != null && !jQuery.isEmptyObject(selectConnsObj)) {
					selectConnObj = selectConnsObj;
				}
			}
			var hiddenFieldId = "DATABASE_" + selectedDataBase + "_" + selectedItem.value + "_hidden";
			hiddenFieldId = hiddenFieldId.replace(/ /g, '_');
			hiddenFieldId = hiddenFieldId.replace(/\//g, '_');
			var filterValue = $("#" + hiddenFieldId).val();
			if (filterValue != null && filterValue != '' && filterValue != undefined) {
				$("#treeETLFilterImage").attr('src', "images/Filter Icon2-01.svg");
			} else {
				$("#treeETLFilterImage").attr('src', "images/Filter Icon-01.svg");
			}
		} else if (selectedItem != null && !jQuery.isEmptyObject(selectedItem) && selectedItem['value'] != null
			&& selectedItem['value'] != '' && selectedItem['value'] == "Show More") {
			selectColumnsObj = columnsObj;
			var valueObj;
			var selectedValue;
			var selectedLevel;
			var parentElement = event.args.element.parentElement.parentElement;
			var parent = $('#' + treeId).jqxTree('getItem', parentElement);
			var $selectedElement = $(parentElement);
			if (parent != null) {
				selectedValue = parent.value;
				selectedLevel = parent.level;
				var parentSelectId = parent['parentId'];
				var parentDiv = $("#" + parentSelectId);
				var childObj = parentDiv[0].children[1];
				valueObj = childObj.treeItem['value'];
			}
			if (savedDBData != null && !jQuery.isEmptyObject(savedDBData)) {

				var selectConnsObj = savedDBData[valueObj];
				if (selectConnsObj != null && !jQuery.isEmptyObject(selectConnsObj)) {
					selectConnObj = selectConnsObj;
				}
			}
			var parentEventItem = parentElement;
			for (var i = selectedLevel; i > 1; i--) {
				parentEventItem = parentEventItem.parentElement.parentElement;
			}
			var selectedItem = $('#' + treeId).jqxTree('getItem', parentEventItem);
			var selectedParentValue = selectedItem['value'];
			treePaging(selectedValue, selectConnObj, $selectedElement[0], selectedLevel, selectColumnsObj, valueObj, selectedParentValue);
			//            treePaging(selectedValue, selectConnObj, $selectedElement[0], selectedLevel, selectColumnsObj, valueObj);
		}
	});
	$('#' + treeId).on('expand', function(event) {
		var connectionObj;
		var parentItem = $('#' + treeId).jqxTree('getItem', event.args.element);
		//------------ file expand code
		if (parentItem.level == '2') {
			globalFileTreeItem[parentItem.value.toUpperCase()] = parentItem.element;
		}

		var $element = $(event.args.element);
		var loader = false;
		var loaderItem = null;
		var children = $element.find('ul:first').children();
		$.each(children, function() {
			var item = $('#' + treeId).jqxTree('getItem', this);
			if (item && item.value == 'ajax') {
				loaderItem = item;
				loader = true;
				return false
			}
		});
		if (loaderItem != null) {
			showLoader();
			var extTreeParams = $("#extTreeParams").val();
			var value;
			var level = parentItem.level;
			$('#' + treeId).jqxTree('removeItem', loaderItem.element);
			if (parentItem.level > 3) {
				//var prevObj = parentItem['prevItem'];
				//                value = parentItem['value'];
				var parentEventItem = event.args.element;
				for (var i = level; i > 3; i--) {
					parentEventItem = parentEventItem.parentElement.parentElement;
				}
				var selectedItem = $('#' + treeId).jqxTree('getItem', parentEventItem);
				value = selectedItem['value'];
			}

			if (savedDBData != null && !jQuery.isEmptyObject(savedDBData)) {
				var conObj = savedDBData[value];
				if (conObj != null && !jQuery.isEmptyObject(conObj)) {
					connectionObj = conObj;
				}

			}
			var data = {
				parentkey: parentItem.value,
				treeId: treeObj['treeId'],
				level: parentItem.level,
				extTreeParams: extTreeParams,
				columnsObj: JSON.stringify(columnsObj),
				connectionObj: JSON.stringify(connectionObj),
				startIndex: 0,
				endIndex: 50
			};
			// -------------  JAGADISH CODE START ------------ line 1764

			if (parentItem.level == '3') { // JAGADISH CODE START ETL_QUERY 
				var superParentEle = parentItem['parentElement'];
				var superParentValue = superParentEle['children'][2];
				data['superParentValue'] = superParentValue['innerText'];
			}
			// JAGADISH CODE END
			var hiddenFieldId = "DATABASE_" + value + "_" + parentItem.value + "_hidden";
			var hiddenPagingId = "DATABASE_" + value + "_" + parentItem.value + "paging__hidden";
			hiddenFieldId = hiddenFieldId.replace(/ /g, '_');
			hiddenPagingId = hiddenPagingId.replace(/ /g, '_');
			hiddenFieldId = hiddenFieldId.replace(/\//g, '_');
			hiddenPagingId = hiddenPagingId.replace(/\//g, '_');
			var hiddenPagingField = "<input type='hidden' id='" + hiddenPagingId + "'value=''/>";
			$("#ivisualizationConnections").append(hiddenPagingField);
			var prevFilterVal = $("#" + hiddenFieldId).val();
			if (prevFilterVal != null && prevFilterVal != '' && prevFilterVal != undefined) {
				prevFilterVal = JSON.parse(prevFilterVal);
				data['filterValue'] = prevFilterVal['filterType'];
				data['filterCondition'] = prevFilterVal['filterValue'];
			}
			//            var url = "getTreePagingDataOpt";
			var url = "getETLTreePagingDataOpt";
			var treePagingObj = {};
			treePagingObj['startIndex'] = '0';
			treePagingObj['endIndex'] = $("#treePageSize").val();
			$("#" + hiddenPagingId).val(JSON.stringify(treePagingObj));
			//            var url = "getTreeDataOpt";
			var filesParentElement = parentItem['parentElement'];

			var selectedFilesItem = $('#' + treeId).jqxTree('getItem', filesParentElement);
			if (parentItem.value == 'FILES'
				|| (selectedFilesItem != null
					&& selectedFilesItem['value'] == 'FILES')) {
				url = 'getTreeUploadedFiles';
			}
			if (parentItem.level > 3) {
				var parentEventItem = event.args.element;
				for (var i = level; i > 1; i--) {
					parentEventItem = parentEventItem.parentElement.parentElement;
				}
				var selectedItem = $('#' + treeId).jqxTree('getItem', parentEventItem);
				var selectedParentValue = selectedItem['value'];
				if (selectedParentValue != null && selectedParentValue != '' &&
					selectedParentValue != undefined && selectedParentValue == 'ERP') {
					url = 'getTreeErpConnectionDetails';
				}
			}
			$.ajax({
				type: "post",
				traditional: true,
				dataType: 'json',
				url: url,
				cache: false,
				data: data,
				success: function(data, status, xhr) {
					stopLoader();
					if (parentItem.level == 2) {
						var parentParentItem = $('#' + treeId).jqxTree("getItem", parentItem.parentElement);
						if (parentParentItem.value != "FILES") {

							if (data != null) {
								savedDBData = data[0].connectionObj;
							}
						}
					}

					$('#' + treeId).jqxTree('addTo', data, $element[0]);
					var items = $('#' + treeId).jqxTree('getItems');
					$.each(items, function() {
						$(this.titleElement).attr('title', this.label);
						$("#" + this.titleElement[0].id).removeClass('visionETLParentHighight');
						if (this.value == "Show More") {
							var childLength = this.element.children['length'];
							var expandDiv = this.element.children[0];
							if (childLength > 3) {
								var div = this.element.children[1];
								var checkBoxDiv = this.element.children[2];
								$("#" + expandDiv.id).remove();
								$("#" + div.id).remove();
								$("#" + checkBoxDiv.id).addClass('visionETLCheckboxEmptySpace');
							} else {
								$("#" + expandDiv.id).remove();
							}
						}
					});
					if (parentItem != null) {
						var parentItemEle = event.args.element;
						for (var p = level; p >= 0; p--) {
							var parentItemId = $('#' + treeId).jqxTree('getItem', parentItemEle);
							if (parentItemId != null) {
								var divItemId = parentItemId.titleElement[0];
								$("#" + divItemId.id).addClass('visionETLParentHighight');
							}
							parentItemEle = parentItemEle.parentElement.parentElement;
						}
					}
					$('#mainSplitter').resize();
				},
				error: function(e) {
					console.log(e);
					sessionTimeout(e);
					stopLoader();
				}
			});
		}



	});
}

function treeDxpConnections() {
	//    $("#ivisualizationConnections").html("<ul><li >Tables<ul><li></li></ul></li><li>views<ul><li></li></ul></li></ul>");
	var source = [
		{
			label: "TABLES", value: "TABLES",
			items: [
				{ label: "loading...", value: "ajax" },
			]
		},
		{
			label: "VIEWS", value: "VIEWS",
			items: [
				{ label: "loading...", value: "ajax" },
			]
		}
	];
	$('#ivisualizationConnections').jqxTree({ source: source, height: '100%', width: '300px' });
	;
	$("#visionVisualizationDataSourcesId").css("display", "none");
	//     $("#columnsMainDivwrapperID").css("display", "none");
	$("#ivisualizationConnectionsMain").css("display", "block");
	$("#ivisualizationConnectionsMain").css("height", "100%");
	$("#visualConnectionLi").removeClass("Vtabactive")
	$("#treeDxpConnectionLi").addClass("Vtabactive")
	var treeId = "ivisualizationConnections";


	$('#' + treeId).on('expand', function(event) {
		var connectionObj;
		var parentItem = $('#' + treeId).jqxTree('getItem', event.args.element);
		var schemaObjectType = parentItem.label;
		var level = parentItem.level;
		var $element = $(event.args.element);
		var url = 'getCurrentDBTables';

		var loader = false;
		var loaderItem = null;
		var children = $element.find('ul:first').children();
		$.each(children, function() {
			var item = $('#' + treeId).jqxTree('getItem', this);
			if (item && item.value == 'ajax') {
				loaderItem = item;
				loader = true;
				return false
			}
		});
		if (loaderItem != null) {
			$.ajax({
				type: "post",
				traditional: true,
				dataType: 'json',
				url: url,
				cache: false,
				data: {
					schemaObjectType: schemaObjectType,
					level: level,
					start: 0,
					limit: 50
				},
				success: function(response, status, xhr) {
					stopLoader();
					var data = response['treeObjArray'];

					var children = $element.find('ul:first').children();
					if (children != null && children.length > 0) {
						$.each(children, function(index) {
							$('#' + treeId).jqxTree('removeItem', this)
						})

					}

					$('#' + treeId).jqxTree('addTo', data, event.args.element);

					var items = $('#' + treeId).jqxTree('getItems');
					$.each(items, function() {
						$(this.titleElement).attr('title', this.label);
						$("#" + this.titleElement[0].id).removeClass('visionETLParentHighight');
						if (this.value == "Show More") {
							var childLength = this.element.children['length'];
							var expandDiv = this.element.children[0];
							if (childLength > 3) {
								var div = this.element.children[1];
								var checkBoxDiv = this.element.children[2];
								$("#" + expandDiv.id).remove();
								$("#" + div.id).remove();
								$("#" + checkBoxDiv.id).addClass('visionETLCheckboxEmptySpace');
							} else {
								$("#" + expandDiv.id).remove();
							}
						}
					});

					$('#mainSplitter').resize();

					if (parentItem.level == 0) {

						$('#' + treeId).on('mousedown', function(event) {

							var target = $(event.target).parents('li:first')[0];
							var rightClick = isRightClick(event);
							if (rightClick && target != null) {
								$('#' + treeId).jqxTree('selectItem', target);

								var selectedItem = $('#' + treeId).jqxTree('getSelectedItem');
								var selectedParentItem = {};
								try {
									selectedParentItem = $('#' + treeId).jqxTree('getItem', selectedItem.parentElement);
									if (selectedParentItem != null) {
										selectedParentItem = $('#' + treeId).jqxTree('getItem', selectedParentItem.parentElement);
									}
								} catch (e) {
								}
								if (selectedItem.level == 1) {
									var menuItems = "";
									var menuHeight;
									var rightClickFunc = "View Data:viewAnalyticsTableData()";
									if (rightClickFunc != null) {
										var options = rightClickFunc.split(";");
										menuHeight = options.length;
										$.each(options, function(index) {
											var menuItem = options[index].split(":")[0];
											var funcName = options[index].split(":")[1];
											menuItems += "<li onclick='" + funcName + "'>" + menuItem + "</li>"
										});
									}

									$("#jqxMenu").remove();
									$("body").append("<div id='jqxMenu'><ul></ul></div>");
									$("#jqxMenu ul").html(menuItems);
									var contextMenu = $("#jqxMenu").jqxMenu({ width: '120px', height: menuHeight * 30 + 'px', autoOpenPopup: false, mode: 'popup', theme: 'energyblue' }); // ravi start
									var scrollTop = $(window).scrollTop();
									var scrollLeft = $(window).scrollLeft();
									contextMenu.jqxMenu('open', parseInt(event.clientX) + 5 + scrollLeft, parseInt(event.clientY) + 5 + scrollTop);
									return true;



								} else { // ravi end
									return false;
								}

							}
						});


						// disable the default browser's context menu.
						$(document).on('contextmenu', function(e) {
							if ($(e.target).parents('.jqx-tree').length > 0) {
								return false;
							}
							return true;
						});


					}

					if (parentItem.level == 1) {

						$('#' + treeId).on('mousedown', function(event) {

							var target = $(event.target).parents('li:first')[0];
							var rightClick = isRightClick(event);
							if (rightClick && target != null) {
								$('#' + treeId).jqxTree('selectItem', target);

								var selectedItem = $('#' + treeId).jqxTree('getSelectedItem');
								var selectedParentItem = {};
								try {
									selectedParentItem = $('#' + treeId).jqxTree('getItem', selectedItem.parentElement);
									if (selectedParentItem != null) {
										selectedParentItem = $('#' + treeId).jqxTree('getItem', selectedParentItem.parentElement);
									}
								} catch (e) {
								}
								if (selectedItem.level == 1) {
									var menuItems = "";
									var menuHeight;
									var rightClickFunc = "View Data:viewAnalyticsTableData()";
									if (rightClickFunc != null) {
										var options = rightClickFunc.split(";");
										menuHeight = options.length;
										$.each(options, function(index) {
											var menuItem = options[index].split(":")[0];
											var funcName = options[index].split(":")[1];
											menuItems += "<li onclick='" + funcName + "'>" + menuItem + "</li>"
										});
									}

									$("#jqxMenu").remove();
									$("body").append("<div id='jqxMenu'><ul></ul></div>");
									$("#jqxMenu ul").html(menuItems);
									var contextMenu = $("#jqxMenu").jqxMenu({ width: '120px', height: menuHeight * 30 + 'px', autoOpenPopup: false, mode: 'popup', theme: 'energyblue' }); // ravi start
									var scrollTop = $(window).scrollTop();
									var scrollLeft = $(window).scrollLeft();
									contextMenu.jqxMenu('open', parseInt(event.clientX) + 5 + scrollLeft, parseInt(event.clientY) + 5 + scrollTop);
									return true;



								} else { // ravi end
									return false;
								}

							}
						});

						// disable the default browser's context menu.
						$(document).on('contextmenu', function(e) {
							if ($(e.target).parents('.jqx-tree').length > 0) {
								return false;
							}
							return true;
						});

						$('#' + treeId).unbind('dragEnd').on('dragEnd', function(event) {

							if (event.args.label) {

								var ev = event.args.originalEvent;
								var x = ev.pageX;
								var y = ev.pageY;
								if (event.args.originalEvent && event.args.originalEvent.originalEvent && event.args.originalEvent.originalEvent.touches) {
									var touch = event.args.originalEvent.originalEvent.changedTouches[0];
									x = touch.pageX;
									y = touch.pageY;
								}
								try {
									var offsetDiv = "";//jaggu
									var offsetDivs = $("[id^='visionVisualizeChartAxisId']");
									$.each(offsetDivs, function(index, val) {
										var visibility = $("#" + val['id']).is(":visible");
										if (visibility) {
											var offDiv = val['id'];
											offsetDiv = "#" + offDiv;
											return false;
										} else {
											offsetDiv = "[id^='visionVisualizeChartAxisId']";
										}

									});
									var offsetAxis = $(offsetDiv).offset();
									var widthAxis = $(offsetDiv).width();
									var heightAxis = $(offsetDiv).height();
									//                                var heightAxis = $("[id^='visionVisualizeChartAxisId']").height();
									var rightAxis = parseInt(offsetAxis.left) + widthAxis;
									var bottomAxis = parseInt(offsetAxis.top) + heightAxis;

									if (x >= parseInt(offsetAxis.left) && x <= rightAxis) {
										if (y >= parseInt(offsetAxis.top) && y <= bottomAxis) {

											var dragItem = event.args.owner._dragItem;
											var selectedParentItem = {};
											try {
												selectedParentItem = $('#' + treeId).jqxTree('getItem', dragItem.parentElement);
											} catch (e) {
											}
											var id = selectedParentItem.label;
											var divid = offsetDiv;
											var count = divid.split("_")[1];
											var chartType = chartDivObj['visionVisualizeChart' + count]; //jaggu
											var valueId = "visionVisualizeChartValuesId_" + count;
											var comboValuesId = "visionVisualizeChartComboValuesId_" + count;
											var columnName = event.args.value;
											var columnLabel = event.args.label;
											var chartId = "visionVisualizeChartId" + count;
											var columnId = "COLUMN_" + id + '_' + columnName + '_' + count + "";//jaggu
											var columnData = '<div id="COLUMN_' + id + "_" + columnName + "_" + count + '" class="visualizeDivData"' //group
												+ ' title="' + columnName + '" data-table-name="' + id + '" '
												+ ' data-column-name="' + id + "." + columnName + '" ><span class="visionColsText" >' + ((columnName == columnLabel) ? columnName : columnLabel)
												+ '</span><img src="images/close_white.png" title="Remove Column"'
												+ ' onclick="removeColumn(this,' + columnId + ',' + chartId + ')" class="visionCloseColumnBtn" style="display: inline;">'
												+ '</div>';
											$(divid).append(columnData);
											clearTimeout(dragEventTimeout);
											dragEventTimeout = setTimeout(function() {
												if (chartType != null && chartType != '' && chartType == 'BarAndLine') {
													if ($.trim($("#" + valueId).html()).length > 0 && $.trim($("#" + comboValuesId).html()).length > 0) {

														getChart(chartId, count, chartType, "", "", "");

													}
												} else if ($.trim($("#" + valueId).html()).length > 0) {

													getChart(chartId, count, chartType, "", "", "");

												}
											}, 3000);

										}
									}
								} catch (e) {
								}


								try {
									var offsetDiv = "";//jaggu
									var offsetDivs = $("[id^='visionVisualizeChartValuesId']");
									$.each(offsetDivs, function(index, val) {
										var visibility = $("#" + val['id']).is(":visible");
										if (visibility) {
											var offDiv = val['id'];
											offsetDiv = "#" + offDiv;
											return false;
										} else {
											offsetDiv = "[id^='visionVisualizeChartValuesId']";
										}

									})
									var offsetValue = $(offsetDiv).offset();
									var widthValue = $(offsetDiv).width();
									var heightValue = $(offsetDiv).height();
									var rightValue = parseInt(offsetValue.left) + widthValue;
									var bottomValue = parseInt(offsetValue.top) + heightValue;

									if (x >= parseInt(offsetValue.left) && x <= rightValue) {
										if (y >= parseInt(offsetValue.top) && y <= bottomValue) {
											var dragItem = event.args.owner._dragItem;
											var selectedParentItem = {};
											try {
												selectedParentItem = $('#' + treeId).jqxTree('getItem', dragItem.parentElement);
											} catch (e) {
											}
											var divid = offsetDiv;
											var id = selectedParentItem.label
											var count = divid.split("_")[1];
											var chartType = chartDivObj['visionVisualizeChart' + count]; //jaggu
											var axisId = "visionVisualizeChartAxisId_" + count;
											var comboValuesId = "visionVisualizeChartComboValuesId_" + count;
											var chartId = "visionVisualizeChartId" + count;
											var columnLabel = event.args.label;
											var columnName = event.args.value;
											var appendId = "visionVisualizeChartValuesId_" + count;
											var columnId = "COLUMN_" + id + '_' + columnName + '_' + count + "";
											if (chartType != null && chartType != '' && chartType == 'ganttChart') {
												var columnData = '<div id="COLUMN_' + id + "_" + columnName + "_" + count + '" class="visualizeDivData"' //group
													+ ' title="' + columnName + '" data-table-name="' + id + '" '
													+ ' data-column-name="' + id + "." + columnName + '" data-label-name=""><span class="visionColsText" >' + ((columnName == columnLabel) ? columnName : columnLabel)
													+ '</span><img src="images/close_white.png" '
													+ ' onclick="removeColumn(this,' + columnId + ',' + chartId + ')" class="visionValuesColumnCloseBtn" style="display: inline;">'
													+ '</div>';
												$(divid).append(columnData);						
												}else{
													var columnData = '<div id="COLUMN_' + id + "_" + columnName + "_" + count + '" class="visualizeDivData"' //group
												+ ' title="' + columnName + '" data-table-name="' + id + '" '
												+ ' data-column-name="' + id + "." + columnName + '" data-label-name=""><span class="visionColsText" >' + ((columnName == columnLabel) ? columnName : columnLabel)
												+ '</span><img src="images/Horizontal_Dots.svg" title="Aggregate Functions"'
												+ ' onclick=getAggregateFunctions(this,\'' + columnId + '\',\'' + chartId + '\',' + count + ',\'' + columnName + '\',\'' + id + '\',\'' + appendId + '\') class="visionAggregateColumnBtn" style="display: inline; "><img src="images/close_white.png" '
												+ ' onclick="removeColumn(this,' + columnId + ',' + chartId + ')" class="visionValuesColumnCloseBtn" style="display: inline;">'
												+ '</div>';
											$(divid).append(columnData);
												}

											
											$("#" + columnId).attr("data-column-label", columnLabel);
											clearTimeout(dragEventTimeout);
											dragEventTimeout = setTimeout(function() {
												if (chartType != null && chartType != '' && chartType == 'indicator') {

													getChart(chartId, count, chartType, "", "", "");

												} else if (chartType != null && chartType != '' && chartType == 'BarAndLine') {
													if ($.trim($("#" + axisId).html()).length > 0 && $.trim($("#" + comboValuesId).html()).length > 0) {

														getChart(chartId, count, chartType, "", "", "");

													}
												} else if ($.trim($("#" + axisId).html()).length > 0) {

													getChart(chartId, count, chartType, "", "", "");

												}
											}, 3000);

										}
									}
								} catch (e) {
								}

								try {
									var offsetDiv = "";//jaggu
									var offsetDivs = $("[id^='visionVisualizeChartComboValuesId']");
									$.each(offsetDivs, function(index, val) {
										var visibility = $("#" + val['id']).is(":visible");
										if (visibility) {
											var offDiv = val['id'];
											offsetDiv = "#" + offDiv;
											return false;
										} else {
											offsetDiv = "[id^='visionVisualizeChartComboValuesId']";
										}

									})
									var offsetValue = $(offsetDiv).offset();
									var widthValue = $(offsetDiv).width();
									var heightValue = $(offsetDiv).height();
									var rightValue = parseInt(offsetValue.left) + widthValue;
									var bottomValue = parseInt(offsetValue.top) + heightValue;

									if (x >= parseInt(offsetValue.left) && x <= rightValue) {
										if (y >= parseInt(offsetValue.top) && y <= bottomValue) {
											var dragItem = event.args.owner._dragItem;
											var selectedParentItem = {};
											try {
												selectedParentItem = $('#' + treeId).jqxTree('getItem', dragItem.parentElement);
											} catch (e) {
											}
											var divid = offsetDiv;
											var id = selectedParentItem.label
											var count = divid.split("_")[1];
											var chartType = chartDivObj['visionVisualizeChart' + count]; //jaggu
											var axisId = "visionVisualizeChartAxisId_" + count;
											var valuesId = "visionVisualizeChartValuesId_" + count;
											var chartId = "visionVisualizeChartId" + count;
											var columnLabel = event.args.label;
											var columnName = event.args.value;
											var appendId = "visionVisualizeChartComboValuesId_" + count;
											var columnId = "COLUMN_" + id + '_' + columnName + '_' + count + "";
											
											if(chartType !=null && chartType !='' && chartType !=undefined && chartType == 'ganttChart')
											{
												var columnData = '<div id="COLUMN_' + id + "_" + columnName + "_" + count + '" class="visualizeDivData"' //group
												+ ' title="' + columnName + '" data-table-name="' + id + '" '
												+ ' data-column-name="' + id + "." + columnName + '" data-label-name=""><span class="visionColsText" >' + ((columnName == columnLabel) ? columnName : columnLabel)
												+ '</span><img src="images/close_white.png" '
												+ ' onclick="removeColumn(this,' + columnId + ',' + chartId + ')" class="visionValuesColumnCloseBtn" style="display: inline;">'
												+ '</div>';
											$(divid).append(columnData);
											}else{
											
											var columnData = '<div id="COLUMN_' + id + "_" + columnName + "_" + count + '" class="visualizeDivData"' //group
												+ ' title="' + columnName + '" data-table-name="' + id + '" '
												+ ' data-column-name="' + id + "." + columnName + '" data-label-name=""><span class="visionColsText" >' + ((columnName == columnLabel) ? columnName : columnLabel)
												+ '</span><img src="images/Horizontal_Dots.svg" title="Aggregate Functions"'
												+ ' onclick=getAggregateFunctions(this,\'' + columnId + '\',\'' + chartId + '\',' + count + ',\'' + columnName + '\',\'' + id + '\',\'' + appendId + '\') class="visionAggregateColumnBtn" style="display: inline; "><img src="images/close_white.png" '
												+ ' onclick="removeColumn(this,' + columnId + ',' + chartId + ')" class="visionValuesColumnCloseBtn" style="display: inline;">'
												+ '</div>';
											$(divid).append(columnData);
											}
											$("#" + columnId).attr("data-column-label", columnLabel);
											clearTimeout(dragEventTimeout);
											dragEventTimeout = setTimeout(function() {
												if (chartType != null && chartType != '' && chartType == 'BarAndLine') {
													if ($.trim($("#" + axisId).html()).length > 0 && $.trim($("#" + valuesId).html()).length > 0) {

														getChart(chartId, count, chartType, "", "", "");

													}
												} else if ($.trim($("#" + axisId).html()).length > 0) {

													getChart(chartId, count, chartType, "", "", "");

												}
											}, 3000);

										}
									}
								} catch (e) {
								}



try {
									var offsetDiv = "";//jaggu
									var offsetDivs = $("[id^='visionVisualizeChartPercentValuesId']");
									$.each(offsetDivs, function(index, val) {
										var visibility = $("#" + val['id']).is(":visible");
										if (visibility) {
											var offDiv = val['id'];
											offsetDiv = "#" + offDiv;
											return false;
										} else {
											offsetDiv = "[id^='visionVisualizeChartPercentValuesId']";
										}

									})
									var offsetValue = $(offsetDiv).offset();
									var widthValue = $(offsetDiv).width();
									var heightValue = $(offsetDiv).height();
									var rightValue = parseInt(offsetValue.left) + widthValue;
									var bottomValue = parseInt(offsetValue.top) + heightValue;

									if (x >= parseInt(offsetValue.left) && x <= rightValue) {
										if (y >= parseInt(offsetValue.top) && y <= bottomValue) {
											var dragItem = event.args.owner._dragItem;
											var selectedParentItem = {};
											try {
												selectedParentItem = $('#' + treeId).jqxTree('getItem', dragItem.parentElement);
											} catch (e) {
											}
											var divid = offsetDiv;
											var id = selectedParentItem.label
											var count = divid.split("_")[1];
											var chartType = chartDivObj['visionVisualizeChart' + count]; //jaggu
											var axisId = "visionVisualizeChartAxisId_" + count;
											var valuesId = "visionVisualizeChartValuesId_" + count;
											var comboValuesId = "visionVisualizeChartComboValuesId_" + count;
											var chartId = "visionVisualizeChartId" + count;
											var columnLabel = event.args.label;
											var columnName = event.args.value;
											var appendId = "visionVisualizeChartPercentValuesId_" + count;
											var columnId = "COLUMN_" + id + '_' + columnName + '_' + count + "";
											if (chartType != null && chartType != '' && chartType == 'ganttChart') {
												var columnData = '<div id="COLUMN_' + id + "_" + columnName + "_" + count + '" class="visualizeDivData"' //group
													+ ' title="' + columnName + '" data-table-name="' + id + '" '
													+ ' data-column-name="' + id + "." + columnName + '" data-label-name=""><span class="visionColsText" >' + ((columnName == columnLabel) ? columnName : columnLabel)
													+ '</span><img src="images/close_white.png" '
													+ ' onclick="removeColumn(this,' + columnId + ',' + chartId + ')" class="visionValuesColumnCloseBtn" style="display: inline;">'
													+ '</div>';
												$(divid).append(columnData);
											} else {
												var columnData = '<div id="COLUMN_' + id + "_" + columnName + "_" + count + '" class="visualizeDivData"' //group
													+ ' title="' + columnName + '" data-table-name="' + id + '" '
													+ ' data-column-name="' + id + "." + columnName + '" data-label-name=""><span class="visionColsText" >' + ((columnName == columnLabel) ? columnName : columnLabel)
													+ '</span><img src="images/Horizontal_Dots.svg" title="Aggregate Functions"'
													+ ' onclick=getAggregateFunctions(this,\'' + columnId + '\',\'' + chartId + '\',' + count + ',\'' + columnName + '\',\'' + id + '\',\'' + appendId + '\') class="visionAggregateColumnBtn" style="display: inline; "><img src="images/close_white.png" '
													+ ' onclick="removeColumn(this,' + columnId + ',' + chartId + ')" class="visionValuesColumnCloseBtn" style="display: inline;">'
													+ '</div>';
												$(divid).append(columnData);
											}
											
											$("#" + columnId).attr("data-column-label", columnLabel);
											clearTimeout(dragEventTimeout);
											dragEventTimeout = setTimeout(function() {
												 if (chartType != null && chartType != '' && chartType == 'ganttChart') {
													if ($.trim($("#" + axisId).html()).length > 0 &&  $.trim($("#" + valuesId).html()).length > 0 && $.trim($("#" + comboValuesId).html()).length > 0) {

														getChart(chartId, count, chartType, "", "", "");

													}
												} 
											}, 3000);

										}
									}
								} catch (e) {
								}

								try {
									var offsetDiv = "";//jaggu charts
									var offsetDivs = $("[id^='visionVisualizeChartFiltersField_']");
									$.each(offsetDivs, function(index, val) {
										var visibility = $("#" + val['id']).is(":visible");
										if (visibility) {
											var offDiv = val['id'];
											offsetDiv = "#" + offDiv;
											return false;
										} else {
											offsetDiv = "[id^='visionVisualizeChartFiltersField_']";
										}

									});
									var offsetAxis = $(offsetDiv).offset();
									var widthAxis = $(offsetDiv).width();
									var heightAxis = $(offsetDiv).height();
									//                                var heightAxis = $("[id^='visionVisualizeChartAxisId']").height();
									var rightAxis = parseInt(offsetAxis.left) + widthAxis;
									var bottomAxis = parseInt(offsetAxis.top) + heightAxis;

									if (x >= parseInt(offsetAxis.left) && x <= rightAxis) {
										if (y >= parseInt(offsetAxis.top) && y <= bottomAxis) {
											var divid = offsetDiv;
											if (divid != null && divid != '' && divid != undefined) {
												var dragItem = event.args.owner._dragItem;
												var selectedParentItem = {};
												try {
													selectedParentItem = $('#' + treeId).jqxTree('getItem', dragItem.parentElement);
												} catch (e) {
												}
												var id = selectedParentItem.label;
												divid = divid.replace("#", "");
												var columnLabel = event.args.label;
												var columnName = event.args.value;
												var count = divid.split("_")[1];
												$("#Loader").css("display", "block");
												$("body").css({ "pointer-events": "auto" });
												var chartTargetType = chartDivObj["visionVisualizeChart" + count];
												addFilterValues(count, id, columnName, divid, filterCount, chartTargetType, columnLabel);
												filterCount++;
											}

										}
									}
								} catch (e) {
								}


								try {
									var offsetDiv = "#visionVisualizeSlicerFieldId";
									var offsetAxis = $(offsetDiv).offset();
									var widthAxis = $(offsetDiv).width();
									var heightAxis = $(offsetDiv).height();
									var rightAxis = parseInt(offsetAxis.left) + widthAxis;
									var bottomAxis = parseInt(offsetAxis.top) + heightAxis;

									if (x >= parseInt(offsetAxis.left) && x <= rightAxis) {
										if (y >= parseInt(offsetAxis.top) && y <= bottomAxis) {
											var dragItem = event.args.owner._dragItem;
											var selectedParentItem = {};
											try {
												selectedParentItem = $('#' + treeId).jqxTree('getItem', dragItem.parentElement);
											} catch (e) {
											}
											var id = selectedParentItem.label;
											var columnName = event.args.label;
											if (id != null && id != '' && id != undefined &&
												columnName != null && columnName != '' && columnName != undefined) {
												getChartDiv("", "Slicer", id, columnName);
											}

										}
									}
								} catch (e) {
								}


								try {
									var offsetCard = $("[id^='visionVisualizeCardChartValuesId']").offset();
									var widthCard = $("[id^='visionVisualizeCardChartValuesId']").width();
									var heightCard = $("[id^='visionVisualizeCardChartValuesId']").height();
									var rightCard = parseInt(offsetCard.left) + widthCard;
									var bottomCard = parseInt(offsetCard.top) + heightCard;

									if (x >= parseInt(offsetCard.left) && x <= rightCard) {
										if (y >= parseInt(offsetCard.top) && y <= bottomCard) {
											var dragItem = event.args.owner._dragItem;
											var selectedParentItem = {};
											try {
												selectedParentItem = $('#' + treeId).jqxTree('getItem', dragItem.parentElement);
											} catch (e) {
											}
											var divid = $("[id^='visionVisualizeCardChartValuesId']").attr("id");
											var id = selectedParentItem.label
											var count = divid.split("_")[1];
											var chartType = $("#visionVisualizeChart" + count).attr("type");
											var chartId = "visionVisualizeChartId" + count;
											var columnLabel = event.args.label;
											var columnName = event.args.value;
											var columnId = "COLUMN_" + id + '_' + columnName + "";
											$("#" + divid).attr("columnLabel",columnLabel);
											var columnData = '<div id="COLUMN_' + id + "_" + columnName + '" class="visualizeDivData"' //group
												+ ' title="' + columnName + '" data-table-name="' + id + '" '
												+ ' data-column-name="' + id + "." + columnName + '" ><span class="visionColsText" >' + columnLabel
												+ '</span><img src="images/Horizontal_Dots.svg" title="Aggregate Functions"'
												+ ' onclick=getCardAggregateFunctions(this,\'' + columnId + '\',\'' + chartId + '\',' + count + ',\'' + columnName + '\',\'' + id + '\',\'' + divid + '\') class="visionAggregateColumnBtn" style="display: inline; "><img src="images/close_white.png" title="Remove Column"'
												+ ' onclick="removeColumn(this,' + columnId + ',' + chartId + ')" class="visionValuesColumnCloseBtn" style="display: inline;">'
												+ '</div>';
											$("#" + divid).append(columnData);

											getCardData('COUNT', count, ""); 
										}
									}
								} catch (e) {
								}


								try {

									var offsetDiv = "";//jaggu charts
									var offsetDivs = $("[id^='visionVisualizeCardChartDateValuesId_']");
									$.each(offsetDivs, function(index, val) {
										var visibility = $("#" + val['id']).is(":visible");
										if (visibility) {
											var offDiv = val['id'];
											offsetDiv = "#" + offDiv;
											return false;
										} else {
											offsetDiv = "[id^='visionVisualizeCardChartDateValuesId_']";
										}

									});


									var offsetValue = $(offsetDiv).offset();
									var widthValue = $(offsetDiv).width();
									var heightValue = $(offsetDiv).height();
									var rightValue = parseInt(offsetValue.left) + widthValue;
									var bottomValue = parseInt(offsetValue.top) + heightValue;

									if (x >= parseInt(offsetValue.left) && x <= rightValue) {
										if (y >= parseInt(offsetValue.top) && y <= bottomValue) {
											var dragItem = event.args.owner._dragItem;
											var selectedParentItem = {};
											try {
												selectedParentItem = $('#' + treeId).jqxTree('getItem', dragItem.parentElement);
											} catch (e) {
											}
											var divid = offsetDiv;
											var id = selectedParentItem.label
											var count = divid.split("_")[1];
											var chartType = $("#visionVisualizeChart" + count).attr("type");
											var cardValueId = "visionVisualizeCardChartValuesId_" + count;
											var cardDateId = "visionVisualizeCardChartDateValuesId_" + count;
											var chartId = "visionVisualizeChartId" + count;
											var chartDateId = "visionVisualizeCardChartDateSelectValuesId_" + count;
											var columnLabel = event.args.label;
											var columnName = event.args.value;
											var columnId = "COLUMN_" + id + '_' + columnName + "";
											var columnData = '<div id="COLUMN_' + id + "_" + columnName + '" class="visualizeDivData"' //group
												+ ' title="' + columnName + '" data-table-name="' + id + '" '
												+ ' data-column-name="' + id + "." + columnName + '" ><span class="visionColsText" >' + columnLabel
												+ '</span><img src="images/Horizontal_Dots.svg" title="Aggregate Functions"'
												+ ' onclick=getCardDateFunctions(this,' + count + ',\'' + columnName + '\',\'' + id + '\') class="visionAggregateColumnBtn" style="display: inline; "><img src="images/close_white.png" title="Remove Column"'
												+ ' onclick="removeColumn(this,' + columnId + ',' + chartId + ',' + chartDateId + ')" class="visionValuesColumnCloseBtn" style="display: inline;">'
												+ '</div>';
											$(divid).append(columnData);

											if ($.trim($("#" + cardDateId).html()).length > 0 && $.trim($("#" + cardValueId).html()).length > 0) {
												//getCardData('COUNT', count, "");
											}
										}
									}
								} catch (e) {
								}


							}



						});
					}


				},
				error: function(e) {
					console.log(e);
					sessionTimeout(e);
					stopLoader();
				}
			});
		}

	});

}

//function treeDxpConnections()
//{
//    console.log("test");
//    $.ajax({
//        type: "post",
//        traditional: true,
//        dataType: 'json',
//        url: "getTreeDataPiping",
//        cache: false,
//        data: {
//            treeId: 'MM_SOURCE_AVAILABLE_CONNECTION_TREE',
//        },
//        success: function (response) {
//
//            if (response != null && !jQuery.isEmptyObject(response))
//            {
//                //  $("#descSplitterContainerHeader").html("");
//                treeDxpConnections1(response, 'ivisualizationConnections');
//
//            }
//            $("#visualConnectionLi").removeClass('Vtabactive');
//            $("#treeDxpConnectionLi").addClass('Vtabactive');
//
//
//
//        },
//        error: function (e) {
//            console.log(e);
//            sessionTimeout(e);
//            stopLoader();
//        }
//    });
//}
function showVisualizationConnection() {

	$("#visualConnectionLi").addClass('Vtabactive');
	$("#treeDxpConnectionLi").removeClass('Vtabactive');
	$("#columnsMainDivwrapperID").css("display", "block");
	//    $("#ivisualizationConnections").css("display", "none");
	$("#ivisualizationConnectionsMain").css("display", "none");
	$("#visionVisualizationDataSourcesId").css("display", "block");

}
function connectIvisualizeDatabase(type, typeName) {
	//    var selectedDbType = $('#selectedTypeName').val();
	//    var ConnectionEtlType = $('#selectedType').val();
	var EtlconName = $('#DbEtlConnectionName').val();
	if (EtlconName != null && EtlconName != '') {
		EtlconName = $.trim(EtlconName);
	}
	var EtlhostName = $('#DbEtlHostName').val();
	if (EtlhostName != null && EtlhostName != '') {
		EtlhostName = $.trim(EtlhostName);
	}
	var Etlport = $('#DbEtlPort').val();
	if (Etlport != null && Etlport != '') {
		Etlport = $.trim(Etlport);
	}
	var EtluserName = $('#DbEtlUserName').val();
	if (EtluserName != null && EtluserName != '') {
		EtluserName = $.trim(EtluserName);
	}
	var Etlpassword = $('#DbEtlPassword').val();
	if (Etlpassword != null && Etlpassword != '') {
		Etlpassword = $.trim(Etlpassword);
	}
	var EtlserviceName = $('#DbEtlServiceName').val();
	if (EtlserviceName != null && EtlserviceName != '') {
		EtlserviceName = $.trim(EtlserviceName);
	}
	// var EtlcheckedVal = $('#EtlcheckBoxChecked').is(':checked');
	var EtlauditId = $('#EtlauditId').val();
	if (EtlauditId != null && EtlauditId != '') {
		EtlauditId = $.trim(EtlauditId);
	}
	if (!EtlconName) {
		$('#DbEtlConnectionNameError').html("Please enter Connection Name");
	}
	if (!EtlhostName) {
		$('#DbEtlHostNameError').html("Please enter Host Name");
	}
	if (!Etlport) {
		$('#DbEtlPortError').html("Please enter Port No");
	}
	if (!EtluserName) {
		$('#DbEtlUserNameError').html("Please enter Username");
	}
	if (!Etlpassword) {
		$('#DbEtlPasswordError').html("Please enter Password");
	}
	if (!EtlserviceName) {
		$('#DbEtlServiceNameError').html("Please enter Service Name");
	} else {

		$('.dataMigrationInputError').hide();
		$('.visionDataMigrationError').hide();

		connectIvisualizeDatabaseProcess(EtlconName, EtlhostName, Etlport, EtluserName, Etlpassword, EtlserviceName, typeName, EtlauditId, type);
	}
}
function connectIvisualizeDatabaseProcess(EtlconName, EtlhostName, Etlport, EtluserName, Etlpassword, EtlserviceName, typeName, EtlauditId, type) {
	$('#visionShowConnectionMsg').hide();
	showLoader();
	$.ajax({
		type: 'post',
		traditional: true,
		dataType: 'html',
		cache: false,
		url: 'getConnectionDetails',
		async: true,
		data: {
			connectionName: EtlconName,
			hostName: EtlhostName,
			port: Etlport,
			userName: EtluserName,
			password: Etlpassword,
			serviceName: EtlserviceName,
			checkedVal: true,
			selectedItemLabel: typeName,
			auditId: EtlauditId,
			ConnectionType: type,
			EtlFlag: 'Y'

		},
		success: function(response) {
			stopLoader();
			if (response != null) {
				var result = JSON.parse(response);
				var messageFlag = result['messageFlag'];
				if (messageFlag) {
					$('#visionShowConnectionMsg').show();
					$('#visionShowConnectionMsg').html('<p style="color:green">' + result['connectionMessage'] + '</p>');
					//uttej ava conn code
					//                    $("#dialog").html("");
					//                    showEtlList('savedConnectionsIconsDiv', 'availableConnections');
					//                    if (savedDBData==null || jQuery.isEmptyObject(savedDBData)){
					var connObj = {}
					connObj['CONNECTION_NAME'] = EtlconName;
					connObj['CONN_CUST_COL1'] = typeName;
					connObj['CONN_DB_NAME'] = EtlserviceName;
					connObj['CONN_PASSWORD'] = Etlpassword;
					connObj['CONN_PORT'] = Etlport;
					connObj['CONN_USER_NAME'] = EtluserName;
					connObj['HOST_NAME'] = EtlhostName;
					savedDBData[EtlconName] = connObj;
					//                    }

					getSelectedDbTables('TABLES', EtlconName, typeName, type);
					showEtlList('savedConnectionsIconsDiv', 'availableConnections');
					$("#dialog").dialog({});
					$("#dialog").html("");
					//                    $("#dialog").dialog("close");
					$("#dialog").dialog("distroy");


				} else {
					// showMessagePopup(result['connectionMessage']);
					$('#visionShowConnectionMsg').show();
					$('#visionShowConnectionMsg').html('<p style="color:red">' + result['connectionMessage'] + '</p>');
				}
				// files expand ravi start
				if (typeName != null) {
					var treeItemElement = globalFileTreeItem[typeName];
					if (treeItemElement != null) {
						var $element = $(treeItemElement);
						var children = $element.find('ul:first').children();
						if (children != null && children.length > 0) {
							$.each(children, function(index) {
								$('#savedConnections').jqxTree('removeItem', this)
							})
							$('#savedConnections').jqxTree('addTo', { label: 'dummy', value: "ajax" }, treeItemElement);
							$('#savedConnections').jqxTree('collapseItem', treeItemElement);
							$('#savedConnections').jqxTree('expandItem', treeItemElement);
						}
					}
				}
			}
		},
		error: function(e) {
			sessionTimeout(e);
		}

	});
}
function getGridData(Columnname, filterString, chartId, filterCondition) {
	showLoader();
	var paramArray = [];
	var filtercolumn = {};
	var paramObj = {};
	if (filterString != null && filterString != '') {

		paramObj.column = Columnname;
		paramObj.operator = 'IN';
		paramObj.value = "" + filterString + "";
		paramArray.push(paramObj);
	}
	if (filterCondition != null && filterCondition != '') {
		filtercolumn = JSON.parse(filterCondition);
		if (filtercolumn != null && filtercolumn != '' && filtercolumn.length > 0) {
			$.each(filtercolumn, function(key, value) {
				var filterobj = {};
				filterobj.column = value.colName;
				filterobj.operator = value.operator;
				filterobj.value = value.values;
				paramArray.push(filterobj);
			})
		}
	}
	var data = {};
	data['chartId'] = chartId;
	data['paramArray'] = JSON.stringify(paramArray);

	$.ajax({
		type: "post",
		traditional: true,
		dataType: 'json',
		url: 'getAnalyticsMetaData',
		cache: false,
		data: data,

		success: function(response) {
			stopLoader();
			if (response != null) {

				var gridId = response['gridId'];
				if (gridId != null && gridId != '' && gridId != undefined) {
					var gridObj = response['gridObj'];
					$("#dialog").html("<div id = '" + gridId + "' class = 'ivisualizationGridDataDivClass'></div>");
					$("#dialog").dialog({
						title: 'Chart Data',
						modal: true,
						width: 1200,
						height: 600,
						fluid: true,
						buttons: [{
							text: (labelObject['Close'] != null ? labelObject['Close'] : 'Close'),
							click: function() {
								$(this).dialog("close");
								$(this).dialog("destroy");
							}

						}
						],
						open: function(event, ui) {
						},
						beforeClose: function(event, ui) {
							$(".visionHeaderMain").css("z-index", "99999");
							$(".visionFooterMain").css("z-index", "99999");
						}
					});
					chartGridConfig(gridObj, 0, paramArray, gridId);
				} else {
					var dataFieldsArray = response['dataFieldsArray'];
					var columnsArray = response['columnsArray'];
					var tableId = "ivisualizationGridDataDiv";

					try {
						$("#" + tableId).jqxGrid("destroy");
						$("#" + tableId).remove();
					} catch (e) {
					}

					$("#dialog").html("<div id = '" + tableId + "' class = 'ivisualizationGridDataDivClass'></div>");
					$("#dialog").dialog({
						title: 'Chart Data',
						modal: true,
						width: 1400,
						height: 650,
						fluid: true,
						open: function(event, ui) {
							setTimeout(function() {
								var source =
								{
									type: 'POST',
									datatype: "json",
									datafields: dataFieldsArray,
									data: data,
									url: 'getAnalyticsObjectData',
									cache: false,
									root: 'Rows',
									processdata: function(data) {
										showLoader();
										data['getOnlyDataArray'] = 'Y';

									},
									beforeSend: function() {
										//showLoader();

									}, loadError: function(xhr, status, error) {
										stopLoader();
									}, loadComplete: function(data) {
										stopLoader();
									},
									beforeprocessing: function(data) {
										source.totalrecords = data[data.length - 1];
									},
									sort: function() {
										$("[id='" + tableId + "']").jqxGrid('updatebounddata', 'sort');
										try {
											$("[id='" + tableId + "']").jqxGrid('clearselection');
										} catch (e) {
										}

									},
									filter: function() {

										$("[id='" + tableId + "']").jqxGrid('updatebounddata', 'filter');
										try {
											$("[id='" + tableId + "']").jqxGrid('clearselection');
										} catch (e) {
										}

									}
								};

								var dataAdapter = new $.jqx.dataAdapter(source);



								$("[id='" + tableId + "']").jqxGrid(
									{
										width: "100%",
										height: "90%",
										theme: 'energyblue',
										autoshowloadelement: false,
										source: dataAdapter,
										pageable: true,
										pagesize: 50,
										showfilterrow: true,
										filterable: true,
										sortable: true,
										virtualmode: true,
										pagesizeoptions: ['50', '100', '500'],
										rendergridrows: function(params) {
											return params.data;
										},
										columnsresize: true,
										columns: columnsArray
									});
							}, 1000);
							$(".ui-dialog").css("z-index", "99999");
							$(".ui-dialog").addClass("showFIGridDataJqPopup");

						},
						beforeClose: function(event, ui) {
							$(".visionHeaderMain").css("z-index", "99999");
							$(".visionFooterMain").css("z-index", "99999");
						}
					});
				}

			}

		},
		error: function(e) {
			stopLoader();
			sessionTimeout(e);
		}

	});

}
function addHomechartFilterValues(colAppendId, id, label, divid, filterCount, chartType) {
	var count = 0;
	var data = {};
	data['count'] = count;
	data['id'] = id;
	data['label'] = label;
	data['divid'] = divid;
	data['filterCount'] = filterCount;
	data['chartType'] = chartType;

	$.ajax({
		url: 'fetchFiltersValues',
		type: "POST",
		data: data,
		dataType: 'json',
		traditional: true,
		cache: false,
		success: function(response) {
			stopLoader();
			$("#Loader").css("display", "none");
			$("body").css({ "pointer-events": "auto" });
			if (response != null && !jQuery.isEmptyObject(response)) {
				var result = response['result'];
				$("#" + colAppendId).append(result);
				var checkBoxList = response['checkBoxList'];
				$("#visionVisualizeChartFiltersFieldValuesId" + filterCount).jqxListBox({
					filterable: true,
					checkboxes: true,
					source: checkBoxList,
					theme: 'energyblue',
					displayMember: 'text',
					valueMember: 'value'
				});
			}

		}, error: function(e) {
			console.log("The Error Message is:::" + e.message);
			sessionTimeout(e);
		}
	});
}
function getfilterData(chartId, tableName, chartType, expandChartId) {
	$("#homepagecreatepopupId").remove();
	chartId = chartId;
	$.ajax({
		type: "post",
		traditional: true,
		dataType: 'json',
		url: "getfiletColumnData",
		cache: false,
		data: {
			id: chartId,
			type: chartType,
			tableName: tableName
		},
		success: function(response) {
			if (response != null && !jQuery.isEmptyObject(response)) {
				var result = response['result'];
				var Resultstr = response['Resultstr'];
				var filtercolumn = response['filtercolumn'];
				var count = 0;
				var filterDivId = "<div id='visionVisualizeChartFilters' class='visionVisualizeChartFiltersClass'>"
					+ "<div id='visionVisualizeChartFiltersField' class='visionVisualizeChartFiltersFieldClass'/>"
					+ "<span class='visionVisualizeChartFiltersFieldSpanClass'>Add Fields Here</span></div>"
					+ "<div id='visionVisualizeChartFiltersValues' class='visionVisualizeChartFiltersValuesClass'/></div>"
					+ "</div>";
                closeAllDialogsBoxes();
                $("#dialog").html(Resultstr);
				$("#dialog").dialog({
					title: (labelObject['Message'] != null ? labelObject['Message'] : 'Message'),
					width: 650,
					maxWidth: 650,
					height: 400,
					maxHeight: 1000,
					fluid: true,
					buttons: [{
						text: (labelObject['Apply'] != null ? labelObject['Apply'] : 'Apply'),
						click: function() {
							var filtersId = "visionVisualizeChartFiltersValues";
                                var filterConditions = [];
                                var filterArr = [];
                                $('#' + filtersId + ' div.visionVisualizeChartFiltersFieldDivClass').each(function (i, ele) {
//        var colName = $(this).children('div:nth-child(1)').children('div:nth-child(1)').find("span").text();
                                    var colName = $(this).children('div:nth-child(1)').children('div:nth-child(1)').find("input").val();
                                    var operator = $(this).children('div:nth-child(1)').children('div:nth-child(2)').find("select").val();
                                    var values = $(this).children('div:nth-child(2)').find('input[name="visionVisualizeChartFiltersValuesCheckName"]:checked').map(function () {
                                        return this.value;
                                    }).get().join(",");
                                    if (!(values != null && values != '' && values != undefined)) {
                                        var checkId = $(this).children('div:nth-child(2)');
                                        var checkValues = $("#" + checkId[0]['id']).jqxListBox('getCheckedItems');
                                        values = [];
                                        var items = checkValues;
                                        $.each(items, function (index) {
                                            var value = this.value;
                                            //If single value has mutiple commma separating replace them to create as single string and changing to orginal state 
                                            value = value.replace(/ /g, "#"); // Replace spaces with #
                                            value = value.replace(/,/g, "$"); // Replace commas with $
                                            values.push(value);
                                        });
                                        if (values != null && !jQuery.isEmptyObject(values)) {
                                            values = values.toString();
                                        }
                                    }
                                    var filterObj = {};
                                    filterObj['colName'] = colName;
                                    filterObj['operator'] = operator;
                                    filterObj['values'] = values;
                                    filterConditions.push(filterObj);
                                    alert("values");
                                });
                                if (filterConditions != null && !jQuery.isEmptyObject(filterConditions)) {
                                    filterConditions = JSON.stringify(filterConditions);
                                }
                                closeDialogBox("#dialog");
                                showupdateDataNTF(chartId, tableName, chartType, expandChartId, filterConditions);
							 
						}

					},
					{
						text: (labelObject['Cancel'] != null ? labelObject['Cancel'] : 'Cancel'),
						click: function() {
							$(this).html("");
							$(this).dialog("close");
							$(this).dialog("destroy");
							ajaxStop();
						}
					}],
					open: function() {
						$("#visualizeChartConfigFiltersData").append(filterDivId);
						$("#VisualizeBIFilterColumns").append(result);
						$(".VisionImageVisualizationTableClass").unbind().click(function() {
							$(this).parent().parent().find('ul').toggle();
							if ($(this).parent().parent().find('ul').is(":visible")) {

								$(this).css({ transform: "rotate(90deg)" });
							} else {
								$(this).css({ transform: "rotate(360deg)" });
							}
						});


						var tableNameId = "visionVisualizeChartTableToggleClass li";
						$('.' + tableNameId).draggable({//cube changes 
							revert: "invalid",
							helper: "clone"

						});

						$('[id^="visionVisualizeChartFiltersField"]').droppable({//filters field
							revert: "invalid",
							refreshPositions: true,
							cursor: 'move',
							drop: function(event, ui) {
								if ($("#" + this.id).is(':visible')) {
									var id = ui.draggable[0].id;
									var label = ui.draggable[0].innerText;
									if (id != null && id != '' && id != undefined) {
										id = id.replace("_" + label, "");
									}
									var divid = this.id;
									if (divid != null && divid != '' && divid != undefined) {
										var count = divid.split("_")[1];
										$("#Loader").css("display", "block");
										$("body").css({ "pointer-events": "auto" });
										var chartTargetType = chartDivObj["visionVisualizeChart" + count];
										if (!(chartTargetType != null && chartTargetType != '' && chartTargetType != undefined)) {
											chartTargetType = chartType;
										}
										addHomechartFilterValues('visionVisualizeChartFiltersValues', id, label, divid, filterCount, chartTargetType);
										filterCount++;
									}


								}
							}

						});
						$("#Loader").css("display", "none");
						$("body").css({ "pointer-events": "auto" });
						$(".visionVisualizationDragColumns").addClass('visionVisualizationDragFilterColumns');
						$("#dialog").addClass('filterPopUp');
						$(".ui-dialog").css("z-index", "99999"); //jaggu
					},
					beforeClose: function(event, ui) {

					}
				});
				$(".columnFilterationClass").unbind('keyup').keyup(function(event) {
					tableColumnsFilteration(event, $(this));
				});



			}
		},
		error: function(e) {
			console.log(e);
			sessionTimeout(e);
			stopLoader();
		}
	});


}
function deleteVisualizeChart(chartId, table, chartType, expandChartDivId) {
	$("#homepagecreatepopupId").remove();
	//    chartId = $(chartId).attr('id'); //jaggu charts
	$("#dialog").html("Are you sure you want to delete the Chart ??");
	$("#dialog").dialog({
		modal: true,
		title: (labelObject['Message'] != null ? labelObject['Message'] : 'Message'),
		height: 'auto',
		minHeight: 'auto',
		minWidth: 350,
		maxWidth: 'auto',
		fluid: true,
		buttons: [{
			text: (labelObject['Yes'] != null ? labelObject['Yes'] : 'Yes'),
			click: function() {
				$(this).html("");
				$(this).dialog("close");
				$(this).dialog("destroy");
				$.ajax({
					type: 'post',
					traditional: true,
					dataType: 'html',
					cache: false,
					url: 'deleteVisualizeChart',
					async: true,
					data: {
						chartId: chartId,
						tableName: table,
						chartType: chartType
					},
					success: function(response) {
						if (response != null) {
							$("#dialog").html(response);
							$("#dialog").dialog({
								title: (labelObject['Message'] != null ? labelObject['Message'] : 'Message'),
								modal: true,
								width: 300,
								height: 135,
								fluid: true,
								buttons: [{
									text: (labelObject['Ok'] != null ? labelObject['Ok'] : 'Ok'),
									click: function() {
										//  var divId = chartId +"_Chart";
										var parentId = $("#" + chartId).parent().parent().attr('id');
										$("#" + parentId).remove();
										$("#homepageChartDialog").empty();
										$("#" + expandChartDivId).remove();
										fetchchartGrid();
										$(this).html("");
										$(this).dialog("close");
										$(this).dialog("destroy");
										//                                                 parent.document.getElementById("myFrame").reload();

									}

								}],
								open: function() {
									$(this).closest(".ui-dialog").find(".ui-button").eq(1).addClass("dialogyes");
									$(".visionHeaderMain").css("z-index", "999");
									$(".visionFooterMain").css("z-index", "999");

								},
								beforeClose: function(event, ui) {
									$(".visionHeaderMain").css("z-index", "99999");
									$(".visionFooterMain").css("z-index", "99999");
								}
							});
						}
					},
					error: function(e) {
						sessionTimeout(e);
					}
				});

			}
		},
		{
			text: (labelObject['No'] != null ? labelObject['No'] : 'No'),
			click: function() {
				$(this).html("");
				$(this).dialog("close");


			}
		}
		],
		open: function() {
			$(this).closest(".ui-dialog").find(".ui-button").eq(1).addClass("dialogyes");
			$(this).closest(".ui-dialog").find(".ui-button").eq(2).addClass("dialogno");
			$(this).closest(".ui-dialog").addClass("visionCommonDialog");
			$(".visionCommonDialog").css("z-index", "99999");
			$(".visionHeaderMain").css("z-index", "999");
			$(".visionFooterMain").css("z-index", "999");
		},
		beforeClose: function(event, ui) {
			$(".visionHeaderMain").css("z-index", "99999");
			$(".visionFooterMain").css("z-index", "99999");

		}
	});


}
function fetchchartGrid() {
	$("#homepagecreatepopupId").remove();
	var selectedIndex = $("#deletechart").val();
	ajaxStart();
	console.log("selectedTabIndex::" + selectedIndex);
	if (selectedIndex != null) {
		//  alert("::::"+selectedIndex);
		var gridIdStr = $("#gridIdStr").val();
		var gridIdArry = gridIdStr.split(",");
		console.log(gridIdStr + "::::" + gridIdArry);
		for (var i = 0; i < gridIdArry.length; i++) {
			//MM_PENDING_REQ_REG_MGR_FILTER_FORM
			$("#" + gridIdArry[i] + "_FILTER_FORM").html("");
		}
		console.log(gridIdStr + "::::" + gridIdArry);
		var compTypeStr = $("#compTypeStr").val();
		var compTypeArray = compTypeStr.split(",");
		var selectedGridCompType = compTypeArray[selectedIndex];
		var selectedGridId = gridIdArry[selectedIndex];
		$('#exportGridId').val(selectedGridId);
		if (selectedGridId != null && selectedGridId != '') {

			$('#' + selectedGridId).off('cellclick');
			alert("selectedGridId:::" + selectedGridId);
			$.ajax({
				type: "post",
				traditional: true,
				dataType: 'json',
				url: "getTabDataByGridId",
				cache: false,
				data: {
					gridId: selectedGridId,
					selectedGridCompType: selectedGridCompType,

				},
				success: function(response) {
					//  alert("selectedGridId:::" + JSON.stringify(response));
					//                                    chartGridConfig(response, selectedIndex);
					if (selectedGridCompType != null && selectedGridCompType == 'DASHBORD') {
						getVisualizationchart(selectedGridId, selectedGridCompType);
					}

				},
				error: function(e) {
					sessionTimeout(e);
				}// Error function in Ajax
			}); // end ajax call
		}// end if(selectedGridId != null && selectedGridId != '')
	}// end if (selectedIndex != null)

}// end function fetchTabGrid(selectedIndex)
function expandChart(chartType, layout, data, chartId, createcount, table, axix, chartLabels, filterCondition) { //jaggu
	$("#homepagecreatepopupId").remove();
	 var expandChartDivId ='homepageChartDiv';
	var expandLayout = layout;
	var icon = {
		'height': 36,
		'width': 36,
		'path': 'M14.5,35.4c-0.3,0-0.7-0.1-1-0.3c-0.4-0.3-0.7-0.8-0.7-1.3V17.7c0-0.5-0.2-1-0.6-1.4L0.7,4.7   C0,4-0.2,3,0.2,2.1c0.4-0.9,1.2-1.5,2.2-1.5h31.2c1,0,1.9,0.6,2.2,1.5C36.2,3,36,4,35.3,4.7L23.7,16.3c-0.4,0.4-0.6,0.9-0.6,1.4   v13.7c0,0.7-0.4,1.3-1.1,1.5l-7,2.3C14.8,35.4,14.7,35.4,14.5,35.4z M2.4,1.9c-0.5,0-0.9,0.3-1.1,0.7C1.2,3,1.3,3.5,1.6,3.8   l11.6,11.6c0.6,0.6,0.9,1.4,0.9,2.3v16.1c0,0.2,0.1,0.3,0.2,0.3c0.1,0,0.2,0.1,0.3,0.1l7-2.3c0.2-0.1,0.3-0.2,0.3-0.4V17.7   c0-0.9,0.3-1.7,0.9-2.3L34.4,3.8c0.3-0.3,0.4-0.8,0.2-1.3c-0.2-0.4-0.6-0.7-1.1-0.7H2.4z',
		'color': 'rgb(31,119,180)'
	};
	var icon1 = {
		'width': 1000,
		'path': 'm922 660c-5 4-9 7-14 11-359 263-580-31-580-31l-102 28 58-400c0 1 1 1 2 2 118 108 351 249 351 249s-62 27-100 42c88 83 222 183 347 122 16-8 30-17 44-27-2 1-4 2-6 4z m36-329c0 0 64 229-88 296-62 27-124 14-175-11 157-78 225-208 249-266 8-19 11-31 11-31 2 5 6 15 11 32-5-13-8-20-8-20z m-775-239c70-31 117-50 198-32-121 80-199 346-199 346l-96-15-58-12c0 0 55-226 155-287z m603 133l-317-139c0 0 4-4 19-14 7-5 24-15 24-15s-177-147-389 4c235-287 536-112 536-112l31-22 100 299-4-1z m-298-153c6-4 14-9 24-15 0 0-17 10-24 15z" transform="matrix(1 0 0 -1 0 850)"',
		'ascent': 850,
		'descent': -150,
		'color': 'rgb(31,119,180)'
	};
	var deleteicon = {
		'height': 512,
		'width': 448,
		'path': 'M135.2 17.69C140.6 6.848 151.7 0 163.8 0H284.2C296.3 0 307.4 6.848 312.8 17.69L320 32H416C433.7 32 448 46.33 448 64C448 81.67 433.7 96 416 96H32C14.33 96 0 81.67 0 64C0 46.33 14.33 32 32 32H128L135.2 17.69zM31.1 128H416V448C416 483.3 387.3 512 352 512H95.1C60.65 512 31.1 483.3 31.1 448V128zM111.1 208V432C111.1 440.8 119.2 448 127.1 448C136.8 448 143.1 440.8 143.1 432V208C143.1 199.2 136.8 192 127.1 192C119.2 192 111.1 199.2 111.1 208zM207.1 208V432C207.1 440.8 215.2 448 223.1 448C232.8 448 240 440.8 240 432V208C240 199.2 232.8 192 223.1 192C215.2 192 207.1 199.2 207.1 208zM304 208V432C304 440.8 311.2 448 320 448C328.8 448 336 440.8 336 432V208C336 199.2 328.8 192 320 192C311.2 192 304 199.2 304 208z',
		'color': 'rgb(31,119,180)'
	};


	var EditIcon = {
		'height': 512,
		'width': 512,
		'id': chartId,
		'path': 'M490.3 40.4C512.2 62.27 512.2 97.73 490.3 119.6L460.3 149.7L362.3 51.72L392.4 21.66C414.3-.2135 449.7-.2135 471.6 21.66L490.3 40.4zM172.4 241.7L339.7 74.34L437.7 172.3L270.3 339.6C264.2 345.8 256.7 350.4 248.4 353.2L159.6 382.8C150.1 385.6 141.5 383.4 135 376.1C128.6 370.5 126.4 361 129.2 352.4L158.8 263.6C161.6 255.3 166.2 247.8 172.4 241.7V241.7zM192 63.1C209.7 63.1 224 78.33 224 95.1C224 113.7 209.7 127.1 192 127.1H96C78.33 127.1 64 142.3 64 159.1V416C64 433.7 78.33 448 96 448H352C369.7 448 384 433.7 384 416V319.1C384 302.3 398.3 287.1 416 287.1C433.7 287.1 448 302.3 448 319.1V416C448 469 405 512 352 512H96C42.98 512 0 469 0 416V159.1C0 106.1 42.98 63.1 96 63.1H192z',
		'color': 'rgb(31,119,180)'
	};
	var chartExpandId = chartId;
	var config = {
		responsive: true,
		displayModeBar: true,
		downloadImage: true,
		displaylogo: false,
		modeBarButtonsToAdd: [
			{
				name: 'Data', icon: icon1, click: function() {
					getGridData(axix, "", chartExpandId, filterCondition);
				}
			}, {
				name: 'filterColumn', icon: icon, click: function() {
					getfilterData(chartExpandId, table, chartType, 'homepageChartDiv');
				}
			}, {
				name: 'Delete', icon: deleteicon, click: function() {
					deleteVisualizeChart(chartExpandId, table, chartType, expandChartDivId);
				}
			}, {
				name: 'Edit', icon: EditIcon, click: function() {
					homePageChartSetting(chartExpandId, chartType, expandLayout, data, createcount, event, 'homepageChartDiv');
				}
			}],
		//                     modeBarButtonsToRemove: ['lasso2d']
		//                    
		modeBarButtonsToRemove: ['pan2d', 'zoomIn2d', 'zoomOut2d', 'sendDataToCloud', 'hoverClosestCartesian', 'autoScale2d', 'lasso2d', 'select2d', 'zoom2d']
	};

	//    var config = {
	//        responsive: true,
	//        displayModeBar: true,
	//        downloadImage: true,
	//        displaylogo: false,
	//        modeBarButtonsToRemove: ['pan2d', 'zoomIn2d', 'zoomOut2d', 'sendDataToCloud', 'hoverClosestCartesian', 'autoScale2d', 'lasso2d', 'select2d', 'zoom2d']
	//    };
	var height = expandLayout['height'];
	var width = expandLayout['width'];
	var margin = expandLayout['margin'];
	expandLayout['height'] = 500;
	expandLayout['width'] = 1100;
	expandLayout['legend'] = {
		x: 0.2,
		y: -0.1,
		orientation: "h"
	};

	if (chartType != null && chartType != '' && chartType != undefined && (chartType == 'pie' || chartType == 'donut' || chartType == 'scatterpolar')) {
		expandLayout['margin'] = {
			l: 0,
			r: 0,
			b: 30,
			t: 30
		};
	} else {
		expandLayout['margin'] = {
			l: 100,
			r: 20,
			b: 150,
			t: 30
		};
	}
	var xAxis = {
		tickfont: {
			size: 20
		}
	};
	var yAxis = {
		tickfont: {
			size: 20
		}
	};
	var titleObj = expandLayout['title'];
	if (titleObj != null && !jQuery.isEmptyObject(titleObj)) {
		var fontObj = {
			size: 40
		};
		titleObj['font'] = fontObj;
	}
	expandLayout['xaxis'] = xAxis;
	expandLayout['yaxis'] = yAxis;
	var chartDiv = "<div class='visionVisualizeHomePageExpandChart'>"
		+ "<div id='homepageChartDiv'></div>"
		+ "<input type='hidden' id='homepageChartDiv_options' value=''/>"
		+ "<input type='hidden' id='homepageChartDiv_filter' value=''/>"
		+ "</div>";
	var modalObj = {
		title: 'View Chart',
		body: chartDiv
	};
	var buttonArray = [
		{
			text: 'Ok',
			isCloseButton: true
		}
	];
	modalObj['buttons'] = buttonArray;
	createModal("homepageChartDialog", modalObj);
	$("#homepageChartDialog .modal-dialog").addClass('modal-xl extendedChartView');
	$("#homepageChartDiv").empty();
	Plotly.newPlot("homepageChartDiv", data, expandLayout, config);
	expandLayout['height'] = height;
	expandLayout['width'] = width;
	expandLayout['margin'] = margin;

	if (chartType != null && chartType != '' && chartType != undefined && (chartType == 'donut' || chartType == 'pie')) {
		var colors = [];
		colorsObj = data[0]['marker']['colors'];
		if (colorsObj != null && colorsObj != '' && colorsObj != undefined) {
			var colorobj;
			if (colorsObj.constructor === String) {
				colorobj = JSON.parse(colorsObj);
			} else {
				colorobj = colorsObj;
			}

			if (colorobj != null && !jQuery.isEmptyObject(colorobj)) {
				colors = colorobj;
			} else {
				colors = ['#2F6345', '#40875E', '#58B07E', '#C48C00', '#F0AB00', '#FFBE1D', '#FFCC4B', '#827E32', '#A8A240', '#C5C169'];
			}
		} else {
			colors = ['#2F6345', '#40875E', '#58B07E', '#C48C00', '#F0AB00', '#FFBE1D', '#FFCC4B', '#827E32', '#A8A240', '#C5C169'];
		}
		positionChartLegend(chartType, "homepageChartDiv", colors, chartLabels, data, layout, config);
	} else {
		$("#" + chartId + "_legends").remove();
	}
}
function create(chartId, count, event) {
	$('.createpopupClass').hide();
	var ids = $("#homepagecreatepopupId" + count);
	var popid = ids.selector;
	$.ajax({
		type: "POST",
		url: "create",
		cache: false,
		dataType: 'html',
		data: {
		},
		success: function(response) {
			var name = {};
			$(popid).show();
			$(popid).html(response);
		},
		error: function(e) {
			console.log(e);
			sessionTimeout(e);
			stopLoader();
		}
	});

	//$("#homepagecreatepopupId").append("<div id='createpopupId' class='createpopupClass'>Single</div>"); 

}
function updateFilterData(id, tableName, chartType, expandChartId) { //jaggu charts
	var chartId = id;
	var filtersId = "visionVisualizeChartFiltersValues";
	var filterConditions = [];
	var filterArr = [];
	$('#' + filtersId + ' div.visionVisualizeChartFiltersFieldDivClass').each(function(i, ele) {
		//        var colName = $(this).children('div:nth-child(1)').children('div:nth-child(1)').find("span").text();
		var colName = $(this).children('div:nth-child(1)').children('div:nth-child(1)').find("input").val();
		var operator = $(this).children('div:nth-child(1)').children('div:nth-child(2)').find("select").val();
		var values = $(this).children('div:nth-child(2)').find('input[name="visionVisualizeChartFiltersValuesCheckName"]:checked').map(function() {
			return this.value;
		}).get().join(",");
		if (!(values != null && values != '' && values != undefined)) {
			var checkId = $(this).children('div:nth-child(2)');
			var checkValues = $("#" + checkId[0]['id']).jqxListBox('getCheckedItems');
			values = [];
			$.each(checkValues, function(index) {
				values.push(this.value);
			});
			if (values != null && !jQuery.isEmptyObject(values)) {
				values = values.toString();
			}
		}
		var filterObj = {};
		filterObj['colName'] = colName;
		filterObj['operator'] = operator;
		filterObj['values'] = values;
		filterConditions.push(filterObj);
		alert("values");
	});
	if (filterConditions != null && !jQuery.isEmptyObject(filterConditions)) {
		filterConditions = JSON.stringify(filterConditions);
	}

	$.ajax({
		type: 'post',
		traditional: true,
		dataType: 'html',
		cache: false,
		url: 'getChartFilterData',
		async: true,
		data: {
			chartId: chartId,
			tableName: tableName,
			chartType: chartType,
		},
		success: function(response) {
			if (response != null && !jQuery.isEmptyObject(response)) {
				var result = JSON.parse(response);
				var dataarr = result['dataarr'];
				if (dataarr != null && dataarr != '' && dataarr != undefined) {
					var count = 0;
					for (var i = 0; i < dataarr.length; i++) {
						var XAxix = dataarr[i]['xAxix'];
						var yAxix = dataarr[i]['yAxix'];
						var type = dataarr[i]['type'];
						var table = dataarr[i]['table'];
						var id = dataarr[i]['chartid'];
						var Lebel = dataarr[i]['Lebel'];
						var aggColumnName = dataarr[i]['aggColumnName'];
						var chartPropObj = dataarr[i]['chartPropObj'];
						var chartConfigObj = dataarr[i]['chartConfigObj'];
						var labelLegend = dataarr[i]['labelLegend'];
						if (XAxix != null && XAxix != '' && yAxix != null && yAxix != '' && type != 'Card') {
							var chartid = id;
							if (expandChartId != null && expandChartId != '' && expandChartId != undefined) {
								var chartExtendPropObj = $("#homepageChartDiv_options").val();
								if (chartExtendPropObj != null && chartExtendPropObj != '' && chartExtendPropObj != undefined) {
									chartPropObj = chartExtendPropObj;
								}
								$("#homepageChartDiv_filter").val(filterConditions);
								getExpandVisualizeChart(chartid, chartType, XAxix, yAxix, table, aggColumnName, filterConditions, chartPropObj, chartConfigObj, count, '', expandChartId);
							} else {
								var chartExtendPropObj = $("#" + chartid + "_options").val();
								if (chartExtendPropObj != null && chartExtendPropObj != '' && chartExtendPropObj != undefined) {
									chartPropObj = chartExtendPropObj;
								}
								$("#" + chartid + "_filter").val(filterConditions);
								getVisualizeChart(chartid, type, XAxix, yAxix, table, aggColumnName, filterConditions, chartPropObj, chartConfigObj, count, labelLegend);
							}

						}

					}
				}


			}
		},
		error: function(e) {
			sessionTimeout(e);
		}
	});


}

function homePageChartSetting(id, chartType, layout, data, createcount, event, expandChartId, chartConfigToggleStatus) { //jaggu
	//    $('.chartDialogClass').html("");
	var chartOptAllObj = {};
	var chartConfigPositionKeyObj = {};
	var filteredchartOptAllObj = {};
	var upperChartType = chartType.toUpperCase();
	var chartConfigDialogBoxId = 'dialogBoxFor' + id;
	$("#homepagecreatepopupId").remove();
	var ids = $("#chartDialog" + createcount);
	var chartFilterParams;
	var chartid = $(id).attr('id');
	if (!(chartid != null && chartid != '' && chartid != undefined)) {
		chartid = id;
	}
	$.ajax({
		type: "POST",
		url: 'dashboardSetting',
		cache: false,
		dataType: 'json',
		data: {
			type: chartType,
			id: chartid
		},
		success: function(response) {
			chartFilterConfigObj = response['jsonChartFilterObj'];
			var chartfilterData = response['filtercolumn'];
			var dataarr = chartfilterData['dataarr'];
			if (dataarr !== null && !jQuery.isEmptyObject(dataarr)) {
				var axix = dataarr[0]['xAxix'];
				var values = dataarr[0]['yAxix'];
				var type = dataarr[0]['type'];
				var table = dataarr[0]['table'];
				var id = dataarr[0]['chartid'];
				var Lebel = dataarr[0]['Lebel'];
				var aggColumnName = dataarr[0]['aggColumnName'];
				var filterColumns = dataarr[0]['filterCondition'];
				var configData = dataarr[0]['chartPropObj'];
				var chartPositionObject = dataarr[0]['chartConfigObj'];
				var labelLegend = dataarr[0]['labelLegend'];
				var colorsObj = dataarr[0]['colorsObj'];
				var chartConfigToggleStatus = dataarr[0]['chartConfigToggleStatus'];
				var homeFilterColumn = dataarr[0]['homeFilterColumn'];
				var fetchQuery = dataarr[0]['fetchQuery'];
				var radioButtons = dataarr[0]['radioButtons'];
				var comboValue = dataarr[0]['comboValue'];
				var currencyConversionStrObject = dataarr[0]['currencyConversionStrObject'];
                chartFilterParams = filterColumns;
				var configobj = JSON.parse(configData);
				closeAllDialogsBoxes(); 
				var homepageCurrentChartConfigPropLength = $('#' + chartConfigDialogBoxId).children().length;
				if (homepageCurrentChartConfigPropLength <= 0) {
					var chartConfigProps = "<div id= 'visionChartProperties' class='visionChartPropConfigClass' data-chartType='" + chartType + "'>" + chartFilterConfigObj[chartType] + "</div>";
					$("#" + chartConfigDialogBoxId).remove();
					$(".chartDialogClass").remove();
					var dialogBoxForChartConfig = "<div class=\"chartDialogClass\" id =\"" + chartConfigDialogBoxId + "\"></div>";
					$("body").append(dialogBoxForChartConfig);
					$("#" + chartConfigDialogBoxId).html(chartConfigProps);

				}
				$.each(configobj, function(key, value) {
					if (key !== null && key !== '' && key !== undefined) {
						$('#' + key).val(value);
					}
				});
				if (chartConfigToggleStatus !== null && chartConfigToggleStatus !== '' && chartConfigToggleStatus !== undefined) {
					var chartConfigToggleStatusObj = JSON.parse(chartConfigToggleStatus);
					$.each(chartConfigToggleStatusObj, function(key, value) {
						if (!value) {
							$('#' + key).parent().find('.toggle-btn').removeClass('active');
							$('#' + key).parent().find('.on-off-text').text('off');
							if (key === upperChartType + 'HOVERLABEL') {
								$('#' + upperChartType + "HOVERLABELDATA").attr('disabled', true);
							}
						}
					});
				}
				$("#" + chartConfigDialogBoxId).dialog({
					title: (labelObject['Upload'] != null ? labelObject['Upload'] : 'Upload'),
					width: 300,
					height: 350,
					fluid: true,
					buttons: [{
						text: (labelObject['Apply'] != null ? labelObject['Apply'] : 'Apply'),
						click: function() {
							if (filteredchartOptAllObj != null && filteredchartOptAllObj != '') {
								//							var dataobj = chartFilterConfigObj['filtercolumn'];
								//							var chartparam = dataobj['dataarr'];
								//							var axix = chartparam[0].xAxix;
								//							var values = chartparam[0].yAxix;
								//							var table = chartparam[0].table;
								//							var filterColumns = chartparam[0].filterColumns;
								//							var aggColumnName = chartparam[0].aggregateType;
								if (chartOptAllObj === null || $.isEmptyObject(chartOptAllObj) ||
									filteredchartOptAllObj === null || $.isEmptyObject(filteredchartOptAllObj)) {
									$("#visionChartProperties").trigger('change');
								}
								var chartPropObj = JSON.stringify(chartOptAllObj);
								var chartConfigObj = JSON.stringify(filteredchartOptAllObj);
								var chartConfigToggleStatusStr = JSON.stringify(chartConfigToggleStatus);

								// Homepage header filters
								var homepageFilterParamsObj = getHomepageFilterParamsArr(chartFilterParams, id);
								var mainFilterConditionsObj = homepageFilterParamsObj['mainFilterConditions'];
								if (!isNullOrUndefined(mainFilterConditionsObj) && !jQuery.isEmptyObject(mainFilterConditionsObj) && !$.isEmptyObject(mainFilterConditionsObj)) {
									filterColumns=mainFilterConditionsObj;
								}
								else{
								 filterColumns=[];	
								}

								if (expandChartId != null && expandChartId != '' && expandChartId != undefined) {
									var filterCondColumns = $("#homepageChartDiv_filter").val();
									if (filterColumns != null && !jQuery.isEmptyObject(filterColumns)) {
										if (filterCondColumns != null && filterCondColumns != '' && filterCondColumns != undefined) {
											filterCondColumns = JSON.parse(filterCondColumns);
											if (filterCondColumns != null && !jQuery.isEmptyObject(filterCondColumns)) {
												for (var key in filterCondColumns) {
													var paramObj = filterCondColumns[key];
													filterColumns.push(paramObj);
												}
											}
										}
									} else {
										if (filterCondColumns != null && filterCondColumns != '' && filterCondColumns != undefined) {
											filterColumns = filterCondColumns;
										}
									}
									$("#homepageChartDiv_options").val(chartPropObj);
									if(filterColumns !=null && !jQuery.isEmptyObject(filterColumns))
										{
											filterColumns =JSON.stringify(filterColumns);
										}
									getExpandVisualizeChart(expandChartId, chartType, axix, values, table, aggColumnName, filterColumns, chartPropObj, chartConfigObj, createcount, '', expandChartId,colorsObj);
								} else {
									//                                    var filterCondlumns = $("#" + chartid + "_filter").val();
									$("#" + chartid + "_options").val(chartPropObj);
									if(filterColumns !=null && !jQuery.isEmptyObject(filterColumns))
										{
											filterColumns =JSON.stringify(filterColumns);
										}
									getVisualizeChart(chartid, chartType, axix, values, table, aggColumnName, filterColumns, chartPropObj, chartConfigObj, createcount, labelLegend, colorsObj, comboValue, chartConfigToggleStatusStr, "", "", fetchQuery, radioButtons, currencyConversionStrObject);
								}
							}
							$(this).dialog("destroy");
							$("#" + chartConfigDialogBoxId).hide();
						}
					}, {
						text: (labelObject['Save'] != null ? labelObject['Save'] : 'Save'),

						click: function() {
							var filterCondlumns;
							if (filteredchartOptAllObj != null && filteredchartOptAllObj != '') {
								//							var dataobj = chartFilterConfigObj['filtercolumn'];
								//							var chartparam = dataobj['dataarr'];
								//							var axix = chartparam[0].xAxix;
								//							var values = chartparam[0].yAxix;
								//							var table = chartparam[0].table;
								//							var filterColumns = chartparam[0].filterColumns;
								//							var aggColumnName = chartparam[0].aggregateType;
								if (chartOptAllObj === null || $.isEmptyObject(chartOptAllObj) ||
									filteredchartOptAllObj === null || $.isEmptyObject(filteredchartOptAllObj)) {
									$("#visionChartProperties").trigger('change');
								}
								var chartPropObj = JSON.stringify(chartOptAllObj);
								var chartConfigObj = JSON.stringify(filteredchartOptAllObj);
								var chartConfigToggleStatusStr = JSON.stringify(chartConfigToggleStatus);

								// Homepage header filters
								var homepageFilterParamsObj = getHomepageFilterParamsArr(chartFilterParams, id);
								var mainFilterConditionsObj = homepageFilterParamsObj['mainFilterConditions'];
								if (!isNullOrUndefined(mainFilterConditionsObj) && !jQuery.isEmptyObject(mainFilterConditionsObj) && !$.isEmptyObject(mainFilterConditionsObj)) {
									filterColumns = mainFilterConditionsObj;
								}else{
								 filterColumns=[];	
								}

								if (expandChartId != null && expandChartId != '' && expandChartId != undefined) {  
									var filterCondColumns = $("#homepageChartDiv_filter").val();
									if (filterColumns != null && !jQuery.isEmptyObject(filterColumns)) {
										if (filterCondColumns != null && filterCondColumns != '' && filterCondColumns != undefined) {
											filterCondColumns = JSON.parse(filterCondColumns);
											if (filterCondColumns != null && !jQuery.isEmptyObject(filterCondColumns)) {
												for (var key in filterCondColumns) {
													var paramObj = filterCondColumns[key];
													filterColumns.push(paramObj);
												}
											}
										}
										if(filterColumns !=null && !jQuery.isEmptyObject(filterColumns))
										{
											filterColumns =JSON.stringify(filterColumns);
										}
									} else {
										if (filterCondColumns != null && filterCondColumns != '' && filterCondColumns != undefined) {
											filterColumns = filterCondColumns;
										}
									}
									$("#homepageChartDiv_options").val(chartPropObj);
									getExpandVisualizeChart(expandChartId, chartType, axix, values, table, aggColumnName, filterColumns, chartPropObj, chartConfigObj, createcount, '', expandChartId,colorsObj);
								} else {
                                    if(filterColumns !=null && !jQuery.isEmptyObject(filterColumns))
										{
											filterColumns =JSON.stringify(filterColumns);
										}
									$("#" + chartid + "_options").val(chartPropObj);
									getVisualizeChart(chartid, chartType, axix, values, table, aggColumnName, filterColumns, chartPropObj, chartConfigObj, createcount, labelLegend, colorsObj, comboValue, chartConfigToggleStatusStr, "", "", fetchQuery, radioButtons, currencyConversionStrObject);
								}
							}
							updatechartSetting(chartid, chartType, axix, values, table, aggColumnName, filterColumns, chartPropObj, chartConfigObj, chartConfigToggleStatusStr);
							$(this).dialog("destroy");
							$("#" + chartConfigDialogBoxId).hide();
						}
					}],
					open: function() {
						$(".ui-dialog").css("z-index", "99999"); //jaggu
					},
					beforeClose: function(event, ui) {  

					}

				});

			}
$(".filter-container").unbind('click').on('click', function(event) {
	$(this).parent().siblings(':last').toggle();
	$(this).find('img').toggleClass('open');
});
$(".toggle-btn").unbind('click').on('click', function(event) {
	$(this).toggleClass('active');
	var onOfftext = $(this).children(':first').text();
	if (onOfftext === 'off') {
		$(this).children(':first').text('on');
		$(this).parents('.main-container').siblings(':last').find('*').attr('disabled', false);
	} else {
		$(this).children(':first').text('off');
		$(this).parents('.main-container').siblings(':last').find('*').attr('disabled', true);
	}
	var isActive = $(this).hasClass('active');
	var currentToggleSelector = $(this).closest("li");
	var currentElementId = $(this).attr('id');
	var toBeToggledSelectors = currentToggleSelector.children("ul").children();
	if (isActive) {
		$.each(toBeToggledSelectors, function(index, element) {
			$(this).addClass('active-filter');
		});
		if (currentElementId !== '' && currentElementId !== null && currentElementId !== undefined) {
			if (currentElementId === 'toggleButtonForchartHover' + upperChartType) {
				$('#' + upperChartType + 'HOVERLABELDATA').attr('disabled', false);
				$('#' + upperChartType + 'HOVERLABELDATA').val('x+y');
			}
		}
	} else {
		$.each(toBeToggledSelectors, function(index, element) {
			$(this).removeClass('active-filter');
		});
		if (currentElementId !== '' && currentElementId !== null && currentElementId !== undefined) {
			if (currentElementId === 'toggleButtonForchartHover' + upperChartType) {
				$('#' + upperChartType + 'HOVERLABELDATA').attr('disabled', true);
				$('#' + upperChartType + 'HOVERLABELDATA').val('none');
			}
		}
	}
	$("#visionChartProperties").trigger('change');
});

$("#visionChartProperties").unbind('change').on('change', function(event) {
	chartOptAllObj = {};
	chartConfigPositionKeyObj = {};
	chartConfigToggleStatus = {};
	var errorMessageStr = "";
	var errorCount = 0;
	var chartConfigId = "visionChartProperties ul li";
	if(['BasicAreaChart','StackedAreaChart','GradStackAreaChart','AreaPiecesChart','ganttChart'].includes(type)){
			chartOptAllObj = getChartPropertiesEchart(type.toUpperCase(),count);
		}
		else{
	$('#' + chartConfigId).each(function(i, ele) {
		var optColName = $(this).attr("data-column-name");
		var optKeyType = $(this).attr("data-key-type");
		if (optKeyType != null && optKeyType != '' && optKeyType != undefined) {
			chartConfigPositionKeyObj[optColName] = optKeyType;
		}
		var optName = $("#" + optColName).attr("data-opt-name");
		var optMan = $("#" + optColName).attr("data-man");
		var inputType = $("#" + optColName).attr("type");
		var optValue = $("#" + optColName).val();
		if (inputType == 'checkbox') {
			if ($("#" + optColName).is(':checked')) {
				optValue = true;
			} else {
				optValue = false;
			}
		}
		if (inputType == 'number') { //nested
			if (optValue != null && optValue != '' && optValue >= 1) {
				optValue = parseInt(optValue);
			}
		}
		//                    var isChartHoverActive = $("#toggleButtonForchartHover" + upperChartType).hasClass('active');
		//                    if (!isChartHoverActive && optColName.includes('HOVERLABELDATA')) {
		//                        $("#" + optColName).val('none');
		//                        optValue = 'none';
		//                    } else if (optColName.includes('HOVERLABELDATA') && optValue === 'none') {
		//                        $("#" + optColName).val('x+y');
		//                        optValue = 'x+y';
		//                    }
		if (optColName.includes('HOVERLABELDATA')) {
			if (optValue !== '' && optValue !== null && optValue !== undefined) {
				if (optValue === 'none') {
					$("#toggleButtonForchartHover" + upperChartType).removeClass('active');
					$("#toggleButtonForchartHover" + upperChartType).find('.on-off-text').text('off');
				} else {
					$("#toggleButtonForchartHover" + upperChartType).addClass('active');
					$("#toggleButtonForchartHover" + upperChartType).find('.on-off-text').text('on');
				}
			}
		}
		var toggleBtnClasses = $(this).find('.toggle-btn').attr('class');
		if (toggleBtnClasses !== null && toggleBtnClasses !== '' && toggleBtnClasses !== undefined) {
			if (toggleBtnClasses.includes('active')) {
				chartConfigToggleStatus[optColName] = true;
			} else {
				chartConfigToggleStatus[optColName] = false;
			}
		}
		var isToggleActive = $(this).hasClass('active-filter');
		if (optValue != null && optValue != '' && isToggleActive) {
			chartOptAllObj[optColName] = optValue;
		} else if (optMan == 'M') {
			errorCount++;
			errorMessageStr += "<tr><td>  " + '<p class="visionGenericTabStatusDialog">' + " " + '<span style="color:blue;">' + " " + optName + "</span><b>:</b> Should not be null.</tr></td><br>";
		} else if (!isToggleActive && optColName.includes('SHOWLEGEND')) {
			chartOptAllObj[optColName] = false;
		}
	});
}
	$.each(chartConfigPositionKeyObj, function(key, value) {
		var newKey = key.replace(/[0-9]/g, '');
		filteredchartOptAllObj[newKey] = value;
	});
});
		},
error: function(e) {
	console.log(e);
	sessionTimeout(e);
	stopLoader();
}
	});


}

//function homePageChartSetting(id, chartType, layout, data) {
//var chartOptAllObj = {};
//var chartConfigPositionKeyObj = {};
//var filteredchartOptAllObj = {};
//    $('.createpopupClass').hide();
//    $("#homepagecreatepopupId").remove();
//    var chartid = $(id).attr('id');
//    var gd = document.getElementById(chartid);
//    var data = gd.data // => current dataa
////      stopLoader();
//    ajaxStop();
//    $.ajax({
//        type: "POST",
//        url: 'dashboardSetting',
//        cache: false,
//        dataType: 'json',
//        data: {
//        },
//        success: function (response) {
//            chartFilterConfigObj = response['jsonChartFilterObj'];
//
//            var chartConfigProps = "<div class='row'><div class='col-md-4'><div id= 'visionChartProperties' class='visionChartPropConfigClass' data-chartType='" + chartType + "'>" + chartFilterConfigObj[chartType] + "</div></div><div class='col-md-8'><div id='homepageChartDiv'></div></div></div>";
//            var name = {};
//            var config = {
//                responsive: true,
//                displayModeBar: true,
//                downloadImage: true,
//                displaylogo: false,
//                modeBarButtonsToRemove: ['pan2d', 'zoomIn2d', 'zoomOut2d', 'sendDataToCloud', 'hoverClosestCartesian', 'autoScale2d', 'lasso2d', 'select2d', 'zoom2d']
//            };
//            layout['height'] = 400;
////    layout['width'] = 400;
//            layout['legend'] = {
//                x: 0.75,
//                y: 0.5
//            };
//
//            if (chartType != null && chartType != '' && chartType != undefined && (chartType == 'pie' || chartType == 'donut' || chartType == 'scatterpolar')) {
//                layout['margin'] = {
//                    l: 0,
//                    b: 10,
//                    r: 10,
//                };
//            } else {
//                layout['margin'] = {
//                    l: 100,
//                    r: 20,
//                    b: 150,
//                    t: 30
//                };
//            }
//            $("#dialog").html(chartConfigProps);
//            $("#dialog").dialog({
//                title: (labelObject['Upload'] != null ? labelObject['Upload'] : 'Upload'),
//                width: 1000,
//                height: 550,
//                fluid: true,
//                buttons: [{
//                        text: (labelObject['Apply'] != null ? labelObject['Apply'] : 'Apply'),
//                        click: function () {
//                            updatechartCinfig(chartid,chartOptAllObj,filteredchartOptAllObj);
//                            $("#dialog").empty();
//                            $("#dialog").dialog('close');
//
//                        }
//                    },
//                    {
//                        text: (labelObject['Cancel'] != null ? labelObject['Cancel'] : 'Cancel'),
//                        click: function () {
//                            $("#dialog").empty();
//                            $("#dialog").dialog('close');
//
//                        }
//                    }],
//                open: function () {
//
//                },
//                beforeClose: function (event, ui)
//                {
//
//                }
//
//            });
//            $("#dialog").addClass("homePageChartEdits");
//            Plotly.newPlot("homepageChartDiv", data, layout, config);
//
//            $(".filter-container").unbind('click').on('click', function (event) {
//                $(this).parent().siblings(':last').toggle();
//                $(this).find('img').toggleClass('open');
//            });
//            $(".toggle-btn").unbind('click').on('click', function (event) {
//                $(this).toggleClass('active');
//                var onOfftext = $(this).children(':first').text();
//                if (onOfftext === 'off') {
//                    $(this).children(':first').text('on');
//                    $(this).parents('.main-container').siblings(':last').find('*').attr('disabled', false);
//                } else {
//                    $(this).children(':first').text('off');
//                    $(this).parents('.main-container').siblings(':last').find('*').attr('disabled', true);
//                }
//            });
//
//            $("#visionChartProperties").unbind('change').on('change', function (event)
//            {
//                
//                var errorMessageStr = "";
//                var errorCount = 0;
//                var chartConfigId = "visionChartProperties ul li";
//                $('#' + chartConfigId).each(function (i, ele) {
//                    var optColName = $(this).attr("data-column-name");
//                    var optKeyType = $(this).attr("data-key-type");
//                    if (optKeyType != null && optKeyType != '' && optKeyType != undefined) {
//                        chartConfigPositionKeyObj[optColName] = optKeyType;
//                    }
//                    var optName = $("#" + optColName).attr("data-opt-name");
//                    var optMan = $("#" + optColName).attr("data-man");
//                    var inputType = $("#" + optColName).attr("type");
//                    var optValue = $("#" + optColName).val();
//                    if (inputType == 'checkbox') {
//                        if ($("#" + optColName).is(':checked')) {
//                            optValue = true;
//                        } else {
//                            optValue = false;
//                        }
//                    }
//                    if (inputType == 'number') { //nested
//                        if (optValue != null && optValue != '' && optValue >= 1) {
//                            optValue = parseInt(optValue);
//                        }
//                    }
//
//                    if (optValue != null && optValue != '') {
//                        chartOptAllObj[optColName] = optValue;
//                    } else if (optMan == 'M') {
//                        errorCount++;
//                        errorMessageStr += "<tr><td>  " + '<p class="visionGenericTabStatusDialog">' + " " + '<span style="color:blue;">' + " " + optName + "</span><b>:</b> Should not be null.</tr></td><br>";
//                    }
//
//                });
//                
//                $.each(chartConfigPositionKeyObj, function (key, value) {
//                    var newKey = key.replace(/[0-9]/g, '');
//                    filteredchartOptAllObj[newKey] = value;
//                });
//
//                if (filteredchartOptAllObj != null && filteredchartOptAllObj != '') {
//                    getconfigchartobj(chartid, chartType, chartOptAllObj, filteredchartOptAllObj, data);
//                }
//
//
//            });
//        },
//        error: function (e) {
//            console.log(e);
//            sessionTimeout(e);
//
//        }
//    });
//
//
//}
function callElements(event) {
	var value = event.target.innerHTML;
	if (value != null && value == 'Single') {
		keySearch();
		document.getElementById("SearchResult").focus();
		$('.createpopupClass').hide();
	} else {
		loadETL('NIMIC');
		$('.createpopupClass').hide();

	}
}
function getdashboardname(dashbordid) {
	var tabid = $(dashbordid).attr('id');
	var tabid = $(dashbordid).attr('id');
	var dashbordtitle = $('#DxpdashbordoptionListId option:selected').text();
	var dashbordname;
    var item =  $("#OptionDropdownData").jqxDropDownList('getSelectedItem');
    if(item !=null)
    {
        dashbordname = item.value;
    }
	getVisualizationchart(dashbordname, dashbordtitle);

}
;
function getDashboardSlicer(chartId, tableName, chartType) {
	$("#homepagecreatepopupId").remove();
	chartId = $(chartId).attr('id');
	$.ajax({
		type: "post",
		traditional: true,
		dataType: 'json',
		url: "getfiletColumnData",
		cache: false,
		data: {
			id: chartId,
			type: chartType,
			tableName: tableName
		},
		success: function(response) {
			if (response != null && !jQuery.isEmptyObject(response)) {
				var result = response['result'];
				var Resultstr = response['Resultstr'];
				var filtercolumn = response['filtercolumn'];
				var count = 0;
				var filterDivId = "<div id='visionVisualizeChartFilters' class='visionVisualizeChartFiltersClass'>"
					+ "<div id='visionVisualizeChartFiltersField' class='visionVisualizeChartFiltersFieldClass'/>"
					+ "<span class='visionVisualizeChartFiltersFieldSpanClass'>Add Fields Here</span></div>"
					+ "<div id='visionVisualizeChartFiltersValues' class='visionVisualizeChartFiltersValuesClass'/></div>"
					+ "</div>";

				$("#dialog").html(Resultstr);
				$("#dialog").dialog({
					title: (labelObject['Message'] != null ? labelObject['Message'] : 'Message'),
					width: 650,
					maxWidth: 650,
					height: 400,
					maxHeight: 1000,
					fluid: true,
					buttons: [{
						text: (labelObject['Apply'] != null ? labelObject['Apply'] : 'Apply'),
						click: function() {
							updateFilterData(chartId, tableName, chartType);
							$(this).html("");
							$(this).dialog("close");
							$(this).dialog("destroy");

						}

					},
					{
						text: (labelObject['Cancel'] != null ? labelObject['Cancel'] : 'Cancel'),
						click: function() {
							$(this).html("");
							$(this).dialog("close");
							$(this).dialog("destroy");
							ajaxStop();
						}
					}],
					open: function() {
						$("#visualizeChartConfigFiltersData").append(filterDivId);
						$("#VisualizeBIFilterColumns").append(result);
						$(".VisionImageVisualizationTableClass").unbind().click(function() {
							$(this).parent().parent().find('ul').toggle();
							if ($(this).parent().parent().find('ul').is(":visible")) {

								$(this).css({ transform: "rotate(90deg)" });
							} else {
								$(this).css({ transform: "rotate(360deg)" });
							}
						});


						var tableNameId = "visionVisualizeChartTableToggleClass li";
						$('.' + tableNameId).draggable({//cube changes 
							revert: "invalid",
							helper: "clone"

						});

						$('[id^="visionVisualizeChartFiltersField"]').droppable({//filters field
							revert: "invalid",
							refreshPositions: true,
							cursor: 'move',
							drop: function(event, ui) {
								if ($("#" + this.id).is(':visible')) {
									var id = ui.draggable[0].id;
									var label = ui.draggable[0].innerText;
									if (id != null && id != '' && id != undefined) {
										id = id.replace("_" + label, "");
									}
									var divid = this.id;
									if (divid != null && divid != '' && divid != undefined) {
										var count = divid.split("_")[1];
										$("#Loader").css("display", "block");
										$("body").css({ "pointer-events": "auto" });
										var chartTargetType = chartDivObj["visionVisualizeChart" + count];
										if (!(chartTargetType != null && chartTargetType != '' && chartTargetType != undefined)) {
											chartTargetType = chartType;
										}
										addchartFilterValues(filtercolumn, chartId, id, label, divid, filterCount, chartTargetType);
										filterCount++;
									}


								}
							}

						});
						$("#Loader").css("display", "none");
						$("body").css({ "pointer-events": "auto" });
						$(".visionVisualizationDragColumns").addClass('visionVisualizationDragFilterColumns');
						$("#dialog").addClass('filterPopUp');

					},
					beforeClose: function(event, ui) {

					}
				});


			}
		},
		error: function(e) {
			console.log(e);
			sessionTimeout(e);
			stopLoader();
		}
	});


}
function getconfigchartobj(chartid, chartType, chartOptAllObj, filteredchartOptAllObj, chartData) {
	//    consol.log("test");
	var labels = chartData[0].labels;
	var values = chartData[0].values;
	var r = chartData[0].r;
	var theta = chartData[0].theta;
	$.ajax({
		type: "POST",
		url: "getconfigobject",
		cache: false,
		dataType: 'json',
		data: {
			chartId: chartid,
			chartType: chartType,
			chartOptAllObj: JSON.stringify(chartOptAllObj),
			chartConfigPositionKeyStr: JSON.stringify(filteredchartOptAllObj),
			chartData: chartData
		},
		success: function(response) {

			$("#homepagecreatepopupId").remove();
			var dataPropObject = response['jsonChartFilterObj'];
			var dataPropObj = dataPropObject['dataPropObject'];

			dataPropObj['type'] = chartType;
			if (chartType !== null && chartType !== '' && chartType !== undefined && (chartType == 'pie' || chartType == 'donut')) {
				dataPropObj['labels'] = labels;
				dataPropObj['values'] = values;
			} else if (chartType !== null && chartType !== '' && chartType !== undefined && chartType == 'scatterpolar') {
				dataPropObj['r'] = r;
				dataPropObj['theta'] = theta;
			}
			var layout = dataPropObject['layout'];
			var data = [];
			data.push(dataPropObj);



			//  var layout ={};
			//                     layout['showlegend'] = true;
			//                    $.each(layoutObj, function (key, val)
			//                    {
			//                        layout[key] = val;
			//                    });
			var config = {
				responsive: true,
				displayModeBar: true,
				downloadImage: true,
				displaylogo: false,
				//                   }}],
				modeBarButtonsToRemove: ['pan2d', 'zoomIn2d', 'zoomOut2d', 'sendDataToCloud', 'hoverClosestCartesian', 'autoScale2d', 'lasso2d', 'select2d', 'zoom2d']
			};
			layout['height'] = 400;
			//  layout['width'] = 400;
			layout['legend'] = {
				x: 1.2,
				y: 0.5
			};

			if (chartType != null && chartType != '' && chartType != undefined && (chartType == 'pie' || chartType == 'donut' || chartType == 'scatterpolar')) {
				layout['margin'] = {
					l: 20,
					r: 0,
					b: 30,
					t: 40
				};
			} else {
				layout['margin'] = {
					l: 100,
					r: 20,
					b: 150,
					t: 30
				};
			}
			var polar = {
				radialaxis: {
					visible: true
				},
				showlegend: true
			};
			if (chartType == 'scatterpolar') {
				layout['polar'] = polar;
			}
			$("#homepageChartDiv").empty();
			Plotly.newPlot('homepageChartDiv', data, layout, config);
		},
		error: function(e) {
			console.log(e);
			sessionTimeout(e);
			stopLoader();
		}
	});
}
function updatechartCinfig(chartid, chartOptAllObj, filteredchartOptAllObj) {
	console.log("chartOptAllObj" + chartOptAllObj);
	$.ajax({
		type: "POST",
		url: "getconfigobject",
		cache: false,
		dataType: 'json',
		data: {
			chartId: chartid,
			chartOptAllObj: JSON.stringify(chartOptAllObj),
			chartConfigPositionKeyStr: JSON.stringify(filteredchartOptAllObj)
		},
		success: function(response) {
			console.log(response);
			if (response != null && response != '') {
				//                getVisualizeChart(chartid, chartType, axix, values, table, aggColumnName, filterCondition, chartPropObj, chartConfigObj);
			}


		},
		error: function(e) {
			console.log(e);
			sessionTimeout(e);
			stopLoader();
		}
	});
}

function filterMappingTablesAnalytics() {
	labelObject = {};
	try {
		labelObject = JSON.parse($("#labelObjectHidden").val());
	} catch (e) {

	}
	var item = $("#ivisualizationConnections").jqxTree('getSelectedItem');
	//['Tables', 'Views', 'Synonyms'];
	if (item != null && (item['value'] == 'TABLES'
		|| item['value'] == 'VIEWS'
		|| item['value'] == 'SYNONYMS')) {
		var hiddenFieldId = "DATABASE_" + item['value'] + "_hidden";
		hiddenFieldId = hiddenFieldId.replace(/ /g, '_');
		hiddenFieldId = hiddenFieldId.replace(/\//g, '_');
		var prevFilterVal = $("#" + hiddenFieldId).val();
		var tableData = "<input type='text' id='tableId' class='visionETLFilterInputs' readonly=true value='" + item['label'] + "'/>"
			+ "<select id='operatorId' class='visionETLFilterInputs'>"
			+ "<option value='LIKE'>LIKE</option>"
			+ "<option value='NOT LIKE'>NOT LIKE</option>"
			+ "<option value='='>=</option>"
			+ "<option value='!='>!=</option>"
			+ "</select>"
			+ "<input type='text' id='valueId' class='visionETLFilterInputs' value= ''/>";
		$("#dialog").html(tableData);
		$("#dialog").dialog({
			title: (labelObject[item['label'] + ' Filter Form'] != null ? labelObject[item['label'] + ' Filter Form'] : item['label'] + ' Filter Form'),
			modal: true,
			width: 610,
			height: 150,
			fluid: true,
			buttons: [{
				text: (labelObject['Search'] != null ? labelObject['Search'] : 'Search'),
				id: 'tableSearchButton', // --------code edit---
				click: function() {
					var value = $("#valueId").val();
					var selectBoxValue = $("#operatorId option:selected").text();
					$("#" + hiddenFieldId).remove();
					var hiddenField = "<input type='hidden' id='" + hiddenFieldId + "' value=''/>";
					$("#ivisualizationConnections").append(hiddenField);
					if (value != null && value != '' && value != undefined) {//26-5-2022
						value = value.toUpperCase();
					}
					var jsFilterObj = {};
					jsFilterObj.filterType = selectBoxValue;
					jsFilterObj.filterValue = value;
					$("#" + hiddenFieldId).val(JSON.stringify(jsFilterObj));
					showLoader();
					getFilteredValuesAnalytics(value, item['value'], item['level'], selectBoxValue);
					$(this).html("");
					//$(this).dialog("close");
					$(this).dialog("destroy");
				}

			}, {
				text: (labelObject['Reset'] != null ? labelObject['Reset'] : 'Reset'),
				click: function() {
					$("#valueId").val("");
					$("#operatorId").val("LIKE");
					$("#" + hiddenFieldId).remove();
					var hiddenField = "<input type='hidden' id='" + hiddenFieldId + "' value=''/>";
					$("#ivisualizationConnections").append(hiddenField);
					$("#treeETLFilterImage").attr('src', "images/Filter Icon-01.svg");
				}

			}],
			open: function() {
				//-----------  enter func start---------------
				$("#valueId").keyup(function(event) {
					if (event.keyCode === 13) {
						$("#tableSearchButton").click();
					}
				});
				$(this).closest(".ui-dialog").find(".ui-button").eq(1).addClass("dialogyes");
				$(this).closest(".ui-dialog").find(".ui-button").eq(2).addClass("dialogno");
				$(".visionHeaderMain").css("z-index", "999");
				$(".visionFooterMain").css("z-index", "999");
				$(".ui-dialog").addClass('visionDMTreePopup');
			},
			beforeClose: function(event, ui) {
				$(".visionHeaderMain").css("z-index", "99999");
				$(".visionFooterMain").css("z-index", "99999");
			}, close: function(event, ui) {


			}
		});
		if (prevFilterVal != null && prevFilterVal != '' && prevFilterVal != undefined) {
			prevFilterVal = JSON.parse(prevFilterVal);
			$("#operatorId").val(prevFilterVal['filterType']);
			$("#valueId").val(prevFilterVal['filterValue']);
		}
	} else {
		$("#dialog").html(labelObject['Please Select Views/Tables/Synonyms for filter'] != null ? labelObject['Please Select Views/Tables/Synonyms for filter'] : 'Please Select Views/Tables/Synonyms for filter');
		$("#dialog").dialog({
			title: (labelObject['Message'] != null ? labelObject['Message'] : 'Message'),
			modal: true,
			width: 300,
			height: 120,
			fluid: true,
			buttons: [{
				text: (labelObject['Ok'] != null ? labelObject['Ok'] : 'Ok'),
				click: function() {
					$(this).html("");
					//$(this).dialog("close");
					$(this).dialog("destroy");
				}

			}],
			open: function() {
				$(this).closest(".ui-dialog").find(".ui-button").eq(1).addClass("dialogyes");
				$(".visionHeaderMain").css("z-index", "999");
				$(".visionFooterMain").css("z-index", "999");
				$(".ui-dialog").addClass('visionDMTreePopup');
			},
			beforeClose: function(event, ui) {
				$(".visionHeaderMain").css("z-index", "99999");
				$(".visionFooterMain").css("z-index", "99999");
			}, close: function(event, ui) {

			}
		});
	}

}

function getFilteredValuesAnalytics(filterValue, selectedTreeValue, level, filterOperator) {
	var treeId = 'ivisualizationConnections'
	var parentItem = $('#' + treeId).jqxTree('getSelectedItem');
	var schemaObjectType = parentItem.label;

	var $element = $(parentItem.element);
	var url = 'getCurrentDBTables';
	$.ajax({
		type: "post",
		traditional: true,
		dataType: 'json',
		url: url,
		cache: false,
		data: {
			schemaObjectType: selectedTreeValue,
			level: level,
			filterOperator: filterOperator,
			filterValue: filterValue,
			start: 0,
			limit: 50
		},
		success: function(response, status, xhr) {
			stopLoader();
			var data = response['treeObjArray'];

			var children = $element.find('ul:first').children();
			if (children != null && children.length > 0) {
				$.each(children, function(index) {
					$('#' + treeId).jqxTree('removeItem', this)
				})

			}

			$('#' + treeId).jqxTree('addTo', data, parentItem);
			$('#' + treeId).jqxTree('expandItem', parentItem);


			var items = $('#' + treeId).jqxTree('getItems');
			$.each(items, function() {
				$(this.titleElement).attr('title', this.label);
				$("#" + this.titleElement[0].id).removeClass('visionETLParentHighight');
				if (this.value == "Show More") {
					var childLength = this.element.children['length'];
					var expandDiv = this.element.children[0];
					if (childLength > 3) {
						var div = this.element.children[1];
						var checkBoxDiv = this.element.children[2];
						$("#" + expandDiv.id).remove();
						$("#" + div.id).remove();
						$("#" + checkBoxDiv.id).addClass('visionETLCheckboxEmptySpace');
					} else {
						$("#" + expandDiv.id).remove();
					}
				}
			});

			$('#' + treeId).on('mousedown', function(event) {

				var target = $(event.target).parents('li:first')[0];
				var rightClick = isRightClick(event);
				if (rightClick && target != null) {
					$('#' + treeId).jqxTree('selectItem', target);

					var selectedItem = $('#' + treeId).jqxTree('getSelectedItem');
					var selectedParentItem = {};
					try {
						selectedParentItem = $('#' + treeId).jqxTree('getItem', selectedItem.parentElement);
						if (selectedParentItem != null) {
							selectedParentItem = $('#' + treeId).jqxTree('getItem', selectedParentItem.parentElement);
						}
					} catch (e) {
					}
					if (selectedItem.level == 1) {
						var menuItems = "";
						var menuHeight;
						var rightClickFunc = "View Data:viewAnalyticsTableData()";
						if (rightClickFunc != null) {
							var options = rightClickFunc.split(";");
							menuHeight = options.length;
							$.each(options, function(index) {
								var menuItem = options[index].split(":")[0];
								var funcName = options[index].split(":")[1];
								menuItems += "<li onclick='" + funcName + "'>" + menuItem + "</li>"
							});
						}

						$("#jqxMenu").remove();
						$("body").append("<div id='jqxMenu'><ul></ul></div>");
						$("#jqxMenu ul").html(menuItems);
						var contextMenu = $("#jqxMenu").jqxMenu({ width: '120px', height: menuHeight * 30 + 'px', autoOpenPopup: false, mode: 'popup', theme: 'energyblue' }); // ravi start
						var scrollTop = $(window).scrollTop();
						var scrollLeft = $(window).scrollLeft();
						contextMenu.jqxMenu('open', parseInt(event.clientX) + 5 + scrollLeft, parseInt(event.clientY) + 5 + scrollTop);
						return true;



					} else { // ravi end
						return false;
					}

				}
			});


			// disable the default browser's context menu.
			$(document).on('contextmenu', function(e) {
				if ($(e.target).parents('.jqx-tree').length > 0) {
					return false;
				}
				return true;
			});
			$('#mainSplitter').resize();



		},
		error: function(e) {
			console.log(e);
			sessionTimeout(e);
			stopLoader();
		}
	});



}


/* new methods*/


function closeChartDiv(chartId, count, chartType) //jaggu charts
{
	$("#" + chartId).remove();
	$("#visionVisualizeChartProperties" + count).empty();
	$("#visionVisualizeChartColumns" + count).empty();
	$("#visionVisualizeChartFilters" + count).empty();
	$("#visionVisualizeChartFiltersValues" + count).empty();
}

function closeCardDiv(chartId, count, chartType) //jaggu charts
{
	$("#" + chartId).remove();
	$("#visionVisualizeChartColumns" + count).empty();
	$("#visionVisualizeChartFilters" + count).empty();
	$("#visionVisualizeChartFiltersValues" + count).empty();
}




function getExpandVisualizeChart(chartId, chartType, axix, values, table, aggColumnName, filterCondition, chartPropObj, chartConfigObj, createcount, labelLegend, expandChartDivId,colorsObj) {
// var joinQuery = $("#visionVisualizeConfigJoinQuery0").val();
    var axisColumns = [];
    var valuesColumns = [];
    var tablesObj = [];
    if (axix != null && axix != '' && axix != undefined) {
        var axisArr = JSON.parse(axix);
        $.each(axisArr, function (index, value) {
            if (value != null && !jQuery.isEmptyObject(value)) {
                var columnObj = {};
                var tableName = value['tableName'];
                columnObj['tableName'] = value['tableName'];
                columnObj['columnName'] = value['columnName'];
                axisColumns.push(columnObj);
                if (!(tablesObj.indexOf(tableName) > -1)) {
                    tablesObj.push(tableName);
                }
            }
        });
    }

    if (values != null && values != '' && values != undefined) {
        var valuesArr = JSON.parse(values);
        $.each(valuesArr, function (index, value) {
            if (value != null && !jQuery.isEmptyObject(value)) {
                var columnObj = {};
                columnObj['tableName'] = value['tableName'];
                columnObj['columnName'] = value['columnName'];
                columnObj['aggColumnName'] = value['aggColumnName'];
                columnObj['userProvidedLegendLabel'] = value['userProvidedLegendLabel'];
                valuesColumns.push(columnObj);
                var tableName = value['tableName'];
                if (!(tablesObj.indexOf(tableName) > -1)) {
                    tablesObj.push(tableName);
                }
            }
        });
    }
    var startIndex = $("#" + chartId + "_startIndex").val();
    var endIndex = $("#" + chartId + "_endIndex").val();
    var pageSize = $("#" + chartId + "_pageSize").val();
    var data = {};
    
    data['axisColumns'] = JSON.stringify(axisColumns);
    data['valuesColumns'] = JSON.stringify(valuesColumns);
    data['aggregateColumns'] = aggColumnName;
    data['tablesObj'] = JSON.stringify(tablesObj);
    data['chartType'] = chartType;
    data['chartId'] = chartId;
    data['filterColumns'] = filterCondition;
     data['startIndex'] = startIndex;
    data['endIndex'] = endIndex;
    data['pageSize'] = pageSize;
    
    //    data['chartOptAllObj'] = JSON.stringify(chartPropObj);
    data['chartCOnfigObjStr'] = chartPropObj;
    data['chartConfigPositionKeyStr'] = chartConfigObj;
    var chartPropObject = JSON.parse(chartPropObj);
    data['colorsObj']=colorsObj;
    var title = chartPropObject[chartType.toUpperCase() + 'CHARTTITLE'];
    $.ajax({
        url: 'fetchChartData',
        type: "POST",
        data: data,
        dataType: 'json',
        traditional: true,
        cache: false,
        success: function (response) {
            if (response != null && !jQuery.isEmptyObject(response)) {
                var icon = {
                    'height': 36,
                    'width': 36,
                    'path': 'M14.5,35.4c-0.3,0-0.7-0.1-1-0.3c-0.4-0.3-0.7-0.8-0.7-1.3V17.7c0-0.5-0.2-1-0.6-1.4L0.7,4.7   C0,4-0.2,3,0.2,2.1c0.4-0.9,1.2-1.5,2.2-1.5h31.2c1,0,1.9,0.6,2.2,1.5C36.2,3,36,4,35.3,4.7L23.7,16.3c-0.4,0.4-0.6,0.9-0.6,1.4   v13.7c0,0.7-0.4,1.3-1.1,1.5l-7,2.3C14.8,35.4,14.7,35.4,14.5,35.4z M2.4,1.9c-0.5,0-0.9,0.3-1.1,0.7C1.2,3,1.3,3.5,1.6,3.8   l11.6,11.6c0.6,0.6,0.9,1.4,0.9,2.3v16.1c0,0.2,0.1,0.3,0.2,0.3c0.1,0,0.2,0.1,0.3,0.1l7-2.3c0.2-0.1,0.3-0.2,0.3-0.4V17.7   c0-0.9,0.3-1.7,0.9-2.3L34.4,3.8c0.3-0.3,0.4-0.8,0.2-1.3c-0.2-0.4-0.6-0.7-1.1-0.7H2.4z',
                    'color': 'rgb(31,119,180)'
                };
                var icon1 = {
                    'width': 1000,
                    'path': 'm922 660c-5 4-9 7-14 11-359 263-580-31-580-31l-102 28 58-400c0 1 1 1 2 2 118 108 351 249 351 249s-62 27-100 42c88 83 222 183 347 122 16-8 30-17 44-27-2 1-4 2-6 4z m36-329c0 0 64 229-88 296-62 27-124 14-175-11 157-78 225-208 249-266 8-19 11-31 11-31 2 5 6 15 11 32-5-13-8-20-8-20z m-775-239c70-31 117-50 198-32-121 80-199 346-199 346l-96-15-58-12c0 0 55-226 155-287z m603 133l-317-139c0 0 4-4 19-14 7-5 24-15 24-15s-177-147-389 4c235-287 536-112 536-112l31-22 100 299-4-1z m-298-153c6-4 14-9 24-15 0 0-17 10-24 15z" transform="matrix(1 0 0 -1 0 850)"',
                    'ascent': 850,
                    'descent': -150,
                    'color': 'rgb(31,119,180)'
                };
                var deleteicon = {
                    'height': 512,
                    'width': 448,
                    'path': 'M135.2 17.69C140.6 6.848 151.7 0 163.8 0H284.2C296.3 0 307.4 6.848 312.8 17.69L320 32H416C433.7 32 448 46.33 448 64C448 81.67 433.7 96 416 96H32C14.33 96 0 81.67 0 64C0 46.33 14.33 32 32 32H128L135.2 17.69zM31.1 128H416V448C416 483.3 387.3 512 352 512H95.1C60.65 512 31.1 483.3 31.1 448V128zM111.1 208V432C111.1 440.8 119.2 448 127.1 448C136.8 448 143.1 440.8 143.1 432V208C143.1 199.2 136.8 192 127.1 192C119.2 192 111.1 199.2 111.1 208zM207.1 208V432C207.1 440.8 215.2 448 223.1 448C232.8 448 240 440.8 240 432V208C240 199.2 232.8 192 223.1 192C215.2 192 207.1 199.2 207.1 208zM304 208V432C304 440.8 311.2 448 320 448C328.8 448 336 440.8 336 432V208C336 199.2 328.8 192 320 192C311.2 192 304 199.2 304 208z',
                    'color': 'rgb(31,119,180)'
                };
                var CreateIcon = {
                    'height': 512,
                    'width': 448,
                    'id': chartId,
                    'path': 'M384 32C419.3 32 448 60.65 448 96V416C448 451.3 419.3 480 384 480H64C28.65 480 0 451.3 0 416V96C0 60.65 28.65 32 64 32H384zM224 368C237.3 368 248 357.3 248 344V280H312C325.3 280 336 269.3 336 256C336 242.7 325.3 232 312 232H248V168C248 154.7 237.3 144 224 144C210.7 144 200 154.7 200 168V232H136C122.7 232 112 242.7 112 256C112 269.3 122.7 280 136 280H200V344C200 357.3 210.7 368 224 368z',
                    'color': 'rgb(31,119,180)'
                };
                var EditIcon = {
                    'height': 512,
                    'width': 512,
                    'id': chartId,
                    'path': 'M490.3 40.4C512.2 62.27 512.2 97.73 490.3 119.6L460.3 149.7L362.3 51.72L392.4 21.66C414.3-.2135 449.7-.2135 471.6 21.66L490.3 40.4zM172.4 241.7L339.7 74.34L437.7 172.3L270.3 339.6C264.2 345.8 256.7 350.4 248.4 353.2L159.6 382.8C150.1 385.6 141.5 383.4 135 376.1C128.6 370.5 126.4 361 129.2 352.4L158.8 263.6C161.6 255.3 166.2 247.8 172.4 241.7V241.7zM192 63.1C209.7 63.1 224 78.33 224 95.1C224 113.7 209.7 127.1 192 127.1H96C78.33 127.1 64 142.3 64 159.1V416C64 433.7 78.33 448 96 448H352C369.7 448 384 433.7 384 416V319.1C384 302.3 398.3 287.1 416 287.1C433.7 287.1 448 302.3 448 319.1V416C448 469 405 512 352 512H96C42.98 512 0 469 0 416V159.1C0 106.1 42.98 63.1 96 63.1H192z',
                    'color': 'rgb(31,119,180)'
                };
                $(".visualizationDashboardView").css("display", "block");
                var resultObj = response;
                var dataPropObject = resultObj['dataPropObject'];
                var chartDataObj = resultObj['data'];
                var layoutObj = resultObj['layout'];
                var treeMapColObj = resultObj['treeMapCol'];
                var colorsObj = resultObj['colorsObj'];
                var plotlyChartLabelType = dataPropObject['textinfo'];
				var plotlyChartHoverType = dataPropObject['hoverinfo'];
				
                var currencySymbol = '';
                var chartLabels = [];
                var data = [];
                var dataObj = {};
                var config = {
                    responsive: true,
                    displayModeBar: true,
                    downloadImage: true,
                    displaylogo: false,
                    modeBarButtonsToAdd: [
                        {
                            name: 'Data', icon: icon1, click: function () {
                                getGridData(axix, "", chartId, 'DXP_DASHBOARD_GRID');
                            }
                        }, {
                            name: 'filterColumn', icon: icon, click: function () {
                                getfilterData(chartId, table, chartType, expandChartDivId);
                            }
                        }, {
                            name: 'Delete', icon: deleteicon, click: function () {
                                deleteVisualizeChart(chartId, table, chartType, expandChartDivId);
                            }
                        }, {
                            name: 'Edit', icon: EditIcon, click: function () {
                                homePageChartSetting(chartId, chartType, layout, data, createcount, event, expandChartDivId);
                            }
                        }],
                    //                     modeBarButtonsToRemove: ['lasso2d']
                    //                    
                    modeBarButtonsToRemove: ['pan2d', 'zoomIn2d', 'zoomOut2d', 'sendDataToCloud', 'hoverClosestCartesian', 'autoScale2d', 'lasso2d', 'select2d', 'zoom2d']
                };
                //                    $("#visionVisualizeChartId" + count).css('width', '100%', '!important');
                //                    $("#visionVisualizeChartId" + count).css('height', '100%', '!important');
                var axisColumnName;
				var valuesColumnName;
				var defaultLegendNames = {};
				var userProvidedLegendNames = {};

				$.each(axisColumns, function(index, value) {
					var axisName = value.columnName.split(".")[1];
					axisColumnName = axisName.replace(/[()]/g, "");
					axisColumnName = axisColumnName.replace(/_/g, " ");
					defaultLegendNames[axisColumnName] = axisColumnName;
				});
				$.each(valuesColumns, function(index, value) {
					var valueName = value.columnName.split(".")[1];
					valuesColumnName = valueName.replace(/[()]/g, "");
					valuesColumnName = valuesColumnName.replace(/_/g, " ");
					defaultLegendNames[valuesColumnName] = valuesColumnName;
					var legendLabels = value['userProvidedLegendLabel'];
					if (legendLabels !== '' && legendLabels !== undefined && legendLabels !== null) {
						userProvidedLegendNames[valuesColumnName] = legendLabels;
					}
				});
                if (chartType !== null && chartType !== '' && chartType !== undefined && chartType === 'pie') {
                    $.each(chartDataObj, function (key) {
                        var axisColumnName = axisColumns[0].columnName;
                        axisColumnName = axisColumnName.split(".")[1];
                        axisColumnName = axisColumnName.replace(/[()]/g, "");
                        axisColumnName = axisColumnName.replace(/_/g, " ");
                        var traceObj = {};
                        var colorObj = {};
                        if (key !== axisColumnName) {
                            chartLabels = chartDataObj[axisColumnName];
                            traceObj['labels'] = chartDataObj[axisColumnName];
                            traceObj['values'] = chartDataObj[key];
                            traceObj['type'] = chartType;
                            traceObj['name'] = 'value';
                            traceObj['marker'] = colorObj;
                            traceObj = getChartLabelOrHoverDataFormatter('texttemplate', traceObj, chartDataObj[key], plotlyChartLabelType, 'label', 'value', "", currencySymbol);
								traceObj = getChartLabelOrHoverDataFormatter('hovertemplate', traceObj, chartDataObj[key], plotlyChartHoverType, 'label', 'value', "", currencySymbol);
								
                            $.each(dataPropObject, function (key, val) {
                                traceObj[key] = val;
                            });
                        }
                        if (traceObj !== null && !jQuery.isEmptyObject(traceObj)) {
                            data.push(traceObj);
                        }
                    });
                } else if (chartType != null && chartType != '' && chartType != undefined && chartType == 'donut') {
                    $.each(chartDataObj, function (key) {
                        var axisColumnName = axisColumns[0].columnName;
                        axisColumnName = axisColumnName.split(".")[1];
                        axisColumnName = axisColumnName.replace(/[()]/g, "");
                        axisColumnName = axisColumnName.replace(/_/g, " ");
                        var traceObj = {};
                        var colorObj = {};
                        if (key !== axisColumnName) {
                            chartLabels = chartDataObj[axisColumnName];
                            traceObj['labels'] = chartDataObj[axisColumnName];
                            traceObj['values'] = chartDataObj[key];
                            traceObj['hole'] = 0.4;
                            traceObj['type'] = 'pie';
                            traceObj['name'] = 'value';
                            traceObj['marker'] = colorObj;
                            traceObj = getChartLabelOrHoverDataFormatter('texttemplate', traceObj, chartDataObj[key], plotlyChartLabelType, 'label', 'value', "", currencySymbol);
								traceObj = getChartLabelOrHoverDataFormatter('hovertemplate', traceObj, chartDataObj[key], plotlyChartHoverType, 'label', 'value', "", currencySymbol);
								
                            $.each(dataPropObject, function (key, val) {
                                traceObj[key] = val;
                            });
                        }
                        if (traceObj !== null && !jQuery.isEmptyObject(traceObj)) {
                            data.push(traceObj);
                        }
                    });
                } else if (chartType != null && chartType != '' && chartType != undefined && chartType == 'bar') {
                    var colorCount = 0;
                    colorArray = ['#1864ab', '#fd7e14', '#0b7285', '#ff6b6b'];
                    $.each(chartDataObj, function (key) {
                        var axisColumnName = axisColumns[0].columnName;
                        axisColumnName = axisColumnName.split(".")[1];
                        axisColumnName = axisColumnName.replace(/[()]/g, "");
                        axisColumnName = axisColumnName.replace(/_/g, " ");
                        var traceObj = {};
                        var colorObj = {};
                        if (key !== axisColumnName) {
                            traceObj['y'] = chartDataObj[axisColumnName];
                            traceObj['x'] = chartDataObj[key];
                            traceObj['type'] = chartType;
                            traceObj['orientation'] = 'h';
                            traceObj['name'] = 'value';
                            traceObj = getChartLabelOrHoverDataFormatter('texttemplate', traceObj, chartDataObj[key], plotlyChartLabelType, 'y', 'x', "", currencySymbol);
								traceObj = getChartLabelOrHoverDataFormatter('hovertemplate', traceObj, chartDataObj[key], plotlyChartHoverType, 'y', 'x', "", currencySymbol);
								var keys = key.split("ASCOL");
								keyName = keys[0];
								traceObj = addlegendLabelToTrace(traceObj, key, defaultLegendNames, userProvidedLegendNames);
								
                            $.each(dataPropObject, function (key, val) {
                                if (key === 'marker' && !jQuery.isEmptyObject(val) && val !== null) {
                                    var colorsArray = val['colors'];
                                    if (colorsArray !== undefined && colorsArray !== null && !$.isArray(colorsArray)) {
                                        colorObj['color'] = colorsArray;
                                    } else if (colorsArray !== undefined && colorsArray !== null && $.isArray(colorsArray)) {
                                        colorObj['color'] = colorsArray[colorCount++];
                                    } else {
                                        colorObj['color'] = colorArray[colorCount++];
                                    }
                                    traceObj[key] = colorObj;
                                } else if (key === 'marker' && (jQuery.isEmptyObject(val) || val === null)) {
                                    colorObj['color'] = colorArray[colorCount++];
                                    traceObj[key] = colorObj;
                                } else {
                                    traceObj[key] = val;
                                }
                            });
                        }
                        if (traceObj !== null && !jQuery.isEmptyObject(traceObj)) {
                            data.push(traceObj);
                        }
                    });
                } else if (chartType != null && chartType != '' && chartType != undefined && chartType == 'column') {
                    var colorCount = 0;
                    colorArray = ['#1864ab', '#fd7e14', '#0b7285', '#ff6b6b'];
                    $.each(chartDataObj, function (key, val) {
                        var axisColumnName = axisColumns[0].columnName;
                        axisColumnName = axisColumnName.split(".")[1];
                        axisColumnName = axisColumnName.replace(/[()]/g, "");
                        axisColumnName = axisColumnName.replace(/_/g, " ");
                        var traceObj = {};
                        var colorObj = {};
                        if (key !== axisColumnName) {
                            traceObj['x'] = chartDataObj[axisColumnName];
                            traceObj['y'] = chartDataObj[key];
                            traceObj['type'] = 'bar';
                            traceObj['name'] = 'value';
                            traceObj = getChartLabelOrHoverDataFormatter('texttemplate', traceObj, chartDataObj[key], plotlyChartLabelType, 'x', 'y', "", currencySymbol);
								traceObj = getChartLabelOrHoverDataFormatter('hovertemplate', traceObj, chartDataObj[key], plotlyChartHoverType, 'x', 'y', "", currencySymbol);
								var keys = key.split("ASCOL");
								keyName = keys[0];
								if (compareChartsFlag == 'YF') {
									traceObj = addlegendLabelToTraceFilter(traceObj, i);
								} else {
									traceObj = addlegendLabelToTrace(traceObj, keyName, defaultLegendNames, userProvidedLegendNames);
								}
								i++;
                            $.each(dataPropObject, function (key, val) {
                                if (key === 'marker' && !jQuery.isEmptyObject(val) && val !== null) {
                                    var colorsArray = val['colors'];
                                    if (colorsArray !== undefined && colorsArray !== null && !$.isArray(colorsArray)) {
                                        colorObj['color'] = colorsArray;
                                    } else if (colorsArray !== undefined && colorsArray !== null && $.isArray(colorsArray)) {
                                        colorObj['color'] = colorsArray[colorCount++];
                                    } else {
                                        colorObj['color'] = colorArray[colorCount++];
                                    }
                                    traceObj[key] = colorObj;
                                } else if (key === 'marker' && (jQuery.isEmptyObject(val) || val === null)) {
                                    colorObj['color'] = colorArray[colorCount++];
                                    traceObj[key] = colorObj;
                                } else {
                                    traceObj[key] = val;
                                }
                            });
                        }
                        if (traceObj !== null && !jQuery.isEmptyObject(traceObj)) {
                            data.push(traceObj);
                        }
                    });
                } else if (chartType != null && chartType != '' && chartType != undefined && chartType == 'lines') {
                    var colorCount = 0;
                    var lineColorCount = 0;
                    var labelCount = 0;
                    colorArray = ['#1864ab', '#fd7e14', '#0b7285', '#ff6b6b'];
                    $.each(chartDataObj, function (key, val) {
                        var axisColumnName = axisColumns[0].columnName;
                        axisColumnName = axisColumnName.split(".")[1];
                        axisColumnName = axisColumnName.replace(/[()]/g, "");
                        axisColumnName = axisColumnName.replace(/_/g, " ");
                        var traceObj = {};
                        var colorObj = {};
                        if (key !== axisColumnName) {
                            traceObj['x'] = chartDataObj[axisColumnName];
                            traceObj['y'] = chartDataObj[key];
                            traceObj['type'] = chartType;
                            if (labelLegend != null && labelLegend != '' && labelLegend != undefined) {
                                traceObj['name'] = labelLegend.split(",")[labelCount];
                                labelCount++;
                            }
                            traceObj = getChartLabelOrHoverDataFormatter('texttemplate', traceObj, chartDataObj[key], plotlyChartLabelType, 'x', 'y', "", currencySymbol);
								traceObj = getChartLabelOrHoverDataFormatter('hovertemplate', traceObj, chartDataObj[key], plotlyChartHoverType, 'x', 'y', "", currencySymbol);
								var keys = key.split("ASCOL");
								keyName = keys[0];
								if (compareChartsFlag == 'YF') {
									traceObj = addlegendLabelToTraceFilter(traceObj, i);
								} else {
									traceObj = addlegendLabelToTrace(traceObj, keyName, defaultLegendNames, userProvidedLegendNames);
								}
								i++;
                            $.each(dataPropObject, function (key, val) {
                                if (key === 'marker' && !jQuery.isEmptyObject(val) && val !== null) {
                                    var colorsArray = val['color'];
                                    if (colorsArray !== undefined && colorsArray !== null && !$.isArray(colorsArray)) {
                                        colorObj['color'] = colorsArray;
                                    } else if (colorsArray !== undefined && colorsArray !== null && $.isArray(colorsArray)) {
                                        colorObj['color'] = colorsArray[colorCount++];
                                    } else {
                                        colorObj['color'] = colorArray[colorCount++];
                                    }
                                    colorObj['size'] = val['size'];
                                    traceObj[key] = colorObj;
                                } else if (key === 'marker' && (jQuery.isEmptyObject(val) || val === null)) {
                                    colorObj['color'] = colorArray[colorCount++];
                                    traceObj[key] = colorObj;
                                } else if (key === 'line' && !jQuery.isEmptyObject(val) && val !== null) {
                                    var lineObject = Object.assign({}, val);
                                    var colorsArray = lineObject['color'];
                                    if (colorsArray !== undefined && colorsArray !== null && !$.isArray(colorsArray)) {
                                        lineObject['color'] = colorsArray;
                                    } else if (colorsArray !== undefined && colorsArray !== null && $.isArray(colorsArray)) {
                                        lineObject['color'] = colorsArray[lineColorCount++];
                                    } else {
                                        lineObject['color'] = colorArray[lineColorCount++];
                                    }
                                    traceObj[key] = lineObject;
                                } else {
                                    traceObj[key] = val;
                                }
                            });
                        }
                        if (traceObj !== null && !jQuery.isEmptyObject(traceObj)) {
                            data.push(traceObj);
                        }
                    });
                } else if (chartType != null && chartType != '' && chartType != undefined && chartType == 'scatter') {
                    var colorCount = 0;
                    var labelCount = 0;
                    colorArray = ['#1864ab', '#fd7e14', '#0b7285', '#ff6b6b'];
                    $.each(chartDataObj, function (key, val) {
                        var axisColumnName = axisColumns[0].columnName;
                        axisColumnName = axisColumnName.split(".")[1];
                        axisColumnName = axisColumnName.replace(/[()]/g, "");
                        axisColumnName = axisColumnName.replace(/_/g, " ");
                        var traceObj = {};
                        var colorObj = {};
                        if (key !== axisColumnName) {
                            traceObj['x'] = chartDataObj[axisColumnName];
                            traceObj['y'] = chartDataObj[key];
                            traceObj['type'] = chartType;
                            traceObj['mode'] = 'markers';
                            traceObj['marker'] = colorObj;
                            if (labelLegend != null && labelLegend != '' && labelLegend != undefined) {
                                traceObj['name'] = labelLegend.split(",")[labelCount];
                                labelCount++;
                            }
                            traceObj = getChartLabelOrHoverDataFormatter('texttemplate', traceObj, chartDataObj[key], plotlyChartLabelType, 'x', 'y', "", currencySymbol);
								traceObj = getChartLabelOrHoverDataFormatter('hovertemplate', traceObj, chartDataObj[key], plotlyChartHoverType, 'x', 'y', "", currencySymbol);
								var keys = key.split("ASCOL");
								keyName = keys[0];
								traceObj = addlegendLabelToTrace(traceObj, keyName, defaultLegendNames, userProvidedLegendNames);
								
                            $.each(dataPropObject, function (key, val) {
                                if (key === 'marker' && !jQuery.isEmptyObject(val) && val !== null) {
                                    var colorsArray = val['color'];
                                    if (colorsArray !== undefined && colorsArray !== null && !$.isArray(colorsArray)) {
                                        colorObj['color'] = colorsArray;
                                    } else if (colorsArray !== undefined && colorsArray !== null && $.isArray(colorsArray)) {
                                        colorObj['color'] = colorsArray[colorCount++];
                                    } else {
                                        colorObj['color'] = colorArray[colorCount++];
                                    }
                                    colorObj['size'] = val['size'];
                                    traceObj[key] = colorObj;
                                } else if (key === 'marker' && (jQuery.isEmptyObject(val) || val === null)) {
                                    colorObj['color'] = colorArray[colorCount++];
                                    traceObj[key] = colorObj;
                                } else {
                                    traceObj[key] = val;
                                }
                            });
                        }
                        if (traceObj !== null && !jQuery.isEmptyObject(traceObj)) {
                            data.push(traceObj);
                        }
                    });
                } else if (chartType != null && chartType != '' && chartType != undefined && chartType == 'waterfall') {
                    var colorCount = 0;
                    colorArray = ['#1864ab', '#fd7e14', '#0b7285', '#ff6b6b'];
                    $.each(chartDataObj, function(keyName) {

							var traceObj = {};
							var colorObj = {};
							if (keyName !== axisColumnName) {
								var measureArr = [];
								var axisCols = chartDataObj[axisColumnName];
								if (axisCols != null && !jQuery.isEmptyObject(axisCols)) {
									var axisLength = axisCols.length;
									for (var l = 0; l < axisLength; l++) {
										measureArr.push("relative");
									}
									traceObj['measure'] = measureArr;
								}
								traceObj['x'] = chartDataObj[axisColumnName];
								traceObj['y'] = chartDataObj[key];
								traceObj['type'] = chartType;
								traceObj['orientation'] = 'v';
								traceObj = getChartLabelOrHoverDataFormatter('texttemplate', traceObj, chartDataObj[keyName], plotlyChartLabelType, 'y', 'x', "", currencySymbol);
								traceObj = getChartLabelOrHoverDataFormatter('hovertemplate', traceObj, chartDataObj[keyName], plotlyChartHoverType, 'y', 'x', "", currencySymbol);
								var keys = keyName.split("ASCOL");
								keyName = keys[0];
								traceObj = addlegendLabelToTrace(traceObj, keyName, defaultLegendNames, userProvidedLegendNames);
								$.each(dataPropObject, function(key, val) {
									if (key === 'marker' && !jQuery.isEmptyObject(val) && val !== null) {
										var colorsArray = val['colors'];
										if (colorsArray !== undefined && colorsArray !== null && colorsArray.length !== null) {
											colorObj['color'] = colorsArray[colorCount++];
										} else {
											colorObj['color'] = colorArray[colorCount++];
										}
										traceObj[key] = colorObj;
									} else if (key === 'marker' && (jQuery.isEmptyObject(val) || val === null)) {
										colorObj['color'] = colorArray[colorCount++];
										traceObj[key] = colorObj;
									} else {
										traceObj[key] = val;
									}
								});
							}
							if (traceObj !== null && !jQuery.isEmptyObject(traceObj)) {
								data.push(traceObj);
							}
						});
                } else if (chartType != null && chartType != '' && chartType != undefined && chartType == 'treemap') {
                    var treeDomain = 0
                    for (var key in chartDataObj) {
							var treeDataObj = chartDataObj[key];
							var treeObj = {};
							treeObj['type'] = chartType;
							treeObj['labels'] = treeDataObj[treeMapColObj['labels']];
							treeObj['parents'] = treeDataObj[treeMapColObj['parents']];
							treeObj['values'] = treeDataObj[treeMapColObj['values']];
							treeObj['textinfo'] = "label+value";
							treeObj['branchvalues'] = "total";
							var length = Object.keys(chartDataObj).length;
							var split = ((100 / length) / 100);
							if (chartDataObj != null && !jQuery.isEmptyObject(chartDataObj) && Object.keys(chartDataObj).length > 1) {
								treeObj['domain'] = { x: [treeDomain, ((treeDomain + split) - 0.02)] };
								treeDomain = treeDomain + split + 0.02;
							}
							if (dataPropObject != null && !jQuery.isEmptyObject(dataPropObject)) {
								$.each(dataPropObject, function(key, val) {
									treeObj[key] = val;
								});
							}

							data.push(treeObj);
						}

                } else if (chartType != null && chartType != '' && chartType != undefined && chartType == 'histogram') {
                    dataObj['x'] = chartDataObj[0];
                    dataObj['y'] = chartDataObj[key];
                    dataObj['type'] = chartType;
                    colorObj['size'] = 20;
                    dataObj['name'] = 'value';
                    dataObj['marker'] = colorObj;
                } else if (chartType != null && chartType != '' && chartType != undefined && chartType == 'scatterpolar') {
                    var colorCount = 0;
                    var labelCount = 0;
                    colorArray = ['#1864ab', '#fd7e14', '#0b7285', '#ff6b6b'];
                    $.each(chartDataObj, function (key) {
                        var axisColumnName = axisColumns[0].columnName;
                        axisColumnName = axisColumnName.split(".")[1];
                        axisColumnName = axisColumnName.replace(/[()]/g, "");
                        axisColumnName = axisColumnName.replace(/_/g, " ");
                        var traceObj = {};
                        var colorObj = {};
                        if (key !== axisColumnName) {
                            traceObj['r'] = chartDataObj[key];
                            traceObj['theta'] = chartDataObj[axisColumnName];
                            traceObj['type'] = chartType;
                            traceObj['fill'] = 'toself';
                            if (labelLegend != null && labelLegend != '' && labelLegend != undefined) {
                                traceObj['name'] = labelLegend.split(",")[labelCount];
                                labelCount++;
                            }

                            $.each(dataPropObject, function (key, val) {
                                if (key === 'marker' && !jQuery.isEmptyObject(val) && val !== null) {
                                    var colorsArray = val['colors'];
                                    if (colorsArray !== undefined && colorsArray !== null && !$.isArray(colorsArray)) {
                                        colorObj['color'] = colorsArray;
                                    } else if (colorsArray !== undefined && colorsArray !== null && $.isArray(colorsArray)) {
                                        colorObj['color'] = colorsArray[colorCount++];
                                    } else {
                                        colorObj['color'] = colorArray[colorCount++];
                                    }
                                    traceObj[key] = colorObj;
                                } else if (key === 'marker' && (jQuery.isEmptyObject(val) || val === null)) {
                                    colorObj['color'] = colorArray[colorCount++];
                                    traceObj[key] = colorObj;
                                } else {
                                    traceObj[key] = val;
                                }
                            });
                        }
                        if (traceObj !== null && !jQuery.isEmptyObject(traceObj)) {
                            data.push(traceObj);
                        }
                    });
                } else if (chartType != null && chartType != '' && chartType != undefined && chartType == 'funnel') {
                    var colorCount = 0;
                    colorArray = ['#1864ab', '#fd7e14', '#0b7285', '#ff6b6b'];
                    $.each(chartDataObj, function (key) {
                        var axisColumnName = axisColumns[0].columnName;
                        axisColumnName = axisColumnName.split(".")[1];
                        axisColumnName = axisColumnName.replace(/[()]/g, "");
                        axisColumnName = axisColumnName.replace(/_/g, " ");
                        var traceObj = {};
                        var colorObj = {};
                        if (key !== axisColumnName) {
                            traceObj['y'] = chartDataObj[axisColumnName];
                            traceObj['x'] = chartDataObj[key];
                            traceObj['type'] = chartType;
                            //                                traceObj['orientation'] = 'h';
                            traceObj['name'] = 'value';
                            traceObj = getChartLabelOrHoverDataFormatter('texttemplate', traceObj, chartDataObj[key], plotlyChartLabelType, 'y', 'x', "", currencySymbol);
								traceObj = getChartLabelOrHoverDataFormatter('hovertemplate', traceObj, chartDataObj[key], plotlyChartHoverType, 'y', 'x', "", currencySymbol);
								var keys = key.split("ASCOL");
								keyName = keys[0];
								traceObj = addlegendLabelToTrace(traceObj, keyName, defaultLegendNames, userProvidedLegendNames);
								
                            $.each(dataPropObject, function (key, val) {
                                if (key === 'marker' && !jQuery.isEmptyObject(val) && val !== null) {
                                    var colorsArray = val['colors'];
                                    if (colorsArray !== undefined && colorsArray !== null && colorsArray.length !== null) {
                                        colorObj['color'] = colorsArray[colorCount++];
                                    } else {
                                        colorObj['color'] = colorArray[colorCount++];
                                    }
                                    traceObj[key] = colorObj;
                                } else if (key === 'marker' && (jQuery.isEmptyObject(val) || val === null)) {
                                    colorObj['color'] = colorArray[colorCount++];
                                    traceObj[key] = colorObj;
                                } else {
                                    traceObj[key] = val;
                                }
                            });
                        }
                        if (traceObj !== null && !jQuery.isEmptyObject(traceObj)) {
                            data.push(traceObj);
                        }
                    });
                } else {
                    dataObj['x'] = chartDataObj[0];
                    dataObj['y'] = chartDataObj[key];
                    dataObj['type'] = chartType;
                    dataObj['name'] = 'value';
                    dataObj['marker'] = colorObj;
                }
                var chartOuterId = 'visualizechartId';
                let observer = new MutationObserver(function (mutations) {
                    window.dispatchEvent(new Event('resize'));
                });
                let child = document.getElementById(chartOuterId);
                observer.observe(child, {attributes: true});
                if (chartOuterId != null && chartOuterId != '' && jQuery.inArray(chartOuterId, chartDivArr) <= -1) {
                    chartDivArr.push(chartOuterId);
                }
                var layout = {
                    margin: {
                        l: 30,
                        r: 60,
                        b: 50,
                        t: 50,
                        //                        pad: 10
                    },
                    //                    width: 250,
                    height: 300,
                    //                    wieght:400,
                    dragmode: false,
                    font: {
                        size: 9
                    },
                    modebar: {
                        orientation: 'v',
                        //                        bgcolor: '#f1f1f1',
                        color: '#0b4a99',
                        activecolor: '#9ED3CD'
                    },
                    images: [
                        {
                            x: 0.02,
                            y: 1.08,
                            sizex: 0.105,
                            sizey: 0.2,
                            source: "images/PiLog Logo New.png",
                            xanchor: "right",
                            xref: "paper",
                            yanchor: "bottom",
                            yref: "paper"
                        }
                    ],
                    title: {
                        text: title,
                        font: {
                            family: '"Open Sans", verdana, arial, sans-serif',
                            size: 24
                        },
                        xref: 'paper',
                        x: 0.1,
                    }
                };
                if (chartType != null && chartType != '' && chartType != undefined && (chartType == 'donut' || chartType == 'pie')) {
                    layout['showlegend'] = false;
                } else {
                    if (Object.keys(chartDataObj).length > 2) {
                        layout['showlegend'] = true;
                    }

                }

                var legend = {
                    "x": 0.2,
                    "y": -0.2,
                    "orientation": "h"
                            //                    traceorder: 'normal',
                            //                    font: {
                            //                        family: 'sans-serif',
                            //                        size: 12,
                            //                        color: '#000'
                            //                    },
                            //                    bgcolor: '#E2E2E2',
                            //                    bordercolor: '#FFFFFF',
                            //                    borderwidth: 2

                };
                $.each(layoutObj, function (key, val) {
                    layout[key] = val;
                });
                layout['legend'] = legend;
                var polar = {
                    radialaxis: {
                        visible: true
                    },
                    showlegend: true
                };
                if (chartType == 'scatterpolar') {
                    layout['polar'] = polar;
                }


                if (chartType != null && chartType != '' && chartType != undefined && (chartType != 'lines' && chartType != 'treemap')) {
                    for (var m = 0; m < data.length; m++) {
                        var markerObj = data[m]['marker'];
                        if ((!(markerObj != null && !jQuery.isEmptyObject(markerObj))) ||
                                (markerObj != null && !jQuery.isEmptyObject(markerObj) &&
                                        !(markerObj['colors'] != null && !jQuery.isEmptyObject(markerObj['colors'])))) {
                            var colorObj = [];
                            if (chartType == 'pie' || chartType == 'donut') {
                                colorObj = ['#2F6345', '#40875E', '#58B07E', '#C48C00', '#F0AB00', '#FFBE1D', '#FFCC4B', '#827E32', '#A8A240', '#C5C169'];
                                markerObj['colors'] = colorObj;
                            } else {
                                var x = data[m]['x'];
                                colorObj = ['#1864B1', '#FF7F0E']
                                var colorsX = [];
                                if (x != null && x != '' && x != undefined && !jQuery.isEmptyObject(x)) {
                                    for (var p = 0; p < x.length; p++) {
                                        colorsX.push(colorObj[m]);
                                    }
                                    markerObj['color'] = colorsX;
                                }
                            }
                            if (markerObj != null && !jQuery.isEmptyObject(markerObj)) {
                                data[m]['marker'] = markerObj;
                            }
                        }
                    }
                }




                if (expandChartDivId != null && expandChartDivId != '' && expandChartDivId != undefined) {
                    $("#" + expandChartDivId).empty();
                    layout['height'] = 500;
                    layout['width'] = 1100;
                    Plotly.newPlot(expandChartDivId, data, layout, config);
                } else {
                    $("#" + chartId).empty();
                    Plotly.newPlot(chartId, data, layout, config);
                }

                var myPlot = document.getElementById(chartId);
                //                if(chartType !=null && chartType !='' && chartType !=''){
                //                    
                //                }
                if (chartType != null && chartType != '' && chartType != undefined && chartType == 'scatterpolar') {
                    myPlot.on('plotly_hover', function (data) {
                        var filterString = '';
                        for (var i = 0; i < data.points.length; i++) {
                            if (chartType != null && chartType == 'funnel') {
                                filterString = data.points[i].y;
                            } else {
                                filterString = data.points[i].label;
                            }

                        }
                        //getGridData(axix, filterString, chartId, "DXP_DASHBOARD_GRID", filterCondition);
                        alert('Closest point clicked:\n\n');
                    });
                } else {
                    myPlot.on('plotly_click', function (data) {
                        var filterString = '';
                        for (var i = 0; i < data.points.length; i++) {
                            if (chartType != null && chartType == 'funnel') {
                                filterString = data.points[i].y;
                            } else {
                                filterString = data.points[i].label;
                            }

                        }
                        //getGridData(axix, filterString, chartId, "DXP_DASHBOARD_GRID", filterCondition);
                        alert('Closest point clicked:\n\n');
                    });
                }
                if (colorsObj != null && colorsObj != '' && colorsObj != undefined) {
                    var colorobj = JSON.parse(colorsObj);
                    var pn = colorobj['pn'];
                    var tn = colorobj['tn'];
                    if (pn != null && pn != undefined && tn != null && tn != undefined) {
                        applyChartColors(colorsObj, expandChartDivId, chartType);
                    } else {
                        var graphDiv = document.getElementById(expandChartDivId);
                        var data = graphDiv.data;
                        if (colorsObj != null && colorsObj != '' && colorsObj != undefined) {
                            colorsObj = JSON.parse(colorsObj);
                            if (colorsObj != null && !jQuery.isEmptyObject(colorsObj)) {
                                //var colors = colorsObj['clrs'];

                                var colorarr = [];
                                var n = colorsObj['clrs'].length;
                                var len =10;
								if(chartType == 'pie' || chartType =='donut'){
								len=data[0]['labels'].length;}
								else{
								len = data[0]['x'].length;}
                                for (var i = 0; i < len; i++) {
                                    var color = colorsObj['clrs'][i % n];
                                    colorarr.push(color);
                                }
                                if (colorarr != null && !jQuery.isEmptyObject(colorarr)) {
                                   var update;
									if (chartType != null && chartType != '' && chartType != undefined && (chartType == 'pie' || chartType == 'donut')) {
										 update = { 'marker': { 'colors': colorarr } };
										
									}
									else {
										if (chartType != null && chartType != undefined && chartType == 'lines') {
								             update = {'line': {'color': colorarr[0], width: 3}};
								           
										}
										else {
										 update = { 'marker': { 'color': colorarr } };
										
									}
								}
								Plotly.restyle(chartId, update);	

                                }
                            }
                        }
                    }

                }
                if (chartType != null && chartType != '' && chartType != undefined && (chartType == 'donut' || chartType == 'pie')) {
                    var colors = [];
                    var colorsObj = [];
                    var markersObj = data[0]['marker'];
                    if (markersObj != null && !jQuery.isEmptyObject(markersObj)) {
                        colorsObj = markersObj['colors'];
                    }
                    if (colorsObj != null && colorsObj != '' && colorsObj != undefined) {
                        var colorobj;
                        if (colorsObj.constructor === String) {
                            colorobj = JSON.parse(colorsObj);
                        } else {
                            colorobj = colorsObj;
                        }

                        if (colorobj != null && !jQuery.isEmptyObject(colorobj)) {
                            colors = colorobj;
                        } else {
                            colors = ['#2F6345', '#40875E', '#58B07E', '#C48C00', '#F0AB00', '#FFBE1D', '#FFCC4B', '#827E32', '#A8A240', '#C5C169'];
                        }
                    } else {
                        colors = ['#2F6345', '#40875E', '#58B07E', '#C48C00', '#F0AB00', '#FFBE1D', '#FFCC4B', '#827E32', '#A8A240', '#C5C169'];
                    }
                    positionChartLegend(chartType, "homepageChartDiv", colors, chartLabels, data, layout, config);
                } else {
                    $("#" + chartId + "_legends").remove();
                }

            }

        }, error: function (e) {
            console.log("The Error Message is:::" + e.message);
            sessionTimeout(e);
        }
    });
}

function getHomeDashboardSlicer() {
	showLoader();
	var chartDropDownVal;
    var item =  $("#OptionDropdownData").jqxDropDownList('getSelectedItem');
    if(item !=null)
    {
        chartDropDownVal = item.value;
    }
	$.ajax({
		type: "POST",
		url: "getHomeChartSlicerData",
		cache: false,
		dataType: 'json',
		data: {
			chartDropDownVal: chartDropDownVal
		},
		success: function(response) {
			console.log(response);
			stopLoader();
			if (response != null && response != '') {
				var result = response['result'];
				var Resultstr = response['resultStr'];
				var count = 0;
				var filterDivId = "<div id='visionVisualizeHomeChartFilters' class='visionVisualizeHomeChartFiltersClass'>"
					+ "<div id='visionVisualizeHomeChartFiltersField' class='visionVisualizeChartFiltersFieldClass'/>"
					+ "<span class='visionVisualizeHomeChartFiltersFieldSpanClass'>Add Fields Here</span></div>"
					+ "<div id='visionVisualizeHomeChartFiltersValues' class='visionVisualizeHomeChartFiltersValuesClass'/></div>"
					+ "</div>";
			    closeAllDialogsBoxes();
				var htmlString =localStorage.getItem("htmlSlicerString");
				if(htmlString!=null && htmlString !="" && htmlString !=undefined){
					var filterhtml = localStorage.getItem("htmlSlicerString");
					$("#dialog").html(filterhtml);
				}
				else{
					$("#dialog").html(Resultstr);
					$("#visualizeChartHomeSlicerData").append(filterDivId);
					$("#VisualizeBIHomeSlicerColumns").append(result);
				}	
               
				$("#dialog").dialog({
					title: (labelObject['Message'] != null ? labelObject['Message'] : 'Message'),
					width: 650,
					maxWidth: 650,
					height: 400,
					maxHeight: 1000,
					fluid: true,
					buttons: [{
						text: (labelObject['Apply'] != null ? labelObject['Apply'] : 'Apply'),
						click: function() {
							var htmlSlicerString = $("#dialog").html();
							localStorage.setItem("htmlSlicerString", htmlSlicerString);
							updateHomeSlicerData(chartDropDownVal);
							$(this).html("");
							$(this).dialog("close");
							$(this).dialog("destroy");
						}

					},
					{
						text: (labelObject['Cancel'] != null ? labelObject['Cancel'] : 'Cancel'),
						click: function() {
							$(this).html("");
							$(this).dialog("close");
							$(this).dialog("destroy");

						}
					}],
					open: function() {
						$(".VisionImageVisualizationHomeTableClass").unbind().click(function() {
							$(this).parent().parent().find('ul').toggle();
							if ($(this).parent().parent().find('ul').is(":visible")) {

								$(this).css({ transform: "rotate(90deg)" });
							} else {
								$(this).css({ transform: "rotate(360deg)" });
							}
						});
						$(".visionVisualizeHomeChartSlicerValuesCheckBox").on('change', function() {
							if (this.checked) {
								this.setAttribute("checked", "checked");
								this.checked = true;

							}
							else {
								this.removeAttribute("checked");
							}
						});

						var tableNameId = "visionVisualizeHomeChartTableToggleClass li";
						$('.' + tableNameId).draggable({//cube changes 
							revert: "invalid",
							helper: "clone"

						});

						$('[id^="visionVisualizeHomeChartFiltersField"]').droppable({//filters field
							revert: "invalid",
							refreshPositions: true,
							cursor: 'move',
							drop: function(event, ui) {
								if ($("#" + this.id).is(':visible')) {
									var id = ui.draggable[0].id;
									var label = ui.draggable[0].innerText;
									if (id != null && id != '' && id != undefined) {
										id = id.replace("_" + label, "");
									}
									var divid = this.id;
									if (divid != null && divid != '' && divid != undefined) {
										$("#Loader").css("display", "block");
										$("body").css({ "pointer-events": "auto" });
										addHomechartSlicerValues('visionVisualizeHomeChartFiltersValues', id, label, divid, filterCount);
										filterCount++;
									}


								}
							}

						});
						$("#Loader").css("display", "none");
						$("body").css({ "pointer-events": "auto" });
						$(".visionVisualizationDragColumns").addClass('visionVisualizationDragFilterColumns');
						$("#dialog").addClass('filterPopUp');
						$(".ui-dialog").addClass('homePageDDSlicer');
						$(".ui-dialog").css("z-index", "99999"); //jaggu
					},
					beforeClose: function(event, ui) {
						$(this).html("");
						$(this).dialog("destroy");
					}
				});
			}


		},
		error: function(e) {
			console.log(e);
			sessionTimeout(e);
			stopLoader();
		}
	});
}
function addHomechartSlicerValues(colAppendId, id, label, divid, filterCount) {
	var count = 0;
	var data = {};
	data['count'] = count;
	data['id'] = id;
	data['label'] = label;
	data['divid'] = divid;
	data['filterCount'] = filterCount;

	$.ajax({
		url: 'fetchHomeSlicerValues',
		type: "POST",
		data: data,
		dataType: 'json',
		traditional: true,
		cache: false,
		success: function(response) {
			stopLoader();
			$("#Loader").css("display", "none");
			$("body").css({ "pointer-events": "auto" });
			if (response != null && !jQuery.isEmptyObject(response)) {
				var result = response['result'];
				$("#" + colAppendId).append(result);
				$(".visionVisualizeHomeChartSlicerValuesCheckBox").on('change', function() {
					if (this.checked) {
						this.setAttribute("checked", "checked");
						this.checked = true;

					}
					else {
						this.removeAttribute("checked");
					}
				});
			}

		}, error: function(e) {
			console.log("The Error Message is:::" + e.message);
			sessionTimeout(e);
		}
	});
}
function RemoveSlicerColumns(filterCount, chartType, count) {
	$("#visionVisualizeHomeChartSlicerFieldDivId" + filterCount).remove();

}

function updateHomeSlicerData(chartDropDownVal) {
	var filtersId = "visionVisualizeHomeChartFiltersValues";

	var slicerObj = {};
	var tablesArr = [];
	$('#' + filtersId + ' div.visionVisualizeHomeChartSlicerFieldDivClass').each(function(i, ele) {
		var colName = $(this).children('div:nth-child(1)').children('div:nth-child(1)').find("input").val();
		var operator = $(this).children('div:nth-child(1)').children('div:nth-child(2)').find("select").val();
		var values = $(this).children('div:nth-child(2)').find('input[name="visionVisualizeHomeChartSlicerValuesCheckName"]:checked').map(function() {
			var value = this.value;
            //If single value has mutiple commma separating replace them to create as single string and changing to orginal state 
            value = value.replace(/ /g, "#"); // Replace spaces with #
            value = value.replace(/,/g, "$"); // Replace commas with $
            return value;
		}).get().join(",");
		var filterConditions = [];
		var filterObj = {};
		var tableName;
		var columnName;
		filterObj['colName'] = colName;
		filterObj['operator'] = operator;
		filterObj['values'] = values;
		if (colName != null && colName != '' && colName != undefined) {
			tableName = colName.split(".")[0];
			columnName = colName.split(".")[1];
			if (slicerObj != null && !jQuery.isEmptyObject(slicerObj) && slicerObj[tableName] && !jQuery.isEmptyObject(slicerObj[tableName])) {
				var filterArr = slicerObj[tableName];
				filterArr.push(filterObj);
				slicerObj[tableName] = filterArr;
			} else {
				filterConditions.push(filterObj);
				slicerObj[tableName] = filterConditions;
				tablesArr.push(tableName);
			}

		}
	});


	$.ajax({
		url: 'getSlicerHomeCharts',
		type: "POST",
		dataType: 'json',
		traditional: true,
		cache: false,
		async: true,
		data: {
			chartDropDownVal: chartDropDownVal,
			tablesArr: JSON.stringify(tablesArr)
		},
		success: function(response) {
			stopLoader();

			if (response != null && !jQuery.isEmptyObject(response)) {
				var dataarr = response['dataarr'];
				if (dataarr != null && dataarr != '' && dataarr != undefined) {
					for (var i = 0; i < dataarr.length; i++) {
						var XAxix = dataarr[i]['xAxix'];
						var yAxix = dataarr[i]['yAxix'];
						var type = dataarr[i]['type'];
						var table = dataarr[i]['table'];
						var id = dataarr[i]['chartid'];
						var Lebel = dataarr[i]['Lebel'];
						var aggColumnName = dataarr[i]['aggColumnName'];
						var filterCondition = dataarr[i]['filterCondition'];
						var chartPropObj = dataarr[i]['chartPropObj'];
						var chartConfigObj = dataarr[i]['chartConfigObj'];
						var labelLegend = dataarr[i]['labelLegend'];
						var parentDiv = $('#' + id).parent();
						var parentId = parentDiv[0]['id'];
						var paramCardDateObj = dataarr[i]['paramCardDateObj'];
						var cardType = dataarr[i]['cardType'];
						var cardTrendType = dataarr[i]['cardTrendType'];
						var count;
						if (parentId != null && parentId != '' && parentId != undefined) {
							count = parentId.replace("homeChartParentDiv", "");
						}
						 var allFilters = [];
                        var chartOptionsObj = $("#" + id + "_options").val();
                        if (chartOptionsObj != null && chartOptionsObj != '' && chartOptionsObj != undefined) {
                            chartPropObj = chartOptionsObj;
                        }
                        var chartFilter = $("#" + id + "_homePageFilter").val();
                        if (slicerObj != null && !jQuery.isEmptyObject(slicerObj)) {
                            var slicerFilter = slicerObj[table];
                            $("#" + id + "_filter").val(JSON.stringify(slicerFilter));
                            if (slicerFilter != null && !jQuery.isEmptyObject(slicerFilter)) {
                                for (var key in slicerFilter) {
                                    var paramObj = slicerFilter[key];
                                    allFilters.push(paramObj);
                                }
                            }
                        }
                        if (chartFilter != null && chartFilter != '' && chartFilter != undefined) {
                            chartFilter = JSON.parse(chartFilter);
                            if (chartFilter != null && !jQuery.isEmptyObject(chartFilter)) {
                                for (var key in chartFilter) {
                                    var paramObj = chartFilter[key];
                                    allFilters.push(paramObj);
                                }
                            }
                        }
                        var chartFilterCond = $("#" + id + "_chartFilter").val();
                        if (chartFilterCond != null && chartFilterCond != '' && chartFilterCond != undefined) {
                            chartFilterCond = JSON.parse(chartFilterCond);
                            if (chartFilterCond != null && !jQuery.isEmptyObject(chartFilterCond)) {
                                for (var key in chartFilterCond) {
                                    var paramObj = chartFilterCond[key];
                                    allFilters.push(paramObj);
                                }
                            }
                        }
                        if (filterCondition != null && filterCondition != '' && filterCondition != undefined) {
                            filterCondition = JSON.parse(filterCondition);
                            for (var j = 0; j < filterCondition.length; j++) {
                                var filterCondObj = filterCondition[j];
                                if (filterCondObj != null && !jQuery.isEmptyObject(filterCondObj)) {
                                    allFilters.push(filterCondObj);
                                }
                            }
                            if (allFilters != null && !jQuery.isEmptyObject(allFilters)) {
                                allFilters = JSON.stringify(allFilters);
                            }
                        } else {
                            if (allFilters != null && !jQuery.isEmptyObject(allFilters)) {
                                allFilters = JSON.stringify(allFilters);
                            }
                        }
                        allFilters = allFilters.replace("#", " "); // Replace # with space
                        allFilters = allFilters.replace("$", ","); // Replace $ with commma
                        if (type != null && type != '' && type != undefined && type == 'Card') {
							var chartid = id;
							var aggregateType = XAxix;
							$("#visionCardView").append("<div id='" + chartid + "' class='visionHomeCardViewClass' ></div>");
							getHomePageCardData(Lebel, aggregateType, chartid, table, yAxix, allFilters, paramCardDateObj, cardType, cardTrendType);

						}else{
						getVisualizeChart(id, type, XAxix, yAxix, table, aggColumnName, allFilters, chartPropObj, chartConfigObj, count, labelLegend);
					   }
					}
				}

			}
		}, error: function(e) {
			sessionTimeout(e);
		}
	});


}

//shakir
function addlegendLabelToTrace(traceObj, columnName, defaultLegendNames, userProvidedLegendNames) {
	if (!jQuery.isEmptyObject(userProvidedLegendNames) && userProvidedLegendNames !== null) {
		traceObj["name"] = userProvidedLegendNames[columnName];
	} else if (!jQuery.isEmptyObject(defaultLegendNames) && defaultLegendNames !== null &&
		defaultLegendNames[columnName] != null && defaultLegendNames[columnName] != '' && defaultLegendNames[columnName] != undefined) {
		traceObj["name"] = defaultLegendNames[columnName];
	}
	return traceObj;
}
function showAxisLabelsTooltipOnHover($this, labelTextDiv, chartId, transformHorVal, transformVerVal) {
	//	var curreText = $this.children().text();
	var curreText = $this.children().attr('data-unformatted');
	var currentLabelMainDiv = $this.parents().find("#" + chartId);
	var currentLabelParentEleClass = $(currentLabelMainDiv).find("." + labelTextDiv).attr("class");
	if (curreText !== null && curreText !== "" && curreText !== undefined && curreText !== "0") {
		var currentHoveredLabelFirst = $("." + currentLabelParentEleClass + " span:contains('" + curreText + "'):first");
		var currentHoveredLabelLast = $("." + currentLabelParentEleClass + " span:contains('" + curreText + "'):last");
		var currentHoveredLabel = $("#" + chartId + " ." + currentLabelParentEleClass + " span:contains('" + curreText + "')");
		currentHoveredLabel.css("transform", "translate(" + transformHorVal + "px," + transformVerVal + "px)");
		$(currentHoveredLabel).show();
	}
}
function hideAxisLabelsTooltipOnHover($this, labelTextDiv, chartId) {
	//	var curreText = $this.children().text();
	var curreText = $this.children().attr('data-unformatted');
	var currentLabelMainDiv = $this.parents().find("#" + chartId);
	var currentLabelSpanEle = $(currentLabelMainDiv).find("." + labelTextDiv).attr("class");
	$("." + currentLabelSpanEle + " span:contains('" + curreText + "')").hide();
}
function tableColumnsFilteration(event, $this) {
	var text = event.target.value;
	var pattern = new RegExp(text, 'i');
	var listItems = $this.parents('.visionVisualizationDragColumns').find('li');
	var listElementsLength = listItems.length;
	for (var i = 0; i < listElementsLength; i++) {
		var item = listItems[i];
		if (pattern.test(item.innerText)) {
			$(item).show();
		} else {
			$(item).hide();
		}
	}
	var toShowNoColsText = true;
	for (var i = 1; i < listElementsLength; i++) {
		var item = listItems[i];
		if (($(item).css('display') === 'list-item')) {
			toShowNoColsText = false;
		}
	}
	var lastListItem = listItems[listElementsLength - 1];
	if (toShowNoColsText) {
		$(lastListItem).show();
		$(lastListItem).attr('class', "");
	} else {
		$(lastListItem).hide();
	}
}
function getChartContent(chartId, count, charttype) {

	$.ajax({
		type: "POST",
		url: "getchartchildElement",
		cache: false,
		data: {
			chartid: chartId,
			count: count,
			chartType: charttype
		},
		success: function(response) {
			closeDialogBox("#dialog1");
			$("#dialog1").html(response);
			$("#dialog1").dialog({
				title: (labelObject['Message'] != null ? labelObject['Message'] : 'Message'),
				modal: true,
				height: 'auto',
				minWidth: 600,
				maxWidth: 'auto',
				fluid: true,
				open: function() {
					stopLoader();
					$(this).closest(".ui-dialog").find(".ui-button").eq(1).addClass("dialogyes");
					$(this).closest(".ui-dialog").find(".ui-button").eq(2).addClass("dialogno");
					$(".visionHeaderMain").css("z-index", "999");
					$(".visionFooterMain").css("z-index", "999");
					$("#dialog1").addClass("predictiveAnalysis");
				},
				beforeClose: function(event, ui) {
					$(".visionHeaderMain").css("z-index", "99999");
					$(".visionFooterMain").css("z-index", "99999");
				}
			});
		},
		error: function(e) {
			console.log(e);
			sessionTimeout(e);
			stopLoader();
		}
	});



}
function getpredictivechart(event, chartId, charttype, count, pridictionkey) {

	$("#predictiveAvg").remove()
	$("#pageBody").append("<div id='predictiveAvg'><h6 class='selectIntervalClass'>Select Interval</h6></div>");
	$(".searchFilterResultsList").removeClass("active");
	$(event.target).parent().addClass("active");
	var valesArr = [];
	var str = "";
	var list = ['2', '3', '4', '5'];
	for (var value of list) {
		str = $('#predictiveAvg').append(`<label class="form-check-label"><input class="" type="radio" id="${value}" name="interest" value="${value}">&nbsp;&nbsp;${value}</label>`).append(`<br>`);
	}
	if (pridictionkey != null && pridictionkey == 'M' || pridictionkey == 'E') {
		$("#predictiveAvg").click(function() {
			$("#predictiveAvg").find('input[type="radio"]:checked').each(function() {
				var value = $(this).val();
				valesArr.push(value);
				if (valesArr != null && valesArr != '' && valesArr != 'undefine') {
					getpridictiveData(valesArr.toString(), count, chartId, charttype, pridictionkey);
					valesArr.pop(value);
				}
			});
		});
		/*$("#dialog1").append(str);*/
		$(str).insertAfter($("#searchedDxpSearchResults"));
	} else {
		$("#predictiveAvg").html("");
		getpridictiveData('', count, chartId, charttype, pridictionkey);
	}

}
function getpridictiveData(IntervalValues, count, chartId, chartType, pridictionkey) {

		$.ajax({
		type: 'post',
		traditional: true,
		dataType: 'html',
		cache: false,
		url: 'getChartFilterData',
		async: true,
		data: {
			chartId: chartId,
			chartType: chartType,
		},
		success: function(response) {
			if (response != null && !jQuery.isEmptyObject(response)) {
				var result = JSON.parse(response);
				var dataarr = result['dataarr'];
				if (dataarr != null && dataarr != '' && dataarr != undefined) {
					for (var i = 0; i < dataarr.length; i++) {
						var axix = dataarr[i]['xAxix'];
						var values = dataarr[i]['yAxix'];
						var type = dataarr[i]['type'];
						var table = dataarr[i]['table'];
						var id = dataarr[i]['chartid'];
						var Lebel = dataarr[i]['Lebel'];
						var aggColumnName = dataarr[i]['aggColumnName'];
						var chartPropObj = dataarr[i]['chartPropObj'];
						var chartConfigObj = dataarr[i]['chartConfigObj'];
						var labelLegend = dataarr[i]['labelLegend'];
						var axisColumns = [];
						var valuesColumns = [];
						var tablesObj = [];

						if (axix != null && axix != '' && axix != undefined) {
							var axisArr = JSON.parse(axix);
							$.each(axisArr, function(index, value) {
								if (value != null && !jQuery.isEmptyObject(value)) {
									var columnObj = {};
									var tableName = value['tableName'];
									columnObj['tableName'] = value['tableName'];
									columnObj['columnName'] = value['columnName'];
									axisColumns.push(columnObj);
									if (!(tablesObj.indexOf(tableName) > -1)) {
										tablesObj.push(tableName);
									}
								}
							});
						}

						if (values != null && values != '' && values != undefined) {
							var valuesArr = JSON.parse(values);
							$.each(valuesArr, function(index, value) {
								if (value != null && !jQuery.isEmptyObject(value)) {
									var columnObj = {};
									columnObj['tableName'] = value['tableName'];
									columnObj['columnName'] = value['columnName'];
									columnObj['aggColumnName'] = value['aggColumnName'];
									columnObj['userProvidedLegendLabel'] = value['userProvidedLegendLabel'];
									valuesColumns.push(columnObj);
									var tableName = value['tableName'];
									if (!(tablesObj.indexOf(tableName) > -1)) {
										tablesObj.push(tableName);
									}
								}
							});
						}

						
						
						var data = {};
						data['axisColumns'] = JSON.stringify(axisColumns);
						data['valuesColumns'] = JSON.stringify(valuesColumns);
						data['tablesObj'] = JSON.stringify(tablesObj);
						data['IntervalValues'] = IntervalValues;
						data['chartId'] = chartId;
						data['chartType'] = chartType;
						data['pridictionkey'] = pridictionkey;
						$.ajax({
							url: 'movingAvgData',
							type: "POST",
							traditional: true,
							cache: false,
							data: data,
							success: function(response) {
								{
									var icon = {
										'height': 36,
										'width': 36,
										'path': 'M14.5,35.4c-0.3,0-0.7-0.1-1-0.3c-0.4-0.3-0.7-0.8-0.7-1.3V17.7c0-0.5-0.2-1-0.6-1.4L0.7,4.7   C0,4-0.2,3,0.2,2.1c0.4-0.9,1.2-1.5,2.2-1.5h31.2c1,0,1.9,0.6,2.2,1.5C36.2,3,36,4,35.3,4.7L23.7,16.3c-0.4,0.4-0.6,0.9-0.6,1.4   v13.7c0,0.7-0.4,1.3-1.1,1.5l-7,2.3C14.8,35.4,14.7,35.4,14.5,35.4z M2.4,1.9c-0.5,0-0.9,0.3-1.1,0.7C1.2,3,1.3,3.5,1.6,3.8   l11.6,11.6c0.6,0.6,0.9,1.4,0.9,2.3v16.1c0,0.2,0.1,0.3,0.2,0.3c0.1,0,0.2,0.1,0.3,0.1l7-2.3c0.2-0.1,0.3-0.2,0.3-0.4V17.7   c0-0.9,0.3-1.7,0.9-2.3L34.4,3.8c0.3-0.3,0.4-0.8,0.2-1.3c-0.2-0.4-0.6-0.7-1.1-0.7H2.4z',
										'color': 'rgb(31,119,180)'
									};
									var icon1 = {
										'width': 1000,
										'path': 'm922 660c-5 4-9 7-14 11-359 263-580-31-580-31l-102 28 58-400c0 1 1 1 2 2 118 108 351 249 351 249s-62 27-100 42c88 83 222 183 347 122 16-8 30-17 44-27-2 1-4 2-6 4z m36-329c0 0 64 229-88 296-62 27-124 14-175-11 157-78 225-208 249-266 8-19 11-31 11-31 2 5 6 15 11 32-5-13-8-20-8-20z m-775-239c70-31 117-50 198-32-121 80-199 346-199 346l-96-15-58-12c0 0 55-226 155-287z m603 133l-317-139c0 0 4-4 19-14 7-5 24-15 24-15s-177-147-389 4c235-287 536-112 536-112l31-22 100 299-4-1z m-298-153c6-4 14-9 24-15 0 0-17 10-24 15z" transform="matrix(1 0 0 -1 0 850)"',
										'ascent': 850,
										'descent': -150,
										'color': 'rgb(31,119,180)'
									};
									var deleteicon = {
										'height': 512,
										'width': 448,
										'path': 'M135.2 17.69C140.6 6.848 151.7 0 163.8 0H284.2C296.3 0 307.4 6.848 312.8 17.69L320 32H416C433.7 32 448 46.33 448 64C448 81.67 433.7 96 416 96H32C14.33 96 0 81.67 0 64C0 46.33 14.33 32 32 32H128L135.2 17.69zM31.1 128H416V448C416 483.3 387.3 512 352 512H95.1C60.65 512 31.1 483.3 31.1 448V128zM111.1 208V432C111.1 440.8 119.2 448 127.1 448C136.8 448 143.1 440.8 143.1 432V208C143.1 199.2 136.8 192 127.1 192C119.2 192 111.1 199.2 111.1 208zM207.1 208V432C207.1 440.8 215.2 448 223.1 448C232.8 448 240 440.8 240 432V208C240 199.2 232.8 192 223.1 192C215.2 192 207.1 199.2 207.1 208zM304 208V432C304 440.8 311.2 448 320 448C328.8 448 336 440.8 336 432V208C336 199.2 328.8 192 320 192C311.2 192 304 199.2 304 208z',
										'color': 'rgb(31,119,180)'
									};
									var Expand = {
										'height': 512,
										'width': 448,
										'path': 'M447.1 319.1v135.1c0 13.26-10.75 23.1-23.1 23.1h-135.1c-12.94 0-24.61-7.781-29.56-19.75c-4.906-11.1-2.203-25.72 6.937-34.87l30.06-30.06L224 323.9l-71.43 71.44l30.06 30.06c9.156 9.156 11.91 22.91 6.937 34.87C184.6 472.2 172.9 479.1 160 479.1H24c-13.25 0-23.1-10.74-23.1-23.1v-135.1c0-12.94 7.781-24.61 19.75-29.56C23.72 288.8 27.88 288 32 288c8.312 0 16.5 3.242 22.63 9.367l30.06 30.06l71.44-71.44L84.69 184.6L54.63 214.6c-9.156 9.156-22.91 11.91-34.87 6.937C7.798 216.6 .0013 204.9 .0013 191.1v-135.1c0-13.26 10.75-23.1 23.1-23.1h135.1c12.94 0 24.61 7.781 29.56 19.75C191.2 55.72 191.1 59.87 191.1 63.1c0 8.312-3.237 16.5-9.362 22.63L152.6 116.7l71.44 71.44l71.43-71.44l-30.06-30.06c-9.156-9.156-11.91-22.91-6.937-34.87c4.937-11.95 16.62-19.75 29.56-19.75h135.1c13.26 0 23.1 10.75 23.1 23.1v135.1c0 12.94-7.781 24.61-19.75 29.56c-11.1 4.906-25.72 2.203-34.87-6.937l-30.06-30.06l-71.43 71.43l71.44 71.44l30.06-30.06c9.156-9.156 22.91-11.91 34.87-6.937C440.2 295.4 447.1 307.1 447.1 319.1z',
										'color': 'rgb(31,119,180)'
									};
									var CreateIcon = {
										'height': 512,
										'width': 448,
										'id': chartId,
										'path': 'M384 32C419.3 32 448 60.65 448 96V416C448 451.3 419.3 480 384 480H64C28.65 480 0 451.3 0 416V96C0 60.65 28.65 32 64 32H384zM224 368C237.3 368 248 357.3 248 344V280H312C325.3 280 336 269.3 336 256C336 242.7 325.3 232 312 232H248V168C248 154.7 237.3 144 224 144C210.7 144 200 154.7 200 168V232H136C122.7 232 112 242.7 112 256C112 269.3 122.7 280 136 280H200V344C200 357.3 210.7 368 224 368z',
										'color': 'rgb(31,119,180)'
									};
									var EditIcon = {
										'height': 512,
										'width': 512,
										'id': chartId,
										'path': 'M490.3 40.4C512.2 62.27 512.2 97.73 490.3 119.6L460.3 149.7L362.3 51.72L392.4 21.66C414.3-.2135 449.7-.2135 471.6 21.66L490.3 40.4zM172.4 241.7L339.7 74.34L437.7 172.3L270.3 339.6C264.2 345.8 256.7 350.4 248.4 353.2L159.6 382.8C150.1 385.6 141.5 383.4 135 376.1C128.6 370.5 126.4 361 129.2 352.4L158.8 263.6C161.6 255.3 166.2 247.8 172.4 241.7V241.7zM192 63.1C209.7 63.1 224 78.33 224 95.1C224 113.7 209.7 127.1 192 127.1H96C78.33 127.1 64 142.3 64 159.1V416C64 433.7 78.33 448 96 448H352C369.7 448 384 433.7 384 416V319.1C384 302.3 398.3 287.1 416 287.1C433.7 287.1 448 302.3 448 319.1V416C448 469 405 512 352 512H96C42.98 512 0 469 0 416V159.1C0 106.1 42.98 63.1 96 63.1H192z',
										'color': 'rgb(31,119,180)'
									};
									var pridictiveAnalysis = {
										'height': 512,
										'width': 512,
										'id': chartId,
										'path': 'M384 160C366.3 160 352 145.7 352 128C352 110.3 366.3 96 384 96H544C561.7 96 576 110.3 576 128V288C576 305.7 561.7 320 544 320C526.3 320 512 305.7 512 288V205.3L342.6 374.6C330.1 387.1 309.9 387.1 297.4 374.6L191.1 269.3L54.63 406.6C42.13 419.1 21.87 419.1 9.372 406.6C-3.124 394.1-3.124 373.9 9.372 361.4L169.4 201.4C181.9 188.9 202.1 188.9 214.6 201.4L320 306.7L466.7 159.1L384 160z',
										'color': 'rgb(31,119,180)'
									};

									$(".visualizationDashboardView").css("display", "block");
									var resultObj = response;
									var dataPropObject = resultObj['dataPropObject'];
									var legendLabels = dataPropObject["legendLabel"];
									var chartDataObj = resultObj['data'];
									var layoutObj = resultObj['layout'];
									var columnobj = resultObj['columnObj'];
									var axixColumn = columnobj['axixColumn'];
									var data = [];
									var dataObj = {};
									var config = {
										responsive: true,
										displayModeBar: true,
										downloadImage: true,
										displaylogo: false,
										//                     modeBarButtonsToRemove: ['lasso2d']
										//                    
										modeBarButtonsToRemove: ['pan2d', 'zoomIn2d', 'zoomOut2d', 'sendDataToCloud', 'hoverClosestCartesian', 'autoScale2d', 'lasso2d', 'select2d', 'zoom2d']
									};
									var axisColumnName;
									var valuesColumnName;
									var defaultLegendNames = {};
									var userProvidedLegendNames = {};
									if (legendLabels !== null && legendLabels !== "" && legendLabels !== undefined && legendLabels.includes(",")) {
										legendLabels = legendLabels.split(",");
									}
									$.each(axisColumns, function(index, value) {
										var axisName = value.columnName.split(".")[1];
										axisColumnName = axisName.replace(/[()]/g, "");
										axisColumnName = axisColumnName.replace(/_/g, " ");
										defaultLegendNames[axisColumnName] = axisColumnName;
									});
									$.each(valuesColumns, function(index, value) {
										var valueName = value.columnName.split(".")[1];
										valuesColumnName = valueName.replace(/[()]/g, "");
										valuesColumnName = valuesColumnName.replace(/_/g, " ");
										defaultLegendNames[valuesColumnName] = valuesColumnName;
										if (legendLabels !== undefined && legendLabels !== null && $.isArray(legendLabels)) {
											userProvidedLegendNames[valuesColumnName] = legendLabels[index];
										}
									});
									if (legendLabels !== null && legendLabels !== "" && legendLabels !== undefined && !$.isArray(legendLabels)) {
										userProvidedLegendNames[valuesColumnName] = legendLabels;
									}
									//                    $("#visionVisualizeChartId" + count).css('width', '100%', '!important');
									//                    $("#visionVisualizeChartId" + count).css('height', '100%', '!important');
									if (chartType != null && chartType != '' && chartType != undefined && chartType == 'lines') {
										var colorCount = 0;
										var lineColorCount = 0;
										var labelCount = 0;
										colorArray = ['#fd7e14', '#1864ab', '#0b7285', '#ff6b6b'];
										$.each(chartDataObj, function(key, val) {
											var traceObj = {};
											var colorObj = {};
											if (key !== axixColumn) {
												traceObj['x'] = chartDataObj[axixColumn];
												traceObj['y'] = chartDataObj[key];
												traceObj['type'] = chartType;
												traceObj = addlegendLabelToTrace(traceObj, key, defaultLegendNames, userProvidedLegendNames);
												$.each(dataPropObject, function(key, val) {
													if (key === 'marker' && !jQuery.isEmptyObject(val) && val !== null) {
														var colorsArray = val['color'];
														if (colorsArray !== undefined && colorsArray !== null && !$.isArray(colorsArray)) {
															colorObj['color'] = colorsArray;
														} else if (colorsArray !== undefined && colorsArray !== null && $.isArray(colorsArray)) {
															colorObj['color'] = colorsArray[colorCount++];
														} else {
															colorObj['color'] = colorArray[colorCount++];
														}
														colorObj['size'] = val['size'];
														traceObj[key] = colorObj;
													} else if (key === 'marker' && (jQuery.isEmptyObject(val) || val === null)) {
														colorObj['color'] = colorArray[colorCount++];
														traceObj[key] = colorObj;
													} else if (key === 'line' && !jQuery.isEmptyObject(val) && val !== null) {
														var lineObject = Object.assign({}, val);
														var colorsArray = lineObject['color'];
														if (colorsArray !== undefined && colorsArray !== null && !$.isArray(colorsArray)) {
															lineObject['color'] = colorsArray;
														} else if (colorsArray !== undefined && colorsArray !== null && $.isArray(colorsArray)) {
															lineObject['color'] = colorsArray[lineColorCount++];
														} else {
															lineObject['color'] = colorArray[lineColorCount++];
														}
														traceObj[key] = lineObject;
													} else {
														traceObj[key] = val;
													}
												});
											}
											if (traceObj !== null && !jQuery.isEmptyObject(traceObj)) {
												data.push(traceObj);
											}
										});
									} else if (chartType != null && chartType != '' && chartType != undefined && chartType == 'scatter') {
										var chartNameCount = 0;
										var colorCount = 0;
										colorArray = ['#1864ab', '#fd7e14', '#0b7285', '#ff6b6b'];
										$.each(chartDataObj, function(key, val) {
											var traceObj = {};
											var colorObj = {};
											if (key !== axixColumn) {
												traceObj['x'] = chartDataObj[axixColumn];
												traceObj['y'] = chartDataObj[key];
												traceObj['type'] = chartType;
												traceObj['mode'] = 'markers';

												traceObj['marker'] = colorObj;
												$.each(dataPropObject, function(key, val) {
													if (key === 'marker' && !jQuery.isEmptyObject(val) && val !== null) {
														var colorsArray = val['color'];
														if (colorsArray !== undefined && colorsArray !== null && !$.isArray(colorsArray)) {
															colorObj['color'] = colorsArray;
														} else if (colorsArray !== undefined && colorsArray !== null && $.isArray(colorsArray)) {
															colorObj['color'] = colorsArray[colorCount++];
														} else {
															colorObj['color'] = colorArray[colorCount++];
														}
														colorObj['size'] = val['size'];
														traceObj[key] = colorObj;
													} else if (key === 'marker' && (jQuery.isEmptyObject(val) || val === null)) {
														colorObj['color'] = colorArray[colorCount++];
														traceObj[key] = colorObj;
													} else {
														traceObj[key] = val;
													}
												});
											}
											if (traceObj !== null && !jQuery.isEmptyObject(traceObj)) {
												data.push(traceObj);
											}
										});
									} else if (chartType != null && chartType != '' && chartType != undefined && chartType == 'column') {
										var colorCount = 0;
										var labelCount = 0;
										colorArray = ['#1864ab', '#fd7e14', '#0b7285', '#ff6b6b'];
										$.each(chartDataObj, function(key, val) {

											var traceObj = {};
											var colorObj = {};
											if (key !== axixColumn) {
												traceObj['x'] = chartDataObj[axixColumn];
												traceObj['y'] = chartDataObj[key];
												traceObj['type'] = 'bar';

												$.each(dataPropObject, function(key, val) {
													if (key === 'marker' && !jQuery.isEmptyObject(val) && val !== null) {
														var colorsArray = val['colors'];
														if (colorsArray !== undefined && colorsArray !== null && !$.isArray(colorsArray)) {
															colorObj['color'] = colorsArray;
														} else if (colorsArray !== undefined && colorsArray !== null && $.isArray(colorsArray)) {
															colorObj['color'] = colorsArray[colorCount++];
														} else {
															colorObj['color'] = colorArray[colorCount++];
														}
														traceObj[key] = colorObj;
													} else if (key === 'marker' && (jQuery.isEmptyObject(val) || val === null)) {
														colorObj['color'] = colorArray[colorCount++];
														traceObj[key] = colorObj;
													} else {
														traceObj[key] = val;
													}
												});
											}
											if (traceObj !== null && !jQuery.isEmptyObject(traceObj)) {
												data.push(traceObj);
											}
										});
									} else {
										dataObj['x'] = chartDataObj[0];
										dataObj['y'] = chartDataObj[key];
										dataObj['type'] = chartType;
										dataObj['name'] = 'value';
										dataObj['marker'] = colorObj;
									}
									var chartOuterId = 'visualizechartId';
									let observer = new MutationObserver(function(mutations) {
										window.dispatchEvent(new Event('resize'));
									});

									let child = document.getElementById(chartOuterId);
									observer.observe(child, { attributes: true });
									if (chartOuterId != null && chartOuterId != '' && jQuery.inArray(chartOuterId, chartDivArr) <= -1) {
										chartDivArr.push(chartOuterId);
									}
									var layout = {
										margin: {
											l: 30,
											r: 60,
											b: 50,
											t: 50,
											//                        pad: 10
										},
										//                    width: 250,
										height: 300,
										//                    wieght:400,
										dragmode: false,
										font: {
											size: 9
										},
										modebar: {
											orientation: 'v',
											//                        bgcolor: '#f1f1f1',
											color: '#0b4a99',
											activecolor: '#9ED3CD'
										},
										images: [
											{
												x: 0.02,
												y: 1.08,
												sizex: 0.105,
												sizey: 0.2,
												source: "images/PiLog Logo New.png",
												xanchor: "right",
												xref: "paper",
												yanchor: "bottom",
												yref: "paper"
											}
										],
										title: {
											text: "test",
											font: {
												family: '"Open Sans", verdana, arial, sans-serif',
												size: 24
											},
											xref: 'paper',
											x: 0.1,
										}
									};
									if (chartType != null && chartType != '' && chartType != undefined && (chartType == 'donut' || chartType == 'pie')) {
										layout['showlegend'] = false;

									} else {
										layout['showlegend'] = true;
									}
									var legend = {
										"x": 0.2,
										"y": -0.2,
										"orientation": "h"

									}


									$.each(layoutObj, function(key, val) {
										layout[key] = val;
									});
									var polar = {
										radialaxis: {
											visible: true
										},
										showlegend: true
									};
									if (chartType == 'scatterpolar') {
										layout['polar'] = polar;
									}
									layout['legend'] = legend;


									$("#" + chartId).empty();
									Plotly.newPlot(chartId, data, layout, config);

									//                if(chartType !=null && chartType !='' && chartType !=''){
									//                    
									//                }



								}

							}, error: function(e) {
								sessionTimeout(e);
							}
						});

					}
				}


			}
		},
		error: function(e) {
			sessionTimeout(e);
		}
	});

}
function assignUser(chartId, chartType, layout, data, count, event) {
	chartId = $(chartId).attr('id');
	$("#userRoleDivID").html("");
	$("#userRoleDivID").hide();
	$("#userroleId").html("");
	$("#userRoletitleId").html("");
	//    $("#userRolecontent").html("");
	$.ajax({
		type: "POST",
		url: "getlandingGraphData",
		cache: false,
		dataType: 'json',
		data: {
			chartId: chartId
		},
		success: function(response) {
			var valesArr = [];
			var dataarray = response['dataarr'];
			var users = response['users'];
			if (response != null) {
				$("#dialog").html(users);
				$("#applybuttonId").remove();
				$("#dialog").dialog({
					title: (labelObject['Message'] != null ? labelObject['Message'] : 'Message'),
					modal: true,
					width: 400,
					height: 250,
					fluid: true,
					buttons: [{
						text: (labelObject['Create'] != null ? labelObject['Create'] : 'Create'),
						click: function() {
							createChart(chartId, valesArr.toString(), dataarray);

						}
					},
					{
						text: (labelObject['Cancel'] != null ? labelObject['Cancel'] : 'Cancel'),
						click: function() {
							$("#chartdialog").empty();
							$("#chartdialog").dialog('close');
							endAjax();
						}
					}],
					open: function() {
						$(this).closest(".ui-dialog").find(".ui-button").eq(1).addClass("dialogyes");
						$(".visionHeaderMain").css("z-index", "999");
						$(".visionFooterMain").css("z-index", "999");
						$(".ui-dialog-content").css("text-align", "inherit");
					},
					beforeClose: function(event, ui) {
						$(".visionHeaderMain").css("z-index", "99999");
						$(".visionFooterMain").css("z-index", "99999");
					}
				});
				$("#rolesdataId").click(function() {
					$("#rolesdataId").find('input[type="checkbox"]:checked').each(function() {
						var value = $(this).val();
						valesArr.push(value);
					});

				});
			}
		},
		error: function(e) {
			sessionTimeout(e);
		}
	});
}

function createChart(chartId, username, dataarray) {

	var data = {};
	data['axisColumns'] = dataarray[0]['xAxix'];
	data['valuesColumns'] = dataarray[0]['yAxix'];
	data['tablesObj'] = dataarray[0]['table'];
	data['chartType'] = dataarray[0]['type'];
	;
	data['chartId'] = chartId;
	data['aggregateName'] = dataarray[0]['aggregateType'];
	data['tableName'] = dataarray[0]['table'];
	data['columnLebel'] = dataarray[0]['Lebel'];
	data['filterConditions'] = dataarray[0]['filterColumns'];
	data['chartPropObj'] = dataarray[0]['chartPropObj'];
	data['chartConfigPositionKeyStr'] = dataarray[0]['chartConfigObj'];
	data['username'] = username;
	$.ajax({
		url: 'insertdata',
		type: "POST",
		dataType: 'html',
		traditional: true,
		cache: false,
		data: data,
		success: function(response) {
			if (response != null && !jQuery.isEmptyObject(response)) {
				var dataarr = response['dataarr'];
				$("#dialog").html("Graph " + response);
				$("#dialog").dialog({
					modal: true,
					title: "Message",
					height: 150,
					Width: 250,
					fluid: true,
					buttons: {
						Ok: function() {
							$(this).html("");
							$(this).dialog("close");
							$(this).dialog("destroy");
							fetchchartGrid();
						},
					},
					open: function() {
						$(this).closest(".ui-dialog").find(".ui-button").eq(1).addClass("dialogyes");
						$(this).closest(".ui-dialog").find(".ui-button").eq(2).addClass("dialogno");
						$(this).closest(".ui-dialog").addClass("visionCommonDialog");
						$(".visionHeaderMain").css("z-index", "999");
						$(".visionFooterMain").css("z-index", "999");
					},
					beforeClose: function(event, ui) {
						$(".visionHeaderMain").css("z-index", "99999");
						$(".visionFooterMain").css("z-index", "99999");
					}
				});

			}
		}, error: function(e) {
			sessionTimeout(e);
		}
	});


}

function getdashbordNewName(id) {
	var dashbordname = $("#" + id).val();
	if (dashbordname == 'New') {
		$("#reasonId").show();
		$("#dailog_error_id").hide();
	} else {
		$("#reasonId").hide();
		$("#dailog_error_id").hide();
	}
}
function getPivotGridData(tableName) {
	//    $("#divPivotGrid").html("");
	//    $("#jqxpivotGridDialog").html("");
	//    $("#divPivotGrid").html("");
	$.ajax({
		type: "post",
		traditional: true,
		url: "jqxPivotGrid",
		cache: false,
		data: {
			'tableName': tableName
		},
		success: function(response) {
			if (response != null) {
				var data = response['data'];
				var rows = response['rows'];
				var columns = response['columns'];
				var datafields = response['datafields'];
				var filter = response['filters'];
				var values = response['values'];
				var columnsList = response['columnsList'];
				var source =
				{
					localdata: data,
					datatype: "array",
					datafields: datafields,
				};
				var dataAdapter = new $.jqx.dataAdapter(source);
				dataAdapter.dataBind();
				// create a pivot data source from the dataAdapter
				var pivotDataSource = new $.jqx.pivot(
					dataAdapter,
					{
						customAggregationFunctions: {
							'var': function(values) {
								if (values.length <= 1)
									return 0;
								// sample's mean
								var mean = 0;
								for (var i = 0; i < values.length; i++)
									mean += values[i];
								mean /= values.length;
								// calc squared sum
								var ssum = 0;
								for (var i = 0; i < values.length; i++)
									ssum += Math.pow(values[i] - mean, 2)
								// calc the variance
								var variance = ssum / values.length;
								return variance;
							}
						},
						pivotValuesOnRows: false,
						totals: { rows: { subtotals: true, grandtotals: true }, columns: { subtotals: false, grandtotals: true } },
						fields: rows,
						rows: [],
						columns: [],
						values: values
					});
				var localization = { 'var': 'Variance' };
				//                                var localization = getLocalization('de');
				// create a pivot grid
				$('#divPivotGrid').jqxPivotGrid(
					{
						localization: localization,
						source: pivotDataSource,
						treeStyleRows: false,
						autoResize: false,
						multipleSelectionEnabled: true,
						itemsRenderer: function(pivotItem) {
							var backgroundColor = pivotItem.isColumn ? 'rgba(187, 232, 227, 255)' : 'rgba(203, 254, 187, 255)';
							if (pivotItem.isSelected)
								backgroundColor = pivotItem.isColumn ? 'rgba(167, 212, 207, 255)' : 'rgba(183, 234, 157, 255)';
							var sortElement = '';
							if (pivotItem.hierarchy.getSortItem() == pivotItem) {
								var elementClass = pivotItem.hierarchy.getSortOrder() == 'desc' ? 'jqx-icon-arrow-down' : 'jqx-icon-arrow-up';
								sortElement = "<div id='sortElement' class='" + elementClass + "' style='margin-right: 0px; width: 16px; height: 11px; font-size: smaller; vertical-align: bottom; padding-top: 4px;'></div>";
							}
							var additionalItem = '';
							var classStyle = 'jqx-pivotgrid-expand-button';
							if (pivotItem.isExpanded) {
								classStyle = 'jqx-pivotgrid-collapse-button';
							}
							additionalItem = '<div style="position: relative; top: 5px; padding: 5px; width: 11px; height: 11px;" class="' + classStyle + '"></div>'
							if (pivotItem.items.length == 0) {
								additionalItem = '';
							}
							return additionalItem + "<div style='background: " + backgroundColor + "; width: calc(100% – 8px); height: calc(100% - 4px); font-size: smaller; text-align: center; vertical-align: bottom; padding-top: 4px;'>" + pivotItem.text + sortElement + "</div>";
							//                                            return "<div style='background: " +  backgroundColor + "; width: calc(100% - 8px); height: calc(100% - 8px); padding: 4px;'>"+ pivotItem.text+ sortElement+ "</div>";
						},
						cellsRenderer: function(pivotCell) {
							var colors = ['rgba(248, 105, 107, 255)', 'rgba(250,170,120,255)', 'rgba(255,230,130,255)', 'rgba(175,215,130,255)', 'rgba(100,190,120,255)'];
							var selectedColors = ['rgba(228, 85, 87, 255)', 'rgba(230,150,100,255)', 'rgba(235,210,110,255)', 'rgba(155,195,110,255)', 'rgba(80,170,100,255)'];
							var val = Math.min(pivotCell.value, 20);
							var backgroundColor = pivotCell.isSelected ? selectedColors[Math.round(val / 5)] : colors[Math.round(val / 5)];
							if (pivotCell.pivotColumn.text != 'Sum')
								backgroundColor = pivotCell.isSelected ? 'rgba(225, 225, 225, 255)' : 'rgba(255, 255, 255, 255)';
							if (pivotCell.isSelected)
								backgroundColor
							var cellText = pivotCell.value == 0 ? '' : pivotCell.formattedValue;
							return "<div style='background: " + backgroundColor + "; width: calc(100%-8px); height: 100%; padding: 4px; margin: 0px;'>" + cellText + "</div>";
						},
					});
				$('#divPivotGrid').on('pivotitemexpanding pivotitemcollapsing pivotitemexpanded pivotitemcollapsed pivotitemselectionchanged sortchanging sortchanged sortremoving sortremoved', function(event) {
					var t = new Date();
					var timeString = t.getHours() + ":" + t.getMinutes() + ":" + t.getSeconds() + ":" + t.getMilliseconds();
					var eventData = 'Time: ' + timeString + ' Event: ' + event.type + ', pivotItem: ' + event.args.pivotItem.text;
					if (event.type == 'itemselectionchanged')
						eventData += ', Selected: ' + event.args.selected;
					eventData += "\n";
					$('#eventText').val(eventData + $('#eventText').val());
				});
				$('#divPivotGrid').on('pivotitemmouseup pivotitemmousedown pivotitemclick pivotitemdblclick', function(event) {
					var t = new Date();
					var timeString = t.getHours() + ":" + t.getMinutes() + ":" + t.getSeconds() + ":" + t.getMilliseconds();
					var eventData = 'Time: ' + timeString + ' Event: ' + event.type + ', pivotItem: ' + event.args.pivotItem.text + ', mousebutton: ' + event.args.mousebutton;
					eventData += "\n";
					//                                    $("#divContextMenu").css('display:block !important;');

				});
				$('#divPivotGrid').on('pivotcellmouseup pivotcellmousedown pivotcellclick pivotcelldblclick', function(event) {
					var t = new Date();
					var timeString = t.getHours() + ":" + t.getMinutes() + ":" + t.getSeconds() + ":" + t.getMilliseconds();
					var eventData = 'Time: ' + timeString + ' Event: ' + event.type + ', pivot row: ' + event.args.pivotRow.text + ', pivot column: ' + event.args.pivotColumn.text + ', mousebutton: ' + event.args.mousebutton;
					eventData += "\n";
					$('#eventText').val(eventData + $('#eventText').val());
				});
				//                                $('#eventText').jqxTextArea();
				//                                $("#btnClearLog").jqxButton().on('click', function () { $('#eventText').val("");});
				var pivotGridInstance = $('#divPivotGrid').jqxPivotGrid('getInstance');
				// create a pivot grid
				$('#divPivotGridDesigner').jqxPivotDesigner(
					{
						type: 'pivotGrid',
						target: pivotGridInstance
					});
				$('#divPivotGrid').on('pivotcelldblclick', function(e) {
					var args = e.args;
					drillThrough(args.pivotRow, args.pivotColumn);
				});
				pivotGridInstance.refresh();
				$("#jqxpivotGridDialog").dialog({

					title: labelObject['Descriptive Analytics'] != null ? labelObject['Descriptive Analytics'] : 'Descriptive Analytics',
					modal: true,
					height: 520,
					width: 857,
					fluid: true,
					buttons: [{
						text: (labelObject['Close'] != null ? labelObject['Close'] : 'Close'),
						click: function() {
							//                                $(this).html("");
							$(this).dialog("close");
							$(this).dialog("destroy");

						}
					}],
					open: function() {
						$(this).closest(".ui-dialog").find(".ui-button").eq(1).addClass("dialogyes");
						$(this).closest(".ui-dialog").find(".ui-button").eq(2).addClass("dialogno");
						$(this).closest(".ui-dialog").addClass("visionPersonalizationSaveDialog");
						$(this).closest(".ui-dialog").addClass("visionPivotGridDialog");
						$(".ui-widget-overlay ui-front").addClass("visionPivotGridOverlay");
						$(".visionHeaderMain").css("z-index", "999");
						$(".visionFooterMain").css("z-index", "999");
					},
					beforeClose: function(event, ui) {
						$(".visionHeaderMain").css("z-index", "99999");
						$(".visionFooterMain").css("z-index", "99999");
					}


				});

			}
		}
	});
}
function getCrossTabData(tableName) {
	$("#output").html('');
	$.ajax({
		type: "post",
		traditional: true,
		url: "pivotGrid",
		cache: false,
		data: {
			'tableName': tableName
		},
		success: function(response) {
			//            if (response != null) {
			//                            $("#pivotGridDialog").append(<div id='output' style='margin: 30px;'></div>);
			var data = response['data'];
			var rows = response['rows'];
			var columns = response['columns'];
			var rawData = data;
			var sum = $.pivotUtilities.aggregatorTemplates.sum;
			var numberFormat = $.pivotUtilities.numberFormat;
			var intFormat = numberFormat({ digitsAfterDecimal: 0 });
			var derivers = $.pivotUtilities.derivers;
			var responseString = response['resultString'];
			var rowsResultString = response['rowsResultString'];
			var columnsList = response['columnsList'];


			var renderers = $.extend(
				$.pivotUtilities.renderers,
				$.pivotUtilities.c3_renderers,
				$.pivotUtilities.d3_renderers,
				$.pivotUtilities.export_renderers
			);

			$("#output").pivotUI(rawData,
				{
					renderers: renderers,
					rows: rows,
					cols: columns,
					aggregator: sum(intFormat)(["QUOTED_AMOUNT"]),

				});
			$(".pvtRows").append(rowsResultString);
			//                                $(".pvtUnused").append(responseString);

			PivotTableGridResults(columnsList);
			PivotRowsTableGridResults(columnsList);
			$("#pivotGridDialog").dialog({

				title: labelObject['Pivot Table'] != null ? labelObject['Pivot Table'] : 'Pivot Table',
				modal: true,
				height: 550,
				width: 1200,
				fluid: true,
				buttons: [{
					text: (labelObject['Close'] != null ? labelObject['Close'] : 'Close'),
					click: function() {
						//                                                $(this).html("");
						$(this).dialog("close");
						$(this).dialog("destroy");

					}
				}],
				open: function() {
					$(this).closest(".ui-dialog").find(".ui-button").eq(1).addClass("dialogyes");
					$(this).closest(".ui-dialog").find(".ui-button").eq(2).addClass("dialogno");
					$(this).closest(".ui-dialog").addClass("visionPersonalizationSaveDialog");
					$(".visionHeaderMain").css("z-index", "999");
					$(".visionFooterMain").css("z-index", "999");
				},
				beforeClose: function(event, ui) {
					$(".visionHeaderMain").css("z-index", "99999");
					$(".visionFooterMain").css("z-index", "99999");
				}


			});
			//            }
		}
	});
}
function PivotTableGridResults(columnsList) {
	$("#pivotTableSearch").click(function() {
		$("#pivotTableSearch").html(columnsList);
		$("#pivotTableSearch").show();
		$("#clear_pvtRowsText").show();
		$("#pivotTableSearch").autocomplete({
			source: columnsList

		});

	});
}
function PivotRowsTableGridResults(columnsList) {
	$("#pivotTableSearchPvtRows").click(function() {
		$("#pivotTableSearchPvtRows").html(columnsList);
		$("#pivotTableSearchPvtRows").show();
		$("#clear_unUsedText").show();
		$("#pivotTableSearchPvtRows").autocomplete({

			source: columnsList

		});

	});
}
function getPivotSearchResults(event) {
	var columnName = $("#pivotTableSearch").val();
	var columnNameRows = $("#pivotTableSearchPvtRows").val();
	var parent = $(".pvtAttr").parent();
	var columnValue = $(".pvtAxisLabel").parent();
	//                    var selectedColumnName = columnName.prevObject;
	for (var i = 0; i < parent.length; i++) {
		var className = parent[i].className;
		var innerText = parent[i].innerText;
		//                        var textContent = selectedColumnName[i].textContent;
		if (columnNameRows != null && columnNameRows != "" && columnNameRows != undefined) {
			if (innerText.includes(columnNameRows, 0)) {
				console.log('columnNameRows' + columnNameRows);
				$(".pvtUnused").append(parent[i]);
				$(".pvtRows").append(parent[i]);
				if (columnNameRows) {
					$("th.pvtAxisLabel").remove(columnNameRows);
				}
				break;
			}

		}
	}
}

function chartGridConfig(gridResultObj, selectedGridIndex, paramArray, selectedGridId) {

	ajaxStart();
	// ravi start 
	globalTabId = gridResultObj['gridId'];
	try {
		// if(true) {
		try {
			$("#" + selectedGridId).jqxGrid('updatebounddata', 'cells');
			$("#" + selectedGridId).jqxGrid('clearfilters');
		} catch (e) {

		}

		if (gridResultObj != null) {
			//need to assign all hidden fields like hrefColumn,linkedColumns,stripValue,imageColumn,imageTable,imageTableColumn
			var hrefObj = {}; //hrefObj
			hrefObj = gridResultObj['hrefObj'];
			$("#hrefColumn").val(hrefObj['hrefColumn'] != null ? hrefObj['hrefColumn'] : "");
			//                        $("#hrefColumn").val(hrefObj['hrefColumn']);
			$("#linkedColumns").val(hrefObj['linkedColumns']);
			$("#stripValue").val(hrefObj['stripValue']);
			$("#imageColumn").val(hrefObj['imageColumn']);
			$("#imageTable").val(hrefObj['imageTable']);
			$("#imageTableColumn").val(hrefObj['imageTableColumn']);
			$("#defaultValues").val(gridResultObj['defaultValues']);

			var gridInitParamObj = {}; //gridInitParamObj
			gridInitParamObj = gridResultObj['gridInitParamObj'];
			if (gridInitParamObj != null && !jQuery.isEmptyObject(gridInitParamObj)) {
				$("#" + gridResultObj['gridId']).attr("data-gridinitparamobj", JSON.stringify(gridInitParamObj));
			}
			$("#processClassAndMethod").val(gridInitParamObj['uuu_processClassAndMethod'] != null ? gridInitParamObj['uuu_processClassAndMethod'] : "");
			var batchInd = gridInitParamObj["uuu_BatchInd"];
			$("#massColumnHide").val(gridInitParamObj['massColumnHide']);
			$("#massValidateComment").val(gridInitParamObj['uuu_ValidateComment']);
			$("#batchIndicator").val(batchInd);
			var tableName = gridResultObj['tableName'];
			$("#tableName").val(tableName);
			var barCodeColumnName = gridInitParamObj['uuu_BarCodeColumn'];
			$("#barCodeColumnName").val(barCodeColumnName);

			if (gridInitParamObj['uuu_exportRangeCount'] != null && gridInitParamObj['uuu_exportRangeCount'] != '') {
				$("#ssExportCount").val(gridInitParamObj['uuu_exportRangeCount']);
			}

			var columnInitParamObj = {};
			columnInitParamObj = gridResultObj['columnInitParamsObj'];
			$("#columnInitParams").val(JSON.stringify(columnInitParamObj));

			var dropDownListData = gridResultObj.dropDownListData;

			//  alert("hrefObj:::::"+JSON.stringify(hrefObj));
			if (gridResultObj != null && gridResultObj.datafields) {
			}
			var dataFeilds = gridResultObj.datafields;

			var hrefObj = gridResultObj.hrefObj;
			var localData = gridResultObj.data;
			var formId = gridResultObj.formId;
			var panelId = gridResultObj.panelId;
			var gridOperation = gridResultObj.gridOperation;
			$('#formId').val(formId);
			$('#panelId').val(panelId);
			var gridPropObj = {};
			gridPropObj = gridResultObj.gridPropObj;
			var hiddenObj = gridResultObj['hiddenObj'];
			if (hiddenObj != null) {
				$("#hiddenObj").val(JSON.stringify(hiddenObj));
			}
			if (gridPropObj != null) {
				fieldsArray.length = 0;
				fieldsArray = gridResultObj.columns;
				gridPropObj.columns = gridResultObj.columns;
				var headerTooltipRenderer = function(element) {
					$(element).parent().jqxTooltip({
						position: 'mouse',
						position: 'bottom-right',
						showArrow: false, content: $(element).text()
					});
				}
				var dataSheetRendered = function(element) {
					$(element).addClass("show_detail");
					$(element).parent().jqxTooltip({
						position: 'mouse',
						position: 'bottom-right',
						showArrow: false,
						content: "Data Sheet"
					});
					//content: $(element).text()});
				}
				var renderToolbar = gridPropObj.renderToolbar;
				gridPropObj.renderToolbar = eval('(' + renderToolbar + ')');
				//      var defaultTabName = $("#defaultTabName").val();
				var htmlContentRender = function(row, columnfield, value, defaulthtml, columnproperties, rowData) {
					var data = "<xmp>" + value + "</xmp>";
					var element = $(data);
					element.addClass('visionSearchWrapDescrDiv');
					var gridRowHeight = $("#" + gridResultObj['gridId']).jqxGrid('rowsheight');
					if (gridRowHeight != null && parseInt(gridRowHeight) <= 50) {
						element.css('overflow-y', 'scroll');//overflow-y:scroll !important;
					}
					if (columnInitParamObj != null && !jQuery.isEmptyObject(columnInitParamObj)) {
						var selectedColumnInitParamObj = columnInitParamObj[columnfield];
						if (selectedColumnInitParamObj != null && !jQuery.isEmptyObject(selectedColumnInitParamObj)) {
							var uuu_TitleValueColumn = selectedColumnInitParamObj['uuu_TitleValueColumn'];
							if (uuu_TitleValueColumn != null && uuu_TitleValueColumn != '' &&
								rowData != null
								&& rowData[uuu_TitleValueColumn] != null
								&& rowData[uuu_TitleValueColumn] != ''
							) {//REQUIRED_FLAG
								element.removeAttr('title');
								element.attr('title', rowData[uuu_TitleValueColumn]);
							}
						}

					}
					return element[0].outerHTML;
				};
				var urlRender
					= function(row, columnfield, value, defaulthtml, columnproperties, rowData) {
						var element = $(defaulthtml);
						element.attr("onclick", "openURLInTab('" + value + "')");
						element.addClass("visionSearchUrlLink");
						return element[0].outerHTML;

					};
				var imageRender
					= function(row, columnfield, value, defaulthtml, columnproperties, rowData) {
						if (value != "" && value != null) {
							return "<img  title='View the attachment Logo' style='cursor:pointer;'"
								+ " src='" + value + "' class='imageStyle'  id='dtlul_" + row + "'" + "'"
								+ " onmouseover=imageMouseHover('dtlul_" + row + "') onmouseout=imageMouseOut() >";
						}
					};
				var descoptrender
					= function(row, columnfield, value, defaulthtml, columnproperties, rowData) {
						var element = $(defaulthtml);
						element.addClass('visionSearchWrapDescrDiv');
						var gridRowHeight = $('#' + gridResultObj['gridId']).jqxGrid('rowsheight');
						if (gridRowHeight != null && parseInt(gridRowHeight) <= 50) {
							//                                         element.css('overflow', 'scroll');
							element.css('overflow-y', 'scroll');//overflow-y:scroll !important;

						}
						if (columnInitParamObj != null && !jQuery.isEmptyObject(columnInitParamObj)) {
							var selectedColumnInitParamObj = columnInitParamObj[columnfield];
							if (selectedColumnInitParamObj != null && !jQuery.isEmptyObject(selectedColumnInitParamObj)) {
								var uuu_TitleValueColumn = selectedColumnInitParamObj['uuu_TitleValueColumn'];
								if (uuu_TitleValueColumn != null && uuu_TitleValueColumn != '' &&
									rowData != null
									&& rowData[uuu_TitleValueColumn] != null
									&& rowData[uuu_TitleValueColumn] != ''
								) {//REQUIRED_FLAG
									element.removeAttr('title');
									element.attr('title', rowData[uuu_TitleValueColumn]);
								}
							}

						}
						//                                            element.css('overflow', 'scroll');
						return element[0].outerHTML;
					};
				var replaceRenderer
					= function(row, columnfield, value, defaulthtml, columnproperties, rowData) {
						var element = $(defaulthtml);
						if (columnInitParamObj != null && !jQuery.isEmptyObject(columnInitParamObj)) {
							var selectedColumnInitParamObj = columnInitParamObj[columnfield];
							if (selectedColumnInitParamObj != null && !jQuery.isEmptyObject(selectedColumnInitParamObj)) {
								var uuu_TitleValueColumn = selectedColumnInitParamObj['uuu_TitleValueColumn'];
								if (uuu_TitleValueColumn != null && uuu_TitleValueColumn != '' &&
									rowData != null
									&& rowData[uuu_TitleValueColumn] != null
									&& rowData[uuu_TitleValueColumn] != ''
								) {//REQUIRED_FLAG
									element.removeAttr('title');
									element.attr('title', rowData[uuu_TitleValueColumn]);
								}
							}

						}
						return element[0].outerHTML;
					};

				var charColorRender
					= function(row, columnfield, value, defaulthtml, columnproperties, rowData) {
						var element = $(defaulthtml);
						if (columnInitParamObj != null && !jQuery.isEmptyObject(columnInitParamObj)) {
							var selectedColumnInitParamObj = columnInitParamObj[columnfield];
							if (selectedColumnInitParamObj != null && !jQuery.isEmptyObject(selectedColumnInitParamObj)) {
								var mandColumn = selectedColumnInitParamObj['uuu_CharMandColumn'];
								if (!(mandColumn != null && mandColumn != '')) {
									mandColumn = 'REQUIRED_FLAG';
								}
								if (rowData != null && (rowData[mandColumn] == 'Y'
									|| rowData[mandColumn] == 'M'
								)) {//REQUIRED_FLAG
									element.addClass('visionSearchCharRedDiv');

								}
								var uuu_TitleValueColumn = selectedColumnInitParamObj['uuu_TitleValueColumn'];
								if (uuu_TitleValueColumn != null && uuu_TitleValueColumn != '' &&
									rowData != null
									&& rowData[uuu_TitleValueColumn] != null
									&& rowData[uuu_TitleValueColumn] != ''
								) {//REQUIRED_FLAG
									element.removeAttr('title');
									element.attr('title', rowData[uuu_TitleValueColumn]);
								}
							}

						}
						return element[0].outerHTML;
					};
				var charValueColorRender
					= function(row, columnfield, value, defaulthtml, columnproperties, rowData) {
						var element = $(defaulthtml);

						if (columnInitParamObj != null && !jQuery.isEmptyObject(columnInitParamObj)) {
							var selectedColumnInitParamObj = columnInitParamObj[columnfield];
							if (selectedColumnInitParamObj != null && !jQuery.isEmptyObject(selectedColumnInitParamObj)) {
								var mandColumn = selectedColumnInitParamObj['uuu_CharValueMandColumn'];
								if (!(mandColumn != null && mandColumn != '')) {
									mandColumn = 'REQUIRED_FLAG';
								}
								if (rowData != null && (rowData[mandColumn] == 'Y'
									|| rowData[mandColumn] == 'M'
								)) {//REQUIRED_FLAG
									element.addClass('visionSearchCharValRedDiv');
								}
								var uuu_TitleValueColumn = selectedColumnInitParamObj['uuu_TitleValueColumn'];
								if (uuu_TitleValueColumn != null && uuu_TitleValueColumn != '' &&
									rowData != null
									&& rowData[uuu_TitleValueColumn] != null
									&& rowData[uuu_TitleValueColumn] != ''
								) {//REQUIRED_FLAG
									element.removeAttr('title');
									element.attr('title', rowData[uuu_TitleValueColumn]);
								}
							}

						}
						return element[0].outerHTML;
					};
				var xmlRenderer
					= function(row, columnfield, value, defaulthtml, columnproperties) {
						console.log("xmlRenderer::");
						if (value != "" && value != null) {
							return "<img src ='images/xml_icon.png' style='cursor:pointer; width: 20px; height: 20px;position: fixed; title='Click to view the Payload' style='cursor:pointer;' onclick=viewXml('" + gridResultObj['gridId'] + "','" + row + "','" + columnfield + "','" + gridResultObj['tableName'] + "')  class='imageStyle visionTemplete'  id='xmldtlul_" + row + "' >";
						}
					};
				var titleRender
					= function(row, columnfield, value, defaulthtml, columnproperties, rowData) {
						var element = $(defaulthtml);
						if (columnInitParamObj != null && !jQuery.isEmptyObject(columnInitParamObj)) {
							var selectedColumnInitParamObj = columnInitParamObj[columnfield];
							if (selectedColumnInitParamObj != null && !jQuery.isEmptyObject(selectedColumnInitParamObj)) {
								var uuu_TitleValueColumn = selectedColumnInitParamObj['uuu_TitleValueColumn'];
								if (uuu_TitleValueColumn != null && uuu_TitleValueColumn != '' &&
									rowData != null
									&& rowData[uuu_TitleValueColumn] != null
									&& rowData[uuu_TitleValueColumn] != ''
								) {//REQUIRED_FLAG
									element.removeAttr('title');
									element.attr('title', rowData[uuu_TitleValueColumn]);
								}
							}

						}
						return element[0].outerHTML;
					};

				var documentRanderer
					= function(row, columnfield, value, defaulthtml, columnproperties) {
						//return '<textarea readonly class="ta_style" rows=1 >' + value + '</textarea>';
						console.log("hiiiii");
						return '<div onclick=viewDocument("' + value + '") style="cursor:pointer;">View Document</div>';
					};

				var editable = gridPropObj.editable;
				var gridDrpdownRenderor = function(row, columnfield, value, defaulthtml, columnproperties) {
					var cellValue = $("#" + gridResultObj['gridId']).jqxGrid('getcellvalue', row, columnfield);
					var viewType = "GRID-VIEW";
					var ddwData = gridResultObj.dropDowndData;
					var ddwObj = ddwData[columnfield];
					var dependencyparams = ddwObj.dependencyparams;
					if (editable) {
						//    return "<div class='visionGridDataAlign'><div class='visionGridDataAlignInfo'>" + cellValue + "</div><div class='visionGridDataAlignImage'><img src='images/search_icon_color_2.png'  onclick=visionDropdown('" + ddwObj.ddwId.trim() + "','" + dependencyparams + "','" + viewType + "','" + ddwObj.gridId + "','" + columnfield + "','" + row + "')></div></div>";
						return "<div class='visionGridDataAlign'><div class='visionGridDataAlignInfo'>" + cellValue + "</div><div class='visionGridDataAlignImage'><img src='images/search_icon_color_2.png' id='dd" + gridResultObj['gridId'] + columnfield + "' onclick=visionDropdown('" + ddwObj.ddwId.trim() + "','" + dependencyparams + "','" + viewType + "','" + ddwObj.gridId + "','" + columnfield + "','" + row + "')></div></div>";
					} else {
						return "<div class='visionGridDataAlign'>" + cellValue + "</div>";
					}

				};

				if (editable) {
					for (var i = 0; i < dataFeilds.length; i++) {
						if (typeof dataFeilds[i].values != "undefined" && dataFeilds[i].values != null) {
							var listboxData = eval(dataFeilds[i].values.source);
							var listboxSource =
							{
								datatype: "json",
								datafields: [
									{ name: 'ListboxValue', type: 'string' },
									{ name: 'id', type: 'string' }
								],
								localdata: listboxData
							};
							var listBoxAdapter = new $.jqx.dataAdapter(listboxSource);
							gridResultObj.datafields[i].values.source = listBoxAdapter.records;
							// gridResultObj.datafields[i].values.source = listBoxAdapter.records;
						}
					}
				}
				for (var i = 0; i < gridPropObj.columns.length; i++) {
					if (gridPropObj.columns[i].cellsrenderer != null) {
						gridPropObj.columns[i].cellsrenderer = eval(gridPropObj.columns[i].cellsrenderer);
					}
					if (gridPropObj.columns[i].rendered != null) {
						gridPropObj.columns[i].rendered = eval('(' + gridPropObj.columns[i].rendered + ')');
					}

					if (gridPropObj.columns[i].createeditor != null) {
						gridPropObj.columns[i].createeditor = eval('(' + gridPropObj.columns[i].createeditor + ')');
					}
					if (gridPropObj.columns[i].initeditor != null) {
						gridPropObj.columns[i].initeditor = eval('(' + gridPropObj.columns[i].initeditor + ')');
					}
					if (gridPropObj.columns[i].geteditorvalue != null) {
						gridPropObj.columns[i].geteditorvalue = eval('(' + gridPropObj.columns[i].geteditorvalue + ')');
					}
					if (gridPropObj.columns[i].cellvaluechanging != null) {
						gridPropObj.columns[i].cellvaluechanging = eval('(' + gridPropObj.columns[i].cellvaluechanging + ')');
					}
					if (gridPropObj.columns[i].cellbeginedit != null) {
						gridPropObj.columns[i].cellbeginedit = eval('(' + gridPropObj.columns[i].cellbeginedit + ')');
					}
				}
				if (gridPropObj.rendergridrows != null && gridPropObj.rendergridrows != "") {

					gridPropObj.rendergridrows = eval('(' + gridPropObj.rendergridrows + ')');
				}
				var paramObj = {};
				paramObj['value'] = gridResultObj['className'];
				var domainValue = $('#currentDomain').val();
				if (domainValue != null && domainValue != '' && domainValue != undefined
					&& domainValue == 'VENDOR') {
					paramObj['column'] = 'SUPPLIER_NAME';
				} else {
					paramObj['column'] = 'TERM';
				}

				paramObj['operator'] = 'LIKE';
				paramArray.push(paramObj);

				var subTabId = "jqxTabs";
				console.log("before dataFeilds" + JSON.stringify(dataFeilds));
				var data = {
					gridId: gridResultObj['gridId'],
					colsArray: JSON.stringify(gridResultObj['colsArray']),
					tableName: gridResultObj['tableName'],
					paramArray: JSON.stringify(paramArray),
					gridInitParamObj: JSON.stringify(gridInitParamObj),
					columnInitParamObj: JSON.stringify(columnInitParamObj),
					processClassAndMethod: $("#processClassAndMethod").val()

				};
				var source =
				{
					type: 'POST',
					//                                                async: false,
					datatype: "json",
					datafields: dataFeilds,
					data: data,
					url: 'cloudGridResults',
					cache: false,
					root: 'Rows',
					processdata: function(data) {
						data.multiSortColsArray = ($("#" + gridResultObj['gridId'] + "_sort_columns").val() != null
							? $("#" + gridResultObj['gridId'] + "_sort_columns").val() : "");
						if (gridInitParamObj != null
							&& !jQuery.isEmptyObject(gridInitParamObj)
							&& gridInitParamObj['uuu_FilterGridFormPopup'] == 'Y') {//
							data.paramArray = ($("#" + gridResultObj['gridId'] + "_filter_columns").val() != null
								? $("#" + gridResultObj['gridId'] + "_filter_columns").val() : "");
						}
					},
					beforeSend: function() {
						ajaxStart();
					}, loadError: function(xhr, status, error) {
						ajaxStop();
						throw new Error(error);
					}, loadComplete: function(data) {
						ajaxStop();
					},
					beforeprocessing: function(data) {
						if (data[0] != null) {
							source.totalrecords = data[0].TotalRows;
							$("#excelExport" + gridResultObj['gridId']).attr("disabled", true);
							$("#drop" + gridResultObj['gridId']).removeAttr("disabled");
							$("#drop" + gridResultObj['gridId']).removeAttr("opacity");
							$("#export" + gridResultObj['gridId']).removeAttr("disabled");
							$("#export" + gridResultObj['gridId']).removeAttr("opacity");
							console.log("data[0] != null:::: $(\"#drop\").attr(\"disabled\":::::" + $("#drop" + gridResultObj['gridId']).attr("disabled"));
							console.log("data[0] != null::: $(\"#export\").attr(\"disabled\":::::" + $("#export" + gridResultObj['gridId']).attr("disabled"));
						} else {
							source.totalrecords = 0;
							$("#excelExport" + gridResultObj['gridId']).attr("disabled", true);
							$("#approvebutt" + gridResultObj['gridId']).attr("disabled", true);
							$("#drop" + gridResultObj['gridId']).attr("disabled", true);
							$("#drop" + gridResultObj['gridId']).css("opacity", "0.5");
							$("#export" + gridResultObj['gridId']).attr("disabled", true);
							$("#export" + gridResultObj['gridId']).css("opacity", "0.5");
						}

						//                                        var selectedItemTitle = $('#cloudTabs').jqxTabs('getTitleAt', $('#cloudTabs').jqxTabs('selectedItem'));
						try {
							//                                                    $("#" + gridResultObj['gridId']).jqxGrid('clearselection');
						} catch (e) {
						}
						ajaxStop();
					},
					sort: function() {
						$("#" + selectedGridId).jqxGrid('updatebounddata', 'sort');
						try {
							$("#" + selectedGridId).jqxGrid('clearselection');
						} catch (e) {
						}
						ajaxStop();
					},
					filter: function() {

						$("#" + selectedGridId).jqxGrid('updatebounddata', 'filter');
						try {
							$("#" + selectedGridId).jqxGrid('clearselection');
						} catch (e) {
						}
						ajaxStop();
					}


				};
				var dataAdapter = new $.jqx.dataAdapter(source);
				gridPropObj.source = dataAdapter;
				var srsRegiterButton = gridInitParamObj['registerButtonFlag'];
				var hideToolBar = gridInitParamObj['uuu_hideToolBar'];
				gridPropObj.showtoolbar = true;
				// gridPropObj.showtoolbar = false;
				gridPropObj.rowdetails = true;
				gridPropObj.rendergridrows = function() {
					return dataAdapter.records;
				};

				$("#submitDropdown").html(gridResultObj['buttonObj']);
				$("#exportDropdown").html(gridResultObj['gridOperation']);
				gridPropObj.rowdetails = false;
				alert("Before Grid");
				//subTabId

				if (editable) {
					$('#gridRefreshButton').hide();
					//                                        $('div#submitDropdown > img').remove();
				}


				$("#currentGridpageNum").val(0);
				$("#" + selectedGridId).jqxGrid(gridPropObj);
				$("#" + selectedGridId).on("cellclick", function(event) {
					var args = event.args;
					var rowBoundIndex = args.rowindex;
					$("#currentRowIndex").val(rowBoundIndex);
					$("#currentGridId").val(gridResultObj['gridId']);
					var columnindex = args.columnindex;
					var dataField = args.datafield;
					sessionStorage.setItem('dataField', dataField);
					sessionStorage.setItem('rowBoundIndex', rowBoundIndex);
					if (columnindex == 1) {
						navigateToForm(event.args.column.datafield, $('#' + gridResultObj['gridId']).jqxGrid('getrowdata', event.args.rowindex), 'form', gridResultObj['gridId'], event.args.rowindex);
					}
				});
				$("#" + selectedGridId).on('celldoubleclick', function(event) {
					var args = event.args;
					var dataField = args.datafield;
					var dataField1 = args.text;
					var rowIndex = args.rowindex;
					var cellValue = args.value;
					var column = $('#' + gridResultObj['gridId']).jqxGrid('getcolumn', event.args.datafield).text;
					popupedit(column, cellValue);
				});
				$("#" + selectedGridId).on('rowunselect', function(event) {
					//                                    showSelectedRows(gridResultObj['gridId'],null,gridInitParamObj['uuu_GridNtfnFlag']);
				});
				$("#" + selectedGridId).on('rowselect', function(event) {
					showClassBasedButtons(gridResultObj, event.args.rowindex, gridInitParamObj);

					//                                    showSelectedRows(gridResultObj['gridId'], event.args.rowindex,gridInitParamObj['uuu_GridNtfnFlag']);
				});

				$("#" + selectedGridId).on("pagechanged", function(event) {
					var oldPageNum = $("#currentGridpageNum").val();
					console.log("oldPageNum:::" + oldPageNum + "::::Current Page Num:::" + event.args.pagenum);
					// event arguments.
					var args = event.args;
					// page number.
					var pagenum = args.pagenum;
					// page size.
					var pagesize = args.pagesize;
					if (parseInt(event.args.pagenum) != parseInt(oldPageNum)) {
						var selectedrowindexes = $('#' + gridResultObj['gridId']).jqxGrid('selectedrowindexes');
						//                                        console.log("searchResults:::selectedrowindexes:::" + selectedrowindexes);
						try {
							if (selectedrowindexes != null
								&& selectedrowindexes.length != 0
								&& selectedrowindexes[0] != -1) {
								$('#' + gridResultObj['gridId']).jqxGrid('clearselection');
							}

						} catch (e) {
						}
					}
					$("#currentGridpageNum").val(event.args.pagenum);
				});
				$("#" + selectedGridId).on("pagesizechanged", function(event) {
					console.log("::pagesizechanged:::" + event.args.pagenum);
					$("#currentGridpageNum").val(0);
				});


				//  
				alert("604 Grid");
				$(window).resize(function() {
					var windowWidth = $(this).width();
					if (windowWidth <= 415) {
						$("#" + selectedGridId).jqxGrid({ pagerheight: 70 });
					} else if (windowWidth >= 416 && windowWidth <= 500) {
						$("#" + selectedGridId).jqxGrid({ pagerheight: 40 });
					} else {
						$("#" + selectedGridId).jqxGrid({ pagerheight: 30 });
						$("#" + selectedGridId).jqxGrid({ scrollbarsize: 8 });
					}
				}).resize();
				$("#" + selectedGridId).parent().css("padding-top", "3px", "important");
				$("#" + selectedGridId).parent().css("padding-bottom", "3px", "important");
				//   $('#' + gridResultObj['gridId']).jqxGrid('showtoolbar', false);
				if ((srsRegiterButton != null && srsRegiterButton != undefined && srsRegiterButton == 'Y')
					|| (hideToolBar != null && hideToolBar != undefined && hideToolBar == 'Y')) {
					$("#" + selectedGridId).jqxGrid('showtoolbar', true);
					console.log("iam in if grid condition in toolbar 1016" + srsRegiterButton);
				} else {
					$('#' + gridResultObj['gridId']).jqxGrid('showtoolbar', false);
					console.log("iam in else grid condition in toolbar 1021" + srsRegiterButton);
				}
				alert("683 Grid");
			}
		}
		//  }

	} catch (e) {
		ajaxStop();
	}
	ajaxStop();

}// end of function chartGridConfig(-)
function getHomeDashboardKanbanView(event, id) {
	$("#visualizechartId").html("");
	$("#Loader").css("display", "block");
	$("body").css({ "pointer-events": "auto" });
	var kanbanViewName = $("#" + id).val();
	if (kanbanViewName != null && kanbanViewName != '' && kanbanViewName != 'undefined' && kanbanViewName == 'Select') {
		return;
	}
	$.ajax({
		type: "post",
		traditional: true,
		dataType: 'json',
		url: "fetchKanbanDataView",
		data: {
			kanbanViewName: kanbanViewName
		},
		cache: false,
		success: function(response) {
			if (response != null && !jQuery.isEmptyObject(response)) {
				$("#Loader").css("display", "none");
				$("body").css({ "pointer-events": "auto" });
				var kanbanObj = response['colsArr'];
				var kanbanViewNameList = response['kanbanViewNameList'];
				$("#visionHomeKanbanView").html(kanbanViewNameList);
				for (var k = 0; k < kanbanObj.length; k++) {
					var result = kanbanObj[k];
					var resourceArr = result['resourceData'];
					var sourceArr = result['sourceData'];
					var headerArr = result['headerArr'];
					var nameObj = result['nameObj'];
					var columns = result['columnsArr'];
					var kanbanId = result['kanbanId'];
					var fields = [
						{ name: "id", type: "string" },
						{ name: "status", map: "state", type: "string" },
						{ name: "text", map: "label", type: "string" },
						{ name: "color", map: "hex", type: "string" },
						{ name: "resourceId", type: "string" }
					];
					var source = {};
					source['localData'] = sourceArr;
					source['dataType'] = "array";
					source['dataFields'] = fields;
					var dataAdapter = new $.jqx.dataAdapter(source);

					var resourcesSource = {};
					resourcesSource['localData'] = resourceArr;
					resourcesSource['dataType'] = "array";
					var resourceFieldsArr = [
						{ name: "id", type: "number" },
					];
					var template = "<div class='jqx-kanban-item' id=''>";
					$.each(nameObj, function(key, val) {
						var obj = {};
						if (key == 'columnName') {
							obj['name'] = nameObj['columnName'];
							obj['type'] = 'string';
							resourceFieldsArr.push(obj);
							template += "<div class='jqx-kanban-item-color-status'></div>";
						}
					});
					for (var j = 2; j < columns.length - 1; j++) {
						var objData = columns[j];
						if (objData != null && !jQuery.isEmptyObject(objData)) {
							var obj = {};
							obj['name'] = objData['columnName'];
							obj['type'] = 'string';
							resourceFieldsArr.push(obj);
							template += "<div class='jqx-kanban-item-" + objData['columnName'] + "'></div>";
						}
					}
					template += "<div class='jqx-kanban-item-text'></div></div>"
					resourcesSource['dataFields'] = resourceFieldsArr;
					var resourcesDataAdapter = new $.jqx.dataAdapter(resourcesSource);
					if (k == 0) {
						$("#visualizechartId").append("<div id='" + kanbanId + "' style='display:flex;overflow-x:auto'></div>");
					} else {
						$("#visualizechartId").append("<div id='" + kanbanId + "' style='display:flex;overflow-x:auto;margin-top:2%'></div>");
					}
					$('#' + kanbanId).jqxKanban({
						width: '100%',
						height: '600px',
						template: template,
						resources: resourcesDataAdapter,
						source: dataAdapter,
						itemRenderer: function(element, data, resource) {
							$.each(nameObj, function(key, val) {
								if (key == 'columnName') {
									$(element).find(".jqx-kanban-item-color-status").html("<span style='line-height: 23px; margin-left: 5px;'>" + resource[nameObj['columnName']] + "</span>");
								}
							});
							for (var j = 2; j < columns.length - 1; j++) {
								var objData = columns[j];
								if (objData != null && !jQuery.isEmptyObject(objData)) {
									$(element).find(".jqx-kanban-item-" + objData['columnName'] + "").html("<div class='jqx-kanban-item-" + objData['columnName'] + "' style='line-height: 23px; margin-left: 5px;'>" + objData['label'] + ":" + (resource[objData['columnName']] != null ? resource[objData['columnName']] : "Data not Available") + "</div>");
								}
							}
						},
						columns: headerArr,
						columnRenderer: function(element, collapsedElement, column) {

							var kanbanId = element[0]['id'];
							var kanbanCol;
							if (kanbanId != null && kanbanId != '' && kanbanId != undefined) {
								kanbanCol = kanbanId.replace("kanban-column-header-", "");
							}
						}
					});
				}
			}
		},
		error: function(e) {
			console.log(e);
			sessionTimeout(e);
			stopLoader();
		}
	});
}
function getColumnLabel($event, columnId, chartId, count, columnName, id) {
	var columnLabel = $("#" + columnId).attr("data-label-name");
	columnLabel = columnLabel != null ? columnLabel : "";
	var inputId = columnId + "_INPUT";
	var response = "<div class='visionDashBoardColLabel' ><input type='' id='" + inputId + "' value='" + columnLabel + "'/></div>";
	$("#dialog").html(response);
	$("#dialog").dialog({
		title: (labelObject['Column Label'] != null ? labelObject['Column Label'] : 'Column Label'),
		modal: true,
		height: 'auto',
		minWidth: 300,
		maxWidth: 'auto',
		fluid: true,
		buttons: [{
			text: (labelObject['Ok'] != null ? labelObject['Ok'] : 'Ok'),
			click: function() {
				var label = $("#" + inputId).val();
				$("#" + columnId).attr("data-label-name", label);
				var chartInnerId = chartId.replace("visionVisualizeChartId", "visionVisualizeChart")
				var chartType = chartDivObj[chartInnerId];
				var axisId = "visionVisualizeChartAxisId_" + count;
				if ($.trim($("#" + axisId).html()).length > 0) {
					getChart(chartId, count, chartType, "", "", "");
				}
				$(this).html("");
				$(this).dialog("destroy");
			}
		},
		{
			text: (labelObject['Cancel'] != null ? labelObject['Cancel'] : 'Cancel'),
			click: function() {
				$(this).html("");
				$(this).dialog("destroy");
			}

		}],
		open: function() {
			$(this).closest(".ui-dialog").find(".ui-button").eq(1).addClass("dialogyes");
			$(this).closest(".ui-dialog").find(".ui-button").eq(2).addClass("dialogno");
			$(".visionHeaderMain").css("z-index", "999");
			$(".visionFooterMain").css("z-index", "999");
		},
		beforeClose: function(event, ui) {
			$(".visionHeaderMain").css("z-index", "99999");
			$(".visionFooterMain").css("z-index", "99999");
		}
	});

}
function getHetaMap(chartId, result, count) {
	var xAxis = result['xAxis'];
	var yAxis = result['yAxis'];
	var data = result['source'];
	var gratearVal = result['gratearVal'];
	var dataPropObject = result['dataPropObject'];
	var title;
	$.each(dataPropObject, function(key, val) {
		title = (val != null) ? val : "";
	});
	title = "Heap Map";
	var xAxisObj = {};
	xAxisObj['labels'] = xAxis;
	var yAxisObj = {};
	yAxisObj['labels'] = yAxis;
	var heapMapChartId = "visionVisualizeChart" + count;
	var heapMapChartHomeId = "visionVisualizeChartHome" + count;
	$("#" + chartId).empty();
	$("#" + chartId).css("width", "890px", "!important");
	$("#" + chartId).css("height", "490px", "!important");
	$("#" + heapMapChartId).css("width", "900px", "!important");
	$("#" + heapMapChartId).css("height", "500px", "!important");
	$("#" + heapMapChartHomeId).css("width", "890px", "!important");
	$("#" + heapMapChartHomeId).css("height", "500px", "!important");
	$("#" + heapMapChartHomeId).addClass("visionVisualChartBoxClass");

	$("#" + chartId).jqxHeatMap({
		xAxis: xAxisObj,
		yAxis: yAxisObj,
		source: data,
		title: title,
		legendSettings: {
			position: 'top'
		},
		paletteSettings: {
			palette: [
				{ value: 0, color: '#fcba03' },
				{ value: 1000, color: '#5dc3f0' },
				{ value: 10000, color: '#4bb1de' },
				{ value: 500000, color: '#0373fc' },
				{ value: gratearVal, color: '#3885a6' }],
			type: 'Gradient',
		}
	});
}
function getCardGridData(event) {
	console.log("test");
	var chartId = $(event.target).parent().attr("id");
	$.ajax({
		type: "POST",
		url: "getlandingGraphData",
		cache: false,
		dataType: 'json',
		data: {
			chartId: chartId
		},
		success: function(response) {
			console.log(response);
			var dataarr = response['dataarr'];
			var DivId = response['chartDiv'];
			if (dataarr != null && dataarr != '' && dataarr != undefined) {
				var count = 0;
				for (var i = 0; i < dataarr.length; i++) {
					var XAxix = dataarr[i]['xAxix'];
					var yAxix = dataarr[i]['yAxix'];
					var type = dataarr[i]['type'];
					var table = dataarr[i]['table'];
					var id = dataarr[i]['chartid'];
					var Lebel = dataarr[i]['Lebel'];
					var aggColumnName = dataarr[i]['aggColumnName'];
					var filterCondition = dataarr[i]['filterColumns'];
					var chartPropObj = dataarr[i]['chartPropObj'];
					var chartConfigObj = dataarr[i]['chartConfigObj'];
					var labelLegend = dataarr[i]['labelLegend'];
					getGridData(XAxix, '', chartId, filterCondition, type);
				}
			}

		},
		error: function(e) {
			console.log(e);
			sessionTimeout(e);
			stopLoader();
		}
	});
}

function updatechartSetting(chartid, chartType, axix, values, table, aggColumnName, filterCondition, chartPropObj, chartConfigObj, chartConfigToggleStatusStr) {
	console.log("chartOptAllObj" + chartPropObj);
	$.ajax({
		type: "POST",
		url: "updatechartSettingdata",
		cache: false,
		dataType: 'html',
		data: {
			chartId: chartid,
			chartOptAllObj: chartPropObj,
			chartConfigPositionKeyStr: chartConfigObj,
			chartConfigToggleStatusStr: chartConfigToggleStatusStr,
			chartType: chartType,
		},
		success: function(response) {
			console.log(response);
			if (response != null && response != '') {
				var responseHtml = '<h5>' + response + '</h5>';
				var buttonArray = [
					{
						text: 'Close',
						click: function() {
						},
						isCloseButton: true
					}
				];
				showPopUpWithButtonFunctionCall(responseHtml, buttonArray);
			//	getVisualizeChart(chartid, chartType, axix, values, table, aggColumnName, filterCondition, chartPropObj, chartConfigObj);

			}


		},
		error: function(e) {
			console.log(e);
			sessionTimeout(e);
			stopLoader();
		}
	});
}
function showupdateDataNTF(chartId, tableName, chartType, expandChartId,filterConditions) {
    $("#dialog").html("Are you sure you want to Save the Data ??");
	$("#dialog").dialog({
		modal: true,
		title: (labelObject['Message'] != null ? labelObject['Message'] : 'Message'),
		height: 'auto',
		minHeight: 'auto',
		minWidth: 350,
		maxWidth: 'auto',
		fluid: true,
		buttons: [{
			text: (labelObject['Yes'] != null ? labelObject['Yes'] : 'Yes'),
			click: function() {
				var flag = 'Y';
				closeDialogBox("#dialog");
				$.ajax({
					type: 'post',
					traditional: true,
					dataType: 'html',
					cache: false,
					url: 'getChartFilterData',
					async: false,
					data: {
						chartId: chartId,
						tableName: tableName,
						chartType: chartType,
						filterConditions: filterConditions,
						flag: flag
					},
					success: function(response) {
						if (response != null && !jQuery.isEmptyObject(response)) {
							var result = JSON.parse(response);
							var dataarr = result['dataarr'];
							if (dataarr != null && dataarr != '' && dataarr != undefined) {
								var count = 0;
								for (var i = 0; i < dataarr.length; i++) {
									var XAxix = dataarr[i]['xAxix'];
									var yAxix = dataarr[i]['yAxix'];
									var type = dataarr[i]['type'];
									var table = dataarr[i]['table'];
									var id = dataarr[i]['chartid'];
									var Lebel = dataarr[i]['Lebel'];
									var aggColumnName = dataarr[i]['aggColumnName'];
									var chartPropObj = dataarr[i]['chartPropObj'];
									var chartConfigObj = dataarr[i]['chartConfigObj'];
									var labelLegend = dataarr[i]['labelLegend'];
									var filterCondition = dataarr[i]['filterCondition'];
									var colorsObj = dataarr[i]['colorsObj'];
									if (XAxix != null && XAxix != '' && yAxix != null && yAxix != '' && type != 'Card') {
                                            var chartid = id;
                                            if (expandChartId != null && expandChartId != '' && expandChartId != undefined) {
                                                var chartExtendPropObj = $("#homepageChartDiv_options").val();
                                                if (chartExtendPropObj != null && chartExtendPropObj != '' && chartExtendPropObj != undefined) {
                                                    chartPropObj = chartExtendPropObj;
                                                }
                                                $("#homepageChartDiv_filter").val(filterCondition);
                                                getExpandVisualizeChart(expandChartId, chartType, XAxix, yAxix, table, aggColumnName, filterCondition, chartPropObj, chartConfigObj, count, '', expandChartId,colorsObj);
                                            } else {
                                                var chartExtendPropObj = $("#" + chartid + "_options").val();
                                                if (chartExtendPropObj != null && chartExtendPropObj != '' && chartExtendPropObj != undefined) {
                                                    chartPropObj = chartExtendPropObj;
                                                }
                                                var slicerFilter = [];
                                                var chartFilter = $("#" + id + "_homePageFilter").val();
                                                if (chartFilter != null && chartFilter != '' && chartFilter != undefined) {
                                                    chartFilter = JSON.parse(chartFilter);
                                                    if (chartFilter != null && !jQuery.isEmptyObject(chartFilter)) {
                                                        for (var key in chartFilter) {
                                                            var paramObj = chartFilter[key];
                                                            slicerFilter.push(paramObj);
                                                        }
                                                    }
                                                }
                                                var slicerFilterCondition = $("#" + id + "_filter").val();
                                                if (slicerFilterCondition != null && slicerFilterCondition != '' && slicerFilterCondition != undefined) {
                                                    slicerFilterCondition = JSON.parse(slicerFilterCondition);
                                                    if (slicerFilterCondition != null && !jQuery.isEmptyObject(slicerFilterCondition) && slicerFilterCondition.length > 0) {
                                                        for (var key in slicerFilterCondition) {
                                                            var paramObj = slicerFilterCondition[key];
                                                            slicerFilter.push(paramObj);
                                                        }
                                                    }
                                                }
                                                if (filterCondition != null && filterCondition != '' && filterCondition != undefined) {
                                                    filterCondition = JSON.parse(filterCondition);
                                                    if (filterCondition != null && !jQuery.isEmptyObject(filterCondition)) {
                                                        for (var key in filterCondition) {
                                                            var paramObj = filterCondition[key];
                                                            slicerFilter.push(paramObj);
                                                        }
                                                    }
                                                }
                                                if (slicerFilter != null && !jQuery.isEmptyObject(slicerFilter))
                                                {
                                                    slicerFilter = JSON.stringify(slicerFilter);
                                                }
                                                getVisualizeChart(chartid, chartType, XAxix, yAxix, table, aggColumnName, slicerFilter, chartPropObj, chartConfigObj, count, labelLegend, colorsObj);
                                            }

                                        }

								}
							}


						}
					},
					error: function(e) {
						sessionTimeout(e);
					}
				});

			}
		},
		{
			text: (labelObject['No'] != null ? labelObject['No'] : 'No'),
			click: function() {
				$(this).html("");
				$(this).dialog("close");
				var flag = 'N';
				$.ajax({
					type: 'post',
					traditional: true,
					dataType: 'html',
					cache: false,
					url: 'getChartFilterData',
					async: true,
					data: {
						chartId: chartId,
						tableName: tableName,
						chartType: chartType,
						filterConditions: filterConditions,
						flag: flag
					},
					success: function(response) {
						if (response != null && !jQuery.isEmptyObject(response)) {
							var result = JSON.parse(response);
							var dataarr = result['dataarr'];
							if (dataarr != null && dataarr != '' && dataarr != undefined) {
								var count = 0;
								for (var i = 0; i < dataarr.length; i++) {
									var XAxix = dataarr[i]['xAxix'];
									var yAxix = dataarr[i]['yAxix'];
									var type = dataarr[i]['type'];
									var table = dataarr[i]['table'];
									var id = dataarr[i]['chartid'];
									var Lebel = dataarr[i]['Lebel'];
									var aggColumnName = dataarr[i]['aggColumnName'];
									var chartPropObj = dataarr[i]['chartPropObj'];
									var chartConfigObj = dataarr[i]['chartConfigObj'];
									var labelLegend = dataarr[i]['labelLegend'];
									var filterCondition = dataarr[i]['filterCondition'];
									var colorsObj = dataarr[i]['colorsObj'];
									if (filterCondition != null && filterCondition != '' && filterCondition != undefined) {
                                            filterCondition = JSON.parse(filterCondition);
                                            if (filterCondition != null && !jQuery.isEmptyObject(filterCondition)) {
                                                if (filterConditions != null && filterConditions != '' && filterConditions != undefined) {
                                                    $("#" + id + "_chartFilter").val(filterConditions);
                                                    filterConditions = JSON.parse(filterConditions);
                                                    $.each(filterCondition, function (index, filterCondVal) {
                                                        if (filterCondVal != null && !jQuery.isEmptyObject(filterCondVal)) {
                                                            filterConditions.push(filterCondVal);
                                                        }
                                                    });
                                                    if (filterConditions != null && !jQuery.isEmptyObject(filterConditions)) {
                                                        filterConditions = JSON.stringify(filterConditions);
                                                    }
                                                }
                                            }
									} else if (filterConditions != null && filterConditions != '' && filterConditions != undefined) {
										$("#" + id + "_chartFilter").val(filterConditions);
										filterConditions = JSON.parse(filterConditions);
										if (filterCondition != null && filterCondition != '' && filterCondition != undefined) {
											filterCondition = JSON.parse(filterCondition);
											if (filterCondition != null && !jQuery.isEmptyObject(filterCondition)) {
												$.each(filterCondition, function(index, filterCondVal) {
													if (filterCondVal != null && !jQuery.isEmptyObject(filterCondVal)) {
														filterConditions.push(filterCondVal);
													}
												});
											}
										}
										if (filterConditions != null && !jQuery.isEmptyObject(filterConditions)) {
											filterConditions = JSON.stringify(filterConditions);
										}
									}
									if (XAxix != null && XAxix != '' && yAxix != null && yAxix != '' && type != 'Card') {
                                            var chartid = id;
                                            if (expandChartId != null && expandChartId != '' && expandChartId != undefined) {
                                                var chartExtendPropObj = $("#homepageChartDiv_options").val();
                                                if (chartExtendPropObj != null && chartExtendPropObj != '' && chartExtendPropObj != undefined) {
                                                    chartPropObj = chartExtendPropObj;
                                                }
                                                $("#homepageChartDiv_filter").val(filterConditions);
                                                getExpandVisualizeChart(expandChartId, chartType, XAxix, yAxix, table, aggColumnName, filterConditions, chartPropObj, chartConfigObj, count, '', expandChartId,colorsObj);
                                            } else {
                                                var chartExtendPropObj = $("#" + chartid + "_options").val();
                                                if (chartExtendPropObj != null && chartExtendPropObj != '' && chartExtendPropObj != undefined) {
                                                    chartPropObj = chartExtendPropObj;
                                                }
                                                var slicerFilter = [];
                                                var chartFilter = $("#" + id + "_homePageFilter").val();
                                                if (chartFilter != null && chartFilter != '' && chartFilter != undefined) {
                                                    chartFilter = JSON.parse(chartFilter);
                                                    if (chartFilter != null && !jQuery.isEmptyObject(chartFilter)) {
                                                        for (var key in chartFilter) {
                                                            var paramObj = chartFilter[key];
                                                            slicerFilter.push(paramObj);
                                                        }
                                                    }
                                                }
                                                var slicerFilterCondition = $("#" + id + "_filter").val();
                                                if (slicerFilterCondition != null && slicerFilterCondition != '' && slicerFilterCondition != undefined) {
                                                    slicerFilterCondition = JSON.parse(slicerFilterCondition);
                                                    if (slicerFilterCondition != null && !jQuery.isEmptyObject(slicerFilterCondition) && slicerFilterCondition.length > 0) {
                                                        for (var key in slicerFilterCondition) {
                                                            var paramObj = slicerFilterCondition[key];
                                                            slicerFilter.push(paramObj);
                                                        }
                                                    }
                                                }
                                                if (filterConditions != null && filterConditions != '' && filterConditions != undefined) {
                                                    filterConditions = JSON.parse(filterConditions);
                                                    if (filterConditions != null && !jQuery.isEmptyObject(filterConditions)) {
                                                        for (var key in filterConditions) {
                                                            var paramObj = filterConditions[key];
                                                            slicerFilter.push(paramObj);
                                                        }
                                                    }
                                                }
                                                if (slicerFilter != null && !jQuery.isEmptyObject(slicerFilter))
                                                {
                                                    slicerFilter = JSON.stringify(slicerFilter);
                                                }
                                                getVisualizeChart(chartid, chartType, XAxix, yAxix, table, aggColumnName, slicerFilter, chartPropObj, chartConfigObj, count, labelLegend, colorsObj);
                                            }

                                        }

								}
							}


						}
					},
					error: function(e) {
						sessionTimeout(e);
					}
				});


			}
		}
		],
		open: function() {
			$(this).closest(".ui-dialog").find(".ui-button").eq(1).addClass("dialogyes");
			$(this).closest(".ui-dialog").find(".ui-button").eq(2).addClass("dialogno");
			$(this).closest(".ui-dialog").addClass("visionCommonDialog");
			$(".visionHeaderMain").css("z-index", "999");
			$(".visionFooterMain").css("z-index", "999");
			$(".visionCommonDialog").css("z-index", "999999");
		},
		beforeClose: function(event, ui) {
			$(".visionHeaderMain").css("z-index", "99999");
			$(".visionFooterMain").css("z-index", "99999");

		}
	});


}

function applyChartClickColours(data, chartId, chartType, flag, colrsObj) {
	var tabsString = "<div class='visionDxpPieChartColours'>"
		+ "<input class ='visionDxpPieChartColours' id='visionDxpChartPieColor'  placeholder='choose color'/></div>";
	$("#dialog").html(tabsString);
	$("#dialog").dialog({
		title: (labelObject['Choose Color'] != null ? labelObject['Choose Color'] : 'Choose Color'),
		modal: true,
		width: 395,
		maxWidth: 395,
		height: 330,
		maxHeight: 360,
		fluid: true,
		buttons: [{
			text: (labelObject['Apply'] != null ? labelObject['Apply'] : 'Apply'),
			click: function() {
				var pn;
				var tn;
				var colotrs = [];
				var colorsObj = {};
				var pnArr = [];
				var tnArr = [];
				var colors = [];
				var colorsObject = {};
				if (colrsObj != null && colrsObj != '' && colrsObj != undefined) {
					colorsObject = JSON.parse(colrsObj);
				}
				if (chartType != '' && chartType != null && chartType != undefined && chartType == 'lines') {
					for (var i = 0; i < data.points.length; i++) {
						colotrs = data.points[i].data.line.color;
						pn = data.points[i].pointNumber;
						tn = data.points[i].curveNumber;
					}
					var selectedClr = $("#visionDxpChartPieColor").val();
					colotrs = selectedClr;
					var update = { 'line': { 'color': colotrs, width: 3 } };
					Plotly.restyle(chartId, update, [tn]);
					var clrsObj = $("#" + chartId).attr("colors");
					if (clrsObj != null && clrsObj != '' && clrsObj != undefined) {
						clrsObj = JSON.parse(clrsObj);
						pnArr = clrsObj['pn'];
						tnArr = clrsObj['tn'];
						colors = clrsObj['clrs'];
						pnArr.push(pn);
						tnArr.push(tn);
						colors.push(selectedClr);
						colorsObj['pn'] = pnArr;
						colorsObj['tn'] = tnArr;
						colorsObj['clrs'] = colors;
					} else {
						pnArr.push(pn);
						tnArr.push(tn);
						colors.push(selectedClr);
						colorsObj['pn'] = pnArr;
						colorsObj['tn'] = tnArr;
						colorsObj['clrs'] = colors;
					}
					$("#" + chartId).attr("colors", JSON.stringify(colorsObj));
					if (flag != null && flag != '' && flag != undefined && flag == 'Save') {
						saveHomeChartColors(chartId, chartType, pn, tn, colotrs);
					}

				} else if (chartType != '' && chartType != null && chartType != undefined && (chartType == 'pie' || chartType == 'donut')) {
					for (var i = 0; i < data.points.length; i++) {
						colotrs = data.points[i].data.marker.colors;
						if (!(colotrs != null && colotrs != '' && colotrs != undefined)) {
							colotrs = data.points[i].data.marker.color;
							if (!(colotrs != null && colotrs != '' && colotrs != undefined)) {
								colotrs = [];
							}
						}
						pn = data.points[i].pointNumber;
						tn = data.points[i].curveNumber;
					}
					colotrs[pn] = $("#visionDxpChartPieColor").val();
					var update = { 'marker': { color: colotrs } };
					Plotly.redraw(chartId, update, [tn]);
					var clrsObj = $("#" + chartId).attr("colors");
					if (clrsObj != null && clrsObj != '' && clrsObj != undefined) {
						clrsObj = JSON.parse(clrsObj);
						pnArr = clrsObj['pn'];
						tnArr = clrsObj['tn'];
						pnArr.push(pn);
						tnArr.push(tn);
						colorsObj['pn'] = pnArr;
						colorsObj['tn'] = tnArr;
					} else {
						pnArr.push(pn);
						tnArr.push(tn);
						colorsObj['pn'] = pnArr;
						colorsObj['tn'] = tnArr;
					}
					colorsObj['clrs'] = colotrs;
					$("#" + chartId).attr("colors", JSON.stringify(colorsObj));
					if (flag != null && flag != '' && flag != undefined && flag == 'Save') {
						saveHomeChartColors(chartId, chartType, pn, tn, JSON.stringify(colotrs));
					}

				} else if (chartType != '' && chartType != null && chartType != undefined && chartType == 'scatterpolar') {

					var selectedClr = $("#visionDxpChartPieColor").val();
					var colotrs = selectedClr;
					var update = { 'marker': { color: colotrs } };
					Plotly.restyle(chartId, update);

					var clrsObj = $("#" + chartId).attr("colors");
					if (clrsObj != null && clrsObj != '' && clrsObj != undefined) {
						colorsObj['clrs'] = colotrs;
					} else {
						colorsObj['clrs'] = colotrs;
					}

					$("#" + chartId).attr("colors", JSON.stringify(colorsObj));
					if (flag != null && flag != '' && flag != undefined && flag == 'Save') {
						saveHomeChartColors(chartId, chartType, pn, tn, selectedClr);
					}

				} else {
					for (var i = 0; i < data.points.length; i++) {
						colotrs = data.points[i].data.marker.colors;
						if (!(colotrs != null && colotrs != '' && colotrs != undefined)) {
							colotrs = data.points[i].data.marker.color;
							if (!(colotrs != null && colotrs != '' && colotrs != undefined)) {
								colotrs = [];
							}
						}
						pn = data.points[i].pointNumber;
						tn = data.points[i].curveNumber;
					}
					var selectedClr = $("#visionDxpChartPieColor").val();
					colotrs[pn] = selectedClr;
					var update = { 'marker': { color: colotrs } };
					Plotly.redraw(chartId, update, [tn]);

					var clrsObj = $("#" + chartId).attr("colors");
					if (clrsObj != null && clrsObj != '' && clrsObj != undefined) {
						clrsObj = JSON.parse(clrsObj);
						pnArr = clrsObj['pn'];
						tnArr = clrsObj['tn'];
						colors = clrsObj['clrs'];
						var colorFlag = false;
						for (var k = 0; k < pnArr.length; k++) {
							var pnVal = pnArr[k];
							var tnVal = tnArr[k];
							var clr = colors[k];
							if (pn == pnVal && tn == tnVal) {
								colorFlag = true;
								var index = colors.indexOf(clr);
								colors.splice(index, 1);
								colors.splice(index, 0, selectedClr);
								break;
							}
						}
						if (!colorFlag) {
							pnArr.push(pn);
							tnArr.push(tn);
							colors.push(selectedClr)
						}
						colorsObj['pn'] = pnArr;
						colorsObj['tn'] = tnArr;
						colorsObj['clrs'] = colors;
					} else {
						pnArr.push(pn);
						tnArr.push(tn);
						colors.push(selectedClr);
						colorsObj['pn'] = pnArr;
						colorsObj['tn'] = tnArr;
						colorsObj['clrs'] = colors;

					}

					$("#" + chartId).attr("colors", JSON.stringify(colorsObj));
					if (flag != null && flag != '' && flag != undefined && flag == 'Save') {
						saveHomeChartColors(chartId, chartType, pn, tn, selectedClr);
					}

				}


				$(this).html("");
				$(this).dialog("close");
				$(this).dialog("destroy");
			}
		},
		{
			text: (labelObject['Cancel'] != null ? labelObject['Cancel'] : 'Cancel'),
			click: function() {
				$(this).html("");
				$(this).dialog("close");
				$(this).dialog("destroy");


			}

		}],
		open: function() {
			$("#visionDxpChartPieColor").spectrum({
				flat: true,
				showButtons: false,

			});
		},
		beforeClose: function(event, ui) {

		}
	});
}

function applyChartColors(colorsObj, chartId, chartType) {
	if (chartType != '' && chartType != null && chartType != undefined && chartType == 'lines') {
		if (colorsObj != null && colorsObj != '' && colorsObj != undefined) {
			colorsObj = JSON.parse(colorsObj);
			if (colorsObj != null && !jQuery.isEmptyObject(colorsObj)) {
				var pnArr = colorsObj['pn'];
				var tnArr = colorsObj['tn'];
				var colors = colorsObj['clrs'];
				for (var i = 0; i < pnArr.length; i++) {
					var tn = tnArr[i];
					var clr = colors[i];
					var update = { 'line': { 'color': clr, width: 3 } };
					Plotly.restyle(chartId, update, [tn]);
				}
			}

		}
	} else if (chartType != '' && chartType != null && chartType != undefined && (chartType == 'pie' || chartType == 'donut')) {
		var graphDiv = document.getElementById(chartId);
		var data = graphDiv.data;
		if (colorsObj != null && colorsObj != '' && colorsObj != undefined) {
			colorsObj = JSON.parse(colorsObj);
			if (colorsObj != null && !jQuery.isEmptyObject(colorsObj)) {
				var colors = colorsObj['clrs'];
				if (colors != null && !jQuery.isEmptyObject(colors)) {
					if (chartType != null && chartType != '' && chartType != undefined && (chartType == 'pie' || chartType == 'donut')) {
						var update = { 'marker': { 'colors': colors } };
						Plotly.restyle(chartId, update);
					}
				}
			}
		}

	} else if (chartType != '' && chartType != null && chartType != undefined && chartType == 'scatterpolar') {

		if (colorsObj != null && colorsObj != '' && colorsObj != undefined) {
			colorsObj = JSON.parse(colorsObj);
			if (colorsObj != null && !jQuery.isEmptyObject(colorsObj)) {
				var colors = colorsObj['clrs'];
				if (colors != null && !jQuery.isEmptyObject(colors)) {
					var update = { 'marker': { 'color': colors[0] } };
					Plotly.restyle(chartId, update);
				}
			}
		}

	} else {

		if (colorsObj != null && colorsObj != '' && colorsObj != undefined) {
			colorsObj = JSON.parse(colorsObj);
			if (colorsObj != null && !jQuery.isEmptyObject(colorsObj)) {
				var graphDiv = document.getElementById(chartId);
				var data = graphDiv.data;
				var colors = colorsObj['clrs'];
				if (colors != null && !jQuery.isEmptyObject(colors)) {
					var pnArr = colorsObj['pn'];
					var tnArr = colorsObj['tn'];
					var colors = colorsObj['clrs'];
					var checkData = {};
					for (var t = 0; t < tnArr.length; t++) {
						var pnVal = pnArr[t];
						var tnVal = tnArr[t];
						var dataObj = data[tnVal];
						if (dataObj != null && !jQuery.isEmptyObject(dataObj)) {
							var markerObj = dataObj['marker'];
							if (markerObj != null && !jQuery.isEmptyObject(markerObj)) {
								var dataColors;
								if (checkData.hasOwnProperty(tnVal)) {
									dataColors = checkData[tnVal];
								} else {
									dataColors = markerObj['color'];
								}
								dataColors[pnVal] = colors[t];
								checkData[tnVal] = dataColors;
								var update = { 'marker': { 'color': dataColors } };
								Plotly.restyle(chartId, update, [tnVal]);
							}
						}
					}
				}
			}
		}

	}

}
function getEchartHeatMap(chartId, result, count) {
	var chartType = 'heatMap';
	var heapMapChartId = "visionVisualizeChart" + count;
	if($("#"+heapMapChartId).length>0)
	{
		$("#" + chartId).remove();
	}
	$("#" + heapMapChartId).append("<div id='visionVisualizeChartId" + count + "' type='" + chartType + "' count='" + count + "' class='visionVisualChartBoxClass visionVisualChartBoxSelected'></div>")
	$("#" + chartId).css("width", "890px", "!important");
	$("#" + chartId).css("height", "490px", "!important");
	$("#" + heapMapChartId).css("width", "900px", "!important");
	$("#" + heapMapChartId).css("height", "500px", "!important");
	var xAxis = result['xAxis'];
	var yAxis = result['yAxis'];
	var data = result['source'];
	data = data.map(function(item) {
		return [item[1], item[0], item[2]];
	});
	var gratearVal = result['gratearVal'];
	var dom = document.getElementById(chartId);
	var myChart = echarts.init(dom, null, {
		renderer: 'canvas',
		useDirtyRect: false
	});
	var option = {
		title: {
		text: result['layout']['title'],
	  },
		tooltip: {
			position: 'top'
		},
		grid: {
			height: '50%',
			top: '10%'
		},
		xAxis: {
			type: 'category',
			data: xAxis,
			splitArea: {
				show: true
			}
		},
		yAxis: {
			type: 'category',
			data: yAxis,
			splitArea: {
				show: true
			}
		},
		visualMap: {
			min: 0,
			max: gratearVal,
			calculable: true,
			orient: 'horizontal',
			left: 'center',
			bottom: '15%'
		},
		series: [
			{
				name: 'Punch Card',
				type: 'heatmap',
				data: data,
				label: {
					show: true
				},
				emphasis: {
					itemStyle: {
						shadowBlur: 10,
						shadowColor: 'rgba(0, 0, 0, 0.5)'
					}
				},
				toolbox: {
    feature: {
      dataZoom: {
        yAxisIndex: 'none'
      },
      restore: {},
      saveAsImage: {},
      myDelete: {
        show: true,
        title: 'Delete',
        icon: 'image://images/delete.png',
        onclick: function () {
          deleteModalChart(chartId);
        }
      }
    }
  },
			}
		]
	};
	if (option && typeof option === 'object') {
		myChart.setOption(option);
		return;
	}
}

function getBarChartRotation(chartId, data, count, chartType) {
	$("#" + chartId).remove();
	var heapMapChartId = "visionVisualizeChart" + count;
	$("#" + heapMapChartId).append("<div id='visionVisualizeChartId" + count + "' type='" + chartType + "' count='" + count + "' class='visionVisualChartBoxClass visionVisualChartBoxSelected'></div>")
	$("#" + chartId).css("width", "890px", "!important");
	$("#" + chartId).css("height", "490px", "!important");
	$("#" + heapMapChartId).css("width", "900px", "!important");
	$("#" + heapMapChartId).css("height", "500px", "!important");
	var dom = document.getElementById(chartId);
	var myChart = echarts.init(dom, null, {
		renderer: 'canvas',
		useDirtyRect: false
	});
	var app = {};

	var option;

	const posList = [
		'left',
		'right',
		'top',
		'bottom',
		'inside',
		'insideTop',
		'insideLeft',
		'insideRight',
		'insideBottom',
		'insideTopLeft',
		'insideTopRight',
		'insideBottomLeft',
		'insideBottomRight'
	];
	app.configParameters = {
		rotate: {
			min: -90,
			max: 90
		},
		align: {
			options: {
				left: 'left',
				center: 'center',
				right: 'right'
			}
		},
		verticalAlign: {
			options: {
				top: 'top',
				middle: 'middle',
				bottom: 'bottom'
			}
		},
		position: {
			options: posList.reduce(function(map, pos) {
				map[pos] = pos;
				return map;
			}, {})
		},
		distance: {
			min: 0,
			max: 100
		}
	};

	app.config = {
		rotate: 90,
		align: 'left',
		verticalAlign: 'middle',
		position: 'insideBottom',
		distance: 15,
		onChange: function() {
			const labelOption = {
				rotate: app.config.rotate,
				align: app.config.align,
				verticalAlign: app.config.verticalAlign,
				position: app.config.position,
				distance: app.config.distance
			};
			myChart.setOption({
				series: [
					{
						label: labelOption
					},
					{
						label: labelOption
					},
					{
						label: labelOption
					},
					{
						label: labelOption
					}
				]
			});
		}
	};
	const labelOption = {
		show: true,
		position: app.config.position,
		distance: app.config.distance,
		align: app.config.align,
		verticalAlign: app.config.verticalAlign,
		rotate: app.config.rotate,
		formatter: '{c}  {name|{a}}',
		fontSize: 16,
		rich: {
			name: {}
		}
	};


	option = {
		tooltip: {
			trigger: 'axis',
			axisPointer: {
				type: 'shadow'
			}
		},
		toolbox: {
			show: true,
			orient: 'vertical',
			left: 'right',
			top: 'center',
			feature: {
				mark: { show: true },
				dataView: { show: true, readOnly: false },
				magicType: { show: true, type: ['line', 'bar', 'stack'] },
				restore: { show: true },
				saveAsImage: { show: true }
			}
		},

	};
	var xAxis = data['xAxis'];
	var yAxis = data['yAxis'];
	var series = data['series'];
	var legend = data['legend'];
	if (series != null && !jQuery.isEmptyObject(series)) {
		$.each(series, function(index, value) {
			var seriesObj = value;
			if (seriesObj != null && !jQuery.isEmptyObject(seriesObj)) {
				seriesObj['label'] = labelOption;
			}

		});
	}
	option['xAxis'] = xAxis;
	option['yAxis'] = yAxis;
	option['series'] = series;
	option['legend'] = legend;
	if (option && typeof option === 'object') {
		myChart.setOption(option);
	}
}


function getBoxPlotChart(chartId, result, count, chartType) {
	chartType = 'boxplot';
	$("#visionVisualizeChartId" + count).remove();
	var treeMapChartId = "visionVisualizeChart" + count;
	var treemapChartHomeId = "visionVisualizeChartHome" + count;
	$("#" + treeMapChartId).append("<div id='visionVisualizeChartId" + count + "' type='" + chartType + "' count='" + count + "' class='visionVisualChartBoxClass visionVisualChartBoxSelected'></div>")
	$("#" + chartId).css("width", "1058px", "!important");
	$("#" + chartId).css("height", "600px", "!important");
	$("#" + treeMapChartId).css("width", "900px", "!important");
	$("#" + treeMapChartId).css("height", "600px", "!important");
	$("#" + chartId).parent().parent().attr("class", "col-md-6 col-sm-6 col-lg-9 homeChartWrapDiv treeMapMainDiv");
	$("#" + treemapChartHomeId).addClass("visionVisualChartBoxClass");

	var dom = document.getElementById(chartId);
	var myChart = echarts.init(dom, null, {
		renderer: 'svg',
		useDirtyRect: true
	});
	var _rawData = result['data'];
	var durationVal = result['durationVal'];
	const formatUtil = echarts.format;
	var option;

	echarts.registerTransform(ecSimpleTransform.aggregate);
	option = {
		dataset: [
			{
				id: 'raw',
				source: _rawData
			},
			{
				id: 'since_year',
				fromDatasetId: 'raw',
				transform: [
					{
						type: 'filter',
						config: {
							dimension: 'Duration',
							gte: durationVal
						}
					}
				]
			},
			{
				id: 'income_aggregate',
				fromDatasetId: 'since_year',
				transform: [
					{
						type: 'ecSimpleTransform:aggregate',
						config: {
							resultDimensions: [
								{ name: 'min', from: 'Achieved', method: 'min' },
								{ name: 'Q1', from: 'Achieved', method: 'Q1' },
								{ name: 'median', from: 'Achieved', method: 'median' },
								{ name: 'Q3', from: 'Achieved', method: 'Q3' },
								{ name: 'max', from: 'Achieved', method: 'max' },
								{ name: 'Name', from: 'Name' }
							],
							groupBy: 'Name'
						}
					},
					{
						type: 'sort',
						config: {
							dimension: 'Q3',
							order: 'asc'
						}
					}
				]
			}
		],
		title: {
			text: 'Box Plot'
		},
		tooltip: {
			trigger: 'axis',
			confine: true
		},
		xAxis: {
			name: 'Achieved',
			nameLocation: 'middle',  
			nameGap: 30,
			scale: true
		},
		yAxis: {
			type: 'category'
		},
		grid: {
			bottom: 100
		},
		legend: {
			selected: { detail: false }
		},
		dataZoom: [
			{
				type: 'inside'
			},
			{
				type: 'slider',
				height: 20
			}
		],
		series: [
			{
				name: 'boxplot',
				type: 'boxplot',
				datasetId: 'income_aggregate',
				itemStyle: {
					color: '#b8c5f2'
				},
				encode: {
					x: ['min', 'Q1', 'median', 'Q3', 'max'],
					y: 'Duration',
					itemName: ['Duration'],
					tooltip: ['min', 'Q1', 'median', 'Q3', 'max']
				}
			}
		]
	};

	if (option && typeof option === 'object') {
		myChart.setOption(option);
		$("#" + chartId).attr("echartOption", JSON.stringify(option));
	}




}

function getToolBox(chartId, chartType, tableName,chartCOnfigObjStr,response,count,noOfDataCount) {
	var dashBoard = $('#OptionDropdownData').val();
	var tempResponse= response;
	var colorsObj= Array.isArray(response['colorsObj']) ? response['colorsObj'].join(',') : response['colorsObj'];
	var tempData = response.data;
	$("#" + chartId + "_toolBox").show();
	$("#" + chartId +"_legends").hide();
	var li='';
	if(['SunBurst','TreeMap'].includes(chartType)){
		li = "<li rel=\"tooltip\" class=\"modebar-btn\" title=\"Date Columns\" style=\"padding: 4px;border-bottom: 1px solid #ddd;text-align: center;\">"
		+ "<svg viewBox=\"0 0 448 512\" class=\"icon\" height=\"1em\" width=\"1em\" style=\"fill: rgb(11, 74, 153);\" onclick=\"getCalendarColumns('" + chartId + "','" + chartType + "','" + tableName + "')\">"
		+ "<path d='M539.586,62.553h-37.954v14.052c0,24.327-18.102,44.117-40.349,44.117h-15.329c-22.247,0-40.349-19.79-40.349-44.117    V62.553H199.916v14.052c0,24.327-18.102,44.117-40.349,44.117h-15.329c-22.248,0-40.349-19.79-40.349-44.117V62.553H70.818    c-21.066,0-38.15,16.017-38.15,35.764v476.318c0,19.784,17.083,35.764,38.15,35.764h468.763c21.085,0,38.149-15.984,38.149-35.764    V98.322C577.735,78.575,560.671,62.553,539.586,62.553z M527.757,557.9l-446.502-0.172V173.717h446.502V557.9z'></path>"
		+ "</svg></li>"
		+ "<li rel=\"tooltip\" class=\"modebar-btn\" title=\"Apply Radio Buttons\" style=\"padding: 4px;border-bottom: 1px solid #ddd;text-align: center;\">"
		+ "<svg viewBox=\"0 0 512 512\" class=\"icon\" height=\"1em\" width=\"1em\" style=\"fill: rgb(11, 74, 153);\" onclick=\"getChartRadioButtons('" + chartId + "','" + chartType + "')\">"
		+ "<path d='M160 256C160 202.1 202.1 160 256 160C309 160 352 202.1 352 256C352 309 309 352 256 352C202.1 352 160 309 160 256zM512 256C512 397.4 397.4 512 256 512C114.6 512 0 397.4 0 256C0 114.6 114.6 0 256 0C397.4 0 512 114.6 512 256zM256 48C141.1 48 48 141.1 48 256C48 370.9 141.1 464 256 464C370.9 464 464 370.9 464 256C464 141.1 370.9 48 256 48z'></path>"
		+ "</svg></li>";
	}
	li+="<li rel=\"tooltip\" class=\"modebar-btn\" title=\"Scroll Up\"  style=\"padding: 4px;border-bottom: 1px solid #ddd;text-align: center;\">"
		+ "<svg viewBox=\"0 0 448 512\" class=\"icon\" height=\"1em\" width=\"1em\" style=\"fill: rgb(11, 74, 153);\" onclick=\"scrollUp('" + chartId + "','" + chartType + "')\">"
		+ "<path d='M4.29289 15.7071C3.90237 15.3166 3.90237 14.6834 4.29289 14.2929L9.29289 9.29289C9.68342 8.90237 10.3166 8.90237 10.7071 9.29289L15.7071 14.2929C16.0976 14.6834 16.0976 15.3166 15.7071 15.7071C15.3166 16.0976 14.6834 16.0976 14.2929 15.7071L10 11.4142L5.70711 15.7071C5.31658 16.0976 4.68342 16.0976 4.29289 15.7071ZM4.29289 9.70711C3.90237 9.31658 3.90237 8.68342 4.29289 8.29289L9.29289 3.29289C9.68342 2.90237 10.3166 2.90237 10.7071 3.29289L15.7071 8.29289C16.0976 8.68342 16.0976 9.31658 15.7071 9.70711C15.3166 10.0976 14.6834 10.0976 14.2929 9.70711L10 5.41421L5.70711 9.70711C5.31658 10.0976 4.68342 10.0976 4.29289 9.70711Z'></path>"
		+ "</svg></li>"
	li+= "<li rel=\"tooltip\" class=\"modebar-btn\" title=\"Save As Image\"  style=\"padding: 4px;border-bottom: 1px solid #ddd;text-align: center;\">"
		+ "<svg viewBox=\"0 0 448 512\" class=\"icon\" height=\"1em\" width=\"1em\" style=\"fill: rgb(11, 74, 153);\" onclick=\"saveChartAsImage('" + chartId + "','" + chartType + "')\">"
		+ "<path d='m500 450c-83 0-150-67-150-150 0-83 67-150 150-150 83 0 150 67 150 150 0 83-67 150-150 150z m400 150h-120c-16 0-34 13-39 29l-31 93c-6 15-23 28-40 28h-340c-16 0-34-13-39-28l-31-94c-6-15-23-28-40-28h-120c-55 0-100-45-100-100v-450c0-55 45-100 100-100h800c55 0 100 45 100 100v450c0 55-45 100-100 100z m-400-550c-138 0-250 112-250 250 0 138 112 250 250 250 138 0 250-112 250-250 0-138-112-250-250-250z m365 380c-19 0-35 16-35 35 0 19 16 35 35 35 19 0 35-16 35-35 0-19-16-35-35-35z'></path>"
		+ "</svg></li>"
	li+= "<li rel=\"tooltip\" class=\"modebar-btn\" title=\"Show Data\"  style=\"padding: 4px;border-bottom: 1px solid #ddd;text-align: center;\">"
		+ "<svg viewBox=\"0 0 448 512\" class=\"icon\" height=\"1em\" width=\"1em\" style=\"fill: rgb(11, 74, 153);\" onclick=\"getGridData('','','" + chartId + "','')\">"
		+ "<path d='M448 32C483.3 32 512 60.65 512 96V416C512 451.3 483.3 480 448 480H64C28.65 480 0 451.3 0 416V96C0 60.65 28.65 32 64 32H448zM152 96H64V160H152V96zM208 160H296V96H208V160zM448 96H360V160H448V96zM64 288H152V224H64V288zM296 224H208V288H296V224zM360 288H448V224H360V288zM152 352H64V416H152V352zM208 416H296V352H208V416zM448 352H360V416H448V352z'></path>"
		+ "</svg></li>"

		+ "<li rel=\"tooltip\" class=\"modebar-btn\" title=\"Filter Chart\" style=\"padding: 4px;border-bottom: 1px solid #ddd;text-align: center;\">"
		+ "<svg viewBox=\"0 0 448 512\" class=\"icon\" height=\"1em\" width=\"1em\" style=\"fill: rgb(11, 74, 153);\" onclick=\"getfilterData('" + chartId + "','" + tableName + "','" + chartType + "')\">"
		+ "<path d='M3.853 54.87C10.47 40.9 24.54 32 40 32H472C487.5 32 501.5 40.9 508.1 54.87C514.8 68.84 512.7 85.37 502.1 97.33L320 320.9V448C320 460.1 313.2 471.2 302.3 476.6C291.5 482 278.5 480.9 268.8 473.6L204.8 425.6C196.7 419.6 192 410.1 192 400V320.9L9.042 97.33C-.745 85.37-2.765 68.84 3.854 54.87L3.853 54.87z'></path>"
		+ "</svg></li>"
		+ "<li rel=\"tooltip\" class=\"modebar-btn\" title=\"Delete Chart\" style=\"padding: 4px;border-bottom: 1px solid #ddd;text-align: center;\">"
		+ "<svg viewBox=\"0 0 448 512\" class=\"icon\" height=\"1em\" width=\"1em\" style=\"fill: rgb(11, 74, 153);\" onclick=\"deleteVisualizeChart('" + chartId + "','" + tableName + "','" + chartType + "')\">"
		+ "<path d='M135.2 17.69C140.6 6.848 151.7 0 163.8 0H284.2C296.3 0 307.4 6.848 312.8 17.69L320 32H416C433.7 32 448 46.33 448 64C448 81.67 433.7 96 416 96H32C14.33 96 0 81.67 0 64C0 46.33 14.33 32 32 32H128L135.2 17.69zM31.1 128H416V448C416 483.3 387.3 512 352 512H95.1C60.65 512 31.1 483.3 31.1 448V128zM111.1 208V432C111.1 440.8 119.2 448 127.1 448C136.8 448 143.1 440.8 143.1 432V208C143.1 199.2 136.8 192 127.1 192C119.2 192 111.1 199.2 111.1 208zM207.1 208V432C207.1 440.8 215.2 448 223.1 448C232.8 448 240 440.8 240 432V208C240 199.2 232.8 192 223.1 192C215.2 192 207.1 199.2 207.1 208zM304 208V432C304 440.8 311.2 448 320 448C328.8 448 336 440.8 336 432V208C336 199.2 328.8 192 320 192C311.2 192 304 199.2 304 208z'></path>"
		+ "</svg></li>"
		+ "<li rel=\"tooltip\" class=\"modebar-btn\" title=\"Expand Chart\" style=\"padding: 4px;border-bottom: 1px solid #ddd;text-align: center;\">"
		+ "<svg viewBox=\"0 0 448 512\" class=\"icon\" height=\"1em\" width=\"1em\" style=\"fill: rgb(11, 74, 153);\" onclick=\"expandEChart('" + chartId + "','" + chartType + "')\">"
		+ "<path d='M447.1 319.1v135.1c0 13.26-10.75 23.1-23.1 23.1h-135.1c-12.94 0-24.61-7.781-29.56-19.75c-4.906-11.1-2.203-25.72 6.937-34.87l30.06-30.06L224 323.9l-71.43 71.44l30.06 30.06c9.156 9.156 11.91 22.91 6.937 34.87C184.6 472.2 172.9 479.1 160 479.1H24c-13.25 0-23.1-10.74-23.1-23.1v-135.1c0-12.94 7.781-24.61 19.75-29.56C23.72 288.8 27.88 288 32 288c8.312 0 16.5 3.242 22.63 9.367l30.06 30.06l71.44-71.44L84.69 184.6L54.63 214.6c-9.156 9.156-22.91 11.91-34.87 6.937C7.798 216.6 .0013 204.9 .0013 191.1v-135.1c0-13.26 10.75-23.1 23.1-23.1h135.1c12.94 0 24.61 7.781 29.56 19.75C191.2 55.72 191.1 59.87 191.1 63.1c0 8.312-3.237 16.5-9.362 22.63L152.6 116.7l71.44 71.44l71.43-71.44l-30.06-30.06c-9.156-9.156-11.91-22.91-6.937-34.87c4.937-11.95 16.62-19.75 29.56-19.75h135.1c13.26 0 23.1 10.75 23.1 23.1v135.1c0 12.94-7.781 24.61-19.75 29.56c-11.1 4.906-25.72 2.203-34.87-6.937l-30.06-30.06l-71.43 71.43l71.44 71.44l30.06-30.06c9.156-9.156 22.91-11.91 34.87-6.937C440.2 295.4 447.1 307.1 447.1 319.1z'></path>"
		+ "</svg></li>"
		+ "<li rel=\"tooltip\" class=\"modebar-btn\" title=\"Edit Chart\" style=\"padding: 4px;border-bottom: 1px solid #ddd;text-align: center;\">"
		+ "<svg viewBox=\"0 0 448 512\" class=\"icon\" height=\"1em\" width=\"1em\" style=\"fill: rgb(11, 74, 153);\" onclick=\"homePageChartSetting('" + chartId + "','" + chartType +"','" + " " +"','" + chartCOnfigObjStr + "','" + count + "')\">"
		+ "<path d='M490.3 40.4C512.2 62.27 512.2 97.73 490.3 119.6L460.3 149.7L362.3 51.72L392.4 21.66C414.3-.2135 449.7-.2135 471.6 21.66L490.3 40.4zM172.4 241.7L339.7 74.34L437.7 172.3L270.3 339.6C264.2 345.8 256.7 350.4 248.4 353.2L159.6 382.8C150.1 385.6 141.5 383.4 135 376.1C128.6 370.5 126.4 361 129.2 352.4L158.8 263.6C161.6 255.3 166.2 247.8 172.4 241.7V241.7zM192 63.1C209.7 63.1 224 78.33 224 95.1C224 113.7 209.7 127.1 192 127.1H96C78.33 127.1 64 142.3 64 159.1V416C64 433.7 78.33 448 96 448H352C369.7 448 384 433.7 384 416V319.1C384 302.3 398.3 287.1 416 287.1C433.7 287.1 448 302.3 448 319.1V416C448 469 405 512 352 512H96C42.98 512 0 469 0 416V159.1C0 106.1 42.98 63.1 96 63.1H192z'></path>"
		+ "</svg></li>"
		+ "<li rel=\"tooltip\" class=\"modebar-btn\" title=\"Change Colors\" style=\"padding: 4px;border-bottom: 1px solid #ddd;text-align: center;\">"
		+ "<svg viewBox=\"0 0 448 512\" class=\"icon\" height=\"1em\" width=\"1em\" style=\"fill: rgb(11, 74, 153);\" onclick=\"changeEchartColors('" + chartId + "','" + chartType +"','" + colorsObj +"','" + chartCOnfigObjStr + "','" + tempResponse + "')\">"
		+ "<path d='M512 255.1C512 256.9 511.1 257.8 511.1 258.7C511.6 295.2 478.4 319.1 441.9 319.1H344C317.5 319.1 296 341.5 296 368C296 371.4 296.4 374.7 297 377.9C299.2 388.1 303.5 397.1 307.9 407.8C313.9 421.6 320 435.3 320 449.8C320 481.7 298.4 510.5 266.6 511.8C263.1 511.9 259.5 512 256 512C114.6 512 0 397.4 0 256C0 114.6 114.6 0 256 0C397.4 0 512 114.6 512 256V255.1zM96 255.1C78.33 255.1 64 270.3 64 287.1C64 305.7 78.33 319.1 96 319.1C113.7 319.1 128 305.7 128 287.1C128 270.3 113.7 255.1 96 255.1zM128 191.1C145.7 191.1 160 177.7 160 159.1C160 142.3 145.7 127.1 128 127.1C110.3 127.1 96 142.3 96 159.1C96 177.7 110.3 191.1 128 191.1zM256 63.1C238.3 63.1 224 78.33 224 95.1C224 113.7 238.3 127.1 256 127.1C273.7 127.1 288 113.7 288 95.1C288 78.33 273.7 63.1 256 63.1zM384 191.1C401.7 191.1 416 177.7 416 159.1C416 142.3 401.7 127.1 384 127.1C366.3 127.1 352 142.3 352 159.1C352 177.7 366.3 191.1 384 191.1z'></path>"
		+ "</svg></li>"
		+ "<li rel=\"tooltip\" class=\"modebar-btn\" title=\"Reset\" style=\"padding: 4px;border-bottom: 1px solid #ddd;text-align: center;\">"
		+ "<svg viewBox=\"0 0 512 512\" class=\"icon\" height=\"1em\" width=\"1em\" style=\"fill: rgb(11, 74, 153);\" onclick=\"getVisualizationchart('" + dashBoard + "','" + " " + "')\">"
		+ "<path d='m786 296v-267q0-15-11-26t-25-10h-214v214h-143v-214h-214q-15 0-25 10t-11 26v267q0 1 0 2t0 2l321 264 321-264q1-1 1-4z m124 39l-34-41q-5-5-12-6h-2q-7 0-12 3l-386 322-386-322q-7-4-13-4-7 2-12 7l-35 41q-4 5-3 13t6 12l401 334q18 15 42 15t43-15l136-114v109q0 8 5 13t13 5h107q8 0 13-5t5-13v-227l122-102q5-5 6-12t-4-13z' transform: 'matrix(1 0 0 -1 0 850)></path>"
		+ "</svg></li>"
		+ "<li id='" + chartId + "_echartTypes' rel=\"tooltip\" class=\"modebar-btn\" title=\"Chart Types\" style=\"padding: 4px;border-bottom: 1px solid #ddd;text-align: center;\">"
		+ "<svg viewBox=\"0 0 448 512\" class=\"icon\" height=\"1em\" width=\"1em\" style=\"fill: rgb(11, 74, 153);\" onclick=\"changegraph('" + chartId + "','" + chartType +"','"+" "+"','"+" "+"','"+ count +"','"+noOfDataCount+ "')\">"
		+ "<path d='M424.1 287c-15.13-15.12-40.1-4.426-40.1 16.97V352H336L153.6 108.8C147.6 100.8 138.1 96 128 96H32C14.31 96 0 110.3 0 128s14.31 32 32 32h80l182.4 243.2C300.4 411.3 309.9 416 320 416h63.97v47.94c0 21.39 25.86 32.12 40.99 17l79.1-79.98c9.387-9.387 9.387-24.59 0-33.97L424.1 287zM336 160h47.97v48.03c0 21.39 25.87 32.09 40.1 16.97l79.1-79.98c9.387-9.391 9.385-24.59-.0013-33.97l-79.1-79.98c-15.13-15.12-40.99-4.391-40.99 17V96H320c-10.06 0-19.56 4.75-25.59 12.81L254 162.7L293.1 216L336 160zM112 352H32c-17.69 0-32 14.31-32 32s14.31 32 32 32h96c10.06 0 19.56-4.75 25.59-12.81l40.4-53.87L154 296L112 352z'></path>"
		+ "</svg></li>";

	$("#" + chartId + "_toolBox ul").html(li);
}



function expandEChart(chartId, chartType) {
	const formatUtil = echarts.format;
	var options = $("#" + chartId).attr("echartOption");
	var chartDiv = "<div class='visionExpandEchartDiv'>"
		+ "<div id='homepageEChartDiv'></div>"
		+ "</div>";
	var modalObj = {
		title: 'View Chart',
		body: chartDiv
	};
	var buttonArray = [
		{
			text: 'Ok',
			isCloseButton: true
		}
	];
	modalObj['buttons'] = buttonArray;
	createModal("homepageChartDialog", modalObj);

	$("#homepageChartDialog").attr('class', 'homepageChartDialogTreeMap modal fade show');
	$("#homepageChartDialog .modal-dialog").addClass('modal-xl extendedChartView');
	if (chartType === 'ganttChart') {
		var data =$("#" + chartId).attr("echartData");
    var chartContainer = document.getElementById('homepageEChartDiv'); // Replace with the correct container ID
    var ganttchartDataObject = new google.visualization.DataTable(JSON.parse(data));
    
    // Parse the options JSON and set the desired height and width
    var updatedOptions = JSON.parse(options);
    updatedOptions.height = 600;
    updatedOptions.width = 1000;

    // Create a Gantt chart on the homepage
    var chart = new google.visualization.Gantt(chartContainer);
    chart.draw(ganttchartDataObject, updatedOptions);
    return;
   }

if(chartType=='geochart'){
        var geochartData = $("#" + chartId).attr("geochartData");
        var region  = $("#"+chartId).attr("region");
	chart = new google.visualization.GeoChart(document.getElementById('homepageEChartDiv'));
	var geochartDataObject = new google.visualization.DataTable(JSON.parse(geochartData));
	var updatedOptions = {
        sizeAxis: { minValue: 1, maxValue: 1, minSize: 5, maxSize: 5 },
        width: 800, // Set the desired width here
        height: 600, // Set the desired height here
        region: region// Add any other updated options here
    };
	chart.draw(geochartDataObject, updatedOptions);
	return;
	}

	var dom = document.getElementById('homepageEChartDiv');
	var myChart = echarts.init(dom, null, {
		renderer: 'canvas',
		useDirtyRect: true,
		width: 1200,
		height: 600
	});

	if (options && options != '' && options != undefined) {
		options = JSON.parse(options);
		myChart.setOption(options);
	}

}

/*function expandEChart(chartId, chartType) {
	const formatUtil = echarts.format;
	var options = $("#" + chartId).attr("echartOption");
	var chartDiv = "<div class='visionExpandEchartDiv'>"
		+ "<div id='homepageEChartDiv'></div>"
		+ "</div>";
	var modalObj = {
		title: 'View Chart',
		body: chartDiv
	};
	var buttonArray = [
		{
			text: 'Ok',
			isCloseButton: true
		}
	];
	modalObj['buttons'] = buttonArray;
	createModal("homepageChartDialog", modalObj);

	$("#homepageChartDialog").attr('class', 'homepageChartDialogTreeMap modal fade show');
	$("#homepageChartDialog .modal-dialog").addClass('modal-xl extendedChartView');
	var dom = document.getElementById('homepageEChartDiv');
	var myChart = echarts.init(dom, null, {
		renderer: 'canvas',
		useDirtyRect: true,
		width: 1200,
		height: 600
	});

	if (options && options != '' && options != undefined) {
		options = JSON.parse(options);
		myChart.setOption(options);
	}

}*/
function getChartRadioButtons(chartId, chartType) {
	showLoader();
	$.ajax({
		type: "POST",
		url: "getChartColumnsForm",
		cache: false,
		dataType: 'json',
		data: {
			chartId: chartId,
			chartType: chartType
		},
		success: function(response) {
			console.log(response);
			stopLoader();
			if (response != null && response != '') {
				var result = response['result'];
				var Resultstr = response['resultStr'];
				var count = 0;
				var filterDivId = "<div id='visionVisualizeHomeChartFilters' class='visionVisualizeHomeChartFiltersClass'>"
					+ "<div id='visionVisualizeHomeChartFiltersValues' class='visionVisualizeHomeChartFiltersValuesClass'></div>"
					+ "</div>";

				$("#dialog1").html(Resultstr);
				$("#dialog1").dialog({
					title: (labelObject['Message'] != null ? labelObject['Message'] : 'Message'),
					width: 650,
					maxWidth: 650,
					height: 400,
					maxHeight: 1000,
					fluid: true,
					buttons: [{
						text: (labelObject['Save'] != null ? labelObject['Save'] : 'Save'),
						click: function() {
							var itemsList = [];
							$('#visionVisualizeHomeChartFiltersValues div').each(function(event) {
								let value = $(this).text();
								var id = $(this).attr('id');
								if (id != null && id != null && id != undefined) {
									id = id.replace("_" + value + "_divId", "");
								}
								var colTableName = id + "." + value;
								itemsList.push(colTableName);
							});

							$(this).html("");
							$(this).dialog("close");
							$(this).dialog("destroy");
							updateChartRadioButtonData(chartId, chartType, itemsList);


						}

					},
					{
						text: (labelObject['Cancel'] != null ? labelObject['Cancel'] : 'Cancel'),
						click: function() {
							$(this).html("");
							$(this).dialog("close");
							$(this).dialog("destroy");

						}
					}],
					open: function() {
						$("#visualizeChartHomeSlicerData").append(filterDivId);
						$("#VisualizeBIHomeSlicerColumns").append(result);
						$(".VisionImageVisualizationHomeTableClass").unbind().click(function() {
							$(this).parent().parent().find('ul').toggle();
							if ($(this).parent().parent().find('ul').is(":visible")) {

								$(this).css({ transform: "rotate(90deg)" });
							} else {
								$(this).css({ transform: "rotate(360deg)" });
							}
						});


						$("#Loader").css("display", "none");
						$("body").css({ "pointer-events": "auto" });
						$(".visionVisualizationDragColumns").addClass('visionVisualizationDragFilterColumns');
						$("#dialog1").addClass('filterPopUp');
						$(".ui-dialog").addClass('homePageDDSlicer');
						$(".ui-dialog").css("z-index", "99999"); //jaggu
					},
					beforeClose: function(event, ui) {

					}
				});
			}


		},
		error: function(e) {
			console.log(e);
			sessionTimeout(e);
			stopLoader();
		}
	});
}
function updateChartRadioButtonData(chartId, chartType, items) {
	var dashbordName;
    var item =  $("#OptionDropdownData").jqxDropDownList('getSelectedItem');
    if(item !=null)
    {
        dashbordName = item.value;
    }
	$.ajax({
		type: "POST",
		url: "saveChartRadioButtonColumns",
		cache: false,
		dataType: 'html',
		async: false,
		data: {
			columnData: JSON.stringify(items),
			dashbordName: dashbordName,
			chartId: chartId,
			chartType: chartType
		},
		success: function(response) {
			if (response != null) {
				var modalObj = {
					title: 'Filters',
					body: response
				};
				var buttonArray = [
					{
						text: 'Ok',
						click: function() {
							getParticularVisualizeChart(chartId, "", chartType);
						},
						isCloseButton: true
					}
				];
				modalObj['buttons'] = buttonArray;
				createModal("dialog", modalObj);


			}
		},
		error: function(e) {
			console.log(e);
			sessionTimeout(e);
			stopLoader();
		}
	});
}
function getParticularVisualizeChart(chartId, checkedVal, chartType) {
	var chartIds = [];
	chartIds.push(chartId);
	$.ajax({
		url: 'getChartData',
		type: "POST",
		dataType: 'json',
		traditional: true,
		cache: false,
		async: true,
		data: {
			chartIds: JSON.stringify(chartIds)
		},
		success: function(response) {
			stopLoader();

			if (response != null && !jQuery.isEmptyObject(response)) {
				var dataarr = response['dataarr'];
				if (dataarr != null && dataarr != '' && dataarr != undefined) {
					var count = 0;
					for (var i = 0; i < dataarr.length; i++) {
						var XAxix = dataarr[i]['xAxix'];
						if (XAxix != null && XAxix != '' && XAxix != undefined && checkedVal != null && checkedVal != '' && checkedVal != undefined) {
							XAxix = JSON.parse(XAxix);
							if (XAxix != null && !jQuery.isEmptyObject(XAxix)) {
								var xAxisObj = {};
								xAxisObj['tableName'] = checkedVal.split(".")[0];
								xAxisObj['columnName'] = checkedVal;
								if (XAxix.length == 2) {
									XAxix.splice(1, 1);
								}
								XAxix.push(xAxisObj);
								XAxix = JSON.stringify(XAxix);
							}
						}
						var yAxix = dataarr[i]['yAxix'];
						var type = dataarr[i]['type'];
						var table = dataarr[i]['table'];
						var id = dataarr[i]['chartid'];
						var Lebel = dataarr[i]['Lebel'];
						var aggColumnName = dataarr[i]['aggColumnName'];
						var filterCondition = dataarr[i]['filterCondition'];
						var chartPropObj = dataarr[i]['chartPropObj'];
						var chartConfigObj = dataarr[i]['chartConfigObj'];
						var labelLegend = dataarr[i]['labelLegend'];
						var colorsObj = dataarr[i]['colorsObj'];
						var chartConfigToggleStatus = dataarr[i]['chartConfigToggleStatus'];
						var homeFilterColumn = dataarr[i]['homeFilterColumn'];
						var fetchQuery = dataarr[i]['fetchQuery'];
						var radioButtons = dataarr[i]['radioButtons'];
						var filterConditions = $("#" + chartId + "_filter").val();
						if (filterCondition != null && filterCondition != '' && filterCondition != undefined) {
							filterCondition = JSON.parse(filterCondition);
							if (filterCondition != null && !jQuery.isEmptyObject(filterCondition)) {
								if (filterConditions != null && filterConditions != '' && filterConditions != undefined) {
									filterConditions = JSON.parse(filterConditions);
									for (var key in filterCondition) {
										var paramObj = filterCondition[key];
										filterConditions.push(paramObj);
									}
									if (filterConditions != null && !jQuery.isEmptyObject(filterConditions)) {
										filterConditions = JSON.stringify(filterConditions);
									}
								} else {
									filterConditions = JSON.stringify(filterCondition);
								}
							}
						} else if (filterConditions != null && filterConditions != '' && filterConditions != undefined) {
							filterConditions = JSON.parse(filterConditions);
							if (filterConditions != null && !jQuery.isEmptyObject(filterConditions)) {
								if (filterCondition != null && filterCondition != '' && filterCondition != undefined) {
									filterCondition = JSON.parse(filterCondition);
									for (var key in filterCondition) {
										var paramObj = filterCondition[key];
										filterConditions.push(paramObj);
									}
									if (filterConditions != null && !jQuery.isEmptyObject(filterConditions)) {
										filterConditions = JSON.stringify(filterConditions);
									}
								}
							} else {
								filterConditions = JSON.stringify(filterConditions);
							}
						}
						if (yAxix != null && yAxix != '' && yAxix != 'undefined' && type != 'Card') {
							var chartid = id;
							getVisualizeChart(chartid, chartType, XAxix, yAxix, table, aggColumnName, filterConditions, chartPropObj, chartConfigObj, count, labelLegend, colorsObj, chartConfigToggleStatus, "", "", fetchQuery, radioButtons);
							count++
						}

					}
				}

			}
		}, error: function(e) {
			sessionTimeout(e);
		}
	});
}

function saveHomeChartColors(chartId, chartType, pn, tn, colotrs) {
	$.ajax({
		type: "POST",
		url: "saveHomeChartsColorsData",
		cache: false,
		dataType: 'json',
		data: {
			chartId: chartId,
			chartType: chartType,
			pn: pn,
			tn: tn,
			colotrs: colotrs
		},
		success: function(response) {
			if (response != null && !jQuery.isEmptyObject(response)) {
				var result = response['Message'];
				$("#dialog1").html("<div style='text-align:center'>" + result + "</div>");
				$("#dialog1").dialog({
					height: 120,
					minWidth: 100,
					title: (labelObject['Message'] != null ? labelObject['Message'] : 'Message'),
					fluid: true,
					buttons: [{
						text: ((labelObject['Ok'] != null ? labelObject['Ok'] : 'Ok')),
						click: function() {
							$(this).html("");
							$(this).dialog("close");
							$(this).dialog("destroy");


						}
					}],
					open: function() {
						$(this).closest(".ui-dialog").find(".ui-button").eq(1).addClass("dialogyes");
						$(".visionHeaderMain").css("z-index", "999");
						$(".visionFooterMain").css("z-index", "999");
					},
					beforeClose: function(event, ui) {
						$(".visionHeaderMain").css("z-index", "99999");
						$(".visionFooterMain").css("z-index", "99999");
					}
				});
			}
		},
		error: function(e) {
			console.log(e);
			sessionTimeout(e);
			stopLoader();
		}
	});
}

function RemoveCompareFilterColumns(id) {
	$("#" + id).remove();
}
function getHomeCompareChartFilterData(id, dashbordname, homeFilterColumn) {
	$.ajax({
		type: "POST",
		url: "updteCompareFilterColumnsData",
		cache: false,
		dataType: 'html',
		async: false,
		data: {
			compareFilterData: homeFilterColumn,
			dashbordName: dashbordname
		},
		success: function(response) {
			if (response != null && response != '' && response != undefined) {
				response = JSON.parse(response);
				var result = response['result'];
				var jsDateItems = response['jsDateItems'];
				var dataColObj = response['dataColObj'];
				$("#" + id).html(result);
				$.each(dataColObj, function(key, value) {
					if (value != null && !jQuery.isEmptyObject(value)) {
						$("#" + key).jqxDropDownList({
							filterable: true,
							checkboxes: true,
							source: value,
							theme: 'energyblue',
							displayMember: 'text',
							valueMember: 'value'

						});
					}
				});
				for (var i = 0; i < jsDateItems.length; i++) {
					$("#" + jsDateItems[i]['tbid']).datepicker(
						{
							dateFormat: "dd-mm-yy",
							changeMonth: true,
							changeYear: true
						})
						.on('changeDate', function(ev) {
							if (jsDateItems[i]['type'] == 'min') {
								console.log($("#" + jsDateItems[i]['tbid']).datepicker("getDate"));
								$("#" + jsDateItems[i]['tbid']).datepicker(
									{
										minDate: $("#" + jsDateItems[i]['tbid']).datepicker("getDate")
									});
							} else {
							}
						});
				}
			}
		},
		error: function(e) {
			console.log(e);
			sessionTimeout(e);
			stopLoader();
		}
	});
}

function addlegendLabelToTraceFilter(traceObj, k) {
	if (k == 1) {
		var i = 0;
		var paramObj1 = "";
		$("#dashBoardHomeChartOneCompareFiltersTableId tbody tr td").each(function() {
			var flag = false;
			var isAllow = false;
			var dataRange = $(this).attr('data-Range');
			if (dataRange != null && dataRange != '' && dataRange != undefined && dataRange == 'Y') {
				isAllow = true;
			}
			var values = [];
			if ($("#tbValuesone" + i).length > 0) {
				var items = $("#tbValuesone" + i).jqxDropDownList('getCheckedItems');
				$.each(items, function(index) {
					values.push(this.value);
				});
			}
			if (isAllow) {
				if ($("#tbone" + i).length > 0 && $("#tbone" + i).val() != '') {
					flag = ($("#tbone" + i).val() != null) ? true : false;
					paramObj1 += $("#tbone" + i).val();
				} else {
					paramObj1 += $("#tbminone" + i).val() + " To ";
					paramObj1 += $("#tbmaxone" + i).val();
					flag = ($("#tbmaxone" + i).val() != null) ? true : false;
				}
			} else {
				flag = (values != null && !jQuery.isEmptyObject(values)) ? true : false;
				paramObj1 += (values != null && !jQuery.isEmptyObject(values)) ? values.toString() : "";
			}
			if (flag) {
				paramObj1 += " AND ";
			}

			i++;
		});
		if (paramObj1 != null && paramObj1 != '' && paramObj1 != undefined) {
			paramObj1 = paramObj1.substring(0, paramObj1.length - 5);
		}
		traceObj['name'] = paramObj1;
	} else if (k == 2) {
		var j = 0;
		var paramObj2 = "";
		$("#dashBoardHomeChartTwoCompareFiltersTableId tbody tr td").each(function() {
			var flag = false;
			var isAllow = false;
			var dataRange = $(this).attr('data-Range');
			if (dataRange != null && dataRange != '' && dataRange != undefined && dataRange == 'Y') {
				isAllow = true;
			}
			var values = [];
			if ($("#tbValuestwo" + j).length > 0) {
				var items = $("#tbValuestwo" + j).jqxDropDownList('getCheckedItems');
				$.each(items, function(index) {
					values.push(this.value);
				});
			}

			if (isAllow) {
				if ($("#tbtwo" + j).length > 0 && $("#tbtwo" + j).val() != '') {
					paramObj2 += $("#tbtwo" + j).val();
					flag = ($("#tbtwo" + j).val() != null) ? true : false;
				} else {
					paramObj2 += $("#tbmintwo" + j).val() + " To ";
					paramObj2 += $("#tbmaxtwo" + j).val();
					flag = ($("#tbmaxtwo" + j).val() != null) ? true : false;
				}

			} else {
				flag = (values != null && !jQuery.isEmptyObject(values)) ? true : false;
				paramObj2 += (values != null && !jQuery.isEmptyObject(values)) ? values.toString() : "";
			}
			if (flag) {
				paramObj2 += " AND ";
			}

			j++;
		});
		if (paramObj2 != null && paramObj2 != '' && paramObj2 != undefined) {
			paramObj2 = paramObj2.substring(0, paramObj2.length - 5);
		}
		traceObj['name'] = paramObj2;
	}

	return traceObj;
}
function applyCompareChartFilters(dashBoardName) {
	var chartFilterObj = {};
	var paramArray1 = [];
	var paramArray2 = [];
	var chartIds = (compareChartsArr != null && !jQuery.isEmptyObject(compareChartsArr)) ? compareChartsArr : [];
	var i = 0;
	$("#dashBoardHomeChartOneCompareFiltersTableId tbody tr td").each(function() {
		var paramObj1 = {};
		var isAllow = false;
		var colName = $(this).attr('data-columnName');
		var dataRange = $(this).attr('data-Range');
		if (dataRange != null && dataRange != '' && dataRange != undefined && dataRange == 'Y') {
			isAllow = true;
		}
		paramObj1.colName = colName;
		paramObj1.operator = $("#ddwone" + i).val();
		var values = [];
		if ($("#tbValuesone" + i).length > 0) {
			var items = $("#tbValuesone" + i).jqxDropDownList('getCheckedItems');
			$.each(items, function(index) {
				values.push(this.value);
			});
		}
		paramObj1.values = (values != null && !jQuery.isEmptyObject(values)) ? values.toString() : "";
		if (isAllow) {
			if ($("#tbone" + i).length > 0 && $("#tbone" + i).val() != '') {
				paramObj1.values = $("#tbone" + i).val();
			} else {
				paramObj1.minvalue = $("#tbminone" + i).val();
				paramObj1.maxvalue = $("#tbmaxone" + i).val();
			}
		}
		paramArray1.push(paramObj1);
		i++;
	});
	var j = 0;
	$("#dashBoardHomeChartTwoCompareFiltersTableId tbody tr td").each(function() {
		var paramObj2 = {};
		var isAllow = false;
		var colName = $(this).attr('data-columnName');
		var dataRange = $(this).attr('data-Range');
		if (dataRange != null && dataRange != '' && dataRange != undefined && dataRange == 'Y') {
			isAllow = true;
		}
		paramObj2.colName = colName;
		paramObj2.operator = $("#ddwtwo" + j).val();
		var values = [];
		if ($("#tbValuestwo" + j).length > 0) {
			var items = $("#tbValuestwo" + j).jqxDropDownList('getCheckedItems');
			$.each(items, function(index) {
				values.push(this.value);
			});
		}
		paramObj2.values = (values != null && !jQuery.isEmptyObject(values)) ? values.toString() : "";
		if (isAllow) {
			if ($("#tbtwo" + j).length > 0 && $("#tbtwo" + j).val() != '') {
				paramObj2.values = $("#tbtwo" + j).val();
			} else {
				paramObj2.minvalue = $("#tbmintwo" + j).val();
				paramObj2.maxvalue = $("#tbmaxtwo" + j).val();
			}

		}
		paramArray2.push(paramObj2);
		j++;
	});
	chartFilterObj['chart1'] = paramArray1;
	chartFilterObj['chart2'] = paramArray2;
	$.ajax({
		url: 'getChartData',
		type: "POST",
		dataType: 'json',
		traditional: true,
		cache: false,
		async: true,
		data: {
			dashbordname: dashBoardName,
			chartIds: JSON.stringify(chartIds)

		},
		success: function(response) {
			stopLoader();

			if (response != null && !jQuery.isEmptyObject(response)) {
				var dataarr = response['dataarr'];
				if (dataarr != null && dataarr != '' && dataarr != undefined) {
					var count = 0;
					$("#surveyCompareChartsFiltersId").empty();
					for (var i = 0; i < dataarr.length; i++) {
						var XAxix = dataarr[i]['xAxix'];
						var yAxix = dataarr[i]['yAxix'];
						var type = dataarr[i]['type'];
						var table = dataarr[i]['table'];
						var id = dataarr[i]['chartid'];
						var Lebel = dataarr[i]['Lebel'];
						var aggColumnName = dataarr[i]['aggColumnName'];
						var filterCondition = dataarr[i]['filterCondition'];
						var chartPropObj = dataarr[i]['chartPropObj'];
						var chartConfigObj = dataarr[i]['chartConfigObj'];
						var labelLegend = dataarr[i]['labelLegend'];
						var colorsObj = dataarr[i]['colorsObj'];
						var comboValue = dataarr[i]['comboValue'];
						if (yAxix != null && yAxix != '' && yAxix != 'undefined' && type != 'Card') {
							var chartid = id;
							var divClass = "col-md-6 col-sm-6 col-lg-5";
							$("#surveyCompareChartsFiltersId").append("<div class='" + divClass + " homeChartWrapDiv' id ='visionVisualizeChartHome" + count + "'><div id='homeChartParentDiv" + count + "' class='homeChartParentDiv'><div class='chartMain compareChartsClass' id='" + chartid + "'></div>"
								+ "<div class='rightControls'><div class='iconDiv'><img src='images/Plus-Icon-02.svg'  class='visionVisualizeHorizontalDotsClass visionVisualChartBoxSelected'></div>"
								+ "<div class='iconDiv'><img src='images/FeedBack_Icon.svg'  class='visionVisualizeHorizontalDotsClass visionVisualChartBoxSelected'></div>"
								+ "<div class='iconDiv'><img src='images/Settings_Icon.svg'  class='visionVisualizeHorizontalDotsClass visionVisualChartBoxSelected'></div>"
								+ "<div class='iconDiv'><img src='images/Filter.svg' class='visionVisualizeHorizontalDotsClass visionVisualChartBoxSelected'></div>"
								+ "<div class='iconDiv'><img src='images/search_blue.png'  class='visionVisualizeHorizontalDotsClass visionVisualChartBoxSelected'></div></div></div>"
								+ "<div class='editPopup' id='homepagechartsettingId'></div>"
								+ "<div class='chartDialogClass' id='chartDialog" + count + "' style='display: none;'></div>"
								+ "<div class='createpopupClass' id='homepagecreatepopupId" + count + "' style='display: none;'></div>"
								+ "<input type='hidden' id='" + chartid + "_filter' value=''/>"
								+ "<input type='hidden' id='" + chartid + "_options' value=''/>"
								+ "</div>");
							getVisualizeChart(chartid, type, XAxix, yAxix, table, aggColumnName, filterCondition, chartPropObj, chartConfigObj, count, labelLegend, colorsObj, comboValue, "", "YF", chartFilterObj);
							count++
						}

					}
				}

			}
		}, error: function(e) {
			sessionTimeout(e);
		}
	});
}


function getHomeDashboardCompareFilters() {
	showLoader();
	var chartDropDownVal;
    var item =  $("#OptionDropdownData").jqxDropDownList('getSelectedItem');
    if(item !=null)
    {
        chartDropDownVal = item.value;
    }
	$.ajax({
		type: "POST",
		url: "getHomeChartSlicerData",
		cache: false,
		dataType: 'json',
		data: {
			chartDropDownVal: chartDropDownVal
		},
		success: function(response) {
			console.log(response);
			stopLoader();
			if (response != null && response != '') {
				var result = response['result'];
				var Resultstr = response['resultStr'];
				var count = 0;
				var filterDivId = "<div id='visionVisualizeHomeChartFilters' class='visionVisualizeHomeChartFiltersClass'>"
					+ "<div class='visionVisualizeDashboardHomeComapreOneFiletersSpanClass'><span class='visionVisualizeHomeChartOneFiltersFieldSpanClass'>Chart1 :</span></div>"
					+ "<div id='visionVisualizeHomeChartOneFiltersField' class='visionVisualizeChartOneFiltersFieldClass'>"
					+ "<span class='visionVisualizeHomeChartOneFiltersFieldSpanClass'>Add Fields Here</span></div>"
					+ "<div id='visionVisualizeHomeChartOneFiltersValues' class='visionVisualizeHomeChartOneFiltersValuesClass'></div>"
					+ "<div class='visionVisualizeDashboardHomeComapreTwoFiletersSpanClass'><span class='visionVisualizeHomeChartTwoFiltersFieldSpanClass'>Chart2 :</span></div>"
					+ "<div id='visionVisualizeHomeChartTwoFiltersField' class='visionVisualizeChartTwoFiltersFieldClass'>"
					+ "<span class='visionVisualizeHomeChartTwoFiltersFieldSpanClass'>Add Fields Here</span></div>"
					+ "<div id='visionVisualizeHomeChartTwoFiltersValues' class='visionVisualizeHomeChartTwoFiltersValuesClass'></div>"
					+ "</div>";
                closeAllDialogsBoxes();
				$("#dialog1").html(Resultstr);
				$("#dialog1").dialog({
					title: (labelObject['Message'] != null ? labelObject['Message'] : 'Message'),
					width: 650,
					maxWidth: 650,
					height: 400,
					maxHeight: 1000,
					fluid: true,
					buttons: [{
						text: (labelObject['Save'] != null ? labelObject['Save'] : 'Save'),
						click: function() {
							var items = {};
							var itemsList1 = [];
							var itemsList2 = [];
							$('#visionVisualizeHomeChartOneFiltersValues div').each(function(event) {
								let value = $(this).text();
								let id = $(this).attr('id');
								if (value != null && value != '' && value != undefined) {
									value = $.trim(value);
								}
								itemsList1.push(value);


							});
							$('#visionVisualizeHomeChartTwoFiltersValues div').each(function(event) {
								let value = $(this).text();
								let id = $(this).attr('id');
								if (value != null && value != '' && value != undefined) {
									value = $.trim(value);
								}
								itemsList2.push(value);
							});
							items['chart1'] = itemsList1;
							items['chart2'] = itemsList2;
							$(this).html("");
							$(this).dialog("close");
							$(this).dialog("destroy");
							updateHomeCompareFilterData(items);
						}

					},
					{
						text: (labelObject['Cancel'] != null ? labelObject['Cancel'] : 'Cancel'),
						click: function() {
							$(this).html("");
							$(this).dialog("close");
							$(this).dialog("destroy");

						}
					}],
					open: function() {
						$("#visualizeChartHomeSlicerData").append(filterDivId);
						$("#VisualizeBIHomeSlicerColumns").append(result);
						$(".VisionImageVisualizationHomeTableClass").unbind().click(function() {
							$(this).parent().parent().find('ul').toggle();
							if ($(this).parent().parent().find('ul').is(":visible")) {

								$(this).css({ transform: "rotate(90deg)" });
							} else {
								$(this).css({ transform: "rotate(360deg)" });
							}
						});


						var tableNameId = "visionVisualizeHomeChartTableToggleClass li";
						$('.' + tableNameId).draggable({//cube changes 
							revert: "invalid",
							helper: "clone"

						});

						$('[id^="visionVisualizeHomeChartOneFiltersField"]').droppable({//filters field
							revert: "invalid",
							refreshPositions: true,
							cursor: 'move',
							drop: function(event, ui) {
								if ($("#" + this.id).is(':visible')) {
									$(".visionVisualizeHomeChartOneFiltersValuesClass").css("height", "80px");
									var id = ui.draggable[0].id;
									var label = ui.draggable[0].innerText;
									if (id != null && id != '' && id != undefined) {
										id = id.replace("_" + label, "");
									}
									var divid = this.id;
									if (divid != null && divid != '' && divid != undefined) {
										var tableName = id + "." + label;
										var tableNameId = id + "_filter_" + label;
										var filterDiv = "<div id='" + tableNameId + "'>"
											+ " <span class='visionVisualizeHomeChartSlicerFieldSpan'>" + tableName + "</span>"
											+ "<img src='images/close_white.png' class='visionDashBoardCOmpareChartFiltersClass' title='Remove Column' onclick=RemoveCompareFilterColumns('" + tableNameId + "')>"
											+ "</div>";
										$("#visionVisualizeHomeChartOneFiltersValues").append(filterDiv);
									}


								}
							}

						});
						$('[id^="visionVisualizeHomeChartTwoFiltersField"]').droppable({//filters field
							revert: "invalid",
							refreshPositions: true,
							cursor: 'move',
							drop: function(event, ui) {
								if ($("#" + this.id).is(':visible')) {
									$(".visionVisualizeHomeChartTwoFiltersValuesClass").css("height", "80px");
									var id = ui.draggable[0].id;
									var label = ui.draggable[0].innerText;
									if (id != null && id != '' && id != undefined) {
										id = id.replace("_" + label, "");
									}
									var divid = this.id;
									if (divid != null && divid != '' && divid != undefined) {
										var tableName = id + "." + label;
										var tableNameId = id + "_comp_filter_" + label;
										var filterDiv = "<div id='" + tableNameId + "'>"
											+ " <span class='visionVisualizeHomeChartSlicerFieldSpan'>" + tableName + "</span>"
											+ "<img src='images/close_white.png' class='visionDashBoardCOmpareChartFiltersClass' title='Remove Column' onclick=RemoveCompareFilterColumns('" + tableNameId + "')>"
											+ "</div>";
										$("#visionVisualizeHomeChartTwoFiltersValues").append(filterDiv);
									}


								}
							}

						});
						$(".visionVisualizeHomeChartOneFiltersValuesClass").css("height", "0px");
						$(".visionVisualizeHomeChartTwoFiltersValuesClass").css("height", "0px");
						$("#Loader").css("display", "none");
						$("body").css({ "pointer-events": "auto" });
						$(".visionVisualizationDragColumns").addClass('visionVisualizationDragFilterColumns');
						$("#dialog1").addClass('filterPopUp');
						$(".ui-dialog").addClass('homePageDDSlicer');
						$(".ui-dialog").css("z-index", "99999"); //jaggu
					},
					beforeClose: function(event, ui) {

					}
				});
			}


		},
		error: function(e) {
			console.log(e);
			sessionTimeout(e);
			stopLoader();
		}
	});
}

function updateHomeCompareFilterData(items) {
	var dashbordName;
    var item =  $("#OptionDropdownData").jqxDropDownList('getSelectedItem');
    if(item !=null)
    {
        dashbordName = item.value;
    }
	$.ajax({
		type: "POST",
		url: "updteCompareFilterColumn",
		cache: false,
		dataType: 'html',
		async: false,
		data: {
			compareFilterData: JSON.stringify(items),
			dashbordName: dashbordName
		},
		success: function(response) {
			if (response != null) {
				var modalObj = {
					title: 'Message',
					body: response
				};
				var buttonArray = [
					{
						text: 'Ok',
						isCloseButton: true
					}
				];
				modalObj['buttons'] = buttonArray;
				createModal("dialog", modalObj);
			}
		},
		error: function(e) {
			console.log(e);
			sessionTimeout(e);
			stopLoader();
		}
	});
}
function getHomeDashboardHeaderFilters() {
	showLoader();
	var chartDropDownVal;
    var item =  $("#OptionDropdownData").jqxDropDownList('getSelectedItem');
    if(item !=null)
    {
        chartDropDownVal = item.value;
    }
	$.ajax({
		type: "POST",
		url: "getHomeChartHeaderFilterForm",
		cache: false,
		dataType: 'json',
		data: {
			chartDropDownVal: chartDropDownVal
		},
		success: function(response) {
			console.log(response);
			stopLoader();
			if (response != null && response != '') {
				var result = response['result'];
				var Resultstr = response['resultStr'];
				var columnStr = response['columnStr'];
				var count = 0;
				var filterDivId = "<div id='visionVisualizeHomeChartFilters' class='visionVisualizeHomeChartFiltersClass'>"
					+ "<div id='visionVisualizeHomeChartFiltersSavedValues' class='visionVisualizeChartFiltersSavedValuesClass'/></div>"
					+ "<div id='visionVisualizeHomeChartFiltersValues' class='visionVisualizeHomeChartFiltersValuesClass'/></div>"
					+ "</div>";
               closeAllDialogsBoxes();
				$("#dialog1").html(Resultstr);
				$("#dialog1").dialog({
					title: (labelObject['Message'] != null ? labelObject['Message'] : 'Message'),
					width: 650,
					maxWidth: 650,
					height: 400,
					maxHeight: 1000,
					fluid: true,
					buttons: [{
						text: (labelObject['Save'] != null ? labelObject['Save'] : 'Save'),
						click: function() {
							var itemsList = [];

							$('#visionVisualizeHomeChartFiltersSavedValues li').each(function(event) {
								let value = $(this).text();
								var id = $(this).attr('id');
								if (id != null && id != null && id != undefined) {
									id = id.replace("_" + value + "SavedliId", "");
								}
								var colTableName = id + "." + value;
								//								itemsList.push(colTableName);
								itemsList.push(value);
							});
							$('#visionVisualizeHomeChartFiltersValues div').each(function(event) {
								let value = $(this).text();
								var id = $(this).attr('id');
								if (id != null && id != null && id != undefined) {
									id = id.replace("_" + value + "_divId", "");
								}
								var colTableName = id + "." + value;
								//								itemsList.push(colTableName);
								itemsList.push(value);
							});

                            updateHomeFilterData(itemsList);
							$(this).html("");
							$(this).dialog("close");
							$(this).dialog("destroy");

							


						}

					},
					{
						text: (labelObject['Cancel'] != null ? labelObject['Cancel'] : 'Cancel'),
						click: function() {
							$(this).html("");
							$(this).dialog("close");
							$(this).dialog("destroy");

						}
					}],
					open: function() {
						$("#visualizeChartHomeSlicerData").append(filterDivId);
						$("#VisualizeBIHomeSlicerColumns").append(result);
						$("#visionVisualizeHomeChartFiltersSavedValues").html(columnStr);
						$(".VisionImageVisualizationHomeTableClass").unbind().click(function() {
							$(this).parent().parent().find('ul').toggle();
							if ($(this).parent().parent().find('ul').is(":visible")) {

								$(this).css({ transform: "rotate(90deg)" });
							} else {
								$(this).css({ transform: "rotate(360deg)" });
							}
						});


						$("#Loader").css("display", "none");
						$("body").css({ "pointer-events": "auto" });
						$(".visionVisualizationDragColumns").addClass('visionVisualizationDragFilterColumns');
						$("#dialog1").addClass('filterPopUp');
						$(".ui-dialog").addClass('homePageDDSlicer');
						$(".ui-dialog").css("z-index", "99999"); //jaggu
					},
					beforeClose: function(event, ui) {
						$(this).html("");
						$(this).dialog("destroy");

					}
				});
			}


		},
		error: function(e) {
			console.log(e);
			sessionTimeout(e);
			stopLoader();
		}
	});
}
function updateHomeFilterData(items) {
	var dashbordName;
    var item =  $("#OptionDropdownData").jqxDropDownList('getSelectedItem');
    if(item !=null)
    {
        dashbordName = item.value;
    }
	$.ajax({
		type: "POST",
		url: "updteFilterColumn",
		cache: false,
		dataType: 'html',
		async: false,
		data: {
			Columndata: JSON.stringify(items),
			dashbordName: dashbordName
		},
		success: function(response) {
			if (response != null) {
				var modalObj = {
					title: 'Filters',
					body: response
				};
				var buttonArray = [
					{
						text: 'Ok',
						click: function() {
							getVisualizationchart(dashbordName, "");

						},
						isCloseButton: true
					}
				];
				modalObj['buttons'] = buttonArray;
				createModal("dialog", modalObj);


			}
		},
		error: function(e) {
			console.log(e);
			sessionTimeout(e);
			stopLoader();
		}
	});
}
//function applyFilterOnGraph() {
//
//	var tablesArr = [];
//	var columnFilterConditions = [];
//	var chartDropDownVal = $("#DxpdashbordoptionListId").val();
//	$('#visionDashBoardHomeFilterId div').find('div.FilterColumnIdClass').each(function(event) {
//		var id = $(this).attr('id');
//		var values = [];
//		var items = $("#" + id).jqxDropDownList('getCheckedItems');
//		$.each(items, function(index) {
//			values.push(this.value);
//		});
//		if (values != null && !jQuery.isEmptyObject(values)) {
//			values = values.toString();
//		}
//		var tableColumn = $("#" + id).attr("data-tablecolumn");
//		if (tableColumn != null && tableColumn != '' && tableColumn != undefined) {
//
//			var filterObj = {};
//			var fieldData = tableColumn.split('.');
//			var tableName = fieldData[0];
//			var columnName = fieldData[1];
//
//			filterObj['colName'] = columnName;
//			filterObj['operator'] = "IN";
//			filterObj['values'] = values;
//			columnFilterConditions.push(filterObj);
//			if (!(tablesArr.indexOf(tableName) > -1)) {
//				tablesArr.push(tableName);
//			}
//		}
//	});
//
//
//
//	$.ajax({
//		url: 'getSlicerHomeCharts',
//		type: "POST",
//		dataType: 'json',
//		traditional: true,
//		cache: false,
//		async: true,
//		data: {
//			chartDropDownVal: chartDropDownVal,
//			tablesArr: JSON.stringify(tablesArr)
//		},
//		success: function(response) {
//			stopLoader();
//
//			if (response != null && !jQuery.isEmptyObject(response)) {
//				var dataarr = response['dataarr'];
//				if (dataarr != null && dataarr != '' && dataarr != undefined) {
//					var count = 0;
//					$("#visionCardView").empty();
//					$("#visualizechartId").empty();
//					var echarts = ['treemap', 'sunburst', 'BarAndLine', 'heatMap'];
//					for (var i = 0; i < dataarr.length; i++) {
//						var filterConditions = [];
//						var XAxix = dataarr[i]['xAxix'];
//						var yAxix = dataarr[i]['yAxix'];
//						var type = dataarr[i]['type'];
//						var table = dataarr[i]['table'];
//						var id = dataarr[i]['chartid'];
//						var Lebel = dataarr[i]['Lebel'];
//						var aggColumnName = dataarr[i]['aggColumnName'];
//						var filterCondition = dataarr[i]['filterCondition'];
//						var chartPropObj = dataarr[i]['chartPropObj'];
//						var chartConfigObj = dataarr[i]['chartConfigObj'];
//						var labelLegend = dataarr[i]['labelLegend'];
//						var colorsObj = dataarr[i]['colorsObj'];
//						var chartConfigToggleStatus = dataarr[i]['chartConfigToggleStatus'];
//						var FilterColumn = dataarr[i]['FilterColumn'];
//						var paramCardDateObj = dataarr[i]['paramCardDateObj'];
//						var cardType = dataarr[i]['cardType'];
//						var cardTrendType = dataarr[i]['cardTrendType'];
//						if (type != null && type != 'FILTER') {
//
//							$("#Loader").css("display", "block");
//							$("body").css("pointer-events", "none");
//							filterConditions = JSON.parse(filterCondition);
//							if (columnFilterConditions != null && columnFilterConditions != '' && columnFilterConditions != undefined && columnFilterConditions.length > 0) {
//								for (var j = 0; j < columnFilterConditions.length; j++) {
//									var values = columnFilterConditions[j].values;
//									if (values != null && values.length > 0) {
//										if (!(filterConditions != null && !jQuery.isEmptyObject(filterConditions))) {
//											filterConditions = [];
//											filterConditions.push(columnFilterConditions[j]);
//										} else {
//											filterConditions.push(columnFilterConditions[j]);
//										}
//									}
//
//								}
//								if (filterConditions != null && !jQuery.isEmptyObject(filterConditions)) {
//									filterConditions = JSON.stringify(filterConditions);
//								}
//							} else {
//								if (filterConditions != null && !jQuery.isEmptyObject(filterConditions)) {
//									filterConditions = JSON.stringify(filterConditions);
//								}
//							}
//							if (type != null && type != '' && type != undefined && type == 'Card') {
//								var chartid = id;
//								var aggregateType = XAxix;
//								$("#visionCardView").append("<div id='" + chartid + "' class='visionHomeCardViewClass' ></div>");
//								getHomePageCardData(Lebel, aggregateType, chartid, table, yAxix, filterConditions, paramCardDateObj, cardType, cardTrendType);
//
//							} else {
//								var chartid = id;
//								var divClass;
//								if (type == 'heatMap') {
//									divClass = "";
//								} else {
//									divClass = "col-md-6 col-sm-6 col-lg-3";
//								}
//								var chartDivId = "<div class='" + divClass + " homeChartWrapDiv' id ='visionVisualizeChartHome" + count + "'><div id='homeChartParentDiv" + count + "' class='homeChartParentDiv'><div class='chartMain' id='" + chartid + "'></div>"
//									+ "<div id='" + id + "_traces' class='legendTraces'></div><div class='rightControls'><div class='iconDiv'><img src='images/Plus-Icon-02.svg'  class='visionVisualizeHorizontalDotsClass visionVisualChartBoxSelected'></div>"
//									+ "<div class='iconDiv'><img src='images/FeedBack_Icon.svg'  class='visionVisualizeHorizontalDotsClass visionVisualChartBoxSelected'></div>"
//									+ "<div class='iconDiv'><img src='images/Settings_Icon.svg'  class='visionVisualizeHorizontalDotsClass visionVisualChartBoxSelected'></div>"
//									+ "<div class='iconDiv'><img src='images/Filter.svg' class='visionVisualizeHorizontalDotsClass visionVisualChartBoxSelected'></div>"
//									+ "<div class='iconDiv'><img src='images/search_blue.png'  class='visionVisualizeHorizontalDotsClass visionVisualChartBoxSelected'></div></div></div>"
//									+ "<div class='editPopup' id='homepagechartsettingId'></div>"
//									+ "<div class='chartDialogClass' id='chartDialog" + count + "' style='display: none;'></div>"
//									+ "<div class='createpopupClass' id='homepagecreatepopupId" + count + "' style='display: none;'></div>"
//									+ "<input type='hidden' id='" + chartid + "_filter' value=''/>"
//									+ "<input type='hidden' id='" + chartid + "_startIndex' value='0'/>"
//									+ "<input type='hidden' id='" + chartid + "_endIndex' value='10'/>"
//									+ "<input type='hidden' id='" + chartid + "_pageSize' value='10'/>"
//									+ "<input type='hidden' id='" + chartid + "_TotalChartCount' value='0'/>"
//									+ "<input type='hidden' id='" + chartid + "_options' value=''/>";
//								if (type != null && type != '' && type != undefined && echarts.indexOf(type) > -1) {
//									chartDivId += "<div id = '" + chartid + "_toolBox' class='iconsDiv' style='position: absolute;top: 2px;right: 3px;height: 99%; background: #f1f1f1;height: 349px;'><ul></ul></div>"
//										+ "<div id='" + chartid + "_radioButtons' class='visionVisualizeRadioButtonsClass'></div>";
//								}
//								chartDivId += "</div>";
//								$("#visualizechartId").append(chartDivId);
//
//								getVisualizeChart(id, type, XAxix, yAxix, table, aggColumnName, filterConditions, chartPropObj, chartConfigObj, count, labelLegend, colorsObj, "", chartConfigToggleStatus);
//								count++;
//							}
//						}
//					}
//				}
//
//			}
//		}, error: function(e) {
//			sessionTimeout(e);
//		}
//	});
//
//
//
//}

function applyFilterOnGraph() {

	var allColumnsFilterObj = {};
	var tablesArr = [];
	var chartDropDownVal;
    var item =  $("#OptionDropdownData").jqxDropDownList('getSelectedItem');
    if(item !=null)
    {
        chartDropDownVal = item.value;
    }
	$('#visionDashBoardHomeFilterId div').find('div.FilterColumnIdClass').each(function(event) {
		var id = $(this).attr('id');
		var values = [];
		var items = $("#" + id).jqxDropDownList('getCheckedItems');
		$.each(items, function(index) {
			var value = this.value;
            //If single value has mutiple commma separating replace them to create as single string and changing to orginal state 
            value = value.replace(/ /g, "#"); // Replace spaces with #
            value = value.replace(/,/g, "$"); // Replace commas with $

            values.push(value);
		});
		if (values != null && !jQuery.isEmptyObject(values)) {
			values = values.toString();
		}
		var tableColumn = $("#" + id).attr("data-tablecolumn");
		if (tableColumn != null && tableColumn != '' && tableColumn != undefined) {
			var filterObj = {};
			var columnFilterConditions = [];
			var fieldData = tableColumn.split('.');
			var tableName = fieldData[0];
			var columnName = fieldData[1];
			if (values != null && values != '' && values != undefined && !jQuery.isEmptyObject(values)) {
				filterObj['colName'] = columnName;
				filterObj['operator'] = "IN";
				filterObj['values'] = values;
			}

			if (allColumnsFilterObj != null && !jQuery.isEmptyObject(allColumnsFilterObj) && allColumnsFilterObj[tableName] && !jQuery.isEmptyObject(allColumnsFilterObj[tableName])) {
				if (filterObj != null && !jQuery.isEmptyObject(filterObj))
                {
				var filterArr = allColumnsFilterObj[tableName];
				filterArr.push(filterObj);
				allColumnsFilterObj[tableName] = filterArr;
				}
			} else {
				if (filterObj != null && !jQuery.isEmptyObject(filterObj))
                {
				columnFilterConditions.push(filterObj);
				allColumnsFilterObj[tableName] = columnFilterConditions;
				tablesArr.push(tableName);
				}
			}
		}
	});
	if(allColumnsFilterObj !=null && !jQuery.isEmptyObject(allColumnsFilterObj)){
	$.each(allColumnsFilterObj, function(key, value) {
		var tableName = [key];
		$.ajax({
			url: 'getSlicerHomeCharts',
			type: "POST",
			dataType: 'json',
			traditional: true,
			cache: false,
			async: true,
			data: {
				chartDropDownVal: chartDropDownVal,
				tablesArr: JSON.stringify(tableName)
			},
			success: function(response) {
				stopLoader();

				if (response != null && !jQuery.isEmptyObject(response)) {
					var dataarr = response['dataarr'];
					if (dataarr != null && dataarr != '' && dataarr != undefined) {
						var count = 0;
						//					$("#visionCardView").empty();
						//					$("#visualizechartId").empty();
						var echarts = ['treemap', 'sunburst', 'BarAndLine', 'heatMap'];
						for (var i = 0; i < dataarr.length; i++) {
							var filterConditions = [];
							var XAxix = dataarr[i]['xAxix'];
							var yAxix = dataarr[i]['yAxix'];
							var type = dataarr[i]['type'];
							var table = dataarr[i]['table'];
							var id = dataarr[i]['chartid'];
							var Lebel = dataarr[i]['Lebel'];
							var aggColumnName = dataarr[i]['aggColumnName'];
							var filterCondition = dataarr[i]['filterCondition'];
							var chartPropObj = dataarr[i]['chartPropObj'];
							var chartConfigObj = dataarr[i]['chartConfigObj'];
							var labelLegend = dataarr[i]['labelLegend'];
							var colorsObj = dataarr[i]['colorsObj'];
							var chartConfigToggleStatus = dataarr[i]['chartConfigToggleStatus'];
							var FilterColumn = dataarr[i]['FilterColumn'];
							var paramCardDateObj = dataarr[i]['paramCardDateObj'];
							var cardType = dataarr[i]['cardType'];
							var cardTrendType = dataarr[i]['cardTrendType'];
							if (type != null && type != 'FILTER') {

								$("#Loader").css("display", "block");
								$("body").css("pointer-events", "none");
								var singleTableFilters = [];
                                if (value != null && !jQuery.isEmptyObject(value)) {
                                    $.each(value, function (idx, val) {
                                        if (!isNullOrUndefined(val) && !jQuery.isEmptyObject(val)) {
                                            singleTableFilters.push(val);
                                        }
                                    });
                                   $("#" + id + "_homePageFilter").val(JSON.stringify(singleTableFilters)); 
                                }
                                if (singleTableFilters != null && !jQuery.isEmptyObject(singleTableFilters)) {
                                    filterConditions = singleTableFilters;
                                }
                                var slicerFilterCondition = $("#" + id + "_filter").val();
                                var slicerFilterConditions = [];
                                if (slicerFilterCondition != null && slicerFilterCondition != '' && slicerFilterCondition != undefined) {
                                    slicerFilterConditions = JSON.parse(slicerFilterCondition);
                                    if (slicerFilterConditions != null && !jQuery.isEmptyObject(slicerFilterConditions) && slicerFilterConditions.length > 0) {
                                        for (var c=0;c < slicerFilterConditions.length;c++) {
                                            var paramObj = slicerFilterConditions[c];
                                            filterConditions.push(paramObj);
                                        }
                                    }
                                }
                                
                                
                                var chartFilterCond = $("#" + id + "_chartFilter").val();
                                if (chartFilterCond != null && chartFilterCond != '' && chartFilterCond != undefined) {
                                    chartFilterCond = JSON.parse(chartFilterCond);
                                    if (chartFilterCond != null && !jQuery.isEmptyObject(chartFilterCond)) {
                                        for (var h=0;h < chartFilterCond.length;h++) {
                                            var paramObj = chartFilterCond[h];
                                            filterConditions.push(paramObj);
                                        }
                                    }
                                }

                                if (filterCondition != null && filterCondition != '' && filterCondition != undefined) {
                                    filterCondition = JSON.parse(filterCondition);
                                    for (var j = 0; j < filterCondition.length; j++) {
                                        var filterCondObj = filterCondition[j];
                                        if (filterCondObj != null && !jQuery.isEmptyObject(filterCondObj)) {
                                            filterConditions.push(filterCondObj);
                                        }
                                    }
                                    if (filterConditions != null && !jQuery.isEmptyObject(filterConditions)) {
                                        filterConditions = JSON.stringify(filterConditions);
                                    }
                                } else {
                                    if (filterConditions != null && !jQuery.isEmptyObject(filterConditions)) {
                                        filterConditions = JSON.stringify(filterConditions);
                                    }
                                }
								if (type != null && type != '' && type != undefined && type == 'Card') {
									var chartid = id;
									var aggregateType = XAxix;
									//$("#visionCardView").append("<div id='" + chartid + "' class='visionHomeCardViewClass' ></div>");
									getHomePageCardData(Lebel, aggregateType, chartid, table, yAxix, filterConditions, paramCardDateObj, cardType, cardTrendType);

								} else {
                                    getVisualizeChart(id, type, XAxix, yAxix, table, aggColumnName, filterConditions, chartPropObj, chartConfigObj, count, labelLegend, colorsObj, "", chartConfigToggleStatus);
									count++;
								}
							}
						}
					}

				}
			}, error: function(e) {
				sessionTimeout(e);
			}
		});
	});
	}
	else{
        $.ajax({
            url: 'getSlicerHomeCharts',
            type: "POST",
            dataType: 'json',
            traditional: true,
            cache: false,
            async: true,
            data: {
                chartDropDownVal: chartDropDownVal,
               },
            success: function (response) {
                stopLoader();
                if (response != null && !jQuery.isEmptyObject(response)) {
                    var dataarr = response['dataarr'];
                    if (dataarr != null && dataarr != '' && dataarr != undefined) {
                        var count = 0;
                        //					$("#visionCardView").empty();
                        //					$("#visualizechartId").empty();
                        var echarts = ['treemap', 'sunburst', 'BarAndLine', 'heatMap'];
                        for (var i = 0; i < dataarr.length; i++) {
                            var filterConditions = []; 
                            var XAxix = dataarr[i]['xAxix'];
                            var yAxix = dataarr[i]['yAxix'];
                            var type = dataarr[i]['type'];
                            var table = dataarr[i]['table'];
                            var id = dataarr[i]['chartid'];
                            var Lebel = dataarr[i]['Lebel'];
                            var aggColumnName = dataarr[i]['aggColumnName'];
                            var filterCondition = dataarr[i]['filterCondition'];
                            var chartPropObj = dataarr[i]['chartPropObj'];
                            var chartConfigObj = dataarr[i]['chartConfigObj'];
                            var labelLegend = dataarr[i]['labelLegend'];
                            var colorsObj = dataarr[i]['colorsObj'];
                            var chartConfigToggleStatus = dataarr[i]['chartConfigToggleStatus'];
                            var FilterColumn = dataarr[i]['FilterColumn'];
                            var paramCardDateObj = dataarr[i]['paramCardDateObj'];
                            var cardType = dataarr[i]['cardType'];
                            var cardTrendType = dataarr[i]['cardTrendType'];
                            var chartOptionsObj = $("#" + id + "_options").val();
                            if (chartOptionsObj != null && chartOptionsObj != '' && chartOptionsObj != undefined) {
                                chartPropObj = chartOptionsObj;
                            }
                            if (type != null && type != 'FILTER') { 

                                $("#Loader").css("display", "block");
                                $("body").css("pointer-events", "none");
                                var singleTableFilters = [];
                                $("#" + id + "_homePageFilter").val("");
                                var slicerFilterCondition = $("#" + id + "_filter").val();
                                var slicerFilterConditions = [];
                                if (slicerFilterCondition != null && slicerFilterCondition != '' && slicerFilterCondition != undefined) {
                                    slicerFilterConditions = JSON.parse(slicerFilterCondition);
                                    if (slicerFilterConditions != null && !jQuery.isEmptyObject(slicerFilterConditions) && slicerFilterConditions.length > 0) {
                                        for (var c=0;c<slicerFilterConditions.length;c++) {
                                            var paramObj = slicerFilterConditions[c];
                                            singleTableFilters.push(paramObj);
                                        }
                                    }
                                }
                                if (singleTableFilters != null && !jQuery.isEmptyObject(singleTableFilters)) {
                                    filterConditions = singleTableFilters;
                                }  
                                
                                var chartFilterCond = $("#" + id + "_chartFilter").val();
                                if (chartFilterCond != null && chartFilterCond != '' && chartFilterCond != undefined) {
                                    chartFilterCond = JSON.parse(chartFilterCond);
                                    if (chartFilterCond != null && !jQuery.isEmptyObject(chartFilterCond)) {
                                        for (var h=0;h<chartFilterCond.length;h++) {
                                            var paramObj = chartFilterCond[h];
                                            filterConditions.push(paramObj);
                                        }
                                    }
                                }

                                if (filterCondition != null && filterCondition != '' && filterCondition != undefined) {
                                    filterCondition = JSON.parse(filterCondition);
                                    for (var j = 0; j < filterCondition.length; j++) {
                                        var filterCondObj = filterCondition[j];
                                        if (filterCondObj != null && !jQuery.isEmptyObject(filterCondObj)) {
                                            filterConditions.push(filterCondObj);
                                        }
                                    }
                                    if (filterConditions != null && !jQuery.isEmptyObject(filterConditions)) {
                                        filterConditions = JSON.stringify(filterConditions);
                                    }
                                } else {
                                    if (filterConditions != null && !jQuery.isEmptyObject(filterConditions)) {
                                        filterConditions = JSON.stringify(filterConditions);
                                    }
                                }
                                if (type != null && type != '' && type != undefined && type == 'Card') {
                                    var chartid = id;
                                    var aggregateType = XAxix;
                                    //$("#visionCardView").append("<div id='" + chartid + "' class='visionHomeCardViewClass' ></div>");
                                    getHomePageCardData(Lebel, aggregateType, chartid, table, yAxix, filterConditions, paramCardDateObj, cardType, cardTrendType);
                                } else {
                                    var chartid = id;
                                    var divClass;
                                    if (type == 'heatMap') {
                                        divClass = "";
                                    } else {
                                        divClass = "col-md-6 col-sm-6 col-lg-3";
                                    }
                                    var chartDivId = "<div class='" + divClass + " homeChartWrapDiv' id ='visionVisualizeChartHome" + count + "'><div id='homeChartParentDiv" + count + "' class='homeChartParentDiv'><div class='chartMain' id='" + chartid + "'></div>"
                                            + "<div id='" + id + "_traces' class='legendTraces'></div><div class='rightControls'><div class='iconDiv'><img src='images/Plus-Icon-02.svg'  class='visionVisualizeHorizontalDotsClass visionVisualChartBoxSelected'></div>"
                                            + "<div class='iconDiv'><img src='images/FeedBack_Icon.svg'  class='visionVisualizeHorizontalDotsClass visionVisualChartBoxSelected'></div>"
                                            + "<div class='iconDiv'><img src='images/Settings_Icon.svg'  class='visionVisualizeHorizontalDotsClass visionVisualChartBoxSelected'></div>"
                                            + "<div class='iconDiv'><img src='images/Filter.svg' class='visionVisualizeHorizontalDotsClass visionVisualChartBoxSelected'></div>"
                                            + "<div class='iconDiv'><img src='images/search_blue.png'  class='visionVisualizeHorizontalDotsClass visionVisualChartBoxSelected'></div></div></div>"
                                            + "<div class='editPopup' id='homepagechartsettingId'></div>"
                                            + "<div class='chartDialogClass' id='chartDialog" + count + "' style='display: none;'></div>"
                                            + "<div class='createpopupClass' id='homepagecreatepopupId" + count + "' style='display: none;'></div>"
                                            + "<input type='hidden' id='" + chartid + "_filter' value=''/>"
                                            + "<input type='hidden' id='" + chartid + "_startIndex' value='0'/>"
                                            + "<input type='hidden' id='" + chartid + "_endIndex' value='10'/>"
                                            + "<input type='hidden' id='" + chartid + "_pageSize' value='10'/>"
                                            + "<input type='hidden' id='" + chartid + "_TotalChartCount' value='0'/>"
                                            + "<input type='hidden' id='" + chartid + "_options' value=''/>";
                                    if (type != null && type != '' && type != undefined && echarts.indexOf(type) > -1) {
                                        chartDivId += "<div id = '" + chartid + "_toolBox' class='iconsDiv' style='position: absolute;top: 2px;right: 3px;height: 99%; background: #f1f1f1;height: 349px;'><ul></ul></div>"
                                                + "<div id='" + chartid + "_radioButtons' class='visionVisualizeRadioButtonsClass'></div>";
                                    }
                                    chartDivId += "</div>";
                                   // $("#visualizechartId").append(chartDivId);
                                    getVisualizeChart(id, type, XAxix, yAxix, table, aggColumnName, filterConditions, chartPropObj, chartConfigObj, count, labelLegend, colorsObj, "", chartConfigToggleStatus);
                                    count++;
                                }
                            }
                        }
                    }

                }
            }, error: function (e) {
                sessionTimeout(e);
            }
        });
    }
}


function dashBoardHeaderFilter(id, columnName) {
	//    var divId = "<div id='" + id + "_divId' class='dashBoardHeaderFilterFormClass'>" + columnName + "</div>";

	var divId = "<div id='" + id + "_divId' class='dashBoardHeaderFilterFormClass' ondblclick=hideColName('" + id + "')><span style='line-height: 23px; '>" + columnName + "</span><img src='images/close_white.png'  class='VisualizeColumnCancelClass' onclick=RemoveHeaderFilterColumns('" + id + "')  title='Close Chart'/></div>";
	$("#" + id + "liId").hide();
	$("#visionVisualizeHomeChartFiltersValues").append(divId);

}
function hideColName(id) {
	$("#" + id + "liId").show();
	$("#" + id + "_divId").hide();
}
function RemoveHeaderFilterColumns(id) {
	$("#" + id + "_divId").remove();
	$("#" + id + "liId").show();

}
function deleteHeaderFilterColumns(id, columnname) {
	$("#" + id).remove();
}

function dashBoardDrilldownColumns(id, columnName) {
	var divId = "<div id='" + id + "_divId' class='dashBoardHeaderFilterFormClass' ondblclick=hideDrillDownFilterColName('" + id + "')><span style='line-height: 23px; '>" + columnName + "</span><img src='images/close_white.png'  class='VisualizeColumnCancelClass' onclick=RemoveDrillDownColumns('" + id + "')  title='Remove Column'/></div>";
	$("#" + id).hide();
	$("#visionVisualizeChartXAxisFiltersValues").html(divId);

}
function hideDrillDownFilterColName(id) {
	$("#" + id).show();
	$("#" + id + "_divId").hide();
}
function RemoveDrillDownColumns(id) {
	$("#" + id + "_divId").remove();
	$("#" + id).show();

}
function deleteHeaderFilterColumns(id, columnname) {
	$("#" + id).remove();
}
function createFilterHeader(id, type, FilterColumn, dashbordname) {
	console.log();
	$("#" + id).html("");
	$.ajax({
		type: "POST",
		url: "createFilterHeader",
		cache: false,
		dataType: 'html',
		async: false,
		data: {
			id: id,
			type: type,
			FilterColumn: FilterColumn,
			dashbordname: dashbordname
		},
		success: function(response) {
			if (response != null) {
				response = JSON.parse(response);
				var str = response['filterstr'];
				$("#" + id).append(str);
				var dataColObj = response['dataColObj'];
				$.each(dataColObj, function(key, value) {
					if (value != null && !jQuery.isEmptyObject(value)) {
						var dropdownTableColName = $("#" + key).attr("data-tablecolumn");
						var dropdownColName = "";
						if (!isNullOrUndefined(dropdownTableColName) && dropdownTableColName !== '') {
							var tableColNameAsTitle = dropdownTableColName.replaceAll("_", " ");
							tableColNameAsTitle = tableColNameAsTitle.replace(/(^.|\s+.)/g, m => m.toUpperCase())
							$("#" + key).attr("title", tableColNameAsTitle);
							dropdownColName = dropdownTableColName.split('.')[1].toLowerCase();
							dropdownColName = dropdownColName.replaceAll("_", " ");
						}
						//						var placeHolderValue = key.substr(14, key.length - 14).replaceAll('Id', '').replaceAll("_", " ").toLowerCase();
						$("#" + key).jqxDropDownList({
							filterable: true,
							checkboxes: true,
							source: value,
							theme: 'energyblue',
							displayMember: 'text',
							valueMember: 'value',
							placeHolder: "" + dropdownColName.replace(/(^.|\s+.)/g, m => m.toUpperCase()) + "",
						});
						
					
						

						var handleCheckChange = true;
						$("#" + key).on('checkChange', function(event) {
							if (!handleCheckChange)
								return;

							if (event.args.label != 'Select All') {
								handleCheckChange = false;
								//								$("#" + key).jqxDropDownList('checkIndex', 0);
								var checkedItems = $("#" + key).jqxDropDownList('getCheckedItems');
								var items = $("#" + key).jqxDropDownList('getItems');

								//								if (checkedItems.length == 1) {
								//									$("#" + key).jqxDropDownList('uncheckIndex', 0);
								//								}else 
								if (items.length != checkedItems.length && checkedItems.length > 0
									&& checkedItems[0].label === 'Select All') {
									$("#" + key).jqxDropDownList('indeterminateIndex', 0);
								}
								handleCheckChange = true;
							}
							else {
								handleCheckChange = false;
								if (event.args.checked) {
									$("#" + key).jqxDropDownList('checkAll');
								} else {
									$("#" + key).jqxDropDownList('uncheckAll');
								}

								handleCheckChange = true;
							}
						});
						
						/* pranjay code start*/
							/* pranjay code start*/
						var scrollWidth = $('#mainintelliSenseSelectBoxId')[0].scrollWidth
			
      		var scrollClickLen = 0;
            $('.iconMenuNavNext').click(function () {
                var container = document.getElementById("mainintelliSenseSelectBoxId");
                var divScrollWidth = container.clientWidth + scrollClickLen;
                if (divScrollWidth < scrollWidth) {
                    scrollClickLen += 10;
                    container.scrollLeft += scrollClickLen;
                } 
            
            });
            $('.iconMenuNavPrev').click(function () {
                var container = document.getElementById("mainintelliSenseSelectBoxId");
                if (scrollClickLen > 0) {
                    scrollClickLen -= 10;
                    container.scrollLeft -= scrollClickLen;
                } 

            });
						/*pranjay code end*/
					}
				});
			}
		},
		error: function(e) {
			console.log(e);
			sessionTimeout(e);
			stopLoader();
		}
	});
}
function toggleRange(rowid) {
	$("#to" + rowid).toggle();
	$("#tbmin" + rowid).toggle();
	$("#tbmax" + rowid).toggle();
	$("#tb" + rowid).toggle();
	if ($("#tb" + rowid).css('display') != 'none') {
		$("#tbmin" + rowid).val("");
		$("#tbmax" + rowid).val("");
		$("#ddw" + rowid).val("EQUALS");
	} else {
		$("#ddw" + rowid).val("BETWEEN");
		$("#tb" + rowid).val("");
	}

}

function getAllImagesInPdf() {
	var allImageContent = {};
	var i = 1;
	$(".chartMain").each(function() {
		var id = $(this).attr('id');
		if (id != null && id != '' && id != undefined) {
			if (!($("#" + id).hasClass("js-plotly-plot"))) {
				var img = new Image();
				var dom = document.getElementById(id);
				var myChart = echarts.init(dom, null, {
					renderer: 'canvas',
					useDirtyRect: true
				});
				img.src = myChart.getDataURL({
					pixelRatio: 2,
					backgroundColor: '#fff',
					type: 'png'
				});
				allImageContent[i] = img.src;
				i++;
			} else {
				var graphDiv = document.getElementById(id);
				var plotData = Plotly.toImage(graphDiv, { format: 'png', height: 400, width: 500 }).then(function(url) {
					allImageContent[i] = url;
					i++;
				});
			}
		}
	});
	setTimeout(function() {
		if (allImageContent != null && !jQuery.isEmptyObject(allImageContent)) {
			$("#chartImageObj").val(JSON.stringify(allImageContent));
			$("#pdfChartForm").submit();
		}
	}, 1000);


}

function getCompareChart(chartId, chartType) {
	$.ajax({
		type: 'post',
		traditional: true,
		dataType: 'html',
		cache: false,
		url: 'getChartFilterData',
		async: true,
		data: {
			chartId: chartId,
			chartType: chartType,
		},
		success: function(response) {
			if (response != null && !jQuery.isEmptyObject(response)) {
				var result = JSON.parse(response);
				var dataarr = result['dataarr'];
				if (dataarr != null && dataarr != '' && dataarr != undefined) {
					var count = 0;
					for (var i = 0; i < dataarr.length; i++) {
						var XAxix = dataarr[i]['xAxix'];
						var yAxix = dataarr[i]['yAxix'];
						var type = dataarr[i]['type'];
						var table = dataarr[i]['table'];
						var id = dataarr[i]['chartid'];
						var Lebel = dataarr[i]['Lebel'];
						var aggColumnName = dataarr[i]['aggColumnName'];
						var filterCondition = dataarr[i]['filterCondition'];
						var chartPropObj = dataarr[i]['chartPropObj'];
						var chartConfigObj = dataarr[i]['chartConfigObj'];
						var labelLegend = dataarr[i]['labelLegend'];
						var colorsObj = dataarr[i]['colorsObj'];
						var chartConfigToggleStatus = dataarr[i]['chartConfigToggleStatus'];
						var homeFilterColumn = dataarr[i]['homeFilterColumn'];
						var compareChartsFlag = dataarr[i]['compareChartsFlag'];
						var fetchQuery = dataarr[i]['fetchQuery'];
						if (XAxix != null && XAxix != '' && yAxix != null && yAxix != '' && type != 'Card') {
							var chartid = id;
							getVisualizeChart(chartid, type, XAxix, yAxix, table, aggColumnName, "", chartPropObj, chartConfigObj, count, labelLegend, colorsObj, "", chartConfigToggleStatus, "Y", {}, fetchQuery);
							$("#visionDashBoardHomeFilterId").hide();
							$("#visionDashBoardHomeCompareFilterId").show();
							if (!(compareChartsArr != null && !jQuery.isEmptyObject(compareChartsArr) && compareChartsArr.indexOf(chartId) > -1)) {
								compareChartsArr.push(chartid);
							}
						}

					}
				}


			}
		},
		error: function(e) {
			sessionTimeout(e);
		}
	});
}
function getRemoveCompareChart(chartId, chartType) {
	$.ajax({
		type: 'post',
		traditional: true,
		dataType: 'html',
		cache: false,
		url: 'getChartFilterData',
		async: true,
		data: {
			chartId: chartId,
			chartType: chartType,
		},
		success: function(response) {
			if (response != null && !jQuery.isEmptyObject(response)) {
				var result = JSON.parse(response);
				var dataarr = result['dataarr'];
				if (dataarr != null && dataarr != '' && dataarr != undefined) {
					var count = 0;
					for (var i = 0; i < dataarr.length; i++) {
						var XAxix = dataarr[i]['xAxix'];
						var yAxix = dataarr[i]['yAxix'];
						var type = dataarr[i]['type'];
						var table = dataarr[i]['table'];
						var id = dataarr[i]['chartid'];
						var Lebel = dataarr[i]['Lebel'];
						var aggColumnName = dataarr[i]['aggColumnName'];
						var filterCondition = dataarr[i]['filterCondition'];
						var chartPropObj = dataarr[i]['chartPropObj'];
						var chartConfigObj = dataarr[i]['chartConfigObj'];
						var labelLegend = dataarr[i]['labelLegend'];
						var colorsObj = dataarr[i]['colorsObj'];
						var chartConfigToggleStatus = dataarr[i]['chartConfigToggleStatus'];
						var homeFilterColumn = dataarr[i]['homeFilterColumn'];
						var compareChartsFlag = dataarr[i]['compareChartsFlag'];
						var fetchQuery = dataarr[i]['fetchQuery'];
						if (XAxix != null && XAxix != '' && yAxix != null && yAxix != '' && type != 'Card') {
							var chartid = id;
							getVisualizeChart(chartid, type, XAxix, yAxix, table, aggColumnName, "", chartPropObj, chartConfigObj, count, labelLegend, colorsObj, "", chartConfigToggleStatus, "N", {}, fetchQuery);

						}

					}
				}


			}
		},
		error: function(e) {
			sessionTimeout(e);
		}
	});
}


function showDrillDownCharts(colName, tableName, paramArray, chartType, chartPropObj, chartConfigObj) {
	$.ajax({
		type: 'post',
		traditional: true,
		dataType: 'json',
		cache: false,
		url: 'showDrillDownChart',
		async: true,
		data: {
			colName: colName,
			tableName: tableName,
			chartType: chartType,
			paramArray: JSON.stringify(paramArray),
			chartPropObj: chartPropObj,
			chartConfigObj: chartConfigObj
		},
		success: function(response) {
			if (response != null && !jQuery.isEmptyObject(response)) {
				var chartDataObj = response['dataObj'];
				var axisColumnName = response['axisColumnName'];
				var dataPropObject = response['dataPropObj'];
				var layoutObj = response['layoutObj'];

				var data = [];
				if (chartType !== null && chartType !== '' && chartType !== undefined && chartType === 'pie') {
					$.each(chartDataObj, function(key) {

						var traceObj = {};
						var colorObj = {};
						if (key !== axisColumnName) {
							traceObj['labels'] = chartDataObj[axisColumnName];
							traceObj['values'] = chartDataObj[key];
							traceObj['type'] = chartType;
							traceObj['name'] = 'value';
							traceObj['textinfo'] = 'percent';
							traceObj['hoverinfo'] = 'label+percent+value';
							var colorArr = ['#00c60b', '#fc0203', '#f99800'];
							var markerObj = {};
							markerObj['colors'] = colorArr;
							traceObj['marker'] = markerObj;
							if (dataPropObject != null && !jQuery.isEmptyObject(dataPropObject)) {
								$.each(dataPropObject, function(key, val) {
									traceObj[key] = val;
								});
							}
						}
						if (traceObj !== null && !jQuery.isEmptyObject(traceObj)) {
							data.push(traceObj);
						}
					});
				} else if (chartType != null && chartType != '' && chartType != undefined && chartType == 'donut') {
					$.each(chartDataObj, function(key) {

						var traceObj = {};
						var colorObj = {};
						if (key !== axisColumnName) {
							traceObj['labels'] = chartDataObj[axisColumnName];
							traceObj['values'] = chartDataObj[key];
							traceObj['hole'] = 0.4;
							traceObj['type'] = 'pie';
							traceObj['name'] = 'value';
							traceObj['textinfo'] = 'percent';
							traceObj['hoverinfo'] = 'label+percent+value';
							var colorArr = ['#00c60b', '#fc0203', '#f99800'];
							var markerObj = {};
							markerObj['colors'] = colorArr;
							traceObj['marker'] = markerObj;
							if (dataPropObject != null && !jQuery.isEmptyObject(dataPropObject)) {
								$.each(dataPropObject, function(key, val) {
									traceObj[key] = val;
								});
							}
						}
						if (traceObj !== null && !jQuery.isEmptyObject(traceObj)) {
							data.push(traceObj);
						}
					});
				} else if (chartType != null && chartType != '' && chartType != undefined && chartType == 'bar') {
					var colorCount = 0;
					colorArray = ['#1864ab', '#fd7e14', '#0b7285', '#ff6b6b'];
					var defaultLegendNames = {};
					$.each(chartDataObj, function(keyName) {
						var traceObj = {};
						var colorObj = {};
						if (keyName !== axisColumnName) {
							traceObj['y'] = chartDataObj[axisColumnName];
							traceObj['x'] = chartDataObj[keyName];
							traceObj['type'] = chartType;
							traceObj['orientation'] = 'h';
							var keys = keyName.split("ASCOL");
							keyName = keys[0];
							defaultLegendNames[keyName] = keyName;
							traceObj = addlegendLabelToTrace(traceObj, keyName, defaultLegendNames);
							$.each(dataPropObject, function(key, val) {
								if (key === 'marker' && !jQuery.isEmptyObject(val) && val !== null) {
									var colorsArray = val['colors'];
									if (colorsArray !== undefined && colorsArray !== null && !$.isArray(colorsArray)) {
										colorObj['color'] = colorsArray;
									} else if (colorsArray !== undefined && colorsArray !== null && $.isArray(colorsArray)) {
										colorObj['color'] = colorsArray[colorCount++];
									} else {
										colorObj['color'] = colorArray[colorCount++];
									}
									traceObj[key] = colorObj;
								} else if (key === 'marker' && (jQuery.isEmptyObject(val) || val === null)) {
									colorObj['color'] = colorArray[colorCount++];
									traceObj[key] = colorObj;
								} else {
									traceObj[key] = val;
								}
							});
						}
						if (traceObj !== null && !jQuery.isEmptyObject(traceObj)) {
							data.push(traceObj);
						}
					});
				} else if (chartType != null && chartType != '' && chartType != undefined && chartType == 'column') {
					var colorCount = 0;
					colorArray = ['#1864ab', '#fd7e14', '#0b7285', '#ff6b6b'];
					var defaultLegendNames = {};
					$.each(chartDataObj, function(keyName, val) {
						var traceObj = {};
						var colorObj = {};
						if (keyName !== axisColumnName) {
							traceObj['x'] = chartDataObj[axisColumnName];
							traceObj['y'] = chartDataObj[keyName];
							traceObj['type'] = 'bar';
							var keys = keyName.split("ASCOL");
							keyName = keys[0];
							defaultLegendNames[keyName] = keyName;
							traceObj = addlegendLabelToTrace(traceObj, keyName, defaultLegendNames);
							$.each(dataPropObject, function(key, val) {
								if (key === 'marker' && !jQuery.isEmptyObject(val) && val !== null) {
									var colorsArray = val['colors'];
									if (colorsArray !== undefined && colorsArray !== null && !$.isArray(colorsArray)) {
										colorObj['color'] = colorsArray;
									} else if (colorsArray !== undefined && colorsArray !== null && $.isArray(colorsArray)) {
										colorObj['color'] = colorsArray[colorCount++];
									} else {
										colorObj['color'] = colorArray[colorCount++];
									}
									traceObj[key] = colorObj;
								} else if (key === 'marker' && (jQuery.isEmptyObject(val) || val === null)) {
									colorObj['color'] = colorArray[colorCount++];
									traceObj[key] = colorObj;
								} else {
									traceObj[key] = val;
								}
							});
						}

						if (traceObj !== null && !jQuery.isEmptyObject(traceObj)) {
							data.push(traceObj);
						}
					});
				} else if (chartType != null && chartType != '' && chartType != undefined && chartType == 'lines') {
					var colorCount = 0;
					var lineColorCount = 0;
					colorArray = ['#1864ab', '#fd7e14', '#0b7285', '#ff6b6b'];
					var defaultLegendNames = {};
					$.each(chartDataObj, function(keyName, val) {
						var traceObj = {};
						var colorObj = {};
						if (keyName !== axisColumnName) {
							traceObj['x'] = chartDataObj[axisColumnName];
							traceObj['y'] = chartDataObj[keyName];
							traceObj['type'] = chartType;
							var keys = keyName.split("ASCOL");
							keyName = keys[0];
							defaultLegendNames[keyName] = keyName;
							traceObj = addlegendLabelToTrace(traceObj, keyName, defaultLegendNames);
							$.each(dataPropObject, function(key, val) {
								if (key === 'marker' && !jQuery.isEmptyObject(val) && val !== null) {
									var colorsArray = val['color'];
									if (colorsArray !== undefined && colorsArray !== null && !$.isArray(colorsArray)) {
										colorObj['color'] = colorsArray;
									} else if (colorsArray !== undefined && colorsArray !== null && $.isArray(colorsArray)) {
										colorObj['color'] = colorsArray[colorCount++];
									} else {
										colorObj['color'] = colorArray[colorCount++];
									}
									colorObj['size'] = val['size'];
									traceObj[key] = colorObj;
								} else if (key === 'marker' && (jQuery.isEmptyObject(val) || val === null)) {
									colorObj['color'] = colorArray[colorCount++];
									traceObj[key] = colorObj;
								} else if (key === 'line' && !jQuery.isEmptyObject(val) && val !== null) {
									var lineObject = Object.assign({}, val);
									var colorsArray = lineObject['color'];
									if (colorsArray !== undefined && colorsArray !== null && !$.isArray(colorsArray)) {
										lineObject['color'] = colorsArray;
									} else if (colorsArray !== undefined && colorsArray !== null && $.isArray(colorsArray)) {
										lineObject['color'] = colorsArray[lineColorCount++];
									} else {
										lineObject['color'] = colorArray[lineColorCount++];
									}
									traceObj[key] = lineObject;
								} else {
									traceObj[key] = val;
								}
							});
						}

						if (traceObj !== null && !jQuery.isEmptyObject(traceObj)) {
							data.push(traceObj);
						}
					});
				}
				var modalObj = {
					title: labelObject["DrillDown Chart"] != null ? labelObject["DrillDown Chart"] : "DrillDown Chart",
					body: "<div id='drillDownChartData' style='width:100%;height:100%'></div>",
				};
				var buttonArray = [
					{
						text: labelObject['Save'] != null ? labelObject['Save'] : 'Save',
						click: function() {
							saveDrillDownChart(colName, tableName, paramArray, chartType, chartPropObj, chartConfigObj);
						},
						isCloseButton: true
					},
					{
						text: labelObject['Cancel'] != null ? labelObject['Cancel'] : 'Cancel',
						isCloseButton: true
					}
				];
				modalObj['buttons'] = buttonArray;
				createModal("drillDownChartDataDialog", modalObj);
				var layout = {
					height: '100%',
					width: 950,
					autosize: false,
					showlegend: false,
					margin: {
						l: 60,
						b: 60,
						t: 30,
						r: 20,
					},
					yaxis: {
						automargin: true,
					}
				};
				if (layoutObj != null && !jQuery.isEmptyObject(layoutObj)) {
					$.each(layoutObj, function(key, val) {
						layout[key] = val;
					});
				}
				var config = {
					responsive: true,
					displayModeBar: true,
					downloadImage: true,
					displaylogo: false,
					modeBarButtonsToRemove: ['zoomin', 'resetViews', 'resetScale2d', 'zoomout', 'pan2d', 'sendDataToCloud', 'hoverClosestCartesian', 'autoScale2d', 'lasso2d', 'select2d', 'zoom2d']
				};
				$(".modal-dialog").addClass("modal-xl");
				Plotly.newPlot("drillDownChartData", data, layout, config);
			}
		},
		error: function(e) {
			sessionTimeout(e);
		}
	});
}
function getDrillDownConfigByChartType() {
	var chartConfigObj = $("#visionVisualizeChartDrillDownChartTypesId").attr('chartTypes');
	var chartType = $("#drillDownChartTypeId").val();
	if (chartConfigObj != null && chartConfigObj != '' && chartConfigObj != undefined) {
		chartConfigObj = JSON.parse(chartConfigObj);
		$("#visionVisualizeChartDrillDownConfigureId").empty();
		$("#visionVisualizeChartDrillDownConfigureId").html(chartConfigObj[chartType]);
	}
	$(".filter-container").unbind('click').on('click', function(event) {
		$(this).parent().siblings(':last').toggle();
		$(this).find('img').toggleClass('open');
	});
	$(".toggle-btn").unbind('click').on('click', function(event) {
		$(this).toggleClass('active');
		var onOfftext = $(this).children(':first').text();
		if (onOfftext === 'off') {
			$(this).children(':first').text('on');
			$(this).parents('.main-container').siblings(':last').find('*').attr('disabled', false);
		} else {
			$(this).children(':first').text('off');
			$(this).parents('.main-container').siblings(':last').find('*').attr('disabled', true);
		}
		var isActive = $(this).hasClass('active');
		var currentToggleSelector = $(this).closest("li");
		var currentElementId = $(this).attr('id');
		var toBeToggledSelectors = currentToggleSelector.children("ul").children();
		var upperChartType = chartType.toUpperCase();
		if (isActive) {
			$.each(toBeToggledSelectors, function(index, element) {
				$(this).addClass('active-filter');
			});
			if (currentElementId !== '' && currentElementId !== null && currentElementId !== undefined) {
				if (currentElementId === 'toggleButtonForchartHover' + upperChartType) {
					$('#' + upperChartType + 'HOVERLABELDATA').attr('disabled', false);
					$('#' + upperChartType + 'HOVERLABELDATA').val('x+y');
				}
			}
		} else {
			$.each(toBeToggledSelectors, function(index, element) {
				$(this).removeClass('active-filter');
			});
			if (currentElementId !== '' && currentElementId !== null && currentElementId !== undefined) {
				if (currentElementId === 'toggleButtonForchartHover' + upperChartType) {
					$('#' + upperChartType + 'HOVERLABELDATA').attr('disabled', true);
					$('#' + upperChartType + 'HOVERLABELDATA').val('none');
				}
			}
		}
		$("#visionChartProperties").trigger('change');
	});

}
function saveDrillDownChart(colName, tableName, paramArray, chartType, chartPropObj, chartConfigObj) {
	var xAxisArr = [];
	var xAxisObj = {};
	xAxisObj['tableName'] = tableName;
	xAxisObj['columnName'] = colName;
	xAxisArr.push(xAxisObj);
	var yAxisArr = [];
	var yAxisObj = {};
	yAxisObj['tableName'] = tableName;
	yAxisObj['columnName'] = "Count(" + colName + ")";
	yAxisObj['aggColumnName'] = 'Count';
	yAxisArr.push(yAxisObj);
	var tablesObj = [tableName];
	var chartId = "visionVisualizeChart";
	var data = {};
	var dataArr = [];
	data['axisColumns'] = JSON.stringify(xAxisArr);
	data['valuesColumns'] = JSON.stringify(yAxisArr);
	data['tablesObj'] = JSON.stringify(tablesObj);
	data['chartType'] = chartType;
	data['chartId'] = chartId;
	data['filterConditions'] = JSON.stringify(paramArray);
	data['chartPropObj'] = chartPropObj;
	data['chartConfigPositionKeyStr'] = chartConfigObj;
	dataArr.push(data);
	$.ajax({
		url: 'getdashbordname',
		type: "POST",
		dataType: 'html',
		traditional: true,
		cache: false,
		success: function(response) {
			if (response != null && !jQuery.isEmptyObject(response)) {
				response += "<div id='textReason'><textarea id='reasonId' class='visionDeleteReason' style='display:none'></textarea><br></div>";
				response += "<div id='dailog_error_id' style='display:none;color:red'>" + (labelObject['Please give any DashBoard Name'] != null ? labelObject['Please give any DashBoard Name'] : 'Please give any DashBoard Name') + "</div>";
				$("#dialog").html(response);
				$("#dialog").dialog({
					title: (labelObject['DashBoard Name'] != null ? labelObject['DashBoard Name'] : 'DashBoard Name'),
					modal: true,
					height: 'auto',
					minWidth: 300,
					maxWidth: 'auto',
					fluid: true,
					buttons: [{
						text: (labelObject['Ok'] != null ? labelObject['Ok'] : 'Ok'),
						click: function() {

							var dashBoardName = $("#dashbordNameId").val();
							if (!(dashBoardName != null && dashBoardName != '' && dashBoardName != undefined) || dashBoardName == 'New') {
								dashBoardName = $("#reasonId").val();
							}
							if (dashBoardName != null && dashBoardName != '' && dashBoardName != undefined && dashBoardName != 'Select' && dashBoardName != 'New') {
								$("#dailog_error_id").hide();
								$(this).html("");
								$(this).dialog("destroy");
								$.ajax({
									url: 'saveVisualizeData',
									type: "POST",
									data:
									{
										'data': JSON.stringify(dataArr),
										'dashBoardName': dashBoardName
									},
									traditional: true,
									cache: false,
									success: function(response) {
										console.log("testing");
										var msg = " Charts " + response;
										var modalObj = {
											title: 'Save',
											body: msg
										};
										var buttonArray = [
											{
												text: 'Close',
												click: function() {

												},
												isCloseButton: true
											}
										];
										modalObj['buttons'] = buttonArray;
										createModal("dataDxpSplitterValue", modalObj);
										$(".modal-dialog").addClass("opacity-animate3");

									}, error: function(e) {
										sessionTimeout(e);
									}
								});
							} else {
								$("#dailog_error_id").show();
							}


						}
					},
					{
						text: (labelObject['Cancel'] != null ? labelObject['Cancel'] : 'Cancel'),
						click: function() {
							$(this).html("");
							$(this).dialog("destroy");
						}

					}],
					open: function() {
						$(this).closest(".ui-dialog").find(".ui-button").eq(1).addClass("dialogyes");
						$(this).closest(".ui-dialog").find(".ui-button").eq(2).addClass("dialogno");
						$(".visionHeaderMain").css("z-index", "999");
						$(".visionFooterMain").css("z-index", "999");
					},
					beforeClose: function(event, ui) {
						$(".visionHeaderMain").css("z-index", "99999");
						$(".visionFooterMain").css("z-index", "99999");
					}
				});
			}
		},
		error: function(e) {
			sessionTimeout(e);
		}
	});
}
function getHomePageChartDiv() {
	$.ajax({
		type: 'post',
		traditional: true,
		dataType: 'json',
		cache: false,
		url: 'getChartHomePageDiv',
		async: true,
		data: {

		},
		success: function(response) {
			if (response != null && !jQuery.isEmptyObject(response)) {
				var result = response;
				var chartDiv = result['chartDiv'];
				if (chartDiv != null && chartDiv != '' && chartDiv != undefined) {
					$("#pageBodyContent").html(chartDiv);
				}
			}
		},
		error: function(e) {
			sessionTimeout(e);
		}
	});
}

function updatechartColor(chartId, createcount, data) {
	var defaultColors;
	if (chartId != null && chartId != '' && chartId != undefined) {
		var graphDiv = document.getElementById(chartId);
		var data = graphDiv.data;
		var charttype = data[0].type;
		if (charttype != null && charttype == 'pie' && charttype != undefined) {
			defaultColors = data[0]['marker']['colors'];
		} else if (charttype != null && charttype == 'lines' && charttype != undefined) {
			defaultColors = [];
			defaultColors.push(data[0]['marker']['color']);
		} else if (charttype != null && charttype == 'scatterpolar' && charttype != undefined || charttype == 'scatter') {
			defaultColors = [];
			defaultColors.push(data[0]['marker']['color']);
		} else {
			defaultColors = data[0]['marker']['color'];
		}
	}
	var offset = "";
	var parrantId = "";
	var position = "";
	if (chartId != null && chartId != undefined) {
		var selector = $("#" + chartId).find('.modebar-btn').find($("a[data-title='Chart Types']"));
		var select = $(selector['prevObject'][7]);
		position = "left";
		parrantId = select;
	} else {
		parrantId = $("#imageid");
		position = "";
		offset = { left: 290, top: 60 }
	}
	$.ajax({
		type: "POST",
		url: "getcolorpalleteform",
		cache: false,
		dataType: 'json',
		async: false,
		data: {
			coloobjdata: JSON.stringify(data),
			chartid: chartId,
			defaultColors: JSON.stringify(defaultColors)
		},
		success: function(response) {
			if (response != null) {
				var colorpallateobj = response['colorpalateobj'];
				$("#dxpColorPopOver").remove();
				$("#dxpCreatePopOver").html("<div id='dxpColorPopOver'></div>");
				$("#dxpColorPopOver").html(colorpallateobj);
				//$("#dxpColorPopOver").jqxPopover('open');
				$("#dxpColorPopOver").jqxPopover({
					offset: offset,
					position: position,
					width: 262,
					height: 155,
					autoClose: true,
					title: "Color Palette",
					showCloseButton: true,
					selector: parrantId

				});

				// $('#dxpColorPopOver').jqxPopover({showArrow: true, arrowOffsetValue: 10});
				$('#dxpColorPopOver').addClass('chartPallettePopup');
				$("#dxpColorPopOver").jqxPopover('open');


			}
		},
		error: function(e) {
			console.log(e);
			sessionTimeout(e);
			stopLoader();
		}
	});

}


function saveGrpahColors(event, chartId) {
    var colorobj = [];
    var colorarr = [];
    var dashBoard = '';
    var colorsobj = event.currentTarget.children;
    if (colorsobj != null && !jQuery.isEmptyObject(colorsobj) && colorsobj.length == 2) {
        var array1 = colorsobj[0].children;
        var array2 = colorsobj[1].children;
        if (array1.length > 0 && array2.length > 0) {
            for (var i = 0; i < array1.length; i++) {
                colorobj.push(array1[i]);
                colorobj.push(array2[i]);
            }
        } else {
        }
    } else {
        colorobj = (colorsobj);
    }
    if (chartId == "null" || chartId == "undefined" || chartId == '') {
        dashBoard = document.getElementById('dropdownlistContentOptionDropdownData').innerHTML;
    } else {
        var data = ($('#' + chartId).children());
        var datasize = data[0].offsetParent.calcdata;
        var loopsize = datasize[0].length
        var chartdata = data[0].offsetParent.data;
        var charttype = chartdata[0].type;
    }
    var j = 0;
    for (var i = 0; i < colorobj.length; i++) {
        var color = colorobj[j].dataset['color'];
        colorarr.push(color);
        j++;
        if (colorobj.length == j) {
            j = 0;
        }
    }

    if (colorarr != null && colorarr != '') {
        var message = 'Do u want to Save?';
        var modalObj = {
            title: labelObject["Message"] != null ? labelObject["Message"] : "Message",
            body: "<div class='isPopupDefaultSaveClass'>" + message + "</div>",
        };
        var buttonArray = [
            {
                text: labelObject['Save'] != null ? labelObject['Save'] : 'Save',
                click: function () {
                    var colorobj = {};
                    colorobj['clrs'] = colorarr
                    $.ajax({
                        type: "POST",
                        url: "updatePalatteColor",
                        cache: false,
                        dataType: 'json',
                        async: false,
                        data: {
                            colorArr: JSON.stringify(colorobj),
                            chartId: chartId,
                            dashBoard: dashBoard,
                        },
                        success: function (response) {
                            if (response != null) {
                                updatecolorOnGraph(event, chartId);
                            }
                        },
                        error: function (e) {
                            updatecolorOnGraph(event, chartId);
                            console.log(e);
                            sessionTimeout(e);
                            stopLoader();
                        }
                    });
                },
                isCloseButton: true
            }
        ];
        modalObj['buttons'] = buttonArray;
        createModal("dataDxpSplitterValue", modalObj);
        $("#dataDxpSplitterValue").css("z-index", "99999", "!important");
    }
}


function updatecolorOnGraph(event, chartId, chartType) {
    var colorarr = [];
    var update = "";
    var colorobj = [];
    var colorsobj = event.currentTarget.children;
    if (colorsobj != null && !jQuery.isEmptyObject(colorsobj) && colorsobj.length == 2) {

        var array1 = colorsobj[0].children;
        var array2 = colorsobj[1].children;
        if (array1.length > 0 && array2.length > 0) {
            for (var i = 0; i < array1.length; i++) {
                colorobj.push(array1[i]);
                colorobj.push(array2[i]);
            }
        } else {
            colorobj = (colorsobj);
        }

    } else {
        colorobj = (colorsobj);
    }
    var colorarr;
    if (chartId != null && chartId != '' && chartId != 'null' && chartId != undefined) {
        var id = chartId;
        var data = ($('#' + id).children());
        var charttype = $('#' + id + '_chartType').val();
        colorarr = []

        if (eChartsArrList.indexOf(charttype) > -1) {
            var dom = document.getElementById(id);
            var myChart = echarts.init(dom);
            var existingOptions = myChart.getOption();
            if (chartType === 'ganttChart') {
	var ganttchartData = $("#" + chartId).attr("echartData");
	var options = $("#" + chartId).attr("echartOption");
			options= JSON.parse(options);
	chart = new google.visualization.Gantt(document.getElementById(chartId));
	var geochartDataObject = new google.visualization.DataTable(JSON.parse(ganttchartData));
   
    // Define an array of colors
    var colorarr = [];

    for (var i = 0; i < colorobj.length; i++) {
        colorarr.push(colorobj[i % colorobj.length].dataset['color']);
    }
    
   options.gantt.innerGridTrack.fill=colorarr[0];

    // Redraw the chart (assuming you already have chart data and options)
    chart.draw(geochartDataObject, options);
}

            if (['StackedAreaChart', 'GradStackAreaChart', 'BasicAreaChart', 'AreaPiecesChart'].includes(charttype)) {

                for (var i = 0; i < existingOptions.series.length; i++) {
                    colorarr.push(colorobj[i % colorobj.length].dataset['color']);
                    existingOptions.series[i].areaStyle = {
                        color: colorobj[i % colorobj.length].dataset['color']
                    };
                }

                myChart.setOption(existingOptions);
                return;
            }
            if (['BarAndLine'].includes(charttype)) {

                for (var i = 0; i < existingOptions.series.length; i++) {
                    colorarr.push(colorobj[i % colorobj.length].dataset['color']);
                    existingOptions.series[i].itemStyle = {
                        color: colorobj[i % colorobj.length].dataset['color']
                    };
                }
                myChart.setOption(existingOptions);
                return;
            }
            if (['sankey', 'sunburst'].includes(charttype)) {

                for (var i = 0; i < existingOptions.series.length; i++) {
                    for (var j = 0; j < existingOptions.series[i].levels.length; j++) {
                        colorarr.push(colorobj[j % colorobj.length].dataset['color']);
                        existingOptions.series[i].levels[j].itemStyle = {
                            color: colorobj[j % colorobj.length].dataset['color']
                        };
                        existingOptions.series[i].levels[j].lineStyle = {
                            color: colorobj[j % colorobj.length].dataset['color'],
                            opacity: 0.8
                        };
                    }
                }
                existingOptions.color = colorarr;
                myChart.setOption(existingOptions);
                return;
            }
            if (['heatMap'].includes(charttype)) {

                var colors = colorobj[0 % colorobj.length].dataset['color'];
                var baseHexColor = colors;
                var r = parseInt(baseHexColor.slice(1, 3), 16);
                var g = parseInt(baseHexColor.slice(3, 5), 16);
                var b = parseInt(baseHexColor.slice(5, 7), 16);
                var gradientColors = [`rgba(${r}, ${g}, ${b}, 0)`, // Start color 
                `rgba(${r}, ${g}, ${b}, 1)`// End color 
                ];
                existingOptions.visualMap[0].inRange = {
                    color: gradientColors

                };
                existingOptions.visualMap[0].controller.inRange = {
                    color: gradientColors
                };
                existingOptions.visualMap[0].target.inRange = {
                    color: gradientColors
                };
                myChart.setOption(existingOptions);
                return;
            }
            if (['treemap'].includes(charttype)) {

                var colors = colorobj[0 % colorobj.length].dataset['color'];
                for (var i = 0; i < existingOptions.series.length; i++) {
                    for (var j = 0; j < existingOptions.series[i].data.length; j++) {
                        existingOptions.series[i].data[j].itemStyle = {
                            color: colorobj[j % colorobj.length].dataset['color'],
                        };

                    }

                }
                myChart.setOption(existingOptions);
                return;
            }
            if (['boxplot'].includes(charttype)) {

                var colors = colorobj[0 % colorobj.length].dataset['color'];
                for (var i = 0; i < existingOptions.series.length; i++) {
                    existingOptions.series[i].itemStyle = {
                        color: colors,
                    };
                }
                myChart.setOption(existingOptions);
                return;
            }

        } else {
            var data = ($('#' + chartId).children());
            var datasize = data[0].offsetParent.calcdata;
            var loopsize = datasize[0].length
            var chartdata = data[0].offsetParent.data;
            var charttype = chartdata[0].type;
            var j = 0;
            for (var i = 0; i < loopsize; i++) {
                var color = colorobj[j].dataset['color'];
                colorarr.push(color);
                j++;
                if (colorobj.length == j) {
                    j = 0;
                }
            }
            var n = colorarr.length;
            var chartlabels = chartdata[0]['labels'];
            if (charttype != null && charttype != '' && charttype != undefined && (charttype == 'donut' || charttype == 'pie')) {
                var html = "<div class='pieLegends' id='" + chartId + "_legends' >";
                $.each(chartlabels, function(i) {
                    html += "<div class='pieLegendLabelItem' lable-index='" + i + "' legend-color-code='" + colorarr[i % n] + "' ><div style='height:12px;width:12px;background-color:" + colorarr[i % n] + ";' ></div><span>" + this + "</span></div>";
                })
                html += "</div>";
                $("#" + chartId + "_legends").remove();
                //$("#" + chartId).append(html);
                $(html).insertAfter($("#" + chartId));
            }
            if (charttype != null && charttype != undefined && charttype == 'pie') {
                update = {
                    'marker': {
                        'colors': colorarr
                    }
                };
            } else if (charttype != null && charttype != undefined && charttype == 'lines') {
                update = {
                    'line': {
                        'color': colorarr[0],
                        width: 3
                    }
                };
            } else if (charttype != null && charttype != undefined && charttype == 'indicator') {
                update = {
                    'gauge': {
                        'bar': {
                            'color': colorarr[0]
                        }
                    }
                };
            } else if (charttype != null && charttype != undefined && charttype == 'waterfall') {
                update = {
                    'increasing': {
                        'marker': {
                            'color': colorarr[0]
                        }
                    }
                };
            } else if (charttype != null && charttype != undefined && charttype == 'scatterpolar') {
                update = {
                    'fillcolor': colorarr[0],
                    'marker': {
                        'color': colorarr
                    },
                };
            } else {
                update = {
                    'marker': {
                        'color': colorarr
                    }
                };
            }
            Plotly.restyle(id, update);
        }
    } else {
        $(".chartMain").each(function() {
            var id = $(this).attr('id');
            var data = ($('#' + id).children());
            var charttype = $('#' + id + '_chartType').val();
            colorarr = []

            if (eChartsArrList.indexOf(charttype) > -1) {
                var dom = document.getElementById(id);
                var myChart = echarts.init(dom);
                var existingOptions = myChart.getOption();
                if (['StackedAreaChart', 'GradStackAreaChart', 'BasicAreaChart', 'AreaPiecesChart'].includes(charttype)) {

                    for (var i = 0; i < existingOptions.series.length; i++) {
                        colorarr.push(colorobj[i % colorobj.length].dataset['color']);
                        existingOptions.series[i].areaStyle = {
                            color: colorobj[i % colorobj.length].dataset['color']
                        };
                    }

                    myChart.setOption(existingOptions);
                    return;
                }
                if (['BarAndLine'].includes(charttype)) {

                    for (var i = 0; i < existingOptions.series.length; i++) {
                        colorarr.push(colorobj[i % colorobj.length].dataset['color']);
                        existingOptions.series[i].itemStyle = {
                            color: colorobj[i % colorobj.length].dataset['color']
                        };
                    }
                    myChart.setOption(existingOptions);
                    return;
                }
                if (['sankey', 'sunburst'].includes(charttype)) {

                    for (var i = 0; i < existingOptions.series.length; i++) {
                        for (var j = 0; j < existingOptions.series[i].levels.length; j++) {
                            colorarr.push(colorobj[j % colorobj.length].dataset['color']);
                            existingOptions.series[i].levels[j].itemStyle = {
                                color: colorobj[j % colorobj.length].dataset['color']
                            };
                            existingOptions.series[i].levels[j].lineStyle = {
                                color: colorobj[j % colorobj.length].dataset['color'],
                                opacity: 0.8
                            };
                        }
                    }
                    existingOptions.color = colorarr;
                    myChart.setOption(existingOptions);
                    return;
                }
                if (['heatMap'].includes(charttype)) {

                    var colors = colorobj[0 % colorobj.length].dataset['color'];
                    var baseHexColor = colors;
                    var r = parseInt(baseHexColor.slice(1, 3), 16);
                    var g = parseInt(baseHexColor.slice(3, 5), 16);
                    var b = parseInt(baseHexColor.slice(5, 7), 16);
                    var gradientColors = [`rgba(${r}, ${g}, ${b}, 0)`, // Start color 
                    `rgba(${r}, ${g}, ${b}, 1)`// End color 
                    ];
                    existingOptions.visualMap[0].inRange = {
                        color: gradientColors

                    };
                    existingOptions.visualMap[0].controller.inRange = {
                        color: gradientColors
                    };
                    existingOptions.visualMap[0].target.inRange = {
                        color: gradientColors
                    };
                    myChart.setOption(existingOptions);
                    return;
                }
                if (['treemap'].includes(charttype)) {

                    var colors = colorobj[0 % colorobj.length].dataset['color'];
                    for (var i = 0; i < existingOptions.series.length; i++) {
                        for (var j = 0; j < existingOptions.series[i].data.length; j++) {
                            existingOptions.series[i].data[j].itemStyle = {
                                color: colorobj[j % colorobj.length].dataset['color'],
                            };

                        }

                    }
                    myChart.setOption(existingOptions);
                    return;
                }
                if (['boxplot'].includes(charttype)) {

                    var colors = colorobj[0 % colorobj.length].dataset['color'];
                    for (var i = 0; i < existingOptions.series.length; i++) {
                        existingOptions.series[i].itemStyle = {
                            color: colors,
                        };
                    }
                    myChart.setOption(existingOptions);
                    return;
                }

            } else {
                if (data[0] != null && data[0] != undefined && data[0] != " ") {
                    var datasize = data[0].offsetParent.calcdata;
                    var loopsize = datasize[0].length
                    var chartdata = data[0].offsetParent.data;
                    charttype = chartdata[0].type;
                    var j = 0;
                    for (var i = 0; i < loopsize; i++) {
                        var color = colorobj[j].dataset['color'];
                        colorarr.push(color);
                        j++;
                        if (colorobj.length == j) {
                            j = 0;
                        }
                    }
                    var n = colorarr.length;
                    var chartlabels = chartdata[0]['labels'];
                    if (charttype != null && charttype != '' && charttype != undefined && (charttype == 'donut' || charttype == 'pie')) {
                        var html = "<div class='pieLegends' id='" + id + "_legends' >";
                        $.each(chartlabels, function(i) {
                            html += "<div class='pieLegendLabelItem' lable-index='" + i + "' legend-color-code='" + colorarr[i % n] + "' ><div style='height:12px;width:12px;background-color:" + colorarr[i % n] + ";' ></div><span>" + this + "</span></div>";
                        })
                        html += "</div>";
                        $("#" + id + "_legends").remove();
                        //$("#" + chartId).append(html);
                        $(html).insertAfter($("#" + id));
                    }
                    if ($('#' + id).children().length > 0) {
                        if (charttype != null && charttype != undefined && charttype == 'pie') {
                            update = {
                                'marker': {
                                    'colors': colorarr
                                }
                            };
                        } else if (charttype != null && charttype != undefined && charttype == 'lines') {
                            update = {
                                'line': {
                                    'color': colorarr[0],
                                    width: 3
                                }
                            };
                        } else if (charttype != null && charttype != undefined && charttype == 'indicator') {
                            update = {
                                'gauge': {
                                    'bar': {
                                        'color': colorarr[0]
                                    }
                                }
                            };
                        } else if (charttype != null && charttype != undefined && charttype == 'waterfall') {
                            update = {
                                'increasing': {
                                    'marker': {
                                        'color': colorarr[0]
                                    }
                                }
                            };
                        } else if (charttype != null && charttype != undefined && charttype == 'scatterpolar') {
                            update = {
                                'fillcolor': colorarr[0],
                                'marker': {
                                    'color': colorarr
                                },
                            };
                        } else {
                            update = {
                                'marker': {
                                    'color': colorarr
                                }
                            };
                        }
                        Plotly.restyle(id, update);
                    }

                }
            }
        });
    }
}


/*function updatecolorOnGraph(event, chartId) {
    var colorarr = [];
    var update = "";
    var colorobj = [];
    var colorsobj = event.currentTarget.children;
    if (colorsobj != null && !jQuery.isEmptyObject(colorsobj) && colorsobj.length == 2) {

        var array1 = colorsobj[0].children;
        var array2 = colorsobj[1].children;
        if (array1.length > 0 && array2.length > 0) {
            for (var i = 0; i < array1.length; i++) {
                colorobj.push(array1[i]);
                colorobj.push(array2[i]);
            }
        } else {
            colorobj = (colorsobj);
        }

    } else {
        colorobj = (colorsobj);
    }
    if (chartId != null && chartId != '' && chartId != 'null' && chartId != undefined) {
        var data = ($('#' + chartId).children());
        var datasize = data[0].offsetParent.calcdata;
        var loopsize = datasize[0].length
        var chartdata = data[0].offsetParent.data;
        var charttype = chartdata[0].type;
        var j = 0;
        for (var i = 0; i < loopsize; i++) {
            var color = colorobj[j].dataset['color'];
            colorarr.push(color);
            j++;
            if (colorobj.length == j) {
                j = 0;
            }
        }
        var n = colorarr.length;
        var chartlabels = chartdata[0]['labels'];
        if (charttype != null && charttype != '' && charttype != undefined && (charttype == 'donut' || charttype == 'pie')) {
            var html = "<div class='pieLegends' id='" + chartId + "_legends' >";
            $.each(chartlabels, function (i) {
                html += "<div class='pieLegendLabelItem' lable-index='" + i + "' legend-color-code='" + colorarr[i % n] + "' ><div style='height:12px;width:12px;background-color:" + colorarr[i % n] + ";' ></div><span>" + this + "</span></div>";
            })
            html += "</div>";
            $("#" + chartId + "_legends").remove();
            //$("#" + chartId).append(html);
            $(html).insertAfter($("#" + chartId));
        }
        if (charttype != null && charttype != undefined && charttype == 'pie') {
            update = {'marker': {'colors': colorarr}};
        } else if (charttype != null && charttype != undefined && charttype == 'lines') {
            update = {'line': {'color': colorarr[0], width: 3}};
        } else {
            update = {'marker': {'color': colorarr}};
        }
        Plotly.restyle(chartId, update);
    } else {
        $(".chartMain").each(function () {
            var id = $(this).attr('id');
            var data = ($('#' + id).children());
            if(data[0]!= null && data[0]!=undefined && data[0]!=" "){
            var datasize = data[0].offsetParent.calcdata;
            var loopsize = datasize[0].length
            var chartdata = data[0].offsetParent.data;
            var charttype = chartdata[0].type;
            var j = 0;
            for (var i = 0; i < loopsize; i++) {
                var color = colorobj[j].dataset['color'];
                colorarr.push(color);
                j++;
                if (colorobj.length == j) {
                    j = 0;
                }
            }
            var n = colorarr.length;
            var chartlabels = chartdata[0]['labels'];
            if (charttype != null && charttype != '' && charttype != undefined && (charttype == 'donut' || charttype == 'pie')) {
                var html = "<div class='pieLegends' id='" + id + "_legends' >";
                $.each(chartlabels, function (i) {
                    html += "<div class='pieLegendLabelItem' lable-index='" + i + "' legend-color-code='" + colorarr[i % n] + "' ><div style='height:12px;width:12px;background-color:" + colorarr[i % n] + ";' ></div><span>" + this + "</span></div>";
                })
                html += "</div>";
                $("#" + id + "_legends").remove();
                //$("#" + chartId).append(html);
                $(html).insertAfter($("#" + id));
            }
            if ($('#' + id).children().length > 0) {
                if (charttype != null && charttype != undefined && charttype == 'pie') {
                    update = {'marker': {'colors': colorarr}};
                } else if (charttype != null && charttype != undefined && charttype == 'lines') {
                    update = {'line': {'color': colorarr[0], width: 3}};
                } else {
                    update = {'marker': {'color': colorarr}};
                }
                Plotly.restyle(id, update);
            }
            }
        });
    }
}*/

function getBarAndLineChart(chartId, response, count, chartType) {
	chartType = 'BarAndLine';
	$("#visionVisualizeChartId" + count).remove();
	var BarAndLineChartId = "visionVisualizeChart" + count;
	var BarAndLineChartHomeId = "visionVisualizeChartHome" + count;
	$("#" + BarAndLineChartId).append("<div id='visionVisualizeChartId" + count + "' type='" + chartType + "' count='" + count + "' class='visionVisualChartBoxClass visionVisualChartBoxSelected'></div>")
	$("#" + chartId).css("width", "880px", "!important");
	$("#" + chartId).css("height", "380px", "!important");
	$("#" + BarAndLineChartId).css("width", "900px", "!important");
	$("#" + BarAndLineChartId).css("height", "400px", "!important");
	$("#" + BarAndLineChartHomeId).css("width", "880px", "!important");
	$("#" + BarAndLineChartHomeId).css("height", "380px", "!important");
	$("#" + BarAndLineChartHomeId).addClass("visionVisualChartBoxClass");
	var dom = document.getElementById(chartId);
	var myChart = echarts.init(dom, null, {
		renderer: 'canvas',
		useDirtyRect: false
	});
	if (response != null && !jQuery.isEmptyObject(response)) {
		var legend = response['legend'];
		var xAxis = response['xAxis'];
		var yAxis = response['yAxis'];
		var series = response['series'];
		var color = response['color'];
		var option = {
			color: color,
			legend: legend,
			xAxis: xAxis,
			yAxis: yAxis,
			series: series,
			toolbox: {
				feature: {
					dataZoom: {
						yAxisIndex: 'none'
					},
					restore: {},
					saveAsImage: {},
					myDelete: {
						show: true,
						title: 'Delete',
						icon: 'image://images/delete.png',
						onclick: function() {
							deleteModalChart(chartId);
						}
					}
				}
			},
		};

		if (option && typeof option === 'object') {
			myChart.setOption(option);
		}
	}

}

function echartToolBar(chartType) {
	var feature = {
		dataView: { show: true, readOnly: false },
		restore: { show: true },
		saveAsImage: { show: true },
		myTool1: {
			show: true,
			title: 'custom method',
			icon: 'path://M432.45,595.444c0,2.177-4.661,6.82-11.305,6.82c-6.475,0-11.306-4.567-11.306-6.82s4.852-6.812,11.306-6.812C427.841,588.632,432.452,593.191,432.45,595.444L432.45,595.444z M421.155,589.876c-3.009,0-5.448,2.495-5.448,5.572s2.439,5.572,5.448,5.572c3.01,0,5.449-2.495,5.449-5.572C426.604,592.371,424.165,589.876,421.155,589.876L421.155,589.876z M421.146,591.891c-1.916,0-3.47,1.589-3.47,3.549c0,1.959,1.554,3.548,3.47,3.548s3.469-1.589,3.469-3.548C424.614,593.479,423.062,591.891,421.146,591.891L421.146,591.891zM421.146,591.891',
			onclick: () => this.alertFun()
		},

	};

	return feature;
}

function changegraph(chartId, chartType, layout, data, createcount) {

	var parrantId = $("#" + chartId).parent().parent().attr('id');
	var result = "<div id='charttypeId' class ='charttypeId'>"
		+ "<div id='visionVisualizeBasicTabs' class='visionVisualizeChartsTabsClass'>"
		+ "<img onclick=\"getDashboard('pie','" + chartId + "','" + chartType + "','" + createcount + "')\" src='images/Pie.svg' class='visualDarkMode' title='Pie chart'>"
		+ "<img onclick=\"getDashboard('bar','" + chartId + "','" + chartType + "','" + createcount + "')\" src='images/Bar.svg' class='visualDarkMode' title='Bar chart'>"
		+ "<img onclick=\"getDashboard('donut','" + chartId + "','" + chartType + "','" + createcount + "')\"  src='images/Donut.svg' class='visualDarkMode' title='Donut chart'>"
		+ "<img onclick=\"getDashboard('column','" + chartId + "','" + chartType + "','" + createcount + "')\"  src='images/Column.svg' class='visualDarkMode' title='Column chart'>"
		+ "<img onclick=\"getDashboard('lines','" + chartId + "','" + chartType + "','" + createcount + "')\"  src='images/Line.svg' class='visualDarkMode' title='Line chart'>"
		+ "<img onclick=\"getDashboard('scatter','" + chartId + "','" + chartType + "','" + createcount + "')\"  src='images/Scatter.svg' class='visualDarkMode' title='Scatter chart'>"
		+ "<img onclick=\"getDashboard('scatterpolar','" + chartId + "','" + chartType + "','" + createcount + "')\"  src='images/Redar-Chart.svg' class='visualDarkMode' title='Radar chart'>"
		+ "<img onclick=\"getDashboard( 'funnel','" + chartId + "','" + chartType + "','" + createcount + "')\"  src='images/Funnel.svg' class='visualDarkMode' title='Funnel chart'>"
		+ "</div>";
	result += "</div>";
	$("#dxpColorPopOver").remove();
	$("#dxpCreatePopOver").html("<div id='dxpColorPopOver'></div>");
	$("#dxpColorPopOver").html(result);
	$("#dxpColorPopOver").jqxPopover('open');
	var selector = $("#" + chartId).find('.modebar-btn').find($("a[data-title='Chart Types']"));
	var select = $(selector['prevObject'][6]);
	$("#dxpColorPopOver").jqxPopover({
		offset: { left: 0, top: 0 },
		position: 'left',
		width: 150,
		height: 100,
		title: "graph Types",
		showCloseButton: true,
		selector: select
	});
	$("#dxpColorPopOver").jqxPopover('open');
	$("#dxpColorPopOver").addClass('homepageChartTypePopup');
	//$('#dxpColorPopOver').jqxPopover({showArrow: true, arrowOffsetValue: 10});

}
function getDashboard(newcharttype, chartid, currenttype, createCount) {
	console.log();
	$("#dxpColorPopOver").hide();
	$("#dialog").hide();
	var newchartType = newcharttype.toUpperCase();
	var curnet = currenttype.toUpperCase();
	$.ajax({
		type: "POST",
		url: "getchartconfigobjdata",
		cache: false,
		dataType: 'json',
		async: false,
		data: {
			id: chartid,
			type: currenttype
		},
		success: function(response) {
			if (response != null) {
				var dataarr = response['dataarr'];
				if (dataarr != null && dataarr != '' && dataarr != undefined) {
					var count = 0;
					$("#visionCardView").empty();
					var chartpoprobj = {};
					var configobj = {};
					for (var i = 0; i < dataarr.length; i++) {
						var XAxix = dataarr[i]['xAxix'];
						var yAxix = dataarr[i]['yAxix'];
						var type = dataarr[i]['type'];
						var table = dataarr[i]['table'];
						var id = dataarr[i]['chartid'];
						var aggColumnName = dataarr[i]['aggColumnName'];
						var filterCondition = dataarr[i]['filterColumns'];

						var chartPropObj = dataarr[i]['chartPropObj'];
						var chartConfigObj = dataarr[i]['chartConfigObj'];
						var labelLegend = dataarr[i]['labelLegend'];
						var colorsObj = dataarr[i]['colorsObj'];
						var FilterColumn = dataarr[i]['FilterColumn'];
						if (chartPropObj != null && chartPropObj != undefined) {
							var propobj = JSON.parse(chartPropObj);
							Object.keys(propobj).forEach(function(key) {
								var value = propobj[key];
								var key = key.replace(type.toUpperCase(), newchartType);
								chartpoprobj[key] = value;
							});
							var chartConfigobj = JSON.parse(chartConfigObj);
							Object.keys(chartConfigobj).forEach(function(key) {
								var value = chartConfigobj[key];
								var key = key.replace(type.toUpperCase(), newchartType);
								configobj[key] = value;
							});

							if (newcharttype != null && newcharttype == 'pie') {
								configobj[newcharttype.toUpperCase() + "LABELPOSITION"] = "inside";
								chartpoprobj[newcharttype.toUpperCase() + "LABELPOSITION"] = "data";
							}
							if (chartpoprobj != null && !jQuery.isEmptyObject(chartpoprobj)) {
								chartPropObj = JSON.stringify(chartpoprobj);
								chartConfigObj = JSON.stringify(configobj);
							}
							var chartFilterParams=filterCondition;
							var homepageFilterParamsObj = getHomepageFilterParamsArr(chartFilterParams, id);
								var mainFilterConditionsObj = homepageFilterParamsObj['mainFilterConditions'];
								if (!isNullOrUndefined(mainFilterConditionsObj) && !jQuery.isEmptyObject(mainFilterConditionsObj)) {
									filterColumns=JSON.stringify(mainFilterConditionsObj);
								}
							var message = 'Do u want to save';
							var modalObj = {
								title: labelObject["Message"] != null ? labelObject["Message"] : "Message",
								body: "<div class='isPopupDefaultSaveClass'>" + message + "</div>",
							};
							var buttonArray = [
								{
									text: labelObject['Save'] != null ? labelObject['Save'] : 'Save',
									click: function() {
										//                                        $(".isPopupDefaultSaveClass").val(""); 
										updategraphtypes(chartConfigObj, chartPropObj, chartid, newcharttype);
										getVisualizeChart(chartid, newcharttype, XAxix, yAxix, table, aggColumnName, filterCondition, chartConfigObj, chartPropObj, count, labelLegend, colorsObj);
										count++;

									},
									isCloseButton: true
								},
								{
									text: labelObject['Cancel'] != null ? labelObject['Cancel'] : 'Cancel',
									click: function() {
										
									},
									isCloseButton: true
								}
								/*{
									text: labelObject['Apply'] != null ? labelObject['Apply'] : 'Apply',
									click: function() {
										getApplyVisualizeChart(chartid, newcharttype, XAxix, yAxix, table, aggColumnName, filterCondition, chartConfigObj, chartPropObj, createCount, labelLegend, colorsObj);
										count++;
									},
									isCloseButton: true
								}*/
							];
							modalObj['buttons'] = buttonArray;
							createModal("dataDxpSplitterValue", modalObj);

						}

					}

				}

			}
		},
		error: function(e) {
			console.log(e);
			sessionTimeout(e);
			stopLoader();
		}
	});

}

function getEchartDashBoard(newchartType, chartId, currenttype, createCount) {
	var chartIds = [];
	chartIds.push(chartId);
	var checkedVal = $("#" + chartId + "_radioButtons").find(":radio:checked").val();
	$.ajax({
		url: 'getChartData',
		type: "POST",
		dataType: 'json',
		traditional: true,
		cache: false,
		async: true,
		data: {
			chartIds: JSON.stringify(chartIds)
		},
		success: function(response) {
			stopLoader();

			if (response != null && !jQuery.isEmptyObject(response)) {
				var dataarr = response['dataarr'];
				if (dataarr != null && dataarr != '' && dataarr != undefined) {
					var count = 0;
					for (var i = 0; i < dataarr.length; i++) {
						var chartpoprobj = {};
						var configobj = {};
						var XAxix = dataarr[i]['xAxix'];
						if (XAxix != null && XAxix != '' && XAxix != undefined && checkedVal != null && checkedVal != '' && checkedVal != undefined) {
							XAxix = JSON.parse(XAxix);
							if (XAxix != null && !jQuery.isEmptyObject(XAxix)) {
								var xAxisObj = {};
								xAxisObj['tableName'] = checkedVal.split(".")[0];
								xAxisObj['columnName'] = checkedVal;
								if (XAxix.length == 2) {
									XAxix.splice(1, 1);
								}
								XAxix.push(xAxisObj);
								XAxix = JSON.stringify(XAxix);
							}
						}
						var yAxix = dataarr[i]['yAxix'];
						var type = dataarr[i]['type'];
						var table = dataarr[i]['table'];
						var id = dataarr[i]['chartid'];
						var Lebel = dataarr[i]['Lebel'];
						var aggColumnName = dataarr[i]['aggColumnName'];
						var filterCondition = dataarr[i]['filterCondition'];
						var chartPropObj = dataarr[i]['chartPropObj'];
						var chartConfigObj = dataarr[i]['chartConfigObj'];
						var labelLegend = dataarr[i]['labelLegend'];
						var colorsObj = dataarr[i]['colorsObj'];
						var chartConfigToggleStatus = dataarr[i]['chartConfigToggleStatus'];
						var homeFilterColumn = dataarr[i]['homeFilterColumn'];
						var fetchQuery = dataarr[i]['fetchQuery'];
						var radioButtons = dataarr[i]['radioButtons'];
						var currencyConversionStrObject = dataarr[i]['currencyConversionStrObject'];
						var filterConditions = $("#" + chartId + "_filter").val();
						if (filterCondition != null && filterCondition != '' && filterCondition != undefined) {
							filterCondition = JSON.parse(filterCondition);
							if (filterCondition != null && !jQuery.isEmptyObject(filterCondition)) {
								if (filterConditions != null && filterConditions != '' && filterConditions != undefined) {
									filterConditions = JSON.parse(filterConditions);
									for (var key in filterCondition) {
										var paramObj = filterCondition[key];
										filterConditions.push(paramObj);
									}
									if (filterConditions != null && !jQuery.isEmptyObject(filterConditions)) {
										filterConditions = JSON.stringify(filterConditions);
									}
								} else {
									filterConditions = JSON.stringify(filterCondition);
								}
							}
						} else if (filterConditions != null && filterConditions != '' && filterConditions != undefined) {
							filterConditions = JSON.parse(filterConditions);
							if (filterConditions != null && !jQuery.isEmptyObject(filterConditions)) {
								if (filterCondition != null && filterCondition != '' && filterCondition != undefined) {
									filterCondition = JSON.parse(filterCondition);
									for (var key in filterCondition) {
										var paramObj = filterCondition[key];
										filterConditions.push(paramObj);
									}
									if (filterConditions != null && !jQuery.isEmptyObject(filterConditions)) {
										filterConditions = JSON.stringify(filterConditions);
									}
								}
							} else {
								filterConditions = JSON.stringify(filterConditions);
							}

						}
						if (chartPropObj != null && chartPropObj != '' && chartPropObj != undefined) {
							chartPropObj = JSON.parse(chartPropObj);
							Object.keys(chartPropObj).forEach(function(key) {
								var value = chartPropObj[key];
								var key = key.replace(type.toUpperCase(), newchartType.toUpperCase());
								chartpoprobj[key] = value;
							});
						}
						if (chartConfigObj != null && chartConfigObj != '' && chartConfigObj != undefined) {
							chartConfigObj = JSON.parse(chartConfigObj);
							Object.keys(chartConfigObj).forEach(function(key) {
								var value = chartConfigObj[key];
								var key = key.replace(type.toUpperCase(), newchartType.toUpperCase());
								configobj[key] = value;
							});
						}

						if (chartpoprobj != null && !jQuery.isEmptyObject(chartpoprobj)) {
							chartPropObj = JSON.stringify(chartpoprobj);
						}
						if (chartConfigObj != null && !jQuery.isEmptyObject(chartConfigObj)) {
							chartConfigObj = JSON.stringify(configobj);
						}
						var message = 'Do u want to save';
						var modalObj = {
							title: labelObject["Message"] != null ? labelObject["Message"] : "Message",
							body: "<div class='isPopupDefaultSaveClass'>" + message + "</div>",
						};
						var buttonArray = [
							{
								text: labelObject['Save'] != null ? labelObject['Save'] : 'Save',
								click: function() {
									//                                        $(".isPopupDefaultSaveClass").val(""); 
									if (yAxix != null && yAxix != '' && yAxix != 'undefined' && type != 'Card') {
										updategraphtypes(chartConfigObj, chartPropObj, chartId, newchartType);
										getVisualizeChart(chartId, newchartType, XAxix, yAxix, table, aggColumnName, filterConditions, chartPropObj, chartConfigObj, count, labelLegend, colorsObj, chartConfigToggleStatus, "", "", fetchQuery, "", radioButtons, currencyConversionStrObject);
										count++
									}


								},
								isCloseButton: true
							},
							{
								text: labelObject['Cancel'] != null ? labelObject['Cancel'] : 'Cancel',
								click: function() {
								},
								isCloseButton: true
							}
							/*{
								text: labelObject['Apply'] != null ? labelObject['Apply'] : 'Apply',
								click: function() {
									if (yAxix != null && yAxix != '' && yAxix != 'undefined' && type != 'Card') {
										getApplyVisualizeChart(chartId, newchartType, XAxix, yAxix, table, aggColumnName, filterConditions, chartPropObj, chartConfigObj, count, labelLegend, colorsObj, chartConfigToggleStatus, "", "", fetchQuery, "", radioButtons, currencyConversionStrObject);
										count++
									}

								},
								isCloseButton: true
							}*/
						];
						modalObj['buttons'] = buttonArray;
						createModal("dataDxpSplitterValue", modalObj);


					}
				}

			}
		}, error: function(e) {
			sessionTimeout(e);
		}
	});
}
function updategraphtypes(chartConfigObj, chartPropObj, chartid, charttype) {
	$.ajax({
		type: "POST",
		url: "updateGraphProperties",
		cache: false,
		dataType: 'json',
		async: false,
		data: {
			chartConfigObjchartConfigObj: chartConfigObj,
			chartPropObj: chartPropObj,
			chartid: chartid,
			charttype: charttype
		},
		success: function(response) {
			if (response != null) {
				var message = response['result'];
				var modalObj = {
					body: "<div class='isPopupDefaultSaveClass'>" + message + "</div>",
				};
				var buttonArray = [
					{
						text: 'Ok',
						isCloseButton: true
					}
				];
				modalObj['buttons'] = buttonArray;
				createModal("dataDxpSplitterValue", modalObj);
				$("#dataDxpSplitterValue").addClass('changeGraphPopup');
			}
		},
		error: function(e) {
			console.log(e);
			sessionTimeout(e);
			stopLoader();
		}
	});
}

function getEChartTypes(chartId, chartType, layout, data, createcount) {

	var parrantId = $("#" + chartId).parent().parent().attr('id');
	var result = "<div id='charttypeId' class ='charttypeId'>"
		+ "<div id='visionVisualizeBasicTabs' class='visionVisualizeChartsTabsClass'>"
		+ "<img onclick=\"getEchartDashBoard('sunburst','" + chartId + "','" + chartType + "','" + createcount + "')\" src='images/Sunburst.svg' class='visualDarkMode' title='SunBurst chart'>"
		+ "<img onclick=\"getEchartDashBoard('treemap','" + chartId + "','" + chartType + "','" + createcount + "')\" src='images/Tree_Chart.svg' class='visualDarkMode' title='TreeMap chart'>"
		+ "</div>";
	result += "</div>";
	$("#dxpColorPopOver").remove();
	$("#dxpCreatePopOver").html("<div id='dxpColorPopOver'></div>");
	$("#dxpColorPopOver").html(result);
	//$("#dxpColorPopOver").jqxPopover('open');
	$("#dxpColorPopOver").jqxPopover({
		offset: { left: 0, top: 0 },
		position: 'right',
		width: 150,
		height: 150,
		// autoClose: true,
		title: "graph Types",
		showCloseButton: true,
		selector: $("#" + chartId + "_echartTypes"),
		position: 'left'
	});
	$("#dxpColorPopOver").jqxPopover('show');
	// $('#dxpColorPopOver').jqxPopover({showArrow: true, arrowOffsetValue: 10});


}


function deleteColumn(checkBoxDataArr, tablename, exiFlag) {
    var selectedRowsData = [];
    var gridId = "";
    if (exiFlag == "Y") {
        gridId = "divGrid-" + tablename;
    } else {
        gridId = "visualizeAreaGirdData1";
    }
    var columnDefinitions = $('#' + gridId).jqxGrid('getInstance').columns.records;

    // Iterate over the column definitions and extract the names, removing null and empty string values
    var columnNames = [];
    for (var i = 1; i < columnDefinitions.length; i++) {
        var columnName = columnDefinitions[i].datafield;
        if (columnName !== null && columnName.trim() !== '') {
            columnNames.push(columnName);
        }
    }
    checkBoxDataArr = columnNames;
    var indexes = $("#" + gridId).jqxGrid("selectedrowindexes");
    for (var i = 0; i < indexes.length; i++) {
        var data = $("#" + gridId).jqxGrid("getrowdata", indexes[i]);
        if (data != null && data != "" && data != undefined) {
            selectedRowsData.push(data);
        }
    }
    if (indexes.length < 1) {
        $("#visionVisualizationDataChartcount").hide();
        //   $(".VisionImageVisualizationTableClass").css("display","none");
        $("#dialog").html("Do you want to delete?");
        $("#dialog").dialog({
            modal: true,
            title:
                    labelObject["Delete"] != null ? labelObject["Delete"] : "Delete",
            height: "auto",
            minHeight: "auto",
            minWidth: 350,
            maxWidth: "auto",
            fluid: true,
            buttons: [
                {
                    text: labelObject["Columns"] != null ? labelObject["Columns"] : "Columns",
                    click: function () {
                        closeDialogBox("#dialog");
                        $("#dialog").append(
                                "<div id = 'tablecolumnId' class = 'tablecolumnClass'></div>"
                                );
                        $("#tablecolumnId").jqxListBox({
                            filterable: true,
                            checkboxes: true,
                            source: checkBoxDataArr,
                            theme: "energyblue",
                            displayMember: "text",
                            valueMember: "value",
                            width: "310px",
                        });
                        $("#dialog").dialog({
                            modal: true,
                            title:
                                    labelObject["Select Column Name from Below List"] != null
                                    ? labelObject["Select Column Name from Below List"]
                                    : "Select Column Name from Below List",
                            height: "auto",
                            minHeight: "auto",
                            minWidth: 350,
                            maxWidth: "auto",
                            fluid: true,
                            buttons: [
                                {
                                    text: labelObject["OK"] != null ? labelObject["OK"] : "OK",
                                    click: function () {
                                        var checkValues =
                                                $("#tablecolumnId").jqxListBox("getCheckedItems");
                                        var values = [];
                                        $.each(checkValues, function (index) {
                                            values.push(this.value);
                                        });
                                        if (values != null && !jQuery.isEmptyObject(values)) {
                                            values = values.toString();
                                        }
                                        $(this).html("");
                                        $(this).dialog("close");
                                        $(this).dialog("destroy");
                                        $.ajax({
                                            type: "post",
                                            traditional: true,
                                            dataType: "json",
                                            cache: false,
                                            url: "deleteTableColumn",
                                            data: {
                                                tableName: tablename,
                                                columnName: values,
                                            },
                                            success: function (response) {
                                                if (response != null) {
                                                    var message = response["Message"];
                                                    $("#dialog").html(message);
                                                    $("#dialog").dialog({
                                                        title:
                                                                labelObject["Message"] != null
                                                                ? labelObject["Message"]
                                                                : "Message",
                                                        modal: true,
                                                        width: 300,
                                                        height: 135,
                                                        fluid: true,
                                                        buttons: [
                                                            {
                                                                text:
                                                                        labelObject["Ok"] != null
                                                                        ? labelObject["Ok"]
                                                                        : "Ok",
                                                                click: function () {
                                                                    if (gridId.startsWith("divGrid")) {
                                                                        var data = {
                                                                            startIndex: 0,
                                                                            endIndex: 50,
                                                                            tableName: tablename,
                                                                            analytics: "Y",
                                                                        };
                                                                        viewAnalyticsTableDataGrid(data);
                                                                        removeIiWidgetOverlay();
                                                                    } else {
                                                                        showalterColumnData(tablename, "N", gridId);
                                                                        showFileToDxpTableData(
                                                                                tablename,
                                                                                exiFlag,
                                                                                gridId
                                                                                );
                                                                        removeIiWidgetOverlay();
                                                                        leftFileUploadsDivToggle();
                                                                    }
                                                                    $(this).html("");
                                                                    $(this).dialog("close");
                                                                    $(this).dialog("destroy");
                                                                },
                                                            },
                                                        ],
                                                        open: function () {
                                                            $(this)
                                                                    .closest(".ui-dialog")
                                                                    .find(".ui-button")
                                                                    .eq(1)
                                                                    .addClass("dialogyes");
                                                            $(".visionHeaderMain").css("z-index", "999");
                                                            $(".visionFooterMain").css("z-index", "999");
                                                        },
                                                        beforeClose: function (event, ui) {
                                                            $(".visionHeaderMain").css("z-index", "99999");
                                                            $(".visionFooterMain").css("z-index", "99999");
                                                        },
                                                    });
                                                }
                                            },
                                            error: function (e) {
                                                sessionTimeout(e);
                                            },
                                        });
                                    },
                                },
                            ],
                            open: function () {
                                $(this)
                                        .closest(".ui-dialog")
                                        .find(".ui-button")
                                        .eq(1)
                                        .addClass("dialogyes");
                                $(this)
                                        .closest(".ui-dialog")
                                        .find(".ui-button")
                                        .eq(2)
                                        .addClass("dialogno");
                                $(this).closest(".ui-dialog").addClass("visionCommonDialog");
                                $(".visionHeaderMain").css("z-index", "999");
                                $(".visionFooterMain").css("z-index", "999");
                            },
                            beforeClose: function (event, ui) {
                                $(".visionHeaderMain").css("z-index", "99999");
                                $(".visionFooterMain").css("z-index", "99999");
                            },
                        });
                    },
                },
                {
                    text: labelObject["Rows"] != null ? labelObject["Rows"] : "Rows",
                    click: function () {
                        $("#dialog").html("Please Select the Rows");
				$("#dialog").dialog({
					title:
						labelObject["Message"] != null
							? labelObject["Message"]
							: "Message",
					modal: true,
					width: 300,
					height: 135,
					fluid: true,
					buttons: [
						{
							text:
								labelObject["Ok"] != null
									? labelObject["Ok"]
									: "Ok",
							click: function() {
								$(this).html("");
								$(this).dialog("close");
								$(this).dialog("destroy");
							},
						},
					],
					open: function() {
						$(this)
							.closest(".ui-dialog")
							.find(".ui-button")
							.eq(1)
							.addClass("dialogyes");
						$(".visionHeaderMain").css("z-index", "999");
						$(".visionFooterMain").css("z-index", "999");
					},
					beforeClose: function(event, ui) {
						$(".visionHeaderMain").css("z-index", "99999");
						$(".visionFooterMain").css("z-index", "99999");
					},
				});
                    },
                },
            ],
            open: function () {
                $(this)
                        .closest(".ui-dialog")
                        .find(".ui-button")
                        .eq(1)
                        .addClass("dialogyes");
                $(this)
                        .closest(".ui-dialog")
                        .find(".ui-button")
                        .eq(2)
                        .addClass("dialogno");
                $(this).closest(".ui-dialog").addClass("visionCommonDialog");
                $(".visionHeaderMain").css("z-index", "999");
                $(".visionFooterMain").css("z-index", "999");
            },
            beforeClose: function (event, ui) {
                $(".visionHeaderMain").css("z-index", "99999");
                $(".visionFooterMain").css("z-index", "99999");
            },
        });
    } else {
        $("#dialog").html("Are you sure you want to delete?");
        $("#dialog").dialog({
            modal: true,
            title:
                    labelObject["Message"] != null ? labelObject["Message"] : "Message",
            height: "auto",
            minHeight: "auto",
            minWidth: 350,
            maxWidth: "auto",
            fluid: true,
            buttons: [
                {
                    text: labelObject["Yes"] != null ? labelObject["Yes"] : "Yes",
                    click: function () {
                        $(this).html("");
                        $(this).dialog("close");
                        $(this).dialog("destroy");

                        $.ajax({
                            type: "POST",
                            url: "deleterowdata",
                            cache: false,
                            dataType: "html",
                            async: false,
                            data: {
                                tablename: tablename,
                                selectedRowsData: JSON.stringify(selectedRowsData),
                            },
                            success: function (response) {
                                $("#dialog").html(response);
                                $("#dialog").dialog({
                                    title:
                                            labelObject["Message"] != null
                                            ? labelObject["Message"]
                                            : "Message",
                                    modal: true,
                                    width: 300,
                                    height: 135,
                                    fluid: true,
                                    buttons: [
                                        {
                                            text:
                                                    labelObject["Ok"] != null ? labelObject["Ok"] : "Ok",
                                            click: function () {
                                                if (gridId.startsWith("divGrid")) {
                                                    var data = {
                                                        startIndex: 0,
                                                        endIndex: 50,
                                                        tableName: tablename,
                                                        analytics: "Y",
                                                    };
                                                    viewAnalyticsTableDataGrid(data);
                                                    removeIiWidgetOverlay();
                                                } else {
                                                    showalterColumnData(tablename, "N", gridId);
                                                    showFileToDxpTableData(tablename, exiFlag, gridId);
                                                    removeIiWidgetOverlay();
                                                    leftFileUploadsDivToggle();
                                                }
                                                $(this).html("");
                                                $(this).dialog("close");
                                                $(this).dialog("destroy");
                                            },
                                        },
                                    ],
                                    open: function () {
                                        $(this)
                                                .closest(".ui-dialog")
                                                .find(".ui-button")
                                                .eq(1)
                                                .addClass("dialogyes");
                                        $(".visionHeaderMain").css("z-index", "999");
                                        $(".visionFooterMain").css("z-index", "999");
                                    },
                                    beforeClose: function (event, ui) {
                                        $(".visionHeaderMain").css("z-index", "99999");
                                        $(".visionFooterMain").css("z-index", "99999");
                                    },
                                });
                            },
                            error: function (e) {
                                console.log(e);
                                sessionTimeout(e);
                                stopLoader();
                            },
                        });
                    },
                },
                {
                    text: labelObject["No"] != null ? labelObject["No"] : "No",
                    click: function () {
                        $(this).html("");
                        $(this).dialog("close");
                        $("#dialog").dialog("destroy");
                    },
                },
            ],
            open: function () {
                $(this)
                        .closest(".ui-dialog")
                        .find(".ui-button")
                        .eq(1)
                        .addClass("dialogyes");
                $(this)
                        .closest(".ui-dialog")
                        .find(".ui-button")
                        .eq(2)
                        .addClass("dialogno");
                $(this).closest(".ui-dialog").addClass("visionCommonDialog");
                $(".visionHeaderMain").css("z-index", "999");
                $(".visionFooterMain").css("z-index", "999");
            },
            beforeClose: function (event, ui) {
                $(".visionHeaderMain").css("z-index", "99999");
                $(".visionFooterMain").css("z-index", "99999");
            },
        });
    }
}




function DimensionTranspose(event, tablename, exiFlag) {
  $("#visionVisualizationDataChartcount").hide();
  //    $("#visualizeAreaGirdData1").html("");
  $("#visualizeAreaGirdData").html("");
  //   $(".VisionImageVisualizationTableClass").css("display","none");
  //    $("#visualizeAreaGirdData1").hide();
  //    $("#visualizeAreaGirdData").remove();
  //    $("#alterColumnData").remove();
  //    $("#transposeDataId").remove();

  var gridId = "";
  if (exiFlag == "Y") {
    gridId = "divGrid-" + tablename;
    $("#visionSmartBiGridDataId").show();
    $("#visionSmartBiGridDataId").addClass("visionSmartBiChangeClass");
  } else {
    gridId = "transposeDataId";
    $("#visionSmartBiGridDataId").removeClass("visionSmartBiChangeClass");
  }
  showLoader();
  $("#" + gridId).html("");
  $.ajax({
    type: "POST",
    url: "DimensionTransposeColumn",
    cache: false,
    dataType: "html",
    async: false,
    data: {
      tablename: tablename,
    },
    success: function (response) {
      stopLoader();
      $("#dialog").html(response);
      $("#dialog").dialog({
        title:
          labelObject["Dimension Transpose"] != null
            ? labelObject["Dimension Transpose"]
            : "Dimension Transpose",
        width: 500,
        height: 350,
        fluid: true,
        buttons: [
          {
            text: labelObject["Apply"] != null ? labelObject["Apply"] : "Apply",
            click: function () {
              var valesArr = [];
              $(".visionVisualizeChartTransposeCheckBox").each(function (i) {
                var isChecked = $(this).prop("checked");
                if (isChecked) {
                  var value = $(this).val();
                  var data = $(this).parent(".checkbox").index() + 1;
                  valesArr.push(value);
                }
              });

              if (valesArr != null && valesArr.length > 0) {
                showLoader();
                $.ajax({
                  type: "POST",
                  url: "DimensionTransposedata",
                  cache: false,
                  dataType: "json",
                  async: false,
                  data: {
                    tablename: tablename,
                    Values: JSON.stringify(valesArr),
                  },
                  success: function (response) {
                    stopLoader();
                    var data = response["data"];
                    var result = response["result"];
                    var columnList = response["ColumnName"];
                    $("#btnGroup").append(
                      "<img src='images/Generate-tables-icon.png' id='VisionImageVisualizationTableId' class='VisionImageVisualizationTableClass' onclick=createTransposeTable(event,'" +
                        tablename +
                        "') title='Create and save'/>"
                    );
                    $("#visualizeAreaGirdData1").html("");
                    $("#visualizeAreaGirdData").html("");
                    $("#visualizeAreaGirdData1").hide();
                    $("#visualizeAreaGirdData").remove();
                    $("#alterColumnData").remove();
                    $("#transposeDataId").remove();
                    $("#visionSmartBiGridDataId").append(
                      "<div id ='transposeDataId' class='transposeDataClass'>"
                    );
                    $("#" + gridId).append(result);
                  },
                  error: function (e) {
                    console.log(e);
                    sessionTimeout(e);
                    stopLoader();
                  },
                });
                $(this).html("");
                $(this).dialog("destroy");

                //                                $(this).dialog("destroy");
              } else {
                //                            showerrormsg();
              }
            },
          },
          {
            text:
              labelObject["Cancel"] != null ? labelObject["Cancel"] : "Cancel",
            click: function () {
              $(this).html("");
              $(this).dialog("destroy");
             if (twofunc == false) {
    twofunc = true;

    if (gridId.startsWith("divGrid")) {
      var data = {
        startIndex: 0,
        endIndex: 50,
        tableName: tablename,
        analytics: "Y",
      };
      viewAnalyticsTableDataGrid(data);
      removeIiWidgetOverlay();
    } else {
      showalterColumnData(tablename, exiFlag, gridId);
      showFileToDxpTableData(tablename, exiFlag, gridId);
      removeIiWidgetOverlay();
      leftFileUploadsDivToggle();
    }
  } else {
 twofunc = false;
    DimensionTranspose(event, tablename, exiFlag);
  }
            },
          },
        ],
        open: function () {},
        beforeClose: function (event, ui) {},
      });
    },
    error: function (e) {
      console.log(e);
      sessionTimeout(e);
      stopLoader();
    },
  });
}

function mergeColumntwthData(tablename, exisFlag) {
    $("#visionVisualizationDataChartcount").hide();
    //    $(".VisionImageVisualizationTableClass").css("display","none");
    showLoader();
    $.ajax({
        type: "POST",
        url: "mergeformdata",
        cache: false,
        dataType: "json",
        data: {
            tablename: tablename,
        },
        success: function (response) {
            stopLoader();
            console.log(response);
            var columnstr = response["columnobj"];
            var seperatorstr = response["seperatorobj"];
            $("#seperatorListId").append(seperatorstr);
            $("#createColumnId").css("display", "block");
            $("#dialog").html(seperatorstr);
            $("#dialog").dialog({
                title: labelObject["Merge Data"] != null ? labelObject["Merge Data"] : "Merge Data",
                width: 500,
                height: 350,
                fluid: true,
                buttons: [
                    {
                        text: labelObject["Apply"] != null ? labelObject["Apply"] : "Apply",
                        click: function () {
                            var valesArr = [];
                            $(".visionVisualizeChartFiltersValuesCheckBox").each(function (
                                    i
                                    ) {
                                var isChecked = $(this).prop("checked");
                                if (isChecked) {
                                    var value = $(this).val();
                                    valesArr.push(value);
                                }
                            });

                            var seperator = $("#DelimiteDropDownId").val();
                            var Columnname = $("#createColumnId").val();
                            var CaseVal = $("#CasesensetiveId").val();
                            if (valesArr.length < 2) {
							  var errorMessage = "Please Select at least Two Columns.";
							  var errorDiv = "<div class='dialog-error-message'>" + errorMessage + "</div>";
							  var existingErrorDiv = $(this).next(".dialog-error-message");
							
							  if (existingErrorDiv.length > 0) {
							    existingErrorDiv.text(errorMessage);
							  } else {
							    $(this).after(errorDiv);
							  }
							
							  return;
							}

                            if (!Columnname) {
                               var errorMessage =  errorMessage = "Column Name(s) should not be Empty.";
							  var errorDiv = "<div class='dialog-error-message'>" + errorMessage + "</div>";
							  var existingErrorDiv = $(this).next(".dialog-error-message");
							
							  if (existingErrorDiv.length > 0) {
							    existingErrorDiv.text(errorMessage);
							  } else {
							    $(this).after(errorDiv);
							  }
							
							  return;
                            }
                            //                            if (Columnname != null && Columnname != undefined && Columnname != '') {
                            //                                transformData(tablename, null, '', Columnname);
                            //  
                            //                                                      }
                            Columnname = Columnname.replace(/ /g, "_");
                            if (valesArr != null && valesArr.length > 0) {
                                if (
                                        seperator != null &&
                                        seperator == "Custome" &&
                                        Columnname != null &&
                                        Columnname != ""
                                        ) {
                                    seperator = $("#customeValId").val();
                                    transformData(
                                            tablename,
                                            valesArr,
                                            seperator,
                                            Columnname,
                                            exisFlag,
                                            CaseVal
                                            );
                                } else if (
                                        seperator != null &&
                                        seperator != "Custome" &&
                                        Columnname != null &&
                                        Columnname != ""
                                        ) {
                                    transformData(
                                            tablename,
                                            valesArr,
                                            seperator,
                                            Columnname,
                                            exisFlag,
                                            CaseVal
                                            );
                                }

                                if (CaseVal != null) {
                                    transformData(
                                            tablename,
                                            valesArr,
                                            seperator,
                                            Columnname,
                                            exisFlag,
                                            CaseVal
                                            );
                                }

                                closeDialogBox("#dialog");
                                //                                $(this).dialog("destroy");
                            } else {
                                transformData(
                                        tablename,
                                        null,
                                        "",
                                        Columnname,
                                        exisFlag,
                                        CaseVal
                                        );
                            }
                        },
                    },
                    {
                        text:
                                labelObject["Cancel"] != null ? labelObject["Cancel"] : "Cancel",
                        click: function () {
                            closeDialogBox("#dialog");
                        },
                    },
                ],
                open: function () {},
                beforeClose: function (event, ui) {
                    closeDialogBox("#dialog");
                },
            });
        },
        error: function (e) {
            console.log(e);
            sessionTimeout(e);
            stopLoader();
        },
    });
}

function CaseSensitive(Columnnmae, tablename) {
  var CaseVal = $("#CasesensetiveId").val();
  $.ajax({
    type: "POST",
    url: "caseSensitive",
    cache: false,
    dataType: "html",
    async: false,
    data: {
      tablename: tablename,
      CaseVal: CaseVal,
      Columnvalue: Columnnmae,
    },
    success: function (response) {
      $("#dialog").html("");
      $("#dialog").dialog("close");
      $("#dialog").dialog("destroy");
      //            showtableData(tablename);
      if (gridId.startsWith("#divGrid")) {
        var data = {
          startIndex: 0,
          endIndex: 50,
          tableName: tableName,
          analytics: "Y",
        };
        viewAnalyticsTableDataGrid(data);
        removeIiWidgetOverlay();
      } else {
        showalterColumnData(tableName, exiFlag, gridId);
        showFileToDxpTableData(tableName, exiFlag, gridId);
        removeIiWidgetOverlay();
        leftFileUploadsDivToggle();
      }
    },
    error: function (e) {
      console.log(e);
      sessionTimeout(e);
      stopLoader();
    },
  });
}
function transformData(
  tablename,
  columnArr,
  seperator,
  Columnname,
  exiFlag,
  CaseVal
) {
  $("#visionVisualizationDataChartcount").hide();
  if (exiFlag == "Y") {
    gridId = "divGrid-" + tablename;
  } else {
    gridId = "visualizeAreaGirdData1";
  }
  $.ajax({
    type: "POST",
    url: "transformdata",
    cache: false,
    dataType: "html",
    data: {
      tablename: tablename,
      seperator: seperator,
      Columnvalue: JSON.stringify(columnArr),
      Columnname: Columnname,
      CaseVal: CaseVal,
    },
    success: function (response) {
      if (gridId.startsWith("divGrid")) {
        var data = {
          startIndex: 0,
          endIndex: 50,
          tableName: tablename,
          
          analytics: "Y",
        };
        viewAnalyticsTableDataGrid(data);
        removeIiWidgetOverlay();
      } else {
        showalterColumnData(tablename, exiFlag, gridId);
        showFileToDxpTableData(tablename, exiFlag, gridId);
        removeIiWidgetOverlay();
        leftFileUploadsDivToggle();
      }
    },
    error: function (e) {
      console.log(e);
      sessionTimeout(e);
      stopLoader();
    },
  });
}


function composeData(event, tablename, exiFlag) {
  showLoader();

  $("#visionVisualizationDataChartcount").hide();
  //   $(".VisionImageVisualizationTableClass").css("display","none");
  $("#visualizeAreaGirdData1").html("");
  $("#visualizeAreaGirdData").html("");
  $("#visualizeAreaGirdData1").hide();
  $("#visualizeAreaGirdData").remove();
  $("#alterColumnData").remove();
  $("#transposeDataId").remove();
  var gridId = "";
  var divId = "";
  if (exiFlag == "Y") {
    gridId = "divGrid-" + tablename;
    divId = gridId;
  } else {
    gridId = "visualizeAreaGirdData1";
    divId = "visualizeAreaGirdData1";
  }

  if (twofunc == false) {
    twofunc = true;

    if (gridId.startsWith("divGrid")) {
      var data = {
        startIndex: 0,
        endIndex: 50,
        tableName: tablename,
        analytics: "Y",
      };
      viewAnalyticsTableDataGrid(data);
      removeIiWidgetOverlay();
    } else {
      showalterColumnData(tablename, exiFlag, gridId);
      showFileToDxpTableData(tablename, exiFlag, gridId);
      removeIiWidgetOverlay();
      leftFileUploadsDivToggle();
    }
  } else {
    showcomposeDatatable(event, tablename, exiFlag);
  }
}

function showalterColumnData(tableName, exiFlag, gridId) {
//to remove the existin gdev
    $("#visionVisualizationDataChartcount").hide();
    $("#visualizeAreaGirdData1").html("");
    $("#visualizeAreaGirdData").html("");
    $("#visualizeAreaGirdData1").hide();
    $("#visualizeAreaGirdData").remove();
    $("#alterColumnData").remove();
    $("#transposeDataId").remove();
    $(".alterColumnDataView").remove();
    var gridIdTemp;
    if (gridId.startsWith("#")) { 
        gridIdTemp = gridId;
    } else {
        gridIdTemp = "#" + gridId;
        gridId = "#" + gridId;
    }

    $(gridIdTemp).html("");
    $("#visualizeAreaGirdData").html("");
    $(gridIdTemp).hide();
    $(gridIdTemp).remove();
    $("#alterColumnData").remove();
    $("#transposeDataId").remove();
    var divId = gridId.substring(1);
    //	if(exiFlag=="Y"){
    //		 gridId="divGrid-"+tableName;
    //		 divId=gridId;
    //
    //	}
    //	else if(exiFlag=="N"){
    //		 gridId="divGrid-"+tableName;
    //		 divId="visualizeAreaGirdData1";
    //	}
    //

    showLoader();
    $.ajax({
        type: "post",
        traditional: true,
        dataType: "json",
        url: "showtableData",
        cache: false,
        //async: false,
        data: {
            tableName: tableName,
        },
        success: function (response) {
            
            if (response != null) {
                $("#visionSmartBiGridDataId").append(
                        '<div class="alterColumnDataView" id=\'' + divId + "'></div>"
                        );
                $("#visualizeTablesGridDataView").append(
                        '<div class="alterColumnDataView" id=\'' + divId + "'></div>"
                        );
                var dataFieldsArray = response["dataFieldsArray"];
                var columnsArray = response["columnsArray"];
                var data = {
                    tableName: tableName,
                };
                var source = {
                    type: "POST",
                    datatype: "json",
                    datafields: dataFieldsArray,
                    data: data,
                    url: "gettableObjectData",
                    cache: false,
                    root: "Rows",
                    //async: false,
                    processdata: function (data) {
                        showLoader();
                        data["getOnlyDataArray"] = "Y";
                    },
                    beforeSend: function () {
                        //showLoader();
                    },
                    loadError: function (xhr, status, error) {
                        stopLoader();
                    },
                    loadComplete: function (data) {
                        stopLoader();
                    },
                    beforeprocessing: function (data) {
                        source.totalrecords = data[data.length - 1];
                    },
                    sort: function () {
                        //                                                $("#" + gridResultObj['gridId'] + "_sort_columns").remove();
                        $("[id='" + divId + "']").jqxGrid("updatebounddata", "sort");
                        try {
                            $("[id='" + divId + "']").jqxGrid("clearselection");
                        } catch (e) {
                        }
                    },
                    filter: function () {
                        $("[id='" + divId + "']").jqxGrid("updatebounddata", "filter");
                        try {
                            $("[id='" + divId + "']").jqxGrid("clearselection");
                        } catch (e) {
                        }
                    },
                };
                var dataAdapter = new $.jqx.dataAdapter(source);
                $("[id='" + divId + "']").jqxGrid({
                    width: "100%",
                    height: "90%",
                    theme: "energyblue",
                    autoshowloadelement: false,
                    source: dataAdapter,
                    pageable: true,
                    pagesize: 50,
                    showfilterrow: true,
                    filterable: true,
                    sortable: true,
                    virtualmode: true,
                    columnsreorder: true,
                    selectionmode: "checkbox",
                    pagesizeoptions: ["50", "100", "500"],
                    rendergridrows: function (params) {
                        return params.data;
                    },
                    columnsresize: true,
                    columns: columnsArray,
                });
                // $(gridId).jqxGrid('hidecolumn', 'AUDIT_ID');

                $(gridId).on("columnclick", function (event) {
                    var args = event.args;
                    var dataField = args.datafield;
                    var dataField1 = args.text;
                    var rowIndex = args.rowindex;
                    var cellValue = args.value;
                    var column = $(gridId).jqxGrid(
                            "getcolumn",
                            event.args.datafield
                            ).text;
                    var gridId123 = gridId;
                    var menuItems = "";
                    menuItems +=
                            "<li><input type='button' id='renameId' value='Rename Column'  onclick=renameColumnValue('" +
                            dataField +
                            "','" +
                            tableName +
                            "','" +
                            gridId123 +
                            "')></li>";
                    menuItems +=
                            "<li><input type='button' value='Function' onclick=selectType('" +
                            dataField +
                            "','" +
                            tableName +
                            "','" +
                            gridId123 +
                            "')></li>";
                    menuItems +=
                            "<li><input type='button' value='Suffix Value' onclick=suffixValue('" +
                            dataField +
                            "','" +
                            tableName +
                            "','" +
                            gridId123 +
                            "')></li>";
                    menuItems +=
                            "<li><input type='button' value='Prefix Value' onclick=prefixValue('" +
                            dataField +
                            "','" +
                            tableName +
                            "','" +
                            gridId123 +
                            "')></li>";
                    menuItems +=
                            "<li><input type='button' value='Find Value' onclick=createFind('" +
                            dataField +
                            "','" +
                            tableName +
                            "','" +
                            gridId123 +
                            "')></li>";
                    menuItems +=
                            "<li><input type='button' value='Remove Duplicates' onclick=deleteDuplicate('" +
                            dataField +
                            "','" +
                            tableName +
                            "','" +
                            gridId123 +
                            "')></li>";
                    $("#jqxMenu").remove();
                    $("#VisualizePageBody").append("<div id='jqxMenu'><ul></ul></div>");
                    $("#jqxMenu ul").html(menuItems);
                    var contextMenu = $("#jqxMenu").jqxMenu({
                        width: "120px",
                        height: "150px",
                        autoOpenPopup: false,
                        mode: "popup",
                    });
                    var scrollTop = $(window).scrollTop();
                    var scrollLeft = $(window).scrollLeft();
                    contextMenu.jqxMenu(
                            "open",
                            parseInt(event.args.originalEvent.clientX) + 5 + scrollLeft,
                            parseInt(event.args.originalEvent.clientY) + 5 + scrollTop
                            );
                    return false;
                });
            }
            stopLoader();
            
        },
        error: function (e) {
            stopLoader();
            sessionTimeout(e);
        }
    });
    twofunc = true;
}

function showcomposeDatatable(event, tablename, exiFlag) {
    $("#visionVisualizationDataChartcount").hide();
    $("#visualizeAreaGirdData1").html("");
    $("#visualizeAreaGirdData").html("");
    $("#visualizeAreaGirdData1").hide();
    $("#visualizeAreaGirdData").remove();
    $("#alterColumnData").remove();
    $("#transposeDataId").remove();

    var gridId = "";
    if (exiFlag == "Y") {
        gridId = "divGrid-" + tablename;

    } else {
        gridId = "transposeDataId";

    }

    $("#" + gridId).html("");
    showLoader();
    $.ajax({
        type: "POST",
        url: "gettransposedata",
        cache: false,
        dataType: "html",
        //async: false,
        data: {
            tablename: tablename,
        },
        success: function (response) {
            $("#visionSmartBiGridDataId").append(
                    "<div id ='transposeDataId' class='transposeDataClass'>"
                    );
            $("#" + gridId).append(response);
            console.log(response);
            stopLoader();

            //         $("#columnlistId").append(response);
        },
        error: function (e) {
            console.log(e);
            sessionTimeout(e);
            stopLoader();
        },
    });
    twofunc = false;

}

var dimFlag = true;
function DimensionTranspose(event, tablename, exiFlag) {
    if (dimFlag) {
        $("#visionVisualizationDataChartcount").hide();
        //    $("#visualizeAreaGirdData1").html("");
        $("#visualizeAreaGirdData").html("");
        //   $(".VisionImageVisualizationTableClass").css("display","none");
        //    $("#visualizeAreaGirdData1").hide();
        //    $("#visualizeAreaGirdData").remove();
        //    $("#alterColumnData").remove();
        //    $("#transposeDataId").remove();

        var gridId = "";
        if (exiFlag == "Y") {
            gridId = "divGrid-" + tablename;

        } else {
            gridId = "transposeDataId";

        }
        showLoader();
        $("#" + gridId).html("");
        $.ajax({
            type: "POST",
            url: "DimensionTransposeColumn",
            cache: false,
            dataType: "html",
            //async: false,
            data: {
                tablename: tablename,
            },
            success: function (response) {
                stopLoader();
                $("#dialog").html(response);
                $("#dialog").dialog({
                    title:
                            labelObject["Dimension Transpose"] != null
                            ? labelObject["Dimension Transpose"]
                            : "Dimension Transpose",
                    width: 500,
                    height: 350,
                    fluid: true,
                    buttons: [
                        {
                            text: labelObject["Apply"] != null ? labelObject["Apply"] : "Apply",
                            click: function () {
                                var valesArr = [];
                                $(".visionVisualizeChartTransposeCheckBox").each(function (i) {
                                    var isChecked = $(this).prop("checked");
                                    if (isChecked) {
                                        var value = $(this).val();
                                        var data = $(this).parent(".checkbox").index() + 1;
                                        valesArr.push(value);
                                    }
                                });

                                if (valesArr != null && valesArr.length > 0) {
                                    showLoader();
                                    $.ajax({
                                        type: "POST",
                                        url: "DimensionTransposedata",
                                        cache: false,
                                        dataType: "json",
                                        //async: false,
                                        data: {
                                            tablename: tablename,
                                            Values: JSON.stringify(valesArr),
                                        },
                                        success: function (response) {

                                            var data = response["data"];
                                            var result = response["result"];
                                            var columnList = response["ColumnName"];
                                            $("#btnGroup").append(
                                                    "<img src='images/Generate-tables-icon.png' id='VisionImageVisualizationTableId' class='VisionImageVisualizationTableClass' onclick=createTransposeTable(event,'" +
                                                    tablename +
                                                    "') title='Create and save'/>"
                                                    );
                                            $("#visualizeAreaGirdData1").html("");
                                            $("#visualizeAreaGirdData").html("");
                                            $("#visualizeAreaGirdData1").hide();
                                            $("#visualizeAreaGirdData").remove();
                                            $("#alterColumnData").remove();
                                            $("#transposeDataId").remove();
                                            $("#visionSmartBiGridDataId").append(
                                                    "<div id ='transposeDataId' class='transposeDataClass'>"
                                                    );
                                            $("#" + gridId).append(result);
                                            stopLoader();
                                        },
                                        error: function (e) {
                                            console.log(e);
                                            sessionTimeout(e);
                                            stopLoader();
                                        },
                                    });
                                    closeDialogBox("#dialog");

                                    //                                $(this).dialog("destroy");
                                } else {
                                    //                            showerrormsg();
                                }
                            },
                        },
                        {
                            text:
                                    labelObject["Cancel"] != null ? labelObject["Cancel"] : "Cancel",
                            click: function () {
                                closeDialogBox("#dialog");
                                var gridId = "";
                                if (exiFlag == "Y") {
                                    gridId = "divGrid-" + tablename;

                                } else {
                                    gridId = "transposeDataId";

                                }
                                if (gridId.startsWith("divGrid")) {
                                    var data = {
                                        startIndex: 0,
                                        endIndex: 50,
                                        tableName: tablename,
                                        analytics: "Y",
                                    };
                                    viewAnalyticsTableDataGrid(data);
                                    removeIiWidgetOverlay();
                                } else {
                                    showalterColumnData(tablename, exiFlag, gridId);
                                    showFileToDxpTableData(tablename, exiFlag, gridId);
                                    removeIiWidgetOverlay();
                                    leftFileUploadsDivToggle();
                                }
                            },
                        },
                    ],
                    open: function () {},
                    beforeClose: function (event, ui) {},
                });
            },
            error: function (e) {
                console.log(e);
                sessionTimeout(e);
                stopLoader();
            },
        });
        dimFlag = false;
    } else {
        closeDialogBox("#dialog");
        var gridId = "";
        if (exiFlag == "Y") {
            gridId = "divGrid-" + tablename;

        } else {
            gridId = "transposeDataId";

        }
        if (gridId.startsWith("divGrid")) {
            var data = {
                startIndex: 0,
                endIndex: 50,
                tableName: tablename,
                analytics: "Y",
            };
            viewAnalyticsTableDataGrid(data);
            removeIiWidgetOverlay();
        } else {
            showalterColumnData(tablename, exiFlag, gridId);
            showFileToDxpTableData(tablename, exiFlag, gridId);
            removeIiWidgetOverlay();
            leftFileUploadsDivToggle();
        }
        dimFlag = true;
    }
}


function createTransposeTable(event, tablename) {
	var columnList = [];
	var colLength = $("table > tbody > tr:first > td").length;
	for (var k = 0; k < colLength; k++) {
		var colName = $("table > thead > tr:first > th:eq(" + k + ")").text();
		alert(colName);
		if (colName != null && colName != '' && colName != undefined) {
			columnList.push(colName);
		}

	}
	var propertCOlumn = $("#propertiesId").val();
	var Values = $("#ValuesId").val();
	if (propertCOlumn != null && propertCOlumn != '' && propertCOlumn != undefined &&
		Values != null && Values != '' && Values != undefined) {
		columnList.push(propertCOlumn);
		columnList.push(Values);

		var colLength = columnList.length;
		var items = [];
		var itemsList = [];
		$('#tansposetableId tbody tr td').each(function(event) {
			let value = $(this).text();
			items.push(value);
			event = event + 1;
			if (event % colLength == 0) {
				itemsList.push(items);
				items = [];
			}
		});
		$.ajax({
			type: "POST",
			url: "createTransposeTable",
			cache: false,
			dataType: 'html',
			async: false,
			data: {
				tablename: tablename,
				columnList: JSON.stringify(columnList),
				data: JSON.stringify(itemsList)
			},
			success: function(response) {
				if (response != null) {
					$("#dialog").html(response);
					$("#dialog").dialog({
						title: (labelObject['Upload'] != null ? labelObject['Upload'] : 'Upload'),
						width: 300,
						height: 200,
						fluid: true,
						open: function() {

						},
						beforeClose: function(event, ui) {

						}
					});
				}
			},
			error: function(e) {
				console.log(e);
				sessionTimeout(e);
				stopLoader();
			}
		});
	}
}


function ChooseOptions(event, tableName) {
	$("#VisionImageVisualizationTableId").css("display", "none");//5 setp/22
	//    $("#visualizeAreaGirdData1").html("");
	$("#visualizeAreaGirdData").html("");
	$.ajax({
		type: "post",
		traditional: true,
		dataType: 'json',
		url: "alterBiTableCol",
		cache: false,
		data: {
			tableName: tableName
		},
		success: function(response) {
			stopLoader();
			if (response != null) {
				var dataArray = response['data'];
				var dataTypesList = response['dataTypesList'];
				var pkColsList = response['pkColsList'];
				$("#alterTablePKList").val(pkColsList);
				var divStr = "<div id = 'tableAlterDiv'>"
					+ "<div id='alterTableOptions' class='visionAlterTableOptions' style='display:flex;'>"
					+ "<img class='visionEditOptions'  src='images/commit_icon.png' style='display:block; width:18px;height: 18px;cursor:pointer;padding-left:3px;margin-right:5px;' onclick=processAlterTable('" + tableName + "') title='Commit'>"
					+ "</div>"
					+ "<div id='tableAlterGrid'></div>"
					+ "</div>";
				$("#dialog").html(divStr);
				$("#dialog").dialog({
					title: (labelObject['Alter Table'] != null ? labelObject['Alter Table'] : 'Alter Table'),
					modal: true,
					width: 1200,
					height: 600,
					fluid: true,
					buttons: [{
						text: (labelObject['Ok'] != null ? labelObject['Ok'] : 'Ok'),
						click: function() {
							$(this).html("");
							$(this).dialog("close");
							$(this).dialog("destroy");
						}
					}],
					open: function() {
						var source =
						{
							localdata: dataArray,
							datatype: "array",
							loadComplete: function(data) {
								//                                        

							},
							rendered: function() {

							}

						};
						var dataAdapter = new $.jqx.dataAdapter(source);
						var inputRenderer = function(row, columnfield, value, defaulthtml, columnproperties) {//overflow-y:scroll;height:100%;
							if (columnfield == 'columnName') {
								var html = defaulthtml;
								if (value == null || value == "") {
									html = '<input type="text" id="alterTablecolumnName_' + row + '" dataField="' + columnfield + '" initVal="newRow_' + row + '" value="" style="width:100%;height:100%;" >'
								} else {
									html = '<input type="text" id="alterTablecolumnName_' + row + '" dataField="' + columnfield + '" initVal="' + value + '" value="' + value + '" style="width:100%;height:100%;" >'

								}
								return html;
							}
							if (columnfield == 'primaryKey') {
								if (value == "Y") {
									return '<input id="alterTablePrimaryKey_' + row + '" dataField="' + columnfield + '" type="checkbox" initVal="' + value + '" value="' + value + '" checked>';
								} else {
									return '<input id="alterTablePrimaryKey_' + row + '" dataField="' + columnfield + '" type="checkbox" initVal="' + value + '" value="' + value + '">';
								}
							}
							if (columnfield == 'columnsize') {
								return '<input id="alterTableColumnSize_' + row + '" dataField="' + columnfield + '" style="width:100%;height:100%;" type="number" initVal="' + value + '" value="' + value + '" min="0" max="4000">';
							}

							if (columnfield == 'notNull') {
								if (value == "NULL") {
									return '<input id="alterTableNotnull_' + row + '" dataField="' + columnfield + '" type="checkbox" initVal="' + value + '" value="' + value + '" >';
								} else {
									return '<input id="alterTableNotnull_' + row + '" dataField="' + columnfield + '" type="checkbox" initVal="' + value + '" value="' + value + '" checked>';
								}
							}
							if (columnfield == 'defaultValue') {
								var html = defaulthtml;
								html = '<input type="text" id="alterTabledefaultVal_' + row + '" dataField="' + columnfield + '" initVal="' + value + '" value="' + value + '" style="width:100%;height:100%;" >'
								return html;
							}

							if (columnfield == 'datatypeName') {
								var html = defaulthtml;
								html = '<select name="dataTypeNames" id="alterTableDataType_' + row + '" dataField="' + columnfield + '" initVal="' + value + '" style="width:100%;height:100%;" >';
								$.each(dataTypesList, function(i) {
									if (dataTypesList[i] == value) {
										html += '<option value="' + dataTypesList[i] + '" selected >' + dataTypesList[i] + '</option>';
									} else {
										html += '<option value="' + dataTypesList[i] + '">' + dataTypesList[i] + '</option>';
									}

								});
								html += '</select>';
								return html;
							}


						}



						var i = 0;
						$("#tableAlterGrid").jqxGrid(
							{
								width: "100%",
								source: source,
								autoheight: true,
								editable: true,
								sortable: true,
								columnsResize: true,
								columnsReorder: true,
								enableHover: true,
								enableBrowserSelection: true,
								filterable: true,
								//                                    selectionmode: 'singleRow',
								selectionmode: 'checkbox',
								handlekeyboardnavigation: function(event) {

									var keyis = event.key;
									if (keyis.length == 1) {
										//                                            var value = $(event.target).val();
										//                                            $(event.target).val(value + keyis);
										//                                            
										var cursorPos = $(event.target).prop('selectionStart');
										var v = $(event.target).val();
										var textBefore = v.substring(0, cursorPos);
										var textAfter = v.substring(cursorPos, v.length);
										$(event.target).val(textBefore + $(this).val() + textAfter);
										return true;
									}
									//                                       

								},
								columns: [
									{ text: 'Column Name', datafield: 'columnName', width: 200, editable: false, cellsrenderer: inputRenderer },

									{
										text: 'Datatype', datafield: 'datatypeName', width: 100, editable: false, cellsrenderer: inputRenderer
										//                                            createeditor: function (row, value, editor) {
										//                                                editor.jqxDropDownList({source: dataTypesList});
										//                                            }
									},
									{ text: 'Size', datafield: 'columnsize', width: 100, editable: false, cellsrenderer: inputRenderer },
									{ text: 'Byte/Char', datafield: 'byteOrChar', width: 100, editable: false, cellsrenderer: inputRenderer },
									{ text: 'PK', datafield: 'primaryKey', width: 100, editable: false, cellsrenderer: inputRenderer },
									{ text: 'Not Null', datafield: 'notNull', width: 100, editable: false, cellsrenderer: inputRenderer },
									{ text: 'Default value', datafield: 'defaultValue', width: 200, editable: false, cellsrenderer: inputRenderer },
									{ text: 'alterTableHidden', datafield: 'alterTableHidden', hidden: true },
								]
							});
						$("[id^=tableAlter]").change(function(event) {

							var target = event.target;
							var oldvalue = $(target).attr("initval");
							var value;
							var dataField = $(target).attr("dataField");
							// validations
							var rowIndex = $(target).attr("id").split("_")[1];
							var columnName = $("#alterTablecolumnName_" + rowIndex).attr("initval");
							if (dataField == "datatypeName") {
								value = $(target).val();
								if (value == "NUMBER" || value == "NUMERIC" || value == "DECIMAL") {
									$("#alterTableColumnSize_" + rowIndex).val("");
									$("#alterTableColumnSize_" + rowIndex).attr('readonly', true);
									$("#alterTablePrecision_" + rowIndex).val("");
									$("#alterTablePrecision_" + rowIndex).attr('readonly', false);
									$("#alterTableScale_" + rowIndex).attr('readonly', false);
								}
								if (value == "FLOAT") {
									$("#alterTableColumnSize_" + rowIndex).val("");
									$("#alterTableColumnSize_" + rowIndex).attr('readonly', true);
									$("#alterTablePrecision_" + rowIndex).attr('readonly', false);
									$("#alterTablePrecision_" + rowIndex).val("");
									$("#alterTableScale_" + rowIndex).attr('readonly', true);
								}
								if (value == "INTERGER" || value == "DATE" || value == "LONG" || value == "LONG RAW"
									|| value == "ROWID" || value == "MLSLABEL" || value == "CLOB" || value == "NCLOB"
									|| value == "BLOB" || value == "BFILE" || value == "BINARY_DOUBLE" || value == "BINARY_FLOAT"
									|| value == "URITYPE" || value == "DOUBLE PRECISION" || value == "SMALLINT" || value == "REAL"
									|| value == "URITYPE" || value == "TIMESTAMP") {
									$("#alterTableColumnSize_" + rowIndex).val("");
									$("#alterTableColumnSize_" + rowIndex).attr('readonly', true);
									$("#alterTablePrecision_" + rowIndex).val("");
									$("#alterTablePrecision_" + rowIndex).attr('readonly', true);
									$("#alterTableScale_" + rowIndex).val("");
									$("#alterTableScale_" + rowIndex).attr('readonly', true);
								}
								if (value == "VARCHAR" || value == "VARCHAR2" || value == "CHAR" || value == "NVARCHAR2"
									|| value == "RAW" || value == "CHAR VARYING" || value == "CHARACTER" || value == "CHARACTER VARYING"
									|| value == "NATIONAL CHAR" || value == "NATIONAL CHARACTER" || value == "NATIONAL CHARACTER VARYING"
									|| value == "NCHAR VARYING") {

									$("#alterTableColumnSize_" + rowIndex).attr('readonly', false);
									$("#alterTablePrecision_" + rowIndex).val("");
									$("#alterTablePrecision_" + rowIndex).attr('readonly', true);
									$("#alterTableScale_" + rowIndex).val("");
									$("#alterTableScale_" + rowIndex).attr('readonly', true);
								}
							}

							$("#tableAlterGrid").jqxGrid('endrowedit', rowIndex, false);
							// validations end
							var rowData = $("#tableAlterGrid").jqxGrid('getrowdata', rowIndex);
							var dataFieldsObj = alterTableData[columnName];
							if (dataFieldsObj == null) {
								dataFieldsObj = {};
							}

							if (dataField != null) {
								if (dataField == "columnName") {
									value = $(target).val();
									if (value != null && oldvalue != value) {
										dataFieldsObj[dataField] = value;
										alterTableData[columnName] = dataFieldsObj;
									}
								} else if (dataField == "primaryKey") {
									var checked = $(target).prop("checked");
									if (checked) {
										$(target).val("Y")
										value = $(target).val();
									} else {
										$(target).val("N")
										value = $(target).val();
									}
									if (value != null && oldvalue != value) {
										dataFieldsObj[dataField] = value;
										alterTableData[columnName] = dataFieldsObj;
									}

								} else if (dataField == "datatypeName" || dataField == "columnsize"
									|| dataField == "byteOrChar" || dataField == "precision" || dataField == "scale") {
									value = $(target).val();
									if (value != null && oldvalue != value) {
										dataFieldsObj['datatypeName'] = $("#alterTableDataType_" + rowIndex).val();
										dataFieldsObj['columnsize'] = $("#alterTableColumnSize_" + rowIndex).val();
										//                                      dataFieldsObj['byteOrChar'] = $("#alterTablebyteOrChar_" + rowIndex).val();
										dataFieldsObj['precision'] = $("#alterTableprecision_" + rowIndex).val();
										dataFieldsObj['scale'] = $("#alterTableScale_" + rowIndex).val();
										alterTableData[columnName] = dataFieldsObj;
									}
								} else if (dataField == "notNull") {
									var checked = $(target).prop("checked");
									if (checked) {
										$(target).val("NOT NUL")
										value = "NOT NULL";
									} else {
										$(target).val("NULL")
										value = "NULL"
									}
									if (value != null && oldvalue != value) {
										dataFieldsObj[dataField] = value;
										alterTableData[columnName] = dataFieldsObj;
									}
								} else if (dataField == "defaultValue") {
									value = $(target).val();
									if (value != null && oldvalue != value) {
										dataFieldsObj[dataField] = value;
										alterTableData[columnName] = dataFieldsObj;
									}
								}
							}

						});
						$(this).closest(".ui-dialog").find(".ui-button").eq(1).addClass("dialogyes");
						$("#dialog").addClass("alterTablePopup");
						$(".visionHeaderMain").css("z-index", "999");
						$(".visionFooterMain").css("z-index", "999");
					},
					beforeClose: function(event, ui) {
						$(".visionHeaderMain").css("z-index", "99999");
						$(".visionFooterMain").css("z-index", "99999");
					}
				});
			}
		},
		error: function(e) {
			sessionTimeout(e);
		}

	});

}

function updateDataType(tablename) {        // 8setp
	var table = tablename.toUpperCase();
	var dataColumn = $("#selectOptionAnlysisData1").val();
	var dataTypeOrecal = $("#selectOptionAnlysisData").val();
	var dataSize = $("#selectOptionDataType").val();
	var dataInputType = $('#quantity').val();
	$("#dimensionTranspose").jqxDropDownList({//7 sept/22
		//     source: source,
		theme: 'energyblue',
		width: '200px',
		height: '20px',
		dropDownHeight: 200,
	});
	$.ajax({
		type: "POST",
		url: "setImportData",
		cache: false,
		dataType: 'html',
		async: false,
		data: {
			'tablename': table,
			'dataColumn': dataColumn,
			'dataTypeOrecal': dataTypeOrecal,
			'dataSize': dataSize,
			'dataInputType': dataInputType,
		},
		success: function(response) {
			var responceResult = '';
			if (response === "false") {
				responceResult = "please select correct Datatype";
			} else if (response === "true") {
				responceResult = "Updated Sucessfull.";
			}
			var modalObj = {
				title: 'Output',
				body: responceResult
			};
			var buttonArray = [
				{
					text: labelObject['Ok'] != null ? labelObject['Ok'] : 'Ok',
					click: function() {
						$("#playAudioClipEmojiStop").remove();
					},
					isCloseButton: true
				}
			];
			modalObj['buttons'] = buttonArray;
			createModal("dataDxpSplitterValue", modalObj);
			$(".modal-dialog").addClass("modal-sm");

		},
	})
}
function showtableData(tableName,exiFlag) {
	$("#visualizeAreaGirdData1").html("");
	$("#visualizeAreaGirdData1").hide();
	$("#alterColumnData").remove();
	$("#visualizeAreaGirdData").remove();
	$("#transposeDataId").remove();
	var gridId="";
	if(exiFlag=="Y"){
		 gridId="divGrid-"+tableName;
	}
	else{
		gridId="visualizeAreaGirdData";
	}
	ajaxStart();
	$.ajax({
		type: "post",
		traditional: true,
		dataType: 'json',
		url: 'showtableData',
		cache: false,
		async: false,
		data: {
			tableName: tableName
		},
		success: function(response) {
			if (response != null) {
				$("#visionSmartBiGridDataId").append("<div class=\"visualizeAreaGirdDataClass\" id=\"visualizeAreaGirdData\"></div>");
				var dataFieldsArray = response['dataFieldsArray'];
				var columnsArray = response['columnsArray'];
				var data = {
					tableName: tableName
				};
				var source =
				{
					type: 'POST',
					datatype: "json",
					datafields: dataFieldsArray,
					data: data,
					url: 'gettableObjectData',
					cache: false,
					root: 'Rows',
					async: false,
					processdata: function(data) {
						showLoader();
						data['getOnlyDataArray'] = 'Y';

					},
					beforeSend: function() {
						//showLoader();

					}, loadError: function(xhr, status, error) {
						stopLoader();
					}, loadComplete: function(data) {
						stopLoader();
					},
					beforeprocessing: function(data) {
						source.totalrecords = data[data.length - 1];
					},
					sort: function() {
						$("#"+gridId).jqxGrid('updatebounddata', 'sort');
						try {
							$("#"+gridId).jqxGrid('clearselection');
						} catch (e) {
						}
						ajaxStop();
					},
					filter: function() {

						$("#"+gridId).jqxGrid('updatebounddata', 'filter');
						try {
							$("#"+gridId).jqxGrid('clearselection');
						} catch (e) {
						}
						ajaxStop();
					}
				};
				var dataAdapter = new $.jqx.dataAdapter(source);
				$("#"+gridId).jqxGrid(
					{
						width: "100%",
						height: "90%",
						theme: 'energyblue',
						autoshowloadelement: false,
						source: dataAdapter,
						pageable: true,
						pagesize: 50,
						showfilterrow: true,
						filterable: true,
						sortable: true,
						virtualmode: true,
						columnsreorder: true,
						pagesizeoptions: ['50', '100', '500'],
						rendergridrows: function(params) {
							return params.data;
						},
						columnsresize: true,
						columns: columnsArray
					});
				$("#"+gridId).on('rowselect', function(event) {
					var args = event.args;
					var dataField = args.datafield;
					var dataField1 = args.text;
					var rowIndex = args.rowindex;
					var cellValue = args.value;
					//                    var column = $('#' + gridResultObj['gridId']).jqxGrid('getcolumn', event.args.datafield).text;
					popupedit("column", cellValue);
				});
				$("#"+gridId).on('columnclick', function() {
					console.log("testingclickheader column");
					splitData(tableName);
				});




			}
		},
		error: function(e) {
			stopLoader();
			sessionTimeout(e);
		}

	});
	ajaxStop();

}
function getGraphQuery(event, table) {
	//    ajaxStart(); 
	$.ajax({
		type: "post",
		traditional: true,
		dataType: 'json',
		url: 'generateQueryStr',
		cache: false,
		async: false,
		data: {
			tableName: table
		},
		success: function(response) {
			var resut = response['result'];
			var tableStr = response['tableStr'];
			if (response != null) {
				$("#visionVisualizationDataChartcount").hide();
				$("#visualizeArea").append("<div class=\"creategraphqueryDivClass\" id=\"creategraphqueryDivId\"></div>");
				$("#creategraphqueryDivId").append("<div class=\"subgraphqueryDivClass\" id=\"subgraphqueryDivId\"></div>");
				$("#subgraphqueryDivId").append(resut);
				$("#subgraphqueryDivId").append(tableStr);
				//                $("#dialog").html(tableStr); 
				//                $("#dialog").dialog({
				//                    title: (labelObject['Form'] != null ? labelObject['Form'] : 'Form'),
				//                    width: 500,
				//                    height: 350,
				//                    fluid: true,
				//                    open: function () {
				//
				//                    },
				//                    beforeClose: function (event, ui)
				//                    {
				//
				//                    }
				//                });
			}
		},
		error: function(e) {
			stopLoader();
			sessionTimeout(e);
		}

	});
}
function gettable(event, id) {
	$("#columnlistoptionListId").html("");
	var tablename = $("#" + id).val();
	$.ajax({
		type: "post",
		traditional: true,
		dataType: 'json',
		url: 'generateQueryStr',
		cache: false,
		async: false,
		data: {
			tablename: tablename
		},
		success: function(response) {
			var columnstr = response['ColumnStr'];
			if (response != null) {
				$("#subgraphqueryDivId").append(columnstr);
				$("#columnlistoptionListId").jqxDropDownList({
					filterable: true,
					checkboxes: true,
					filterPlaceHolder: 'startswith',
					placeHolder: 'Select Column',
				});
			}
		},
		error: function(e) {
			stopLoader();
			sessionTimeout(e);
		}

	});
}

function getModalFileColumns(event, tableName) {
	showAutoMsgFlag = false;
	showAutoMsgDependFlag = false;
	$.ajax({
		url: 'getModalFileColumns',
		type: "POST",
		dataType: 'json',
		traditional: true,
		cache: false,
		async: false,
		data: {
			tableName: tableName
		},
		success: function(response) {
			stopLoader();
			if (response != null && !jQuery.isEmptyObject(response)) {
				var stringList = response['stringList'];
				var numberList = response['numberList'];
				var remarksArr = response['remarksArr'];
				var questionsArr = response['questionsArr'];
				var querysMap = response['querysMap'];
				if (remarksArr != null && !jQuery.isEmptyObject(remarksArr)) {
					var remarksStr = "";
					$.each(remarksArr, function(i, val) {
						remarksStr += val + ",";
					});
					remarksStr = remarksStr.replace(/,\s*$/, "");
					remarksStr = remarksStr + " : Should not be null";
					var modalObj = {
						title: 'Message',
						body: remarksStr
					};
					var buttonArray = [
						{
							text: 'Close',
							click: function() {

							},
							isCloseButton: true
						}
					];
					modalObj['buttons'] = buttonArray;
					createModal("dataDxpSplitterValue", modalObj);
					$(".modal-dialog").addClass("opacity-animate3");

				} else {
					getModalAnalytics(stringList, numberList, tableName,questionsArr,querysMap);
				}
			}
		}, error: function(e) {
			console.log("The Error Message is:::" + e.message);
			sessionTimeout(e);
		}
	});

}
function getModalAnalytics(stringList, numberList, tableName,questionsArr,querysMap) {
	var valueColumns = [];
	var chartType = "column";
	var createcount = 0;
	autoSuggestedChartCount = 0;
	$("#modalFileCharts").remove();
	$("#visionVisualizationDataChartcount").show();  
	if (!($("#visionVisualizationDataChartViewFilterId").css('display') == 'none')) {
		var agChartsHeaderDiv = "<div class=\"visionHomeAutoSuggestionChartCount\">"
			+ "<span class=\"visionAutoSuggestionChartCountSpanClass\">Charts Count :</span>"
			+ "<span class=\"visionAutoSuggestionChartCountSpan\"></span></div>"
			+ "<div id=\"visionHomeChartSuggestionsSaveId\" class=\"visionHomeChartSuggestionsFilterClass\">"
			+ "<span class=\"FilterImage\"><img onclick=\"saveHomePageAutoSuggestionsCharts()\" src=\"images/Save Icon.svg\" title=\"Save Charts\" style=\"width:20px;margin-left: 7px;\"></span></div>"
			+ "<div id=\"visionHomeChartSuggestionsFilterId\" class=\"visionHomeChartSuggestionsFilterClass\">"
			+ "<span class=\"FilterImage\"><img onclick=\"filterHomePageAutoSuggestionsCharts()\" src=\"images/filter.png\" title=\"Filter Charts\" style=\"width:20px;margin-left: 7px;\"></span></div>"
			+ "<div id=\"visionHomeChartSuggestionsDeleteId\" class=\"visionHomeChartSuggestionsFilterClass\">"
			+ "<span class=\"FilterImage\"><img onclick=\"deleteHomePageAutoSuggestionsCharts()\" src=\"images/delete_icon.svg\" title=\"Delete Charts\" style=\"width:20px;margin-left: 7px;\"></span></div>"
			+ "<div id=\"visionVisualizeChartsInRowId\" class=\"visionVisualizeChartsInRowClass\"><span class=\"visionVisualizeChartsInRowSpanClass\">Charts in Row :</span>"
			+ "<select id=\"visionVisualizeChartsInRowSelectId\" onchange=\"showChartsInRow()\"><option value=\"2\">2</option><option value=\"3\" selected>3</option><option value=\"4\">4</option></select></div>"
			+ "<div id=\"visionVisualizeChartsBasedOnQuestionsMainId\" class=\"visionVisualizeChartsBasedOnQuestionsMainClass\">"
			+ "<div id=\"visionVisualizeChartsBasedOnQuestionsImageId\" class=\"visionVisualizeChartsBasedOnQuestionsImageClass\"><img src=\"./images/questions-img.png\"></div>"
			+ "<div id=\"visionVisualizeChartsBasedOnQuestionsId\" class=\"visionVisualizeChartsBasedOnQuestionsClass\"></div>"
			+ "</div>";
		$("#visionVisualizationDataChartViewFilterId").html(agChartsHeaderDiv);
	}
	$("#visionVisualizationDataChartViewFilterId").show();
	$("#visionVisualizationDataModalChartViewId").addClass("modalChartsBasedonFileImport");
	var divStr = "<div id='modalFileCharts' class='modalFileChartsClass row'></div>";
	if (numberList != null && !jQuery.isEmptyObject(numberList)) {
		$.each(numberList, function(i, val) {
			if (val != null && val != '' && val != undefined) {
				var columnName = val;
				var tableName = val.split(".")[0];
				var columnObj = {};
				columnObj['tableName'] = tableName;
				columnObj['columnName'] = "SUM(" + columnName + ")";
				columnObj['aggColumnName'] = "SUM";
				valueColumns.push(columnObj);
			}
		});
	}
	$("#visionVisualizationDataModalChartViewId").append(divStr);
	$("#modalFileCharts").append("<input type='hidden' id='autoSuggestedTableName' value=''/>");
	$("#autoSuggestedTableName").val(tableName);
	if (stringList != null && !jQuery.isEmptyObject(stringList)) {
		
		
		$("#visionVisualizeChartsBasedOnQuestionsId").append("<div>"
			+ "<input class=\"chosen-value\" type=\"text\" id=\"myInput\" value=\"\" placeholder=\"Ask a question about your data\" autocomplete=\"off\">"
			+ "</div>");
		var ul = "<ul class='value-list' id='myUL'>";
		$.each(questionsArr, function(index, value) {
			var li = "<li>"+ value +"</li>";
			ul += li;
		});
		ul += "<span id='error' style='display: none; text-align: center;font-weight: 700;'>No Suggested questions</span>"
		   + "</ul>";
		$("#visionVisualizeChartsBasedOnQuestionsId").append(ul);
		var inputField = $('.chosen-value');
		var dropdown = $('.value-list');
		var dropdownArray = $("#myUL li");

		console.log(typeof dropdownArray)
		let valueArray = [];
		dropdownArray.each(item => {
			valueArray.push($(this).text());
		});

		const closeDropdown = () => {
			dropdown.classList.remove('drop-open');
		}
		inputField.on("click", function() {
			dropdown.addClass('drop-open');
		});

		inputField.on('input', function() {
			dropdown.addClass('drop-open');
			let filter = $(this).val().toUpperCase();
			let anyLiDisplayed = false;
			dropdownArray.each(function() {
				let txtValue = $(this).text();
				if (txtValue.toUpperCase().indexOf(filter) > -1) {
					$(this).show();
					anyLiDisplayed = true;
				} else {
					$(this).hide();
				}
			});
			if (anyLiDisplayed) {
				$("#heading").show();
				$("#error").hide();
			} else {
				$("#heading").hide();
				$("#error").show().css({ 'text-align': 'center', 'font-weight': '600', 'padding': '8px' });
			}
		});

		dropdownArray.on('click', function(evt) {
			inputField.val($(this).text());
			dropdown.removeClass('drop-open');
			dropdownArray.each(function(index, item) {
				$(item).addClass('closed');
			});
			let selectedValue = $(this).text();
			if (selectedValue && selectedValue.trim() !== '') {
				getQueryForQuestionAutoGeneratedCharts(selectedValue, querysMap);
			}
		});

		inputField.off('focus').on('focus', function() {
			inputField.attr('placeholder', 'Ask a question about your data');
			dropdown.toggleClass('drop-open');
			dropdownArray.each(function(index, item) {
				$(item).removeClass('closed');
			});
		});

		inputField.off('blur').on('blur', function() {
			inputField.attr('placeholder', 'Ask a question about your data');
			dropdown.removeClass('drop-open');
		});
		
		
		
		/*$("#visionVisualizeChartsBasedOnQuestionsId").jqxDropDownList({
			source: questionsArr,
			theme: 'energyblue',
			width: '200px',
			height: '30px',
			filterable: true,
            filterPlaceHolder: "Filtering",
			placeHolder: "Ask a Question about your Data..."
		});
		
		$("#visionVisualizeChartsBasedOnQuestionsId").unbind('change').on('change', function(event) {
			var selectedItem = event.args.item;
			if (selectedItem) {
				var selectedValue = selectedItem.value;
                if(selectedValue !=null && selectedValue !='' && selectedValue !=undefined)
                {
					 getQueryForQuestionAutoGeneratedCharts(selectedValue,querysMap);
				}
			}
		});*/
		
		var c = 0;
		$.each(stringList, function(i, val) {
			var tablesObj = [];
			var axisColumns = [];
			if (val != null && val != '' && val != undefined) {
				var columnName = val;
				var tableName = val.split(".")[0];
				var columnObj = {};
				columnObj['tableName'] = tableName;
				columnObj['columnName'] = columnName;
				axisColumns.push(columnObj);
				if (!(tablesObj.indexOf(tableName) > -1)) {
					tablesObj.push(tableName);
				}
			}
			var chartTypes = ['pie', 'donut', 'bar', 'pie', 'donut', 'lines', 'column'];
			for (var i = 0; i < numberList.length; i++) {
				//				var chartTypeNum = Math.floor(Math.random() * (5 - 1 + 1)) + 1;
				//				chartTypeNum =(chartTypeNum == 5)? 3 :chartTypeNum;
				chartType = chartTypes[c];
				if (c >= chartTypes.length - 1) {
					c = -1;
				}
				c++;
				var valueColumn = [];
				var numVal = numberList[i];
				if (numVal != null && numVal != '' && numVal != undefined) {
					var columnName = numVal;
					var tableName = numVal.split(".")[0];
					var columnObj = {};
					columnObj['tableName'] = tableName;
					columnObj['columnName'] = "SUM(" + columnName + ")";
					columnObj['aggColumnName'] = "SUM";
					valueColumn.push(columnObj);
				}
				var dataObj = {};
				dataObj['axisColumns'] = JSON.stringify(axisColumns);
				dataObj['valuesColumns'] = JSON.stringify(valueColumn);
				dataObj['tablesObj'] = JSON.stringify(tablesObj);
				dataObj['chartType'] = chartType;
				dataObj['axisColumnName'] = val.split(".")[1];

				var number = (Math.random() + ' ').substring(2, 10) + (Math.random() + ' ').substring(2, 10);
				$("#modalFileCharts").append("<div id='visionVisualizeModalChart" + number + "' class='col-md-6 col-sm-6 col-lg-4 visionVisualizeModalChartClass'><div id='visionVisualizeModalInnerChart" + number + "' class='visionVisualizeModalChartInnerClass'></div><div id='visionVisualizeModalInnerChart" + number + "config' class='visionVisualizeModalChartConfigClass' style='display:none'></div></div>");
				var chartId = "visionVisualizeModalInnerChart" + number;
				dataObj['chartId'] = chartId;
				var configObj = chartFilterConfigObj[chartType];
				$("#" + chartId + "config").html(configObj);
				var chartOptAllObj = {};
				var chartConfigToggleStatus = {};
				var chartConfigPositionKeyObj = {};
				var errorMessageStr = "";
				var errorCount = 0;
				$("#" + chartId + "config ul li").each(function(i, ele) {
					var optColName = $(this).attr("data-column-name");
					var optKeyType = $(this).attr("data-key-type");
					if (optKeyType != null && optKeyType != '' && optKeyType != undefined) {
						chartConfigPositionKeyObj[optColName] = optKeyType;
					}
					var optName = $("#" + optColName).attr("data-opt-name");
					var optMan = $("#" + optColName).attr("data-man");
					var inputType = $("#" + optColName).attr("type");
					var optValue = $("#" + optColName).val();
					if (inputType == 'checkbox') {
						if ($("#" + optColName).is(':checked')) {
							optValue = true;
						} else {
							optValue = false;
						}
					}
					var isChartHoverActive = $("#toggleButtonForchartHover" + chartType.toUpperCase()).hasClass('active');
					if (!isChartHoverActive && optColName.includes('HOVERLABELDATA')) {
						optValue = 'none';
					}
					if (inputType == 'number') { //nested
						if (optValue != null && optValue != '' && optValue >= 1) {
							optValue = parseInt(optValue);
						}
					}
					var toggleBtnClasses = $(this).find('.toggle-btn').attr('class');
					if (toggleBtnClasses !== null && toggleBtnClasses !== '' && toggleBtnClasses !== undefined) {
						if (toggleBtnClasses.includes('active')) {
							chartConfigToggleStatus[optColName] = true;
						} else {
							chartConfigToggleStatus[optColName] = false;
						}
					}
					var isToggleActive = $(this).hasClass('active-filter');
					if (optValue != null && optValue != '' && isToggleActive) {
						chartOptAllObj[optColName] = optValue;
					} else if (optMan == 'M') {
						errorCount++;
						errorMessageStr += "<tr><td>  " + '<p class="visionGenericTabStatusDialog">' + " " + '<span style="color:blue;">' + " " + optName + "</span><b>:</b> Should not be null.</tr></td><br>";
					} else if (optColName.includes('SHOWLEGEND') && !isToggleActive) {
						chartOptAllObj[optColName] = false;
					}

				});

				var filteredchartOptAllObj = {};
				$.each(chartConfigPositionKeyObj, function(key, value) {
					var newKey = key.replace(/[0-9]/g, '');
					filteredchartOptAllObj[newKey] = value;
				});
				dataObj["chartPropObj"] = JSON.stringify(chartOptAllObj);
				dataObj["chartConfigPositionKeyStr"] = JSON.stringify(filteredchartOptAllObj);
				dataObj["chartConfigToggleStatus"] = JSON.stringify(chartConfigToggleStatus);
				$("#" + chartId).attr("dataObj", JSON.stringify(dataObj));
				$("#" + chartId + "config ul").remove();
				getModalChartSuggestions(chartId, dataObj, valueColumn, axisColumns, tablesObj, createcount,
					val.split(".")[1], chartType, chartOptAllObj, filteredchartOptAllObj, chartConfigToggleStatus);
				autoSuggestedChartCount++;
				createcount++;
			}
			if (numberList.length > 1) {
				var dataObj = {};
				dataObj['axisColumns'] = JSON.stringify(axisColumns);
				dataObj['valuesColumns'] = JSON.stringify(valueColumns);
				dataObj['tablesObj'] = JSON.stringify(tablesObj);
				dataObj['chartType'] = chartType;
				dataObj['axisColumnName'] = val.split(".")[1];
				var number = (Math.random() + ' ').substring(2, 10) + (Math.random() + ' ').substring(2, 10);
				$("#modalFileCharts").append("<div id='visionVisualizeModalChart" + number + "' class='col-md-6 col-sm-6 col-lg-4 visionVisualizeModalChartClass'><div id='visionVisualizeModalInnerChart" + number + "' class='visionVisualizeModalChartInnerClass'></div><div id='visionVisualizeModalInnerChart" + number + "config' class='visionVisualizeModalChartConfigClass' style='display:none'></div></div>");
				var chartId = "visionVisualizeModalInnerChart" + number;
				dataObj['chartId'] = chartId;
				var configObj = chartFilterConfigObj[chartType];
				$("#" + chartId + "config").html(configObj);
				var chartOptAllObj = {};
				var chartConfigToggleStatus = {};
				var chartConfigPositionKeyObj = {};
				var errorMessageStr = "";
				var errorCount = 0;
				$("#" + chartId + "config ul li").each(function(i, ele) {
					var optColName = $(this).attr("data-column-name");
					var optKeyType = $(this).attr("data-key-type");
					if (optKeyType != null && optKeyType != '' && optKeyType != undefined) {
						chartConfigPositionKeyObj[optColName] = optKeyType;
					}
					var optName = $("#" + optColName).attr("data-opt-name");
					var optMan = $("#" + optColName).attr("data-man");
					var inputType = $("#" + optColName).attr("type");
					var optValue = $("#" + optColName).val();
					if (inputType == 'checkbox') {
						if ($("#" + optColName).is(':checked')) {
							optValue = true;
						} else {
							optValue = false;
						}
					}
					var isChartHoverActive = $("#toggleButtonForchartHover" + chartType.toUpperCase()).hasClass('active');
					if (!isChartHoverActive && optColName.includes('HOVERLABELDATA')) {
						optValue = 'none';
					}
					if (inputType == 'number') { //nested
						if (optValue != null && optValue != '' && optValue >= 1) {
							optValue = parseInt(optValue);
						}
					}
					var toggleBtnClasses = $(this).find('.toggle-btn').attr('class');
					if (toggleBtnClasses !== null && toggleBtnClasses !== '' && toggleBtnClasses !== undefined) {
						if (toggleBtnClasses.includes('active')) {
							chartConfigToggleStatus[optColName] = true;
						} else {
							chartConfigToggleStatus[optColName] = false;
						}
					}
					var isToggleActive = $(this).hasClass('active-filter');
					if (optValue != null && optValue != '' && isToggleActive) {
						chartOptAllObj[optColName] = optValue;
					} else if (optMan == 'M') {
						errorCount++;
						errorMessageStr += "<tr><td>  " + '<p class="visionGenericTabStatusDialog">' + " " + '<span style="color:blue;">' + " " + optName + "</span><b>:</b> Should not be null.</tr></td><br>";
					} else if (optColName.includes('SHOWLEGEND') && !isToggleActive) {
						chartOptAllObj[optColName] = false;
					}

				});

				var filteredchartOptAllObj = {};
				$.each(chartConfigPositionKeyObj, function(key, value) {
					var newKey = key.replace(/[0-9]/g, '');
					filteredchartOptAllObj[newKey] = value;
				});
				$("#" + chartId + "config ul").remove();
				dataObj["chartPropObj"] = JSON.stringify(chartOptAllObj);
				dataObj["chartConfigPositionKeyStr"] = JSON.stringify(filteredchartOptAllObj);
				dataObj["chartConfigToggleStatus"] = JSON.stringify(chartConfigToggleStatus);
				$("#" + chartId).attr("dataObj", JSON.stringify(dataObj));
				getModalChartSuggestions(chartId, dataObj, valueColumns, axisColumns, tablesObj, createcount,
					val.split(".")[1], chartType, chartOptAllObj, filteredchartOptAllObj, chartConfigToggleStatus);
				autoSuggestedChartCount++;
			}
			createcount++;
		});
	}

	switchSmartBiDesignTabs('li_designView', 'visualizeArea');

}


function getModalChartSuggestions(chartId, dataObj, valueColumns, axisColumns, tablesObj, createcount,
	axisColName, chartType, chartOptAllObj, filteredchartOptAllObj, chartConfigToggleStatus,flag) {
    var tchartId = chartId;
	$.ajax({
		url: 'fetchModalChartData',
		type: "POST",
		data: dataObj,
		dataType: 'json',
		traditional: true,
		cache: false,
		success: function(response) {
			$("#Loader").css("display", "none");
			$("body").css("pointer-events", "auto");
			$("#modalDataDialog").addClass("modalChartsPopup");
			if (response['flag'] == 'Y' || (response != null && !jQuery.isEmptyObject(response) && response['data'] != null && !jQuery.isEmptyObject(response['data']))) {
				var resultObj = response;
				var chartDataObj = resultObj['data'];
				var dataPropObject = resultObj['dataPropObject'];
				var chartId = resultObj['chartId'];
				var layoutObj = resultObj['layout'];
				var number = resultObj['number'];
				var data = [];
				var layout = {};
				var axisColumnName;
				var valuesColumnName;
				var defaultLegendNames = {};
				var userProvidedLegendNames = {};
				var title = "";
				if(chartId == undefined){
					chartId = tChartId;
				}
				if  (response['flag'] == 'Y' || (chartDataObj != null && chartDataObj != '' && !jQuery.isEmptyObject(chartDataObj))) {
					var parentChartId = $("#" + chartId).parent().attr('id');
					$("#" + parentChartId).addClass("fileChartsBorder");
					$.each(valueColumns, function(index, value) {
						var valueColName = value.columnName;
						var valueName = "";
						if(valueColName !=null && valueColName !='' && valueColName !=undefined && valueColName.indexOf(".")>-1)
						{
							 valueName = value.columnName.split(".")[1];
						}else{
							 valueName = value.columnName;
						}
						
						valuesColumnName = valueName.replace(/[()]/g, "");
						valuesColumnName = valuesColumnName.replace(/_/g, " ");
						defaultLegendNames[valuesColumnName] = valuesColumnName;
						var legendLabels = value['userProvidedLegendLabel'];
						if (legendLabels !== '' && legendLabels !== undefined && legendLabels !== null) {
							userProvidedLegendNames[valuesColumnName] = legendLabels;
						}
						title += valuesColumnName;
						if (index < (valueColumns.length - 1)) {
							title += " and ";
						}
					});
					$.each(axisColumns, function(index, value) {
						var axisName = value.columnName.split(".")[1];
						if(!(axisName !=null && axisName !='' && axisName !=undefined))
						{
							axisName = value.columnName;
						}
						axisColumnName = axisName.replace(/[()]/g, "");
						axisColumnName = axisColumnName.replace(/_/g, " ");
						defaultLegendNames[axisColumnName] = axisColumnName;
						title += " by " + axisColumnName;
					});

					var initTitle = "";
					if (title != null && title != '' && title != undefined) {
						title = title.split(' ');
						for (var chr = 0; chr < title.length; chr++) {
							initTitle += title[chr].substring(0, 1).toUpperCase() + title[chr].substring(1, title[chr].length).toLowerCase() + ' '
						}
					}
					var item = $("#myInput").val();
					if(item !=null)
					{
					  initTitle = item;	 
					}
					var upperChartType = chartType.toUpperCase();
					upperChartType = upperChartType + "CHARTTITLE";
					$("#" + chartId + "config").find("#" + upperChartType).val(initTitle);
					var dataObjStr = $("#" + chartId).attr("dataObj");
					var dataObject = '';
					if (dataObj !== null && dataObj !== ''
						&& dataObj !== undefined) {
						dataObject = JSON.parse(dataObjStr);
					}
					var chartConfigurationPropStr = dataObject['chartPropObj'];
					if (chartConfigurationPropStr !== null && chartConfigurationPropStr !== ''
						&& chartConfigurationPropStr !== undefined) {
						var chartConfigurationPropObject = JSON.parse(chartConfigurationPropStr);
						chartConfigurationPropObject[upperChartType] = initTitle;
						dataObject['chartPropObj'] = JSON.stringify(chartConfigurationPropObject);
						$("#" + chartId).attr("dataObj", JSON.stringify(dataObject));
					}
					var colorArray = [];
					var deleteicon = {
						'height': 512,
						'width': 448,
						'path': 'M135.2 17.69C140.6 6.848 151.7 0 163.8 0H284.2C296.3 0 307.4 6.848 312.8 17.69L320 32H416C433.7 32 448 46.33 448 64C448 81.67 433.7 96 416 96H32C14.33 96 0 81.67 0 64C0 46.33 14.33 32 32 32H128L135.2 17.69zM31.1 128H416V448C416 483.3 387.3 512 352 512H95.1C60.65 512 31.1 483.3 31.1 448V128zM111.1 208V432C111.1 440.8 119.2 448 127.1 448C136.8 448 143.1 440.8 143.1 432V208C143.1 199.2 136.8 192 127.1 192C119.2 192 111.1 199.2 111.1 208zM207.1 208V432C207.1 440.8 215.2 448 223.1 448C232.8 448 240 440.8 240 432V208C240 199.2 232.8 192 223.1 192C215.2 192 207.1 199.2 207.1 208zM304 208V432C304 440.8 311.2 448 320 448C328.8 448 336 440.8 336 432V208C336 199.2 328.8 192 320 192C311.2 192 304 199.2 304 208z',
						'color': 'rgb(31,119,180)'
					};

					var saveChart = {
						'height': 512,
						'width': 512,
						'id': chartId,
						'path': 'M384 160C366.3 160 352 145.7 352 128C352 110.3 366.3 96 384 96H544C561.7 96 576 110.3 576 128V288C576 305.7 561.7 320 544 320C526.3 320 512 305.7 512 288V205.3L342.6 374.6C330.1 387.1 309.9 387.1 297.4 374.6L191.1 269.3L54.63 406.6C42.13 419.1 21.87 419.1 9.372 406.6C-3.124 394.1-3.124 373.9 9.372 361.4L169.4 201.4C181.9 188.9 202.1 188.9 214.6 201.4L320 306.7L466.7 159.1L384 160z',
						'color': 'rgb(31,119,180)'
					};
					var EditIcon = {
						'height': 512,
						'width': 512,
						'id': chartId,
						'path': 'M490.3 40.4C512.2 62.27 512.2 97.73 490.3 119.6L460.3 149.7L362.3 51.72L392.4 21.66C414.3-.2135 449.7-.2135 471.6 21.66L490.3 40.4zM172.4 241.7L339.7 74.34L437.7 172.3L270.3 339.6C264.2 345.8 256.7 350.4 248.4 353.2L159.6 382.8C150.1 385.6 141.5 383.4 135 376.1C128.6 370.5 126.4 361 129.2 352.4L158.8 263.6C161.6 255.3 166.2 247.8 172.4 241.7V241.7zM192 63.1C209.7 63.1 224 78.33 224 95.1C224 113.7 209.7 127.1 192 127.1H96C78.33 127.1 64 142.3 64 159.1V416C64 433.7 78.33 448 96 448H352C369.7 448 384 433.7 384 416V319.1C384 302.3 398.3 287.1 416 287.1C433.7 287.1 448 302.3 448 319.1V416C448 469 405 512 352 512H96C42.98 512 0 469 0 416V159.1C0 106.1 42.98 63.1 96 63.1H192z',
						'color': 'rgb(31,119,180)'
					};
					var AssignUser = {
						'height': 512,
						'width': 512,
						'path': 'M424.1 287c-15.13-15.12-40.1-4.426-40.1 16.97V352H336L153.6 108.8C147.6 100.8 138.1 96 128 96H32C14.31 96 0 110.3 0 128s14.31 32 32 32h80l182.4 243.2C300.4 411.3 309.9 416 320 416h63.97v47.94c0 21.39 25.86 32.12 40.99 17l79.1-79.98c9.387-9.387 9.387-24.59 0-33.97L424.1 287zM336 160h47.97v48.03c0 21.39 25.87 32.09 40.1 16.97l79.1-79.98c9.387-9.391 9.385-24.59-.0013-33.97l-79.1-79.98c-15.13-15.12-40.99-4.391-40.99 17V96H320c-10.06 0-19.56 4.75-25.59 12.81L254 162.7L293.1 216L336 160zM112 352H32c-17.69 0-32 14.31-32 32s14.31 32 32 32h96c10.06 0 19.56-4.75 25.59-12.81l40.4-53.87L154 296L112 352z',
						'color': 'rgb(31,119,180)'
					};
					var config = {
						responsive: true,
						displayModeBar: true,
						downloadImage: true,
						displaylogo: false,
						dragmode: false,
						modeBarButtonsToAdd: [
							{
								name: 'Delete', icon: deleteicon, click: function() {
									deleteModalChart(chartId);
								}
							}, {
								name: 'Save', icon: saveChart, click: function(event) {
									saveModalChart(chartId)
								}
							}, {
								name: 'Edit', icon: EditIcon, click: function(event) {
									getModalChartSetting(chartId, chartType, layout, data, createcount, event, "", JSON.stringify(chartConfigToggleStatus));
								}
							}, {
								name: 'Chart Types', icon: AssignUser, click: function(event) {
									changeModalGraph(event, chartId, chartType, layout, data, createcount);
								}
							}

						],
						modeBarButtonsToRemove: ['zoomin', 'resetViews', 'resetScale2d', 'zoomout', 'toImage', 'pan2d', 'sendDataToCloud', 'hoverClosestCartesian', 'autoScale2d', 'lasso2d', 'select2d', 'zoom2d']
					};

					if (chartType !== null && chartType !== '' && chartType !== undefined && chartType === 'pie') {
						$.each(chartDataObj, function(key) {

							var traceObj = {};
							var colorObj = {};
							if (key !== axisColumnName) {
								traceObj['labels'] = chartDataObj[axisColumnName];
								traceObj['values'] = chartDataObj[key];
								traceObj['type'] = chartType;
								traceObj['name'] = 'value';
								traceObj['marker'] = colorObj;
								$.each(dataPropObject, function(key, val) {
									traceObj[key] = val;
								});
							}
							if (traceObj !== null && !jQuery.isEmptyObject(traceObj)) {
								data.push(traceObj);
							}
						});
					} else if (chartType != null && chartType != '' && chartType != undefined && chartType == 'donut') {
						$.each(chartDataObj, function(key) {

							var traceObj = {};
							var colorObj = {};
							if (key !== axisColumnName) {
								traceObj['labels'] = chartDataObj[axisColumnName];
								traceObj['values'] = chartDataObj[key];
								traceObj['hole'] = 0.4;
								traceObj['type'] = 'pie';
								traceObj['name'] = 'value';
								traceObj['marker'] = colorObj;
								$.each(dataPropObject, function(key, val) {
									traceObj[key] = val;
								});
							}
							if (traceObj !== null && !jQuery.isEmptyObject(traceObj)) {
								data.push(traceObj);
							}
						});
					} else if (chartType != null && chartType != '' && chartType != undefined && ( chartType == 'bar' 
					 || chartType == 'waterfall' || chartType == 'histogram')) {
						var colorCount = 0;
						colorArray = ['#1864ab', '#fd7e14', '#0b7285', '#ff6b6b'];
						$.each(chartDataObj, function(keyName) {

							var traceObj = {};
							var colorObj = {};
							if (keyName !== axisColumnName) {
								if(chartType == 'waterfall'){
									traceObj['x'] = chartDataObj[axisColumnName];
									traceObj['y'] = chartDataObj[keyName];
									traceObj['orientation'] = 'v';
								} else if(chartType == 'histogram'){
									//traceObj['y'] = chartDataObj[axisColumnName];
									traceObj['x'] = chartDataObj[keyName];
								} else{
									traceObj['x'] = chartDataObj[axisColumnName];
									traceObj['y'] = chartDataObj[keyName];
								}
								traceObj['type'] = chartType;
								
								
								
								
								var keys = keyName.split("ASCOL");
								keyName = keys[0];
								traceObj = addlegendLabelToTrace(traceObj, keyName, defaultLegendNames, userProvidedLegendNames);
								$.each(dataPropObject, function(key, val) {
									if (key === 'marker' && !jQuery.isEmptyObject(val) && val !== null) {
										var colorsArray = val['colors'];
										if (colorsArray !== undefined && colorsArray !== null && !$.isArray(colorsArray)) {
											colorObj['color'] = colorsArray;
										} else if (colorsArray !== undefined && colorsArray !== null && $.isArray(colorsArray)) {
											colorObj['color'] = colorsArray[colorCount++];
										} else {
											colorObj['color'] = colorArray[colorCount++];
										}
										traceObj[key] = colorObj;
									} else if (key === 'marker' && (jQuery.isEmptyObject(val) || val === null)) {
										colorObj['color'] = colorArray[colorCount++];
										traceObj[key] = colorObj;
									} else {
										traceObj[key] = val;
									}
								});
							}
							if (traceObj !== null && !jQuery.isEmptyObject(traceObj)) {
								data.push(traceObj);
							}
						});
					} else if (chartType != null && chartType != '' && chartType != undefined && chartType == 'column') {
						$.each(chartDataObj, function(keyName) {
							var traceObj = {};
							var colorObj = {};
							if (keyName !== axisColumnName) {
								traceObj['x'] = chartDataObj[axisColumnName];
								traceObj['y'] = chartDataObj[keyName];
								traceObj['type'] = "bar";
								var keys = keyName.split("ASCOL");
								keyName = keys[0];
								traceObj = addlegendLabelToTrace(traceObj, keyName, defaultLegendNames, userProvidedLegendNames);
								$.each(dataPropObject, function(key, val) {
									if (key === 'marker' && !jQuery.isEmptyObject(val) && val !== null) {
										var colorsArray = val['colors'];
										if (colorsArray !== undefined && colorsArray !== null && !$.isArray(colorsArray)) {
											colorObj['color'] = colorsArray;
										} else if (colorsArray !== undefined && colorsArray !== null && $.isArray(colorsArray)) {
											colorObj['color'] = colorsArray[colorCount++];
										} else {
											colorObj['color'] = colorArray[colorCount++];
										}
										traceObj[key] = colorObj;
									} else if (key === 'marker' && (jQuery.isEmptyObject(val) || val === null)) {
										colorObj['color'] = colorArray[colorCount++];
										traceObj[key] = colorObj;
									} else {
										traceObj[key] = val;
									}
								});
							}
							if (traceObj !== null && !jQuery.isEmptyObject(traceObj)) {
								data.push(traceObj);
							}
						});
					} else if (chartType != null && chartType != '' && chartType != undefined && chartType == 'lines') {
						var colorCount = 0;
						var lineColorCount = 0;
						colorArray = ['#1864ab', '#fd7e14', '#0b7285', '#ff6b6b'];
						$.each(chartDataObj, function(keyName, val) {
							var traceObj = {};
							var colorObj = {};
							if (keyName !== axisColumnName) {
								traceObj['x'] = chartDataObj[axisColumnName];
								traceObj['y'] = chartDataObj[keyName];
								traceObj['type'] = chartType;
								var keys = keyName.split("ASCOL");
								keyName = keys[0];
								traceObj = addlegendLabelToTrace(traceObj, keyName, defaultLegendNames, userProvidedLegendNames);
								$.each(dataPropObject, function(key, val) {
									if (key === 'marker' && !jQuery.isEmptyObject(val) && val !== null) {
										var colorsArray = val['color'];
										if (colorsArray !== undefined && colorsArray !== null && !$.isArray(colorsArray)) {
											colorObj['color'] = colorsArray;
										} else if (colorsArray !== undefined && colorsArray !== null && $.isArray(colorsArray)) {
											colorObj['color'] = colorsArray[colorCount++];
										} else {
											colorObj['color'] = colorArray[colorCount++];
										}
										colorObj['size'] = val['size'];
										traceObj[key] = colorObj;
									} else if (key === 'marker' && (jQuery.isEmptyObject(val) || val === null)) {
										colorObj['color'] = colorArray[colorCount++];
										traceObj[key] = colorObj;
									} else if (key === 'line' && !jQuery.isEmptyObject(val) && val !== null) {
										var lineObject = Object.assign({}, val);
										var colorsArray = lineObject['color'];
										if (colorsArray !== undefined && colorsArray !== null && !$.isArray(colorsArray)) {
											lineObject['color'] = colorsArray;
										} else if (colorsArray !== undefined && colorsArray !== null && $.isArray(colorsArray)) {
											lineObject['color'] = colorsArray[lineColorCount++];
										} else {
											lineObject['color'] = colorArray[lineColorCount++];
										}
										traceObj[key] = lineObject;
									} else {
										traceObj[key] = val;
									}
								});
							}

							if (traceObj !== null && !jQuery.isEmptyObject(traceObj)) {
								data.push(traceObj);
							}
						});
					} else if (chartType != null && chartType != '' && chartType != undefined && chartType == 'scatter') {
						var colorCount = 0;
						colorArray = ['#1864ab', '#fd7e14', '#0b7285', '#ff6b6b'];
						$.each(chartDataObj, function(keyName, val) {

							var traceObj = {};
							var colorObj = {};
							if (keyName !== axisColumnName) {
								traceObj['x'] = chartDataObj[axisColumnName];
								traceObj['y'] = chartDataObj[keyName];
								traceObj['type'] = chartType;
								traceObj['mode'] = 'markers';
								traceObj['marker'] = colorObj;
								var keys = keyName.split("ASCOL");
								keyName = keys[0];
								traceObj = addlegendLabelToTrace(traceObj, keyName, defaultLegendNames, userProvidedLegendNames);
								$.each(dataPropObject, function(key, val) {
									if (key === 'marker' && !jQuery.isEmptyObject(val) && val !== null) {
										var colorsArray = val['color'];
										if (colorsArray !== undefined && colorsArray !== null && !$.isArray(colorsArray)) {
											colorObj['color'] = colorsArray;
										} else if (colorsArray !== undefined && colorsArray !== null && $.isArray(colorsArray)) {
											colorObj['color'] = colorsArray[colorCount++];
										} else {
											colorObj['color'] = colorArray[colorCount++];
										}
										colorObj['size'] = val['size'];
										traceObj[key] = colorObj;
									} else if (key === 'marker' && (jQuery.isEmptyObject(val) || val === null)) {
										colorObj['color'] = colorArray[colorCount++];
										traceObj[key] = colorObj;
									} else {
										traceObj[key] = val;
									}
								});
							}
							if (traceObj !== null && !jQuery.isEmptyObject(traceObj)) {
								data.push(traceObj);
							}
						});
					}else if (chartType != null && chartType != '' && chartType != undefined && chartType == 'indicator') {
						var traceObj = {};
						var domainObj = {};
						var domainArr = [];
						domainArr.push(0);
						domainArr.push(1);
						domainObj["x"] = domainArr;
						domainObj["y"] = domainArr;
						traceObj['domain'] = domainObj;
						traceObj['value'] = chartDataObj[0];
						traceObj['type'] = chartType;
						traceObj['mode'] = "gauge+number";
						traceObj['gauge'] = resultObj['gauge'];
						if (dataPropObject != null && !jQuery.isEmptyObject(dataPropObject)) {
							$.each(dataPropObject, function(key, val) {
								traceObj[key] = val;
							});
						}
						if (traceObj !== null && !jQuery.isEmptyObject(traceObj)) {
							data.push(traceObj);
						}
					}
					 else if (chartType != null && chartType != '' && chartType != undefined && chartType == 'funnel') {
						var colorCount = 0;
						colorArray = ['#1864ab', '#fd7e14', '#0b7285', '#ff6b6b'];
						$.each(chartDataObj, function(key) {
							var traceObj = {};
							var colorObj = {};
							if (key !== axisColumnName) {
								traceObj['y'] = chartDataObj[axisColumnName];
								traceObj['x'] = chartDataObj[key];
								traceObj['type'] = chartType;
								//                                traceObj['orientation'] = 'h';
								traceObj['name'] = 'value';
								$.each(dataPropObject, function(key, val) {
									if (key === 'marker' && !jQuery.isEmptyObject(val) && val !== null) {
										var colorsArray = val['colors'];
										if (colorsArray !== undefined && colorsArray !== null && colorsArray.length !== null) {
											colorObj['color'] = colorsArray[colorCount++];
										} else {
											colorObj['color'] = colorArray[colorCount++];
										}
										traceObj[key] = colorObj;
									} else if (key === 'marker' && (jQuery.isEmptyObject(val) || val === null)) {
										colorObj['color'] = colorArray[colorCount++];
										traceObj[key] = colorObj;
									} else {
										traceObj[key] = val;
									}
								});
							}
							if (traceObj !== null && !jQuery.isEmptyObject(traceObj)) {
								data.push(traceObj);
							}
						});
					} else if (chartType != null && chartType != '' && chartType != undefined && chartType == 'scatterpolar') {
						var colorCount = 0;
						colorArray = ['#1864ab', '#fd7e14', '#0b7285', '#ff6b6b'];
						$.each(chartDataObj, function(keyName) {
							var traceObj = {};
							var colorObj = {};
							if (keyName !== axisColumnName) {
								traceObj['r'] = chartDataObj[keyName];
								traceObj['theta'] = chartDataObj[axisColumnName];
								traceObj['type'] = chartType;
								traceObj['fill'] = 'toself';
								var keys = keyName.split("ASCOL");
								keyName = keys[0];
								traceObj = addlegendLabelToTrace(traceObj, keyName, defaultLegendNames, userProvidedLegendNames);
								$.each(dataPropObject, function(key, val) {
									if (key === 'marker' && !jQuery.isEmptyObject(val) && val !== null) {
										var colorsArray = val['colors'];
										if (colorsArray !== undefined && colorsArray !== null && !$.isArray(colorsArray)) {
											colorObj['color'] = colorsArray;
										} else if (colorsArray !== undefined && colorsArray !== null && $.isArray(colorsArray)) {
											colorObj['color'] = colorsArray[colorCount++];
										} else {
											colorObj['color'] = colorArray[colorCount++];
										}
										traceObj[key] = colorObj;
									} else if (key === 'marker' && (jQuery.isEmptyObject(val) || val === null)) {
										colorObj['color'] = colorArray[colorCount++];
										traceObj[key] = colorObj;
									} else {
										traceObj[key] = val;
									}
								});
							}
							if (traceObj !== null && !jQuery.isEmptyObject(traceObj)) {
								data.push(traceObj);
							}
						});
					} else if (chartType != null && chartType != '' && chartType != undefined && chartType == 'BarAndLine') {
						$(".fileChartsBorder").css("max-width", "100%", "!important");
						getBarAndLineChart(chartId, response, count, chartType);
						return;
					}
					else if (chartType != null && chartType != '' && chartType != undefined && chartType == 'treemap') {
						getTreeMapChart(chartId, response, count, chartType);
						return;



					} else if (chartType != null && chartType != '' && chartType != undefined && chartType == 'sunburst') {
						getSunburstChart(chartId, response, count, chartType);
						return;

					}
					else if (chartType != null && chartType != '' && chartType != undefined && chartType == 'heatMap') {
						$(".fileChartsBorder").css("max-width", "100%");
						getEchartHeatMap(chartId, response, count);
						return;
					}
					else if (chartType != null && chartType != '' && chartType != undefined && chartType == 'candlestick') {


						$(".fileChartsBorder").css("max-width", "100%", "!important");
						getCandlestickChart(chartId, response, count, chartType);
						return;
					}
					else if (chartType != null && chartType != '' && chartType != undefined && chartType == 'BasicAreaChart') {
						getBasicAreaChart(chartId, response, count, chartType);
						return;

					}else if (chartType != null && chartType != '' && chartType != undefined && chartType == 'StackedAreaChart') {
						getStackedAreaChart(chartId, response, count, chartType);
						return;

					}
						else if (chartType != null && chartType != '' && chartType != undefined && chartType == 'GradStackAreaChart') {
						getGradientStackedAreaChart(chartId, response, count, chartType);
						return;

					}
					else if (chartType != null && chartType != '' && chartType != undefined && chartType == 'AreaPiecesChart') {
						getAreaPiecesChart(chartId, response, count, chartType);
						return;

					}
					else if (chartType != null && chartType != '' && chartType == 'sankey') {
						$(".fileChartsBorder").css("max-width", "100%");
						getSankeyChart(chartId, response, count, chartType);
						return;
					}

					var margin = {};
					if (chartType != null && chartType != '' && chartType != undefined && chartType == 'treemap') {
						margin = {
							l: 0,
							r: 0,
							b: 0,
							t: 30,
							pad: 0
						};
					} else if (chartType != null && chartType != '' && chartType != undefined && chartType == 'column') {
						margin = {
							l: 50,
							r: 50,
							b: 100,
							t: 50
						};

					} else if (chartType != null && chartType != '' && chartType != undefined && chartType == 'bar') {
						margin = {
							l: 100,
							r: 50,
							b: 50,
							t: 50
						};

					} else if (chartType != null && chartType != '' && chartType != undefined && chartType == 'lines') {
						margin = {
							l: 50,
							r: 50,
							b: 100,
							t: 50
						};

					} else {
						margin = {
							l: 30,
							r: 50,
							b: 50,
							t: 50
						};
					}
					layout = {
						margin: margin,
						height: 300,
						dragmode: false,
						font: {
							size: 9
						},
						modebar: {
							orientation: 'v',
							color: '#0b4a99',
							activecolor: '#9ED3CD'
						},

						title: {
							text: initTitle,
							font: {
								family: '"Open Sans", verdana, arial, sans-serif',
								size: 12
							},
							xref: 'paper',
							x: 0.1,
						}
					};
					var legend = {
						"x": 0.2,
						"y": 0.2,
						"orientation": "h"
					};

					if (layoutObj != null && !jQuery.isEmptyObject(layoutObj)) {
						$.each(layoutObj, function(key, val) {
							layout[key] = val;
						});
					} 


					Plotly.newPlot(chartId, data, layout, config);
					setTimeout(function() {
							showChartsInRow();
						}, 200);

					if (!(flag != null && flag != '' && flag != undefined) && !showAutoMsgFlag) {
						//showAutoSuggestions(chartId);
						showAutoMsgFlag = true;
					}
					if (flag != null && flag != '' && flag != undefined && flag == 'Edit') {
						showAutoMsgDependFlag = false;
						setTimeout(function() {
							//showChartTypesByEditSuggestion(chartId);
						}, 800);

					}

					$("#" + chartId + " .svg-container").append("<div class='xAxisLabelTooltip'></div>");
					var currentChartXaxisLabelSelector = $("#" + chartId).find(".xaxislayer-above").children();
					currentChartXaxisLabelSelector.each(function(index, element) {
						var labelTitle = $(this).children().text();
						$("#" + chartId + " .xAxisLabelTooltip").append('<span class="xlabelTooltipText">' + labelTitle + "</span>");
					});
					$("#" + chartId + " .xtick").unbind("mouseenter").mouseenter(function(e) {
						var cssTransformProp = $(this).children().attr("transform");
						var firstIndexOfTransformProp = cssTransformProp.split(",")[0];
						var indexOfTransformOpenPar = firstIndexOfTransformProp.indexOf("(");
						var transformHorStr = firstIndexOfTransformProp.substring(indexOfTransformOpenPar + 1, cssTransformProp.length);
						var transformHorVal = parseInt(transformHorStr) - 15;
						showAxisLabelsTooltipOnHover($(this), "xAxisLabelTooltip", chartId, transformHorVal, 0);
					});
					$("#" + chartId + " .xtick").unbind("mouseleave").mouseleave(function(e) {
						hideAxisLabelsTooltipOnHover($(this), "xAxisLabelTooltip", chartId);
					});

					$("#" + chartId + " .svg-container").append("<div class='yAxisLabelTooltip'></div>");
					var currentChartXaxisLabelSelector = $("#" + chartId).find(".yaxislayer-above").children();
					currentChartXaxisLabelSelector.each(function(index, element) {
						var labelTitle = $(this).children().text();
						$("#" + chartId + " .yAxisLabelTooltip").append('<span class="ylabelTooltipText">' + labelTitle + "</span>");
					});
					$("#" + chartId + " .ytick").unbind("mouseenter").mouseenter(function(e) {
						var cssTransformProp = $(this).children().attr("transform");
						var firstIndexOfTransformProp = cssTransformProp.split(",")[1];
						var transformVerStr = firstIndexOfTransformProp.substring(0, firstIndexOfTransformProp.length - 1);
						var transformVerVal = parseInt(transformVerStr) - 230;
						showAxisLabelsTooltipOnHover($(this), "yAxisLabelTooltip", chartId, 0, transformVerVal);
					});
					$("#" + chartId + " .ytick").unbind("mouseleave").mouseleave(function(e) {
						hideAxisLabelsTooltipOnHover($(this), "yAxisLabelTooltip", chartId);
					});

					$("span.visionAutoSuggestionChartCountSpan").text(autoSuggestedChartCount);
				} else {
					chartId = chartId.replace("Inner", "");
					$("#" + chartId).remove();
					autoSuggestedChartCount--;
					$("span.visionAutoSuggestionChartCountSpan").text(autoSuggestedChartCount);
				}
			} else {
				chartId = response['chartId'];
				$("#" + chartId).parent().remove();
				autoSuggestedChartCount--;
				$("span.visionAutoSuggestionChartCountSpan").text(autoSuggestedChartCount);
			}

		}, error: function(e) {
			console.log("The Error Message is:::" + e.message);
			sessionTimeout(e);
		}
	});
}


function getModalDashboard(newChartType, chartId, chartType, count) {
	var dataObj = $("#" + chartId).attr("dataObj");
	if (dataObj != null && dataObj != '' && dataObj != undefined) {
		dataObj = JSON.parse(dataObj);
	}
	var configObj = chartFilterConfigObj[newChartType];
	$("#" + chartId + "config").html(configObj);
	var chartOptAllObj = {};
	var chartConfigToggleStatus = {};
	var chartConfigPositionKeyObj = {};
	var errorMessageStr = "";
	var errorCount = 0;
	$("#" + chartId + "config ul li").each(function(i, ele) {
		var optColName = $(this).attr("data-column-name");
		var optKeyType = $(this).attr("data-key-type");
		if (optKeyType != null && optKeyType != '' && optKeyType != undefined) {
			chartConfigPositionKeyObj[optColName] = optKeyType;
		}
		var optName = $("#" + optColName).attr("data-opt-name");
		var optMan = $("#" + optColName).attr("data-man");
		var inputType = $("#" + optColName).attr("type");
		var optValue = $("#" + optColName).val();
		if (inputType == 'checkbox') {
			if ($("#" + optColName).is(':checked')) {
				optValue = true;
			} else {
				optValue = false;
			}
		}
		var isChartHoverActive = $("#toggleButtonForchartHover" + chartType.toUpperCase()).hasClass('active');
		if (!isChartHoverActive && optColName.includes('HOVERLABELDATA')) {
			optValue = 'none';
		}
		if (inputType == 'number') { //nested
			if (optValue != null && optValue != '' && optValue >= 1) {
				optValue = parseInt(optValue);
			}
		}
		var toggleBtnClasses = $(this).find('.toggle-btn').attr('class');
		if (toggleBtnClasses !== null && toggleBtnClasses !== '' && toggleBtnClasses !== undefined) {
			if (toggleBtnClasses.includes('active')) {
				chartConfigToggleStatus[optColName] = true;
			} else {
				chartConfigToggleStatus[optColName] = false;
			}
		}
		var isToggleActive = $(this).hasClass('active-filter');
		if (optValue != null && optValue != '' && isToggleActive) {
			chartOptAllObj[optColName] = optValue;
		} else if (optMan == 'M') {
			errorCount++;
			errorMessageStr += "<tr><td>  " + '<p class="visionGenericTabStatusDialog">' + " " + '<span style="color:blue;">' + " " + optName + "</span><b>:</b> Should not be null.</tr></td><br>";
		} else if (optColName.includes('SHOWLEGEND') && !isToggleActive) {
			chartOptAllObj[optColName] = false;
		}

	});

	var filteredchartOptAllObj = {};
	$.each(chartConfigPositionKeyObj, function(key, value) {
		var newKey = key.replace(/[0-9]/g, '');
		filteredchartOptAllObj[newKey] = value;
	});

	dataObj['chartType'] = newChartType;
	dataObj["chartPropObj"] = JSON.stringify(chartOptAllObj);
	dataObj["chartConfigPositionKeyStr"] = JSON.stringify(filteredchartOptAllObj);
	dataObj["chartConfigToggleStatus"] = JSON.stringify(chartConfigToggleStatus);

	$("#" + chartId).attr("dataObj", JSON.stringify(dataObj));
	$("#" + chartId + "config ul").remove();
	var axisColumns = dataObj["axisColumns"];
	var valueColumns = dataObj["valuesColumns"];
	var tablesObj = dataObj["tablesObj"];
	var axisColumnName = dataObj["axisColumnName"];
	if (axisColumns != null && axisColumns != '' && axisColumns != undefined) {
		axisColumns = JSON.parse(axisColumns);
	}
	if (valueColumns != null && valueColumns != '' && valueColumns != undefined) {
		valueColumns = JSON.parse(valueColumns);
	}
	if (tablesObj != null && tablesObj != '' && tablesObj != undefined) {
		tablesObj = JSON.parse(tablesObj);
	}
	getModalChartSuggestions(chartId, dataObj, valueColumns, axisColumns, tablesObj, count,
		axisColumnName, newChartType, chartOptAllObj, filteredchartOptAllObj, chartConfigToggleStatus);

}


function saveModalChart(chartId) {
	showAutoMsgDependFlag = true;
	var dataArr = [];
	var dataObj = $("#" + chartId).attr("dataObj");
	if (dataObj != null && dataObj != '' && dataObj != undefined) {
		dataObj = JSON.parse(dataObj);
	}
	dataArr.push(dataObj);

	var value = "";
	if (dataArr != null && dataArr != '' && !jQuery.isEmptyObject(dataArr)) {
		$.ajax({
			url: 'getdashbordname',
			type: "POST",
			dataType: 'html',
			traditional: true,
			cache: false,
			success: function(response) {
				if (response != null && !jQuery.isEmptyObject(response)) {
						var dashBoardArrFromDB = JSON.parse(response);
					var jqxddl = "<div id='dropDownDashBoardList'></div>";
					jqxddl += "<div id='textReason'><textarea id='reasonId' class='visionDeleteReason' style='display:none' placeholder='Please type a new dashboard name ...'></textarea><br></div>";
					jqxddl += "<div id='dailog_error_id' style='display:none;color:red'>" + (labelObject['Please give any DashBoard Name'] != null ? labelObject['Please give any DashBoard Name'] : 'Please give any DashBoard Name') + "</div>";
					$("#dialog").html(jqxddl);
					$("#dialog").dialog({
						title: (labelObject['DashBoard Name'] != null ? labelObject['DashBoard Name'] : 'DashBoard Name'),
						modal: true,
						height: 'auto',
						minWidth: 300,
						maxWidth: 'auto',
						fluid: true,
						buttons: [{
							text: (labelObject['Ok'] != null ? labelObject['Ok'] : 'Ok'),
							click: function() {

								var dashBoardName = $("#dashbordNameId").val();
								if (!(dashBoardName != null && dashBoardName != '' && dashBoardName != undefined) || dashBoardName == 'New') {
									dashBoardName = $("#reasonId").val();
								}
								if (dashBoardName != null && dashBoardName != '' && dashBoardName != undefined && dashBoardName != 'Select' && dashBoardName != 'New') {
									$("#dailog_error_id").hide();
									$(this).html("");
									$(this).dialog("destroy");
									$.ajax({
										url: 'saveVisualizeData',
										type: "POST",
										data:
										{
											'data': JSON.stringify(dataArr),
											'dashBoardName': dashBoardName
										},
										traditional: true,
										cache: false,
										success: function(response) {
											console.log("testing");
											var msg = " Charts " + response;
											var modalObj = {
												title: 'Save',
												body: msg
											};
											var buttonArray = [
												{
													text: 'Close',
													click: function() {

													},
													isCloseButton: true
												}
											];
											modalObj['buttons'] = buttonArray;
											createModal("dataDxpSplitterValue", modalObj);
											$(".modal-dialog").addClass("opacity-animate3");

										}, error: function(e) {
											sessionTimeout(e);
										}
									});
								} else {
									$("#dailog_error_id").show();
								}
								$("#" + chartId).parent().remove();
								$("#" + chartId + "config").remove();

							}
						},
						{
							text: (labelObject['Cancel'] != null ? labelObject['Cancel'] : 'Cancel'),
							click: function() {
								$(this).html("");
								$(this).dialog("destroy");
							}

						}],
						open: function() {
							setTimeout(function() { 
								$("#dropDownDashBoardList").jqxDropDownList({
									source: dashBoardArrFromDB,
									theme: 'energyblue',
									width: '200px',
									height: '30px',
									filterable: true,
								});
								$("#dropDownDashBoardList").jqxDropDownList('selectItem', 'Select');
								$("#dropDownDashBoardList").unbind('change').on('change', function(event) {
									var selectedItem = event.args.item;
									if (selectedItem) {
										var selectedValue = selectedItem.value;
										if (selectedValue === 'New') {

											$("#reasonId").show();
										} else {
											$("#reasonId").hide();
										}
									}
								});
							}, 1000);
							$(this).closest(".ui-dialog").find(".ui-button").eq(1).addClass("dialogyes");
							$(this).closest(".ui-dialog").find(".ui-button").eq(2).addClass("dialogno");
							$("#dropDownDashBoardList").css("z-index", "999");
							$(".visionHeaderMain").css("z-index", "999");
							$(".visionFooterMain").css("z-index", "999");
						},
						beforeClose: function(event, ui) {
							$(".visionHeaderMain").css("z-index", "99999");
							$(".visionFooterMain").css("z-index", "99999");
						}
					});
				}
			}, error: function(e) {
				sessionTimeout(e);
			}
		});
	}
}
function getModalChartSetting(id, chartType, layout, data, createcount, event, expandChartId, chartConfigToggleStatus) { //jaggu

	var dataObj = $("#" + id).attr("dataObj");
	if (dataObj != null && dataObj != '' && dataObj != undefined) {
		dataObj = JSON.parse(dataObj);
	}
	showAutoMsgDependFlag = true;
	var chartOptAllObj = {};
	var chartConfigPositionKeyObj = {};
	var filteredchartOptAllObj = {};
	var upperChartType = chartType.toUpperCase();
	var chartConfigDialogBoxId = 'dialogBoxFor' + id;
	$("#homepagecreatepopupId").remove();
	$("#" + chartConfigDialogBoxId).remove();
	var chartId = $(id).attr('id');
	if (!(chartId != null && chartId != '' && chartId != undefined)) {
		chartId = id;
	}
	var configData = dataObj["chartPropObj"];
	var configobj = JSON.parse(configData);
	var homepageCurrentChartConfigPropLength = $('#' + chartConfigDialogBoxId).children().length;
	if (homepageCurrentChartConfigPropLength <= 0) {
		var chartConfigProps = "<div id= 'visionChartProperties' class='visionChartPropConfigClass' data-chartType='" + chartType + "'>" + chartFilterConfigObj[chartType] + "</div>";
		$("#" + chartConfigDialogBoxId).remove();
		$(".chartDialogClass").remove();
		var dialogBoxForChartConfig = "<div class=\"chartDialogClass\" id =\"" + chartConfigDialogBoxId + "\"></div>";
		$("body").append(dialogBoxForChartConfig);
		$("#" + chartConfigDialogBoxId).html(chartConfigProps);

	}
	$.each(configobj, function(key, value) {
		if (key !== null && key !== '' && key !== undefined) {
			$('#' + key).val(value);
		}
	});
	if (chartConfigToggleStatus !== null && chartConfigToggleStatus !== '' && chartConfigToggleStatus !== undefined) {
		var chartConfigToggleStatusObj = JSON.parse(chartConfigToggleStatus);
		$.each(chartConfigToggleStatusObj, function(key, value) {
			if (!value) {
				$('#' + key).parent().find('.toggle-btn').removeClass('active');
				$('#' + key).parent().find('.on-off-text').text('off');
				if (key === upperChartType + 'HOVERLABEL') {
					$('#' + upperChartType + "HOVERLABELDATA").attr('disabled', true);
				}
			}
		});
	}
	$("#" + chartConfigDialogBoxId).dialog({
		title: (labelObject['Upload'] != null ? labelObject['Upload'] : 'Upload'),
		width: 300,
		height: 350,
		fluid: true,
		buttons: [{
			text: (labelObject['Apply'] != null ? labelObject['Apply'] : 'Apply'),
			click: function() {
				if (filteredchartOptAllObj != null && filteredchartOptAllObj != '') {

					if (chartOptAllObj === null || $.isEmptyObject(chartOptAllObj) ||
						filteredchartOptAllObj === null || $.isEmptyObject(filteredchartOptAllObj)) {
						$("#visionChartProperties").trigger('change');
					}
					var chartPropObj = JSON.stringify(chartOptAllObj);
					var chartConfigObj = JSON.stringify(filteredchartOptAllObj);
					var chartConfigToggleStatusStr = JSON.stringify(chartConfigToggleStatus);
					var axisColumns = dataObj["axisColumns"];
					var valueColumns = dataObj["valuesColumns"];
					var tablesObj = dataObj["tablesObj"];
					var axisColumnName = dataObj["axisColumnName"];

					dataObj["chartPropObj"] = chartPropObj;
					dataObj["chartConfigPositionKeyStr"] = chartConfigObj;
					dataObj["chartConfigToggleStatus"] = chartConfigToggleStatusStr;
					if (axisColumns != null && axisColumns != '' && axisColumns != undefined) {
						axisColumns = JSON.parse(axisColumns);
					}
					if (valueColumns != null && valueColumns != '' && valueColumns != undefined) {
						valueColumns = JSON.parse(valueColumns);
					}
					if (tablesObj != null && tablesObj != '' && tablesObj != undefined) {
						tablesObj = JSON.parse(tablesObj);
					}
					$("#" + chartId).attr("dataObj", JSON.stringify(dataObj));
					getModalChartSuggestions(chartId, dataObj, valueColumns, axisColumns, tablesObj, createcount,
						axisColumnName, chartType, chartOptAllObj, filteredchartOptAllObj, chartConfigToggleStatus,"Edit");

				}
				$(this).dialog("destroy");
				$("#" + chartConfigDialogBoxId).hide();
			}
		}, {
			text: (labelObject['Cancel'] != null ? labelObject['Cancel'] : 'Cancel'),

			click: function() {
				$(this).html("");
				$(this).dialog("close");
				$(this).dialog("destroy");
			}
		}],
		open: function() {
			$(".ui-dialog").css("z-index", "99999"); //jaggu
		},
		beforeClose: function(event, ui) {

		}

	});


	$(".filter-container").unbind('click').on('click', function(event) {
		$(this).parent().siblings(':last').toggle();
		$(this).find('img').toggleClass('open');
	});
	$(".toggle-btn").unbind('click').on('click', function(event) {
		$(this).toggleClass('active');
		var onOfftext = $(this).children(':first').text();
		if (onOfftext === 'off') {
			$(this).children(':first').text('on');
			$(this).parents('.main-container').siblings(':last').find('*').attr('disabled', false);
		} else {
			$(this).children(':first').text('off');
			$(this).parents('.main-container').siblings(':last').find('*').attr('disabled', true);
		}
		var isActive = $(this).hasClass('active');
		var currentToggleSelector = $(this).closest("li");
		var currentElementId = $(this).attr('id');
		var toBeToggledSelectors = currentToggleSelector.children("ul").children();
		if (isActive) {
			$.each(toBeToggledSelectors, function(index, element) {
				$(this).addClass('active-filter');
			});
			if (currentElementId !== '' && currentElementId !== null && currentElementId !== undefined) {
				if (currentElementId === 'toggleButtonForchartHover' + upperChartType) {
					$('#' + upperChartType + 'HOVERLABELDATA').attr('disabled', false);
					$('#' + upperChartType + 'HOVERLABELDATA').val('x+y');
				}
			}
		} else {
			$.each(toBeToggledSelectors, function(index, element) {
				$(this).removeClass('active-filter');
			});
			if (currentElementId !== '' && currentElementId !== null && currentElementId !== undefined) {
				if (currentElementId === 'toggleButtonForchartHover' + upperChartType) {
					$('#' + upperChartType + 'HOVERLABELDATA').attr('disabled', true);
					$('#' + upperChartType + 'HOVERLABELDATA').val('none');
				}
			}
		}
		$("#visionChartProperties").trigger('change');
	});

	$("#visionChartProperties").unbind('change').on('change', function(event) {
		chartOptAllObj = {};
		chartConfigPositionKeyObj = {};
		chartConfigToggleStatus = {};
		var errorMessageStr = "";
		var errorCount = 0;
		var chartConfigId = "visionChartProperties ul li";
		$('#' + chartConfigId).each(function(i, ele) {
			var optColName = $(this).attr("data-column-name");
			var optKeyType = $(this).attr("data-key-type");
			if (optKeyType != null && optKeyType != '' && optKeyType != undefined) {
				chartConfigPositionKeyObj[optColName] = optKeyType;
			}
			var optName = $("#" + optColName).attr("data-opt-name");
			var optMan = $("#" + optColName).attr("data-man");
			var inputType = $("#" + optColName).attr("type");
			var optValue = $("#" + optColName).val();
			if (inputType == 'checkbox') {
				if ($("#" + optColName).is(':checked')) {
					optValue = true;
				} else {
					optValue = false;
				}
			}
			if (inputType == 'number') { //nested
				if (optValue != null && optValue != '' && optValue >= 1) {
					optValue = parseInt(optValue);
				}
			}
			//                    var isChartHoverActive = $("#toggleButtonForchartHover" + upperChartType).hasClass('active');
			//                    if (!isChartHoverActive && optColName.includes('HOVERLABELDATA')) {
			//                        $("#" + optColName).val('none');
			//                        optValue = 'none';
			//                    } else if (optColName.includes('HOVERLABELDATA') && optValue === 'none') {
			//                        $("#" + optColName).val('x+y');
			//                        optValue = 'x+y';
			//                    }
			if (optColName.includes('HOVERLABELDATA')) {
				if (optValue !== '' && optValue !== null && optValue !== undefined) {
					if (optValue === 'none') {
						$("#toggleButtonForchartHover" + upperChartType).removeClass('active');
						$("#toggleButtonForchartHover" + upperChartType).find('.on-off-text').text('off');
					} else {
						$("#toggleButtonForchartHover" + upperChartType).addClass('active');
						$("#toggleButtonForchartHover" + upperChartType).find('.on-off-text').text('on');
					}
				}
			}
			var toggleBtnClasses = $(this).find('.toggle-btn').attr('class');
			if (toggleBtnClasses !== null && toggleBtnClasses !== '' && toggleBtnClasses !== undefined) {
				if (toggleBtnClasses.includes('active')) {
					chartConfigToggleStatus[optColName] = true;
				} else {
					chartConfigToggleStatus[optColName] = false;
				}
			}
			var isToggleActive = $(this).hasClass('active-filter');
			if (optValue != null && optValue != '' && isToggleActive) {
				chartOptAllObj[optColName] = optValue;
			} else if (optMan == 'M') {
				errorCount++;
				errorMessageStr += "<tr><td>  " + '<p class="visionGenericTabStatusDialog">' + " " + '<span style="color:blue;">' + " " + optName + "</span><b>:</b> Should not be null.</tr></td><br>";
			} else if (!isToggleActive && optColName.includes('SHOWLEGEND')) {
				chartOptAllObj[optColName] = false;
			}
		});

		$.each(chartConfigPositionKeyObj, function(key, value) {
			var newKey = key.replace(/[0-9]/g, '');
			filteredchartOptAllObj[newKey] = value;
		});
	});



}
function deleteModalChart(chartId) {
	$("#" + chartId).parent().remove();
	$("#" + chartId + "config").remove();
	autoSuggestedChartCount--;
	$("span.visionAutoSuggestionChartCountSpan").text(autoSuggestedChartCount);
}
function switchSmartBiDesignTabs(liId, divId) {
	$("#" + liId).parent().find('li.visionSmartBiDesignTabHighLight').removeClass('visionSmartBiDesignTabHighLight');
	$("#" + liId).addClass('visionSmartBiDesignTabHighLight');
	$("#visualizeArea").hide();
	$("#visionGridDataView").hide();
	$("#visionChartAutoSuggestionsViewId").hide();
	$("#visionVisualizeQueryGridId").hide();
	$("#" + divId).show();
	if (divId != null && divId != '' && divId != undefined && divId == 'visionGridDataView') {
		$("#visualizeAreaGirdData1").show();
	}
    

	if (!(divId != null && divId != '' && divId != undefined && divId == 'visionChartAutoSuggestionsViewId')) {
		$(".leftFileUploads").show();
		$(".visualizationMainDivwrapper").show();
		$("#visualizeChartAndDataArea").css("width", "70%", "!important");
		var leftFileUploadswidth = $('.leftFileUploads').width();
		var visualizationMainDivwrapperwidth = $('.visualizationMainDivwrapper').width();
		if (leftFileUploadswidth == '15%' && visualizationMainDivwrapperwidth == '15%') {
			$(".chartViewAreaClass").css("width", "70%", "!important");
			$(".chartView").css("width", "70%", "!important");
		} else if (visualizationMainDivwrapperwidth == '15%') {
			$(".chartViewAreaClass").css("width", "80%", "!important");
			$(".chartView").css("width", "80%", "!important");
		} else {
			$(".chartViewAreaClass").css("width", "95%", "!important");
			$(".chartView").css("width", "100%", "!important");
		}
		if (divId != null && divId != '' && divId != undefined && divId == 'visionVisualizeQueryGridId') {
			$('#visionVisualizeQueryGridId').jqxSplitter({ width: '100%', height: '100%', orientation: 'horizontal', panels: [{ size: 270, min: 100 }, { min: 250, size: 350 }] });
		}
	} else {
		$(".leftFileUploads").hide();
		$(".visualizationMainDivwrapper").hide();
		$("#visualizeChartAndDataArea").css("width", "99%", "!important");
		showIntelliSenseAutoSuggestions1("visionChartsAutoSuggestionUserId");
	}
	
	if(divId !=null && divId !='' && divId !=undefined && divId == 'visionVisualizeQueryGridId')
	{
		getUserEditorDefaultExistedTables();
	}
}

function changeModalGraph(event, chartId, chartType, layout, data, createcount) {
	showAutoMsgDependFlag = true;
	var parrantId = $("#" + chartId).parent().parent().attr('id');
	var result = "<div id='charttypeId' class ='charttypeId'>"
		+ "<div id='visionVisualizeBasicTabs' class='visionVisualizeChartsTabsClass'>"
		+ "<img onclick=\"getModalDashboard('pie','" + chartId + "','" + chartType + "','" + createcount + "')\" src='images/Pie.svg' class='visualDarkMode' title='Pie chart'>"
		+ "<img onclick=\"getModalDashboard('bar','" + chartId + "','" + chartType + "','" + createcount + "')\" src='images/Bar.svg' class='visualDarkMode' title='Bar chart'>"
		+ "<img onclick=\"getModalDashboard('donut','" + chartId + "','" + chartType + "','" + createcount + "')\"  src='images/Donut.svg' class='visualDarkMode' title='Donut chart'>"
		+ "<img onclick=\"getModalDashboard('column','" + chartId + "','" + chartType + "','" + createcount + "')\"  src='images/Column.svg' class='visualDarkMode' title='Column chart'>"
		+ "<img onclick=\"getModalDashboard('lines','" + chartId + "','" + chartType + "','" + createcount + "')\"  src='images/Line.svg' class='visualDarkMode' title='Line chart'>"
		+ "<img onclick=\"getModalDashboard('scatter','" + chartId + "','" + chartType + "','" + createcount + "')\"  src='images/Scatter.svg' class='visualDarkMode' title='Scatter chart'>"
		+ "<img onclick=\"getModalDashboard('scatterpolar','" + chartId + "','" + chartType + "','" + createcount + "')\"  src='images/Redar-Chart.svg' class='visualDarkMode' title='Radar chart'>"
		+ "<img onclick=\"getModalDashboard( 'funnel','" + chartId + "','" + chartType + "','" + createcount + "')\"  src='images/Funnel.svg' class='visualDarkMode' title='Funnel chart'>"
		+ "</div>";
	result += "</div>";
	$("#dxpColorPopOver").remove();
	$("#dxpCreatePopOver").html("<div id='dxpColorPopOver'></div>");
	$("#dxpColorPopOver").html(result);
	$("#dxpColorPopOver").jqxPopover('open');
	var selector = $("#" + chartId).find('.modebar-btn').find($("a[data-title='Chart Types']"));
	var select = $(selector['prevObject'][3]);
	//select.attr("id","abcdefg");
	$("#dxpColorPopOver").jqxPopover({
		//offset: {left: 0, top: 0},
		position: 'right',
		showArrow: true,
		arrowOffsetValue: 10,
		width: 150,
		//		height: 150,
		title: "graph Types",
		showCloseButton: true,
		selector: select
	});

	$("#dxpColorPopOver").jqxPopover('open');
	$("#dxpColorPopOver").addClass("graphTypesPopTabs");
	$(window).trigger('resize');
	$('#dxpColorPopOver').on('close', function() {
		$('#dxpColorPopOver').jqxPopover('close');
		$('#dxpColorPopOver').jqxPopover('destroy');
		showAutoMsgDependFlag = false;
		setTimeout(function() {
			showChartSaveByTypesSuggestion(chartId);
		}, 800);
	});

}

function getDataCorrelation(fileName) {
	$.ajax({
		type: "POST",
		url: "getDataCorrelation",
		cache: false,
		data: {
			fileName: fileName
		},
		success: function(response) {
			//TODO: Need to add Loader
			if (response != null && !jQuery.isEmptyObject(response)) {
				dataTableConfig(response);
			} else {
				var errorMessage = "Failed to get Data Correlation Response.";
				var errorMessageResponse = getErrorMessageDiv(errorMessage);
				var buttonArray = [
					{
						text: 'Close',
						click: function() {
						},
						isCloseButton: true
					}
				];
				showPopUpWithButtonFunctionCall(errorMessageResponse, buttonArray);
			}
		},
		error: function(e) {
			console.log(e);
			sessionTimeout(e);
			stopLoader();
		}
	});
}

function dataTableConfig(response) {

	//TODO: Need to add Loader
	var dataObject = response['dataObject'];
	var dataFields = response['dataFields'];
	var columns = response['columns'];
	if (isNullOrUndefined(dataObject) || jQuery.isEmptyObject(dataObject)
		|| isNullOrUndefined(dataFields) || jQuery.isEmptyObject(dataFields)
		|| isNullOrUndefined(columns) || jQuery.isEmptyObject(columns)) {
		var errorMessage = "Failed to get Data table response.";
		var errorMessageResponse = getErrorMessageDiv(errorMessage);
		var buttonArray = [
			{
				text: 'Close',
				click: function() {
				},
				isCloseButton: true
			}
		];
		showPopUpWithButtonFunctionCall(errorMessageResponse, buttonArray);

	} else {
		var source = {
			localdata: dataObject,
			dataType: "json",
			dataFields: dataFields
		}
		var dataAdapter = new $.jqx.dataAdapter(source);
		$("#someDiv").jqxDataTable({
			width: '80%',
			height: 340,
			// pageable: true,
			// pagerButtonsCount: 10,
			source: dataAdapter,
			columnsResize: true,
			columns: columns
		});
	}

}

function formatnumber(number) {
	var unitlist = ["", "K", "M", "B", "T"];
	let sign = Math.sign(number);
	let unit = 0;
	while (Math.abs(number) > 1000) {
		unit = unit + 1;
		number = Math.floor(Math.abs(number) / 10) / 100;
	}
	return sign * Math.abs(number) + unitlist[unit];
}

function getCalendarColumns(chartId, chartType, tableName) {
	$.ajax({
		type: "POST",
		url: "getDateColumns",
		cache: false,
		data: {
			tableName: tableName
		},
		success: function(response) {
			if (response != null && !jQuery.isEmptyObject(response)) {
				var result = response['result'];
				var dataColsArr = response['dataColsArr'];

				var modalObj = {
					title: labelObject['Date Columns'] != null ? labelObject['Date Columns'] : "Date Columns",
					body: result,
				};
				var buttonArray = [
					{
						text: labelObject['Ok'] != null ? labelObject['Ok'] : 'Ok',
						click: function() {
							getDateColumnsTreeMapChart(chartId, chartType, tableName);
						},
						isCloseButton: true
					}
				];
				modalObj['buttons'] = buttonArray;
				createModal("smartBiTreeDateCalendarPopup", modalObj);
				$(".visionVisualizationDragColumns").css("display", "block");
				$(".VisionImageVisualizationTableClass").css({ transform: "rotate(90deg)" });
				$(".modal-body").addClass("visionVisualizeDateColumnClass");
				/*$(".VisionImageVisualizationTableClass").unbind().click(function() {
					$(this).parent().parent().find('ul').toggle();
					if ($(this).parent().parent().find('ul').is(":visible")) {

						$(this).css({ transform: "rotate(90deg)" });
					} else {
						$(this).css({ transform: "rotate(360deg)" });
					}
				});*/
			}
		},
		error: function(e) {
			console.log(e);
			sessionTimeout(e);
			stopLoader();
		}
	});
}
function getDateColumnsTreeMapChart(chartId, chartType, tableName) {
	var filterConditions = [];
	$(".visionVisualizeChartTableColumnDateCalendarClass div").each(function() {
		var divId = $(this).attr("id");
		var fromToDate = $("#" + divId).find("span").html();
		if (fromToDate != null && fromToDate != '' && fromToDate != undefined) {
			var colName = divId.replace("_calendar", "");
			var fromToDateArr = fromToDate.split("-");
			var fromd = new Date(fromToDateArr[0]);
			var fromDateStr = $.datepicker.formatDate('dd-mm-yy', fromd);
			var tod = new Date(fromToDateArr[1]);
			var toDateStr = $.datepicker.formatDate('dd-mm-yy', tod);
			var paramObj = {};
			paramObj.colName = colName;
			paramObj.operator = "BETWEEN";
			paramObj.minvalue = fromDateStr;
			paramObj.maxvalue = toDateStr;
			filterConditions.push(paramObj);
		}
	});
	if (filterConditions != null && !jQuery.isEmptyObject(filterConditions)) {
		filterConditions = JSON.stringify(filterConditions);
	}
	var flag = 'N';
	$.ajax({
		type: 'post',
		traditional: true,
		dataType: 'html',
		cache: false,
		url: 'getChartFilterData',
		async: false,
		data: {
			chartId: chartId,
			tableName: tableName,
			chartType: chartType,
			filterConditions: filterConditions,
			flag: flag
		},
		success: function(response) {
			if (response != null && !jQuery.isEmptyObject(response)) {
				var result = JSON.parse(response);
				var dataarr = result['dataarr'];
				if (dataarr != null && dataarr != '' && dataarr != undefined) {
					var count = 0;
					for (var i = 0; i < dataarr.length; i++) {
						var XAxix = dataarr[i]['xAxix'];
						var yAxix = dataarr[i]['yAxix'];
						var type = dataarr[i]['type'];
						var table = dataarr[i]['table'];
						var id = dataarr[i]['chartid'];
						var Lebel = dataarr[i]['Lebel'];
						var aggColumnName = dataarr[i]['aggColumnName'];
						var chartPropObj = dataarr[i]['chartPropObj'];
						var chartConfigObj = dataarr[i]['chartConfigObj'];
						var labelLegend = dataarr[i]['labelLegend'];
						var filterCondition = dataarr[i]['filterCondition'];
						if (filterCondition != null && filterCondition != '' && filterCondition != undefined) {
							filterCondition = JSON.parse(filterCondition);
							if (filterCondition != null && !jQuery.isEmptyObject(filterCondition)) {
								if (filterConditions != null && filterConditions != '' && filterConditions != undefined) {
									filterConditions = JSON.parse(filterConditions);
									for (var key in filterCondition) {
										var paramObj = filterCondition[key];
										filterConditions.push(paramObj);
									}
									if (filterConditions != null && !jQuery.isEmptyObject(filterConditions)) {
										filterConditions = JSON.stringify(filterConditions);
									}
								}
							}
						}
						if (XAxix != null && XAxix != '' && yAxix != null && yAxix != '' && type != 'Card') {
							var chartid = id;
							var chartExtendPropObj = $("#" + chartid + "_options").val();
							if (chartExtendPropObj != null && chartExtendPropObj != '' && chartExtendPropObj != undefined) {
								chartPropObj = chartExtendPropObj;
							}
							$("#" + chartid + "_filter").val(filterConditions);
							getVisualizeChart(chartid, chartType, XAxix, yAxix, table, aggColumnName, filterConditions, chartPropObj, chartConfigObj, count, labelLegend);
						}

					}
				}


			}
		},
		error: function(e) {
			sessionTimeout(e);
		}
	});
}
var dataCol = "";
function getDateColumnCalendar(tableName, columnName) {
	$('#' + columnName + "_calendar").show();
	var start = moment().subtract(29, 'days');
	var end = moment();
	$('#' + columnName + "_calendar").daterangepicker({
		startDate: start,
		endDate: end,
		alwaysShowCalendars: true,
		ranges: {
			'Today': [moment(), moment()],
			'Yesterday': [moment().subtract(1, 'days'), moment().subtract(1, 'days')],
			'Last 7 Days': [moment().subtract(6, 'days'), moment()],
			'This Month': [moment().startOf('month'), moment().endOf('month')],
			'Last Month': [moment().subtract(1, 'month').startOf('month'), moment().subtract(1, 'month').endOf('month')]
		}
	}, columnDateRangePicker);
	dataCol = columnName;
	columnDateRangePicker(start, end);
	$('#' + columnName + "_calendar").mousedown(function(event) {
		dataCol = columnName;
	});

}
function columnDateRangePicker(start, end) {
	$("#" + dataCol + "_calendar span").html(start.format('MMMM D, YYYY') + ' - ' + end.format('MMMM D, YYYY'));

}

function positionChartLegend(chartType, chartId, colors, chartlabels, data, layout, config) {
	var n =0;
	if(colors !=null && !jQuery.isEmptyObject(colors) && colors.length>0){
		 n = colors.length;
	}
	if (chartType != null && chartType != '' && chartType != undefined && (chartType == 'donut' || chartType == 'pie')) {
        var html = "<div class='pieLegends' id='" + chartId + "_legends' >";
        $.each(chartlabels, function (i) {
            html += "<div class='pieLegendLabelItem' lable-index='" + i + "' legend-color-code='" + colors[i % n] + "' ><div style='height:12px;width:12px;background-color:" + colors[i % n] + ";' ></div><span>" + this + "</span></div>";
        })
        html += "</div>";
        $("#" + chartId + "_legends").remove();
        //$("#" + chartId).append(html);
        $(html).insertAfter($("#" + chartId));
    }

	$("#" + chartId).parent().find(".pieLegendLabelItem").click(function(event) {

		var graphdata = document.getElementById(chartId)

		var graphdata = graphdata.data; // => current data
		var graphchartlabels = graphdata[0]['labels'];
		var graphchartValues = graphdata[0]['values'];
		//var layout = graphdata.layout;

		if (!$(event.currentTarget).hasClass("filteredLegend")) {

			var newdata = JSON.parse(JSON.stringify(graphdata));
			$(event.currentTarget).addClass("filteredLegend");
			var label = $(event.currentTarget).find("span").text();
			var index = graphchartlabels.indexOf(label);
			newdata[0]['labels'].splice(index, 1);
			newdata[0]['values'].splice(index, 1);

			var colorcode = $(event.currentTarget).attr("legend-color-code");
			var colorcodeindex = newdata[0]['marker']['colors'].indexOf(colorcode);
			newdata[0]['marker']['colors'].splice(colorcodeindex, 1);
			Plotly.newPlot(chartId, newdata, layout, config);

		} else {
			$(event.currentTarget).removeClass("filteredLegend");
			var filteredLegends = $("#" + chartId).find(".filteredLegend");

			var newdata = JSON.parse(JSON.stringify(data));

			$.each(filteredLegends, function(indx) {
				var label = $(this).find("span").text();
				var index = newdata[0]['labels'].indexOf(label);
				newdata[0]['labels'].splice(index, 1);
				newdata[0]['values'].splice(index, 1);
				var colorcode = $(this).attr("legend-color-code");
				var colorcodeindex = newdata[0]['marker']['colors'].indexOf(colorcode);
				newdata[0]['marker']['colors'].splice(colorcodeindex, 1);
			})

			Plotly.newPlot(chartId, newdata, layout, config);

		}

	})
}
function viewAnalyticsTableData() {
	var parentItem = $('#ivisualizationConnections').jqxTree('getSelectedItem');
	var tableName = parentItem.label;
	var data = {
		startIndex: 0,
		endIndex: 50,
		tableName: tableName,
		analytics: "Y"
	};
	viewAnalyticsTableDataGrid(data);
}
function viewAnalyticsTableDataGrid(data) {
	showLoader();
	var tableName = data.tableName;
	$.ajax({
		type: "post",
		traditional: true,
		dataType: 'json',
		url: 'viewAnalyticsTableGrid',
		cache: false,
		data: data,

		success: function(response) {

			if (response != null) {
				// var responseObj = JSON.parse(response);
				var dataArray = response['dataArray'];
				var dataFieldsArray = response['dataFieldsArray'];
				var columnsArray = response['columnsArray'];
				var totalCount = response['totalCount'];
				var gridId = ("divGrid-" + tableName).replace(/\s/g, '');
				gridId = gridId.replace(/\//g, '');
				var tabIndex = -1;
				var tabTitles = $('#visualizeTablesGridData').find('.jqx-tabs-title');
				tabTitles.each(function(index) {
					if ($(this).text() === tableName) {
						tabIndex = index;
						return false; // Exit the loop if tab is found
					}
				});

				if (tabIndex !== -1) {
					// Tab already exists, remove it first
					$('#visualizeTablesGridData').jqxTabs('removeAt', tabIndex);
				}

				var selectedItemIndex = $('#visualizeTablesGridData').jqxTabs('selectedItem');
				var buttons = response['buttons'];
				if (selectedItemIndex == undefined) {

					//$("#designViewTab").jqxTabs('select', 1);
					switchSmartBiDesignTabs("li_contentView", "visionGridDataView");
					$("#visionSmartBiGridDataId").hide();
					$("#visualizeTablesGridData").show();
					$("#visualizeTablesGridData").prepend("<ul></ul>");
					$("#visualizeTablesGridData ul").prepend("<li title='" + tableName + "'>" + tableName + "</li>");
					$("#visualizeTablesGridData").append("<div><div class=\'visulizeGridPagrClass\'><img src='images/refresh_icon.png' style='width:18px;height: 18px;cursor:pointer;padding-left:3px;' onclick=refreshTableGrid('" + gridId + "') title='Refresh'>"+buttons+"</div><div id='" + gridId + "' style='position: absolute; top:70px;display:block;'></div></div>"); // ravi edit for tabs navigation
					$('#visualizeTablesGridData').jqxTabs({ width: "100%", height: "100%",  theme: 'summer', reorder: true });
					

					$('#visualizeTablesGridData').jqxTabs('showAllCloseButtons');
					$("#visualizeTablesGridData").find("li.jqx-tabs-title").find("div.jqx-tabs-close-button").css("background-image", "url(images/close.png)");
					$("#visualizeTablesGridData").find("li.jqx-tabs-title-selected-top").find("div.jqx-tabs-close-button").css("background-image", "url(images/close_white.png)");
                   // $("#"+gridId).css("display","block","!important");


				} else {
					switchSmartBiDesignTabs("li_contentView", "visionGridDataView");
					if($("#"+gridId).length>0)
					{
						var tabLength = $('#visualizeTablesGridData').jqxTabs('length');
						for(var tabLen=0;tabLen<tabLength;tabLen++)
						{
							var tabTitle = $('#visualizeTablesGridData').jqxTabs('getTitleAt', tabLen);
							if(tableName == tabTitle)
							{
							   $('#visualizeTablesGridData').jqxTabs('select',tabLen);
							   stopLoader();	
							   return;
							}
						}
					}else{
					  $('#visualizeTablesGridData').jqxTabs('addLast', tableName, '<div><div class=\'visulizeGridPagrClass\'><img src="images/refresh_icon.png" style="width:18px;height: 18px;cursor:pointer;padding-left:3px;" onclick=refreshTableGrid("' + gridId + '") title="Refresh">'+buttons+'</div></div><div id="' + gridId + '"></div>'); // ravi edit for tabs navigation
				    }
				}
				
                data['getOnlyDataArray'] = "Y";

				var source =
				{
					type: 'POST',
					//                                                async: false,
					datatype: "json",
					datafields: dataFieldsArray,
					data: data,
					url: 'viewAnalyticsTableGridData',
					cache: false,
					root: 'Rows',
					processdata: function(data) {
						showLoader();
						data['getOnlyDataArray'] = 'Y';

					},
					beforeSend: function() {
						//showLoader();

					}, loadError: function(xhr, status, error) {
						$('#visualizeTablesGridData').css("width", "100%");
						stopLoader();
					}, loadComplete: function(data) {
						$('#visualizeTablesGridData').css("width", "100%");
						
						stopLoader();

					},
					beforeprocessing: function(data) {

						source.totalrecords = data[data.length - 1];

					},
					sort: function() {
						//                                                $("#" + gridResultObj['gridId'] + "_sort_columns").remove();
						$("[id='" + gridId + "']").jqxGrid('updatebounddata', 'sort');
						try {
							$("[id='" + gridId + "']").jqxGrid('clearselection');
						} catch (e) {
						}

					},
					filter: function() {

						$("[id='" + gridId + "']").jqxGrid('updatebounddata', 'filter');
						try {
							$("[id='" + gridId + "']").jqxGrid('clearselection');
						} catch (e) {
						}

					}
				};
				//                var source =
				//                        {
				//                            localdata: dataArray,
				//                            datatype: "array",
				//                            datafields: dataFieldsArray
				//                        };
				var dataAdapter = new $.jqx.dataAdapter(source);

				$("[id='" + gridId + "']").jqxGrid(
					{
						width: "100%",
						height: "90%",
						theme: 'energyblue',
						autoshowloadelement: false,
						source: dataAdapter,
						pageable: true,
						pagesize: 50,
						showfilterrow: true,
						filterable: true,
						sortable: true,
						virtualmode: true,
						columnsreorder: true,
						pagesizeoptions: ['50', '100', '500'],
						rendergridrows: function(params) {
							return params.data;
						},
						 selectionmode: 'checkbox',
						columnsresize: true,
						columns: columnsArray
					});



               

				$('#visualizeTablesGridData').unbind('selected').on('selected', function(event) {
					var $thid = this;

					$('#visualizeTablesGridData').jqxTabs('getContentAt', event.args.item);

					$("#visualizeTablesGridData").find("li.jqx-tabs-title").find("div.jqx-tabs-close-button").css("background-image", "url(images/close.png)");
					$("#visualizeTablesGridData").find("li.jqx-tabs-title-selected-top").find("div.jqx-tabs-close-button").css("background-image", "url(images/close_white.png)");
                    
				
				});
				$("#" + gridId).on('columnclick', function(event) {
				var args = event.args;
				var dataField = args.datafield;
				var dataField1 = args.text;
				var rowIndex = args.rowindex;
				var cellValue = args.value;
				//var column = $('#visualizeAreaGirdData1').jqxGrid('getcolumn', event.args.datafield).text;
				var gridId123 = '#' + gridId;
					var menuItems = "";

					menuItems += "<li><input type='button' id='renameId' value='Rename Column'  onclick=renameColumnValue('" + dataField + "','" + tableName + "','" + gridId123 + "')></li>";
					menuItems += "<li><input type='button' value='Function' onclick=selectType('" + dataField + "','" + tableName + "','" + gridId123 + "')></li>";
					menuItems += "<li><input type='button' value='Suffix Value' onclick=suffixValue('" + dataField + "','" + tableName + "','" + gridId123 + "')></li>";
					menuItems += "<li><input type='button' value='Prefix Value' onclick=prefixValue('" + dataField + "','" + tableName + "','" + gridId123 + "')></li>";
					menuItems += "<li><input type='button' value='Find Value' onclick=createFind('" + dataField + "','" + tableName + "','" + gridId123 + "')></li>";
					menuItems += "<li><input type='button' value='Remove Duplicates' onclick=deleteDuplicate('" + dataField + "','" + tableName + "','" + gridId123 + "')></li>";
$("#jqxMenu").remove();
				$("#VisualizePageBody").append("<div id='jqxMenu'><ul></ul></div>");
				$("#jqxMenu ul").html(menuItems);
				var contextMenu = $("#jqxMenu").jqxMenu({ width: '120px', height: '150px', autoOpenPopup: false, mode: 'popup' });

				var scrollTop = $(window).scrollTop();
				var scrollLeft = $(window).scrollLeft();

				contextMenu.jqxMenu('open', parseInt(event.args.originalEvent.clientX) + 5 + scrollLeft, parseInt(event.args.originalEvent.clientY) + 5 + scrollTop);
				return false;
			});

				$('#visualizeTablesGridData').unbind('add').on('add', function(event) {

					$("#visualizeTablesGridData").find("li.jqx-tabs-title").find("div.jqx-tabs-close-button").css("background-image", "url(images/close.png)");
					//                    $("#visualizeTablesGridData").find("li.jqx-tabs-title-selected-top").find("div.jqx-tabs-close-button").css("background-image", "url(images/close_white.png)");
					setTimeout(function() {
						$("#visualizeTablesGridData").find("li.jqx-tabs-title-selected-top").find("div.jqx-tabs-close-button").css("background-image", "url(images/close_white.png)");

					}, 100);
					var selectedTabTitle = $("#visualizeTablesGridData").jqxTabs("getTitleAt", event.args.item);
					$("#visualizeTablesGridData").jqxTabs('setTitleAt', event.args.item, selectedTabTitle.split(".")[1]);
					var selectedTabLi = $("#visualizeTablesGridData").find("li.jqx-tabs-title-selected-top");
					selectedTabLi.attr("title", selectedTabTitle);

					var selectedItem = $('#visualizeTablesGridData').jqxTabs('selectedItem'); // ravi edit for tabs issue
					$('#visualizeTablesGridData').jqxTabs('ensureVisible', selectedItem); // ravi edit for tabs issue


				});



			}

		},
		error: function(e) {
			stopLoader();
			sessionTimeout(e);
		}

	});

}

function getSankeyChart(chartId, result, count, chartType, saveType) {
	chartType = 'sankey';
	var chartUpper = chartType.toUpperCase();
	var chartTitle = $("#" + chartUpper + "TITLEECHARTS").val();
	$("#visionVisualizeChartId" + count).remove();
	var sankeyChartId = "visionVisualizeChart" + count;
	var sankeyChartHomeId = "visionVisualizeChartHome" + count;
	$("#" + sankeyChartId).append("<div id='visionVisualizeChartId" + count + "' type='" + chartType + "' count='" + count + "' class='visionVisualChartBoxClass visionVisualChartBoxSelected'></div>")
	$("#" + chartId).css("width", "1000px", "!important");
	$("#" + chartId).css("height", "350px", "!important");
	$("#" + sankeyChartId).css("width", "1000px", "!important");
	$("#" + sankeyChartId).css("height", "600px", "!important");
	if ($("#" + chartId).parent().parent().hasClass("homeChartWrapDiv")) {
		$("#" + chartId).parent().parent().attr("class", "col-md-6 col-sm-6 col-lg-12 homeChartWrapDiv treeMapMainDiv");
	}
	$("#" + sankeyChartHomeId).addClass("visionVisualChartBoxClass");
	var dom = document.getElementById(chartId);
	var myChart = echarts.init(dom, null, {
		renderer: 'canvas',
		useDirtyRect: false
	});
	var data = result['data'];
	var links = result['links'];
	var optionObjectEcharts = result['layout'];
	if (chartTitle === undefined || chartTitle === '' || chartTitle === null) {
		chartTitle = optionObjectEcharts['text'];
	}
	var tableName = result['tableName'];



	var option = {
		tooltip: {
			trigger: 'item',
			triggerOn: 'mousemove'
		},
		animation: false,
		series: {
			type: 'sankey',
			data: data,
			emphasis: {
				focus: 'adjacency'
			},
			links: links,
			label: {
				position: 'top'
			},
			lineStyle: {
				color: 'source',
				curveness: 0.5
			}
		},
		title: {
			text: chartTitle,
			left: "center",
			padding: [10, 0],
			textStyle: {
				fontSize: 14,
				fontWeight: "normal"
			}
		}

	};
	if (!(saveType != null && saveType != '' && saveType != undefined)) {    
          getToolBox(chartId, chartType, tableName,"",result,count,Object.keys(result.data).length) ;
	}



	if (option && typeof option === 'object') {
		myChart.setOption(option);
	}

}

function getChartLabelOrHoverDataFormatter(chartTemplateType, traceObject, chartValuesDataArr, plotlyChartLabelType, dataLabelType, dataValueType, isCurrencyConversionEvent, currencySymbolmethodArgu) {
	var currencySymbol = $("#toCurrencyDropDown_jqxDropDownList option:selected").attr('data-currencySymbol');
	if (currencySymbol === undefined || currencySymbol === '' || currencySymbol === null && isCurrencyConversionEvent) {
		currencySymbol = currencySymbolmethodArgu;
	}
	var sumOfChartValuesData = chartValuesDataArr.reduce((a, b) => a + b);
	if (plotlyChartLabelType !== null && plotlyChartLabelType !== ""
		&& plotlyChartLabelType !== undefined) {
		if (plotlyChartLabelType === "label" || plotlyChartLabelType === "x") {
			var chartFormatter = '%{' + dataLabelType + '}';
			traceObject[chartTemplateType] = chartFormatter;
		} else if (plotlyChartLabelType === "value" || plotlyChartLabelType === "y") {
			var chartFormatter;
			if (isCurrencyConversionEvent) {
				chartFormatter = '<span>' + currencySymbol + '</span>%{' + dataValueType + ':.2f}';
			} else {
				chartFormatter = '%{' + dataValueType + '}';
			}
			traceObject[chartTemplateType] = chartFormatter;
		} else if (plotlyChartLabelType === "percent" || plotlyChartLabelType === "%") {
			traceObject['customdata'] = chartValuesDataArr.map((element) => {
				return (element / sumOfChartValuesData) * 100;
			});
			var chartFormatter = '%{customdata:.2f}%';
			traceObject[chartTemplateType] = chartFormatter;
		} else if (plotlyChartLabelType === "label+value" || plotlyChartLabelType === "x+y") {
			var chartFormatter;
			if (isCurrencyConversionEvent) {
				//				chartFormatter = '(%{' + dataLabelType + '},<span>' + currencySymbol + '</span>%{' + dataValueType + ':.2f})';
				chartFormatter = '%{' + dataLabelType + '}<br><span>' + currencySymbol + '</span>%{' + dataValueType + ':.2f}';
			} else {
				//				chartFormatter = '(%{' + dataLabelType + '},%{' + dataValueType + '})';
				chartFormatter = '%{' + dataLabelType + '}<br>%{' + dataValueType + '}';
			}
			traceObject[chartTemplateType] = chartFormatter;
		} else if (plotlyChartLabelType === "label+percent" || plotlyChartLabelType === "x+%") {
			//			var chartFormatter = '(%{' + dataLabelType + '},%{' + dataValueType + '}%)';
			traceObject['customdata'] = chartValuesDataArr.map((element) => {
				return (element / sumOfChartValuesData) * 100;
			});
			var chartFormatter = '%{' + dataLabelType + '}<br>%{customdata:.2f}%';
			traceObject[chartTemplateType] = chartFormatter;
		} else if (plotlyChartLabelType === "value+percent" || plotlyChartLabelType === "y+%") {
			traceObject['customdata'] = chartValuesDataArr.map((element) => {
				return (element / sumOfChartValuesData) * 100;
			});
			var chartFormatter;
			if (isCurrencyConversionEvent) {
				//				chartFormatter = '(%{' + dataLabelType + '},<span>' + currencySymbol + '</span>%{' + dataValueType + ':.2f})';
				chartFormatter = '<span>' + currencySymbol + '</span>%{' + dataValueType + ':.2f}<br>%{customdata:.0f}%';
			} else {
				//				chartFormatter = '(%{' + dataLabelType + '},%{' + dataValueType + '})';
				chartFormatter = '%{' + dataValueType + '}<br>%{customdata:.2f}%';
			}
			traceObject[chartTemplateType] = chartFormatter;
		}

		if (chartTemplateType !== undefined && chartTemplateType !== '' && chartTemplateType == 'hovertemplate') {
			traceObject[chartTemplateType] = traceObject[chartTemplateType] + '<extra></extra>';
		}
	} else {
		var chartFormatter;
		if (isCurrencyConversionEvent) {
			//				chartFormatter = '(%{' + dataLabelType + '},<span>' + currencySymbol + '</span>%{' + dataValueType + ':.2f})';
			chartFormatter = '%{' + dataLabelType + '}<br><span>' + currencySymbol + '</span>%{' + dataValueType + ':.2f}';
		} else {
			//				chartFormatter = '(%{' + dataLabelType + '},%{' + dataValueType + '})';
			chartFormatter = '%{' + dataLabelType + '}<br>%{' + dataValueType + '}';
		}
		traceObject[chartTemplateType] = chartFormatter;
	}
	return traceObject;
}

function showCurrencyConversionPopup(chartId, count, chartType) {
	$.ajax({
		dataType: 'html',
		type: "POST",
		url: "getCurrencyAndCode",
		cache: false,
		data: {},
		success: function(response) {
			if (response != null && !jQuery.isEmptyObject(response)) {
				var currencyConversionDiv = "<div id='currencyConversionMain' class='currencyConversionMain'>" + response + "</div>";
				var buttonArray = [
					{
						text: 'Apply',
						click: function() {
							$("#isCurrencyConversionEvent").val("true");
							getChart(chartId, count, chartType);
						},
						isCloseButton: true
					},
					{
						text: 'Close',
						click: function() {
						},
						isCloseButton: true
					}
				];
				showPopUpWithButtonFunctionCall(currencyConversionDiv, buttonArray);
				$("#fromCurrencyDropDown").jqxDropDownList({
					//					width: 200,
					height: 30,
					theme: 'energyblue',
					filterable: true,
					filterHeight: 30,
					dropDownHeight: 200
				});
				$("#toCurrencyDropDown").jqxDropDownList({
					//					width: 200,
					height: 30,
					theme: 'energyblue',
					filterable: true,
					filterHeight: 30,
					dropDownHeight: 200
				});
				$("#modalDailogDiv .modal-dialog").addClass("modal-md");
			} else {

			}
		},
		error: function(e) {
			console.log(e);
			sessionTimeout(e);
			stopLoader();
		}
	});
}

function showPopUpWithButtonFunctionCall(message, buttonArray,title) {
	var modalObj = {
		title: title !=null ? title:"Message",
		body: message
	};
	modalObj['buttons'] = buttonArray;
	$("#modalDailogDiv").remove();
	$("body").append("<div id='modalDailogDiv'></div>");
	createModal("modalDailogDiv", modalObj);
}

function deleteHomePageAutoSuggestionsCharts() {
	$("#modalFileCharts").remove();
	autoSuggestedChartCount = 0;
	$("span.visionAutoSuggestionChartCountSpan").text(autoSuggestedChartCount);
	$("#visionVisualizationDataChartViewFilterId").empty();


}
function filterHomePageAutoSuggestionsCharts(replyId) {
	showLoader();
	var tableName = $("#autoSuggestedTableName").val();
	$.ajax({
		type: "POST",
		url: "getAutoSuggestedFilterTables",
		cache: false,
		dataType: 'json',
		data: {
			tableName: tableName
		},
		success: function(response) {
			console.log(response);
			stopLoader();
			if (response != null && response != '') {
				var result = response['result'];
				var Resultstr = response['resultStr'];
				var count = 0;
				var filterDivId = "<div id='visionVisualizeHomeChartFilters' class='visionVisualizeHomeChartFiltersClass'>"
					+ "<div id='visionVisualizeHomeChartFiltersField' class='visionVisualizeChartFiltersFieldClass'/>"
					+ "<span class='visionVisualizeHomeChartFiltersFieldSpanClass'>Add Fields Here</span></div>"
					+ "<div id='visionVisualizeHomeChartFiltersValues' class='visionVisualizeHomeChartFiltersValuesClass'/></div>"
					+ "</div>";

				$("#dialog").html(Resultstr);
				$("#dialog").dialog({
					title: (labelObject['Message'] != null ? labelObject['Message'] : 'Message'),
					width: 650,
					maxWidth: 650,
					height: 400,
					maxHeight: 1000,
					fluid: true,
					buttons: [{
						text: (labelObject['Apply'] != null ? labelObject['Apply'] : 'Apply'),
						click: function() {
							updateAutoSuggestedHomeCharts(tableName,replyId);
							$(this).html("");
							$(this).dialog("close");
							$(this).dialog("destroy");
						}

					},
					{
						text: (labelObject['Cancel'] != null ? labelObject['Cancel'] : 'Cancel'),
						click: function() {
							$(this).html("");
							$(this).dialog("close");
							$(this).dialog("destroy");

						}
					}],
					open: function() {
						$("#visualizeChartHomeSlicerData").append(filterDivId);
						$("#VisualizeBIHomeSlicerColumns").append(result);
						$(".VisionImageVisualizationHomeTableClass").unbind().click(function() {
							$(this).parent().parent().find('ul').toggle();
							if ($(this).parent().parent().find('ul').is(":visible")) {

								$(this).css({ transform: "rotate(90deg)" });
							} else {
								$(this).css({ transform: "rotate(360deg)" });
							}
						});


						var tableNameId = "visionVisualizeHomeChartTableToggleClass li";
						$('.' + tableNameId).draggable({//cube changes 
							revert: "invalid",
							helper: "clone"

						});

						$('[id^="visionVisualizeHomeChartFiltersField"]').droppable({//filters field
							revert: "invalid",
							refreshPositions: true,
							cursor: 'move',
							drop: function(event, ui) {
								if ($("#" + this.id).is(':visible')) {
									var id = ui.draggable[0].id;
									var label = ui.draggable[0].innerText;
									if (id != null && id != '' && id != undefined) {
										id = id.replace("_" + label, "");
									}
									var divid = this.id;
									if (divid != null && divid != '' && divid != undefined) {
										$("#Loader").css("display", "block");
										$("body").css({ "pointer-events": "auto" });
										if (label != null && label != '' && label != undefined && label.indexOf("DATE") > -1) {
											var calendarId = "<div id='" + label + "_calendar' class='visionVisualizeHomeAutoSuggestedDateFilterClass' style=\"background: #fff; cursor: pointer; padding: 5px 10px; border: 1px solid #ccc;display:none\"><i class=\"fa fa-calendar\"></i><span></span><i class=\"fa fa-caret-down\"></i></div>";
											$("#visionVisualizeHomeChartFiltersValues").prepend(calendarId);
											getDateColumnCalendar(id, label);
											$("#Loader").css("display", "none");
											$(".daterangepicker").addClass("editDateCalendar");
										} else {
											addHomechartSlicerValues('visionVisualizeHomeChartFiltersValues', id, label, divid, filterCount);
										}
										filterCount++;
									}


								}
							}

						});
						$("#Loader").css("display", "none");
						$("body").css({ "pointer-events": "auto" });
						$(".visionVisualizationDragColumns").addClass('visionVisualizationDragFilterColumns');
						$("#dialog").addClass('filterPopUp');
						$(".ui-dialog").addClass('homePageDDSlicer');
						$(".ui-dialog").css("z-index", "9999"); //jaggu 
					},
					beforeClose: function(event, ui) {

					}
				});
			}


		},
		error: function(e) {
			console.log(e);
			sessionTimeout(e);
			stopLoader();
		}
	});
}

function updateAutoSuggestedHomeCharts(tableName,replyId) {
	var filtersId = "visionVisualizeHomeChartFiltersValues";
	var filterConditions = [];
	$('#' + filtersId + " div.visionVisualizeHomeAutoSuggestedDateFilterClass").unbind().each(function() {
		var divId = $(this).attr("id");
		var fromToDate = $("#" + divId).find("span").html();
		if (fromToDate != null && fromToDate != '' && fromToDate != undefined) {
			var colName = divId.replace("_calendar", "");
			var fromToDateArr = fromToDate.split("-");
			var fromd = new Date(fromToDateArr[0]);
			var fromDateStr = $.datepicker.formatDate('dd-mm-yy', fromd);
			var tod = new Date(fromToDateArr[1]);
			var toDateStr = $.datepicker.formatDate('dd-mm-yy', tod);
			var paramObj = {};
			paramObj.colName = colName;
			paramObj.operator = "BETWEEN";
			paramObj.minvalue = fromDateStr;
			paramObj.maxvalue = toDateStr;
			filterConditions.push(paramObj);
		}
	});



	$('#' + filtersId + ' div.visionVisualizeHomeChartSlicerFieldDivClass').each(function(i, ele) {
		//        var colName = $(this).children('div:nth-child(1)').children('div:nth-child(1)').find("span").text();
		var colName = $(this).children('div:nth-child(1)').children('div:nth-child(1)').find("input").val();
		var operator = $(this).children('div:nth-child(1)').children('div:nth-child(2)').find("select").val();
		var values = $(this).children('div:nth-child(2)').find('input[name="visionVisualizeHomeChartSlicerValuesCheckName"]:checked').map(function() {
			return this.value;
		}).get().join(",");
		if (!(values != null && values != '' && values != undefined)) {
			var checkId = $(this).children('div:nth-child(2)');
			var checkValues = $("#" + checkId[0]['id']).jqxListBox('getCheckedItems');
			values = [];
			$.each(checkValues, function(index) {
				values.push(this.value);
			});
			if (values != null && !jQuery.isEmptyObject(values)) {
				values = values.toString();
			}
		}
		var filterObj = {};
		filterObj['colName'] = colName;
		filterObj['operator'] = operator;
		filterObj['values'] = values;
		filterConditions.push(filterObj);
		alert("values");
	});
	autoSuggestedChartCount = 0;




	var dataArr = [];
	if ($.trim($('#modalFileCharts').html())) {
		var createcount = 0;
		$("#modalFileCharts div.visionVisualizeModalChartClass").each(function() {
			var divId = $(this).attr("id");
			var childIds = $("#" + divId).children("div[id]");
			var chartId = childIds[0]['id'];
			if (chartId != null && chartId != '' && chartId != undefined) {
				var dataObj = $("#" + chartId).attr("dataObj");
				if (dataObj != null && dataObj != '' && dataObj != undefined) {
					dataObj = JSON.parse(dataObj);
					if (dataObj != null && !jQuery.isEmptyObject(dataObj)) {
						dataObj['filterConditions'] = JSON.stringify(filterConditions);
						var axisColumns = dataObj['axisColumns'];
						var valueColumns = dataObj['valuesColumns'];
						var tablesObj = dataObj['tablesObj'];
						var chartType = dataObj['chartType'];
						var axisColumnName = dataObj['axisColumnName'];
						var chartOptAllObj = dataObj["chartPropObj"];
						var filteredchartOptAllObj = dataObj["chartConfigPositionKeyStr"];
						var chartConfigToggleStatus = dataObj["chartConfigToggleStatus"];
						$("#" + chartId).attr("dataObj", JSON.stringify(dataObj));
						if (axisColumns != null && axisColumns != '' && axisColumns != undefined) {
							axisColumns = JSON.parse(axisColumns);
						}
						if (valueColumns != null && valueColumns != '' && valueColumns != undefined) {
							valueColumns = JSON.parse(valueColumns);
						}
						if (tablesObj != null && tablesObj != '' && tablesObj != undefined) {
							tablesObj = JSON.parse(tablesObj);
						}
						getModalChartSuggestions(chartId, dataObj, valueColumns, axisColumns, tablesObj, createcount,
							axisColumnName, chartType, chartOptAllObj, filteredchartOptAllObj, chartConfigToggleStatus);
						autoSuggestedChartCount++;
						createcount++;
					}
				}
			}
		});
       showNextConversationAiMessage(replyId);           
	}

}


function saveHomePageAutoSuggestionsCharts(replyId) {
	var dataArr = [];
	if ($.trim($('#modalFileCharts').html())) {
		$("#modalFileCharts div.visionVisualizeModalChartClass").each(function() {
			var divId = $(this).attr("id");
			var childIds = $("#" + divId).children("div[id]");
			var chartId = childIds[0]['id'];
			if (chartId != null && chartId != '' && chartId != undefined) {
				var dataObj = $("#" + chartId).attr("dataObj");
				if (dataObj != null && dataObj != '' && dataObj != undefined) {
					dataObj = JSON.parse(dataObj);
					dataArr.push(dataObj);
				}
			}
		});
		if (dataArr != null && dataArr != '' && !jQuery.isEmptyObject(dataArr)) {
			$.ajax({
				url: 'getdashbordname',
				type: "POST",
				dataType: 'html',
				traditional: true,
				cache: false,
				success: function(response) {
					if (response != null && !jQuery.isEmptyObject(response)) {
						var dashBoardArrFromDB = JSON.parse(response);
					var jqxddl = "<div id='dropDownDashBoardList'></div>";
 					jqxddl += "<div id='textReason'><textarea id='reasonId' class='visionDeleteReason' style='display:none' placeholder='Please type a new dashboard name ...'></textarea><br></div>";
					jqxddl += "<div id='dailog_error_id' style='display:none;color:red'>" + (labelObject['Please give any DashBoard Name'] != null ? labelObject['Please give any DashBoard Name'] : 'Please give any DashBoard Name') + "</div>";
					$("#dialog").html(jqxddl);

					$("#dialog").dialog({
							title: (labelObject['DashBoard Name'] != null ? labelObject['DashBoard Name'] : 'DashBoard Name'),
							modal: true,
							height: 'auto',
							minWidth: 300,
							maxWidth: 'auto',
							fluid: true,
							buttons: [{
								text: (labelObject['Ok'] != null ? labelObject['Ok'] : 'Ok'),
								click: function() {
									var dashBoardName = $("#dashbordNameId").val();
									if (!(dashBoardName != null && dashBoardName != '' && dashBoardName != undefined) || dashBoardName == 'New') {
										dashBoardName = $("#reasonId").val();
									}
									if (dashBoardName != null && dashBoardName != '' && dashBoardName != undefined && dashBoardName != 'Select' && dashBoardName != 'New') {
										$("#dailog_error_id").hide();
										$(this).html("");
										$(this).dialog("destroy");
										$.ajax({
											url: 'saveVisualizeData',
											type: "POST",
											data:
											{
												'data': JSON.stringify(dataArr),
												'dashBoardName': dashBoardName
											},
											traditional: true,
											cache: false,
											success: function(response) {
												console.log("testing");
												var msg = " Charts " + response;
												var modalObj = {
													title: 'Save',
													body: msg
												};
												var buttonArray = [
													{
														text: 'Close',
														click: function() {
														},
														isCloseButton: true
													}
												];
												modalObj['buttons'] = buttonArray;
												createModal("dataDxpSplitterValue", modalObj);
												$(".modal-dialog").addClass("opacity-animate3");
												$("#modalFileCharts").remove();
												autoSuggestedChartCount = 0;
												if(replyId !=null && replyId !='' && replyId !=undefined){
													showNextConversationAiMessage(replyId);
												}
												$("#visionVisualizationDataChartViewFilterId").empty();
												$("span.visionAutoSuggestionChartCountSpan").text(autoSuggestedChartCount);
											}, error: function(e) {
												sessionTimeout(e);
											}
										});
									} else {
										$("#dailog_error_id").show();
									}
								}
							},
							{
								text: (labelObject['Cancel'] != null ? labelObject['Cancel'] : 'Cancel'),
								click: function() {
									$(this).html("");
									$(this).dialog("destroy");
								}
							}],
							open: function() {
								
								                       $("#dropDownDashBoardList").jqxDropDownList({
									source: dashBoardArrFromDB,
									theme: 'energyblue',
									width: '200px',
									height: '30px',
									filterable: true,
								});
								$("#dropDownDashBoardList").jqxDropDownList('selectItem', 'Select');
								$("#dropDownDashBoardList").unbind('change').on('change', function(event) {
									var selectedItem = event.args.item;
									if (selectedItem) {
										var selectedValue = selectedItem.value;
										if (selectedValue === 'New') {

											$("#reasonId").show();
										} else {
											$("#reasonId").hide();
										}
									}
								});
								
								$(this).closest(".ui-dialog").find(".ui-button").eq(1).addClass("dialogyes");
								$(this).closest(".ui-dialog").find(".ui-button").eq(2).addClass("dialogno");
								$(".visionHeaderMain").css("z-index", "999");
								$(".visionFooterMain").css("z-index", "999");
							},
							beforeClose: function(event, ui) {
								$(".visionHeaderMain").css("z-index", "99999");
								$(".visionFooterMain").css("z-index", "99999");
							}
						});
					}
				}, error: function(e) {
					sessionTimeout(e);
				}
			});
		}
	}
}


function getArtIntAPI(chartId, chartType, table) {
	showLoader();
	$.ajax({
		type: "POST",
		traditional: true,
		dataType: 'json',
		url: 'getArtificialIntellisenseApiDetails',
		cache: false,
		data: {
			chartId: chartId,
			chartType: chartType,
			table: table,
		},
		traditional: true,
		cache: false,
		success: function(response) {
			console.log(response);
			stopLoader();
			var message = response['message'];
			var flag = response['flag'];
			if (flag) {
				if (message != null && message != '' && message != undefined && message.indexOf("|") > -1) {
					var messageArr = [];
					messageArr = message.split("|");
					message = '<ul style="list-style-type:square;padding: 22px;">';
					for (var i = 0; i < messageArr.length; i++) {
						message += "<li>" + messageArr[i] + "</li>";
					}
					message += '</ul>';
				}
				var modalObj = {
					title: "<img src='images/BrainAI.png' style='width:20px;margin-top: -3px;'>&nbsp;&nbsp;&nbsp;<span style='font-size: 18px;'>Artificial Intelligence Analysis</span>",
					body: message,
				};
				var buttonArray = [
					{
						text: labelObject['Close'] != null ? labelObject['Close'] : 'Close',
						click: function() {
						},
						isCloseButton: true
					}
				];
				modalObj['buttons'] = buttonArray;
				createModal("dataDxpSplitterValue", modalObj);
				$(".modal-dialog").addClass("modal-xl");
			} else {
				getArtIntAPI(chartId, chartType, table);
			}
		}
	});
}


function renameColumnValue(column, table,gridId) {

	$.ajax({
		type: "POST",
		url: "getColumnformStr",
		cache: false,
		dataType: 'html',
		async: false,
		data: {
			column: column,
			table: table,
			gridId:gridId
		},
		success: function(response) {
		$(".bicolumnPopUp").show();
			$("#dialog").html(response);
			$("#dialog").dialog({
				title: (labelObject[column] != null ? labelObject[column] : column),
				modal: true,
				width: 350,
				height: 150,
				fluid: true,
				 buttons: [{
					   text: (labelObject['Ok'] != null ? labelObject['Ok'] : 'Ok'),
						click: function () {                            
							 $("#dialog").html("");
							 $("#dialog").dialog("close");
							 $("#dialog").dialog("destroy");
						 }
 
					 }],
				open: function() {
					$(this).closest(".ui-dialog").find(".ui-button").eq(1).addClass("dialogyes");
					$(".visionHeaderMain").css("z-index", "999");
					$(".visionFooterMain").css("z-index", "999");
					$(".ui-dialog").addClass("bicolumnPopUp");

				},
				beforeClose: function(event, ui) {
					$(".visionHeaderMain").css("z-index", "99999");
					$(".visionFooterMain").css("z-index", "99999");
				}
			});
		},
		error: function(e) {
			console.log(e);
			sessionTimeout(e);
			stopLoader();
		}
	});
}
function selectType(column, table,gridId) {
	$.ajax({
		type: "POST",
		url: "getSelectType",
		cache: false,
		dataType: 'html',
		async: false,
		data: {
			column: column,
			table: table,
			gridId: gridId
		},
		success: function(response) {
			$("#dialog").html(response);
			$("#dialog").dialog({
				title: (labelObject[column] != null ? labelObject[column] : column),
				modal: true,
				width: 350,
				height: 150,
				fluid: true,

				open: function() {
					$(this).closest(".ui-dialog").find(".ui-button").eq(1).addClass("dialogyes");
					$(".visionHeaderMain").css("z-index", "999");
					$(".visionFooterMain").css("z-index", "999");
					$(".ui-dialog").addClass("bicolumnPopUp");

				},
				beforeClose: function(event, ui) {
					$(".visionHeaderMain").css("z-index", "99999");
					$(".visionFooterMain").css("z-index", "99999");
				}
			});
		},
		error: function(e) {
			console.log(e);
			sessionTimeout(e);
			stopLoader();
		}
	});
}
function suffixValue(column, table,gridId) {
	$.ajax({
		type: "POST",
		url: "getSuffixValue",
		cache: false,
		dataType: 'html',
		async: false,
		data: {
			column: column,
			table: table,
			gridId: gridId
		},
		success: function(response) {
			$("#dialog").html(response);
			$("#dialog").dialog({
				title: (labelObject[column] != null ? labelObject[column] : column),
				modal: true,
				width: 350,
				height: 150,
				fluid: true,

				open: function() {
					$(this).closest(".ui-dialog").find(".ui-button").eq(1).addClass("dialogyes");
					$(".visionHeaderMain").css("z-index", "999");
					$(".visionFooterMain").css("z-index", "999");
					$(".ui-dialog").addClass("bicolumnPopUp");

				},
				beforeClose: function(event, ui) {
					$(".visionHeaderMain").css("z-index", "99999");
					$(".visionFooterMain").css("z-index", "99999");
				}
			});
		},
		error: function(e) {
			console.log(e);
			sessionTimeout(e);
			stopLoader();
		}
	});
}

function prefixValue(column, table,gridId) {
	$.ajax({
		type: "POST",
		url: "getPrefixValue",
		cache: false,
		dataType: 'html',
		async: false,
		data: {
			column: column,
			table: table,
			gridId: gridId
		},
		success: function(response) {
			$("#dialog").html(response);
			$("#dialog").dialog({
				title: (labelObject[column] != null ? labelObject[column] : column),
				modal: true,
				width: 350,
				height: 150,
				fluid: true,

				open: function() {
					$(this).closest(".ui-dialog").find(".ui-button").eq(1).addClass("dialogyes");
					$(".visionHeaderMain").css("z-index", "999");
					$(".visionFooterMain").css("z-index", "999");
					$(".ui-dialog").addClass("bicolumnPopUp");

				},
				beforeClose: function(event, ui) {
					$(".visionHeaderMain").css("z-index", "99999");
					$(".visionFooterMain").css("z-index", "99999");
				}
			});
		},
		error: function(e) {
			console.log(e);
			sessionTimeout(e);
			stopLoader();
		}
	});
}
function createFind(column, table,gridId) {
	dataField=column;
	$.ajax({
		type: "POST",
		url: "getCreateFind",
		cache: false,
		dataType: 'html',
		async: false,
		data: {
			column: column,
			table: table,
			gridId: gridId
		},
		success: function(response) {
			$("#dialog").html(response);
			$("#dialog").dialog({
				title: (labelObject[column] != null ? labelObject[column] : column),
				modal: true,
				width: 350,
				height: 150,
				fluid: true,

				open: function() {
					$(this).closest(".ui-dialog").find(".ui-button").eq(1).addClass("dialogyes");
					$(".visionHeaderMain").css("z-index", "999");
					$(".visionFooterMain").css("z-index", "999");
					$(".ui-dialog").addClass("bicolumnPopUp");

				},
				beforeClose: function(event, ui) {
					$(".visionHeaderMain").css("z-index", "99999");
					$(".visionFooterMain").css("z-index", "99999");
				}
			});
		},
		error: function(e) {
			console.log(e);
			sessionTimeout(e);
			stopLoader();
		}
	});
}
function searchWord(dataField,table,gridId) {
	
	
	var columnindex = $(gridId).jqxGrid('getcolumnindex', dataField);
	searchTerm = $("#actualValueId").val();
	if(searchTerm ===null || searchTerm === undefined || searchTerm === " "){
		$("#dialog").html("");
		$("#dialog").dialog("close");
		$("#dialog").dialog("destroy");
		if (gridId.startsWith("#divGrid")) {
					var data = {
		startIndex: 0,
		endIndex: 50,
		tableName: table,
		analytics: "Y"
	};
				
			viewAnalyticsTableDataGrid(data);
			removeIiWidgetOverlay();
			}
			else{
			showalterColumnData(table,exiFlag,gridId);
			showFileToDxpTableData(table,exiFlag,gridId);
			removeIiWidgetOverlay();
			leftFileUploadsDivToggle();
			}
			return ;
	}
	
	var caseSensitiveCheckBox= $("#caseSensitiveCheckbox").val();
	
	addCustomFilter(dataField,gridId,searchTerm,caseSensitiveCheckBox);
	
	
	
		if ($("#caseSensitiveCheckbox").is(":checked"))
	{
		
		var matchingCellsCount=0;
		 $(gridId).find(".jqx-grid-content").find(".jqx-grid-cell").each(function(i) {
		var cell = this;
		if ($(this).attr("columnindex") == columnindex) {
			matchingCellsCount=matchingCellsCount+1;
			setTimeout(function() {
			var cellvalue = $(this).find("div").text();
			if (cellvalue.indexOf(searchTerm) > -1) {
				
				$(this).find("div").addClass("highlightSerchTerm");
				$(this).find("div").addClass("searchTermMatched");
				
			} else {
				$(this).find("div").removeClass("highlightSerchTerm");
			}
		},10000);
		}

	});
	console.log("matching cells count = "+matchingCellsCount);
  } 
else {
		
		var matchingCells = $(gridId).find(".jqx-grid-content").find(".jqx-grid-cell").filter(function() {
    	return $(this).attr("columnindex") == columnindex && $(this).text().indexOf(searchTerm) > -1;
  });

  matchingCells.each(function() {
	var cellvalue = $(this).find("div").text();
	setTimeout(function() {
			if (cellvalue.indexOf(searchTerm) > -1) {
				 if (cellvalue.toLowerCase().indexOf(searchTerm.toLowerCase()) > -1) {
				$(this).find("div").addClass("highlightSerchTerm");
				$(this).find("div").addClass("searchTermMatched");
				

			} else {
				$(this).find("div").removeClass("highlightSerchTerm");
			}
			}},10000);
  });

  console.log("matchingCells:", matchingCells.length);
		  
  
}
$("#dialog").html("");
$("#dialog").dialog("close");
$("#dialog").dialog("destroy");


}
function searchNextWord(dataField,table,gridId) {

	var columnindex = $(gridId).jqxGrid('getcolumnindex', dataField);
	var searchTerm = $("#actualValueId").val();

	var matchCount = 0;
	//$("#visualizeAreaGirdData1").find(".jqx-grid-content").find(".jqx-grid-cell").find(".searchTermMatched").removeClass("highlightSerchTerm");
	$(gridId).find(".jqx-grid-content").find(".jqx-grid-cell").find(".searchTermMatched").each(function(i) {

		var cellvalue = $(this).text();



		if (cellvalue.indexOf(searchTerm) == -1) {
			$(this).removeClass("searchTermMatched");

		}
		$(this).removeClass("highlightSerchTerm");

	})

	$(gridId).find(".jqx-grid-content").find(".jqx-grid-cell").each(function(i) {

		var cell = this;
		if ($(this).attr("columnindex") == columnindex) {
			var cellvalue = $(this).find("div").text();


			if (cellvalue.indexOf(searchTerm) > -1) {
				if (!$(this).find("div").hasClass("searchTermMatched")) {
					$(this).find("div").addClass("searchTermMatched");
					$(this).find("div").addClass("highlightSerchTerm");
					matchCount = 1;
					throw "searchTermMatched";

				} else {
					$(this).find("div").removeClass("highlightSerchTerm");
				}

			}
		}



	})

	var matchedDivs = $(gridId).find(".jqx-grid-content").find(".jqx-grid-cell").find(".searchTermMatched");
	if (matchCount == 0 && matchedDivs.length > 0) {

		$(gridId).find(".jqx-grid-content").find(".jqx-grid-cell").find(".searchTermMatched").removeClass("searchTermMatched");
		$(matchedDivs[0]).addClass("searchTermMatched");
		$(matchedDivs[0]).addClass("highlightSerchTerm");
	}


}
function createRenameValue(column, table,gridId) {
	showLoader();
	var findValue = $("#actualValueId").val();
	var renameValue = $("#renameValueId").val();
	$("#dialog").html("");
	$("#dialog").dialog("close");
	$("#dialog").dialog("destroy");
	if (findValue != null) {
		$.ajax({
			type: "POST",
			url: "getRenameValue",
			cache: false,
			dataType: 'html',
			async: false,
			data: {
				findValue: findValue,
				column: column,
				renameValue: renameValue,
				table: table
			},
			success: function(response) {
				stopLoader();

				if (gridId.startsWith("#divGrid")) {
					var data = {
		startIndex: 0,
		endIndex: 50,
		tableName: table,
		analytics: "Y"
	};
				
			viewAnalyticsTableDataGrid(data);
			removeIiWidgetOverlay();
			}
			else{
			showalterColumnData(table,exiFlag,gridId);
			showFileToDxpTableData(table,exiFlag,gridId);
			removeIiWidgetOverlay();
			leftFileUploadsDivToggle();
			}
			},
			error: function(e) {
				console.log(e);
				sessionTimeout(e);
				stopLoader();
			}
		});

	}

}
function processAlterTable(tableName) {
	console.log(alterTableData);
	var result = "";
	$.ajax({
		type: 'post',
		traditional: true,
		dataType: 'json',
		cache: false,
		url: 'executeAlterTableColumn',
		async: true,
		data: {
			tableName: tableName,
			alterTableData: JSON.stringify(alterTableData),
			existingPKcols: $("#alterTablePKList").val()
		},
		success: function(response) {
			stopLoader();
			if (response != null) {
				var message = response['message'];
				var message = response['message'];
				$("#dialog").html(message);
				$("#etldialog").dialog({
					title: (labelObject['Message'] != null ? labelObject['Message'] : 'Message'),
					modal: true,
					width: 1000,
					height: 600,
					fluid: true,
					buttons: [{
						text: (labelObject['Ok'] != null ? labelObject['Ok'] : 'Ok'),
						click: function() {
							$(this).html("");
							$(this).dialog("destroy");
						}

					}],
					open: function() {
						$('#pdfToHTMLData').attr('srcdoc', result);
						$(this).closest(".ui-dialog").find(".ui-button").eq(1).addClass("dialogyes");
						$(".visionHeaderMain").css("z-index", "999");
						$(".visionFooterMain").css("z-index", "999");
					},
					beforeClose: function(event, ui) {
						$(".visionHeaderMain").css("z-index", "99999");
						$(".visionFooterMain").css("z-index", "99999");
					}
				});
			}
		},
		error: function(e) {
			sessionTimeout(e);
		}

	});
}
function createPrifix(column, tableName,gridId) {
	showLoader();
	var PrifixVal = $("#prifixId").val();
	var sufixPrifixVal = "TEST";
	var checkedVal = "PRIFIX";
	var exiFlag =" ";
	if (PrifixVal != null && PrifixVal != undefined && PrifixVal != '') {
		$.ajax({
			type: "POST",
			url: "createPrefixValue",
			cache: false,
			dataType: 'html',
			async: false,
			data: {
				column: column,
				sufixandPrifixVal: sufixPrifixVal,
				PrifixVal: PrifixVal,
				table: tableName,
				checkedVal: checkedVal
			},
			success: function(response) {
	stopLoader();
				if (response != null && response != '') {
					$("#dialog").html("");
					$("#dialog").dialog("close");
					$("#dialog").dialog("destroy");
					if (gridId.startsWith("#divGrid")) {
						var data = {
		startIndex: 0,
		endIndex: 50,
		tableName: tableName,
		analytics: "Y"
	};
					viewAnalyticsTableDataGrid(data);
					removeIiWidgetOverlay();
					}
					else{
					showalterColumnData(tableName,exiFlag,gridId);
					showFileToDxpTableData(tableName,exiFlag,gridId);
					removeIiWidgetOverlay();
					leftFileUploadsDivToggle();
					}
				}
			},
			error: function(e) {
				console.log(e);
				sessionTimeout(e);
				stopLoader();
			}
		});
	}

}

function showChartsInRow() {
	var value = $("#visionVisualizeChartsInRowSelectId").val();
	if ($.trim($('#modalFileCharts').html())) {
		$("#modalFileCharts div.visionVisualizeModalChartClass").each(function() {
			var divId = $(this).attr("id");
			var childIds = $("#" + divId).children("div[id]");
			var chartId = childIds[0]['id'];
			if (value != null && value != '' && value != undefined && value == '2') {
				$("#" + divId).attr("class", "col-md-6 visionVisualizeModalChartClass fileChartsBorder");
				$(".fileChartsBorder").css("max-width", "49.5%", "!important");
				var width = $("#" + chartId).width();
				var update =
				{
					width: width,
					height: 300,
				}
				Plotly.relayout(chartId, update);
			} else if (value != null && value != '' && value != undefined && value == '3') {
				$("#" + divId).attr("class", "col-md-4 visionVisualizeModalChartClass fileChartsBorder");
				$(".fileChartsBorder").css("max-width", "31%", "!important");
				var width = $("#" + chartId).width();
				var update =
				{
					width: width,
					height: 300,
				}
				Plotly.relayout(chartId, update);
			} else if (value != null && value != '' && value != undefined && value == '4') {
				$("#" + divId).attr("class", "col-md-3 visionVisualizeModalChartClass fileChartsBorder");
				$(".fileChartsBorder").css("max-width", "24.5%", "!important");
				var width = $("#" + chartId).width();
				var update =
				{
					width: width,
					height: 300,
				}
				Plotly.relayout(chartId, update);
			}

		});
	}
}
function removeDuplicate(column, table) {
	$.ajax({
		type: 'post',
		traditional: true,
		dataType: 'json',
		cache: false,
		url: 'removeDuplicateValue',
		data: {
			column: column,
			table: table

		},
		success: function(response) {

			var modalObj = {
				title: labelObject['Message'] != null ? labelObject['Message'] : 'Message',
				body: "Are you sure you want to  Remove Duplicate Values??",
			};
			var buttonArray = [
				{
					text: labelObject['Yes'] != null ? labelObject['Yes'] : 'Yes',
					click: function() {
						var modalObj = {
							title: labelObject['Remove Duplicate Values'] != null ? labelObject['Remove Duplicate Values'] : 'Remove Duplicate Values',
							body: "<div id = 'dupcolumnlistId' class = 'dupcolumnlistId'></div><div id = 'dupcolumnlistresult' class = 'dupcolumnlistresultId'><center>Do you want to see the duplicates in this column?</center></div>",


						};
						var buttonArray = [
							{
								text: labelObject['Yes'] != null ? labelObject['Yes'] : 'Yes',
								click: function() {
									checkboxColumn(column, table);

								},
								isCloseButton: true
							},
							{
								text: labelObject['No'] != null ? labelObject['No'] : 'No',
								click: function() {
								},
								isCloseButton: true
							}
						];
						modalObj['buttons'] = buttonArray;
						createModal("dataDxpSplitterValue", modalObj);
						$(".modal-dialog").addClass("modal-xs");
						$("#dupcolumnlistId").jqxListBox({
							filterable: true,
							checkboxes: true,
							source: response['checkBoxDataArr'],
							theme: 'energyblue',
							displayMember: 'text',
							valueMember: 'value',
							width: '310px'
						});

					},
					isCloseButton: true
				},
				{
					text: labelObject['No'] != null ? labelObject['No'] : 'No',
					click: function() {
					},
					isCloseButton: true
				}
			];
			modalObj['buttons'] = buttonArray;
			createModal("dataDxpSplitterValue", modalObj);
			$(".modal-dialog").addClass("modal-xs");

		}
	});
}
function deleteDuplicate(column, table, gridId) {
  showLoader();
  var exiFlag = " ";
  $.ajax({
    type: "post",
    traditional: true,
    dataType: "json",
    cache: false,
    url: "deleteDuplicateValues",
    data: {
      column: column,
      table: table,
      gridId: gridId,
    },
    success: function (response) {
      stopLoader();

      var modalObj = {
        title:
          labelObject["Duplicate Deletion"] != null
            ? labelObject["Duplicate Deletion"]
            : "Duplicate Deletion",
        body: response["result"],
      };
      var buttonArray = [
        {
          text: labelObject["OK"] != null ? labelObject["OK"] : "OK",
          click: function () {
            if (gridId.startsWith("#divGrid")) {
              var data = {
                startIndex: 0,
                endIndex: 50,
                tableName: table,
                analytics: "Y",
              };
              viewAnalyticsTableDataGrid(data);
              removeIiWidgetOverlay();
            } else {
              showalterColumnData(table, exiFlag, gridId);
              showFileToDxpTableData(table, exiFlag, gridId);
              removeIiWidgetOverlay();
              leftFileUploadsDivToggle();
            }
          },
          isCloseButton: true,
        },
      ];
      modalObj["buttons"] = buttonArray;
      createModal("deleteDup", modalObj);
      $(".modal-dialog").addClass("modal-xs");
    },
  });
}
function showAutoSuggestions(chartId) {
	var colorpallateobj = "<p class='integralAIPopoverInnerText'>You can change the title or labels</p><p>Click to try.</p>";
	$("#visionVisualizeChartEditAISuggest").html("<div id='visionVisualizeEditAIPopoverId' class='visionVisualizeEditAIPopoverClass'></div>");
	var integralEditAIDiv = "<div id='VisionVisualizeEditAIImageId' class='VisionVisualizeEditAIImageClass'></div>";
	$("#" + chartId).find("[data-title='Edit']").append(integralEditAIDiv);
	$("#visionVisualizeEditAIPopoverId").html(colorpallateobj);
	//$("#VisionVisualizeEditAIImageId").html("<img src='images/curved_Arrow.png' id='VisionVisualizeEditAIContentId' style='width:18px;height: 18px;cursor:pointer;padding-left:3px;'>");
	var abc = $("#" + chartId).find("[data-title='Edit']");
	var offset = { left: 60, top: 20 };
	/*$("#visionVisualizeEditAIPopoverId").jqxPopover({
		//offset: offset,
		position: 'right',
		width: 200,
		height: 80,
		autoClose: true,
		title: "<img src='images/ai_bulb.png' width='20px' />",
		showCloseButton: true,
		showArrow: true,
		arrowOffsetValue: 5,
		selector: abc

	});*/
	$('#visionVisualizeEditAIPopoverId').addClass('defaultPopOverAnimate');
	$("#visionVisualizeEditAIPopoverId").jqxPopover('open');


	$('#visionVisualizeEditAIPopoverId').on('close', function() {
		$('#visionVisualizeEditAIPopoverId').jqxPopover('close');
		$('#visionVisualizeEditAIPopoverId').jqxPopover('destroy');
		$("#VisionVisualizeEditAIContentId").remove();
		setTimeout(function() {
			if (!showAutoMsgDependFlag) {
				showChartTypesByEditSuggestion(chartId)
			}
		}, 2000);

	});
}
function showChartTypesByEditSuggestion(chartId) {
	var colorpallateobj = "<p class='integralAIPopoverInnerText'>You can change the Chart Types on the fly.</p><p>Hover to Know How !..</p>";
	$("#visionVisualizeChartEditAISuggest").html("<div id='visionVisualizeTypesAIPopoverId' class='visionVisualizeTypesAIPopoverClass'></div>");
	$("#VisionVisualizeTypesAIImageId").remove();
	var integralTypesAIDiv = "<div id='VisionVisualizeTypesAIImageId' class='VisionVisualizeTypesAIImageClass'></div>";
	$("#" + chartId).find("[data-title='Chart Types']").append(integralTypesAIDiv);
	$("#visionVisualizeTypesAIPopoverId").html(colorpallateobj);
	// $("#VisionVisualizeTypesAIImageId").html("<img src='images/curved_Arrow.png' id='VisionVisualizeTypesAIContentId' style='width:18px;height: 18px;cursor:pointer;padding-left:3px;'>");
	var abc = $("#" + chartId).find("[data-title='Chart Types']");
	var offset = { left: 60, top: 20 };
	$("#visionVisualizeTypesAIPopoverId").jqxPopover({
		/*offset: offset,*/
		position: 'right',
		width: 200,
		height: 80,
		autoClose: true,
		title: "<img src='images/ai_bulb.png' width='20px' />",
		showCloseButton: true,
		showArrow: true,
		arrowOffsetValue: 5,
		selector: abc

	});
	$('#visionVisualizeTypesAIPopoverId').addClass('defaultPopOverAnimate');
	$("#visionVisualizeTypesAIPopoverId").jqxPopover('open');


	$('#visionVisualizeTypesAIPopoverId').on('close', function() {
		$('#visionVisualizeTypesAIPopoverId').jqxPopover('close');
		$('#visionVisualizeTypesAIPopoverId').jqxPopover('destroy');
		$("#VisionVisualizeTypesAIContentId").remove();
		setTimeout(function() {
			if (!showAutoMsgDependFlag) {
				showChartSaveByTypesSuggestion(chartId);
			}
		}, 2000);

	});
}
function showChartSaveByTypesSuggestion(chartId) {
	var colorpallateobj = "<p class='integralAIPopoverInnerText'><p>Do you want to Save chart.</p><p>Click here</p>";
	$("#visionVisualizeChartEditAISuggest").html("<div id='visionVisualizeSaveAIPopoverId' class='visionVisualizeSaveAIPopoverClass'></div>");
	$("#VisionVisualizeSaveAIImageId").remove();
	var integralSaveAIDiv = "<div id='VisionVisualizeSaveAIImageId' class='VisionVisualizeSaveAIImageClass'></div>";
	$("#" + chartId).find("[data-title='Save']").append(integralSaveAIDiv);
	$("#visionVisualizeSaveAIPopoverId").html(colorpallateobj);
	// $("#VisionVisualizeSaveAIImageId").html("<img src='images/curved_Arrow.png' id='VisionVisualizeSaveAIContentId' style='width:18px;height: 18px;cursor:pointer;padding-left:3px;'>");
	var abc = $("#" + chartId).find("[data-title='Save']");
	var offset = { left: 60, top: 20 };
	$("#visionVisualizeSaveAIPopoverId").jqxPopover({
		/*offset: offset,*/
		position: 'right',
		width: 200,
		height: 80,
		autoClose: true,
		title: "<img src='images/ai_bulb.png' width='20px' />",
		showCloseButton: true,
		showArrow: true,
		arrowOffsetValue: 5,
		selector: abc

	});
	$('#visionVisualizeSaveAIPopoverId').addClass('defaultPopOverAnimate');
	$("#visionVisualizeSaveAIPopoverId").jqxPopover('open');


	$('#visionVisualizeSaveAIPopoverId').on('close', function() {
		$('#visionVisualizeSaveAIPopoverId').jqxPopover('close');
		$('#visionVisualizeSaveAIPopoverId').jqxPopover('destroy');
		$("#VisionVisualizeSaveAIContentId").remove();
	});
}

function getCardDateFunctions($event, count, columnName, id) {
	var div = "<li onclick=applyCardDateFunctions('ShowFilter','" + count + "','" + columnName + "','" + id + "')>Show Filter</li>";
	$("#jqxAggregate").remove();
	$('body').append("<div id='jqxAggregate'><ul></ul></div>");
	$("#jqxAggregate ul").html(div);
	var contextMenu = $("#jqxAggregate").jqxMenu({ width: '90px', height: 30 + 'px', autoOpenPopup: false, mode: 'popup' });
	contextMenu.jqxMenu('open', parseInt(event.clientX) + 5, parseInt(event.clientY) + 5);
	$(".dxpPageContent").scroll(function(event) {
		if ($("#jqxAggregate ul").length > 0) {
			var pos = $(".dxpPageContent").scrollTop();
			$("#jqxAggregate").css("top", $event.offsetTop - pos);
		}
	});
}

function applyCardDateFunctions(aggregateType, count, columnName, id) {
	getCardDateData(id, columnName, count);
}

function getCardDateData(id, columnName, count) {
	showLoader();
	$.ajax({
		type: "POST",
		traditional: true,
		dataType: 'json',
		url: 'getCardDateValues',
		cache: false,
		data: {
			columnName: columnName,
			tableName: id,
			count: count
		},
		traditional: true,
		cache: false,
		success: function(response) {
			stopLoader();
			if (response != null && !jQuery.isEmptyObject(response)) {
				var jsDateItems = response['dataColArr'];
				var cardDateDiv = response['cardDateDiv'];
				$("#visionVisualizeCardChartDateSelectValuesId_" + count).show();
				$("#visionVisualizeCardChartDateSelectValuesId_" + count).html(cardDateDiv);
				if (jsDateItems != null && !jQuery.isEmptyObject(jsDateItems)) {
					for (var i = 0; i < jsDateItems.length; i++) {
						$("#" + jsDateItems[i]['tbid']).datepicker(
							{
								dateFormat: "dd-mm-yy",
								changeMonth: true,
								changeYear: true
							})
							.on('changeDate', function(ev) {
								if (jsDateItems[i]['type'] == 'min') {
									console.log($("#" + jsDateItems[i]['tbid']).datepicker("getDate"));
									$("#" + jsDateItems[i]['tbid']).datepicker(
										{
											minDate: $("#" + jsDateItems[i]['tbid']).datepicker("getDate")
										});
								} else {
								}
							});
					}

				}

				$("#visionVisualizeCardChartDateSelectValuesId_" + count).unbind("change").on("change", function() {
					getCardDateDataFilterChange(count);

				});

			}

		}



	});
}


function getCardDateDataFilterChange(count) {
	var parmaFromArr = [];
	var parmaToArr = [];
	var paramFromObj1 = {};
	var paramToObj1 = {};
	var colName = $("#visionVisualizeCardChartDateValuesId_" + count).find('div.visualizeDivData').attr("data-column-name");
	var innerFilterDivClassArray = $("#visionVisualizeCardChartDateSelectValuesId_" + count).find(".innerFilterDivClass");
	var fromSelectId = $(innerFilterDivClassArray[0]).find("#ddwFrom" + count).attr("id");
	var visualizeAreaCardImageName = $("#cardImageVisualizeArea").attr("data-cardImageName");
	$("#visionVisualizeChart" + count).attr('data-cardImageName', visualizeAreaCardImageName);
	paramFromObj1.colName = colName;
	paramToObj1.colName = colName;
	if (fromSelectId != null && fromSelectId != '' && fromSelectId != undefined) {
		var fromMinval;
		var fromMaxval;
		var toMinval;
		var toMaxval
		var fromSelectValue = $("#" + fromSelectId).val();
		if (fromSelectValue != null && fromSelectValue != '' && fromSelectValue != undefined) {
			paramFromObj1.operator = fromSelectValue;
			if (fromSelectValue == "BETWEEN") {
				fromMinval = $("#tbminFrom" + count).val();
				fromMaxval = $("#tbmaxFrom" + count).val();
				paramFromObj1.minvalue = fromMinval;
				paramFromObj1.maxvalue = fromMaxval;
			}
			parmaFromArr.push(paramFromObj1);
		}
		var toSelectId = $(innerFilterDivClassArray[1]).find("select").attr("id");
		var toSelectValue = $("#" + toSelectId).val();
		if (toSelectValue != null && toSelectValue != '' && toSelectValue != undefined) {
			paramToObj1.operator = toSelectValue;
			if (toSelectValue == "BETWEEN") {
				toMinval = $("#tbminTo" + count).val();
				toMaxval = $("#tbmaxTo" + count).val();
				paramToObj1.minvalue = toMinval;
				paramToObj1.maxvalue = toMaxval;
			}
			parmaToArr.push(paramToObj1);
		}
		if (parmaFromArr != null && !jQuery.isEmptyObject(parmaFromArr) && parmaToArr != null && !jQuery.isEmptyObject(parmaToArr)
			&& fromMinval != null && fromMinval != '' && fromMinval != undefined && fromMaxval != null && fromMaxval != '' && fromMaxval != undefined
			&& toMinval != null && toMinval != '' && toMinval != undefined && toMaxval != null && toMaxval != '' && toMaxval != undefined) {
			getCardVisualizeData("COUNT", count, "", parmaFromArr, parmaToArr);
		}
	} else {
		paramToObj1.operator = "EQUALS";
		paramFromObj1.operator = "EQUALS";
		var fromValue = $("#visionVisualizeCardDateFromSelectValueId" + count).val();
		var toValue = $("#visionVisualizeCardDateToSelectValueId" + count).val();
		paramFromObj1.values = fromValue;
		paramToObj1.values = toValue;
		parmaFromArr.push(paramFromObj1);
		parmaToArr.push(paramToObj1);
		if (parmaFromArr != null && !jQuery.isEmptyObject(parmaFromArr) && parmaToArr != null && !jQuery.isEmptyObject(parmaToArr)) {
			getCardVisualizeData("COUNT", count, "", parmaFromArr, parmaToArr);
		}
	}
}
function scrollUp(chartId, chartType) {  //^^^
	var ChartIDtoScroll = $("#" + chartId).parent().attr('id');
	var visualizechartscroll = $(".modebar-container").height();
	$("#" + ChartIDtoScroll + " .modebar-container").animate({ scrollTop: visualizechartscroll }, 220);
}
function scrollDownArrow(chartId, chartType) {
	var ChartIDtoScroll = $("#" + chartId).parent().attr('id');
	var visualizechartscroll = $(".modebar-container").height();
	$("#" + ChartIDtoScroll + " .modebar-container").animate({ scrollTop: 0 }, 220);
}
function changeCardTypes($event, cardType, chartType, count, tooltipType,trend) {
	var tooltipDiv = '';
	clearTimeout(dragEventTimeout);
	if (!isNullOrUndefined(tooltipType) && tooltipType !== '') {
		switch (tooltipType) {
			case "cardShapes":
				tooltipDiv = "<li onclick=applyCardType('Oval','" + chartType + "','" + count + "','"+trend+"')>Oval</li>"
					+ "<li onclick=applyCardType('Round','" + chartType + "','" + count + "','"+trend+"')>Round</li>"
					+ "<li onclick=applyCardType('Rectangle','" + chartType + "','" + count + "','"+trend+"')>Rectangle</li>";
				break;
			case "cardTrendsConversion":
				tooltipDiv = "<div id=\"\" class=\"visionVisualizeChartsTabsClass\">"
					+ "<div class=\"cardTrendConversion\"><img onclick=\"applyTrendCardType('pie', '" + count + "')\" src=\"images/Pie.svg\" class=\"visualDarkMode\" title=\"Pie chart\"/><span>Pie</span></div>"
					+ "<div class=\"cardTrendConversion\"><img onclick=\"applyTrendCardType('donut', '" + count + "')\" src=\"images/Donut.svg\" class=\"visualDarkMode\" title=\"Donut chart\"/><span>Donut</span></div>"
					+ "<div class=\"cardTrendConversion\"><img onclick=\"applyTrendCardType('column', '" + count + "')\" src=\"images/Column.svg\" class=\"visualDarkMode\" title=\"Column chart\"/><span>Column</span></div>"
					+ "<div class=\"cardTrendConversion\"><img onclick=\"applyTrendCardType('lines', '" + count + "')\" src=\"images/Line.svg\" class=\"visualDarkMode\" title=\"Line chart\"/><span>Line</span></div>"
					+ "</div>";
				break;
			default:
				console.log("Please configure card tool type :::::: ");
		}
	}
	$("#jqxAggregate").remove();
	$('body').append("<div id='jqxAggregate'><ul></ul></div>");
	$("#jqxAggregate ul").html(tooltipDiv);
	var contextMenu = $("#jqxAggregate").jqxMenu({ width: '90px', height: 140 + 'px', autoOpenPopup: false, mode: 'popup' });
	contextMenu.jqxMenu('open', parseInt(event.clientX) + 5, parseInt(event.clientY) + 5);
	$(".dxpPageContent").scroll(function(event) {
		if ($("#jqxAggregate ul").length > 0) {
			var pos = $(".dxpPageContent").scrollTop() - 80;
			$("#jqxAggregate").css("top", $event.offsetTop - pos);
		}
	});
}

function applyTrendCardType(type, count) {
	var parentId = "visionVisualizeChart" + count;
	var visualizeAreaCardImageName = $("#cardImageVisualizeArea").attr("data-cardImageName");
	$("#visionVisualizeChart" + count).attr('data-cardImageName', visualizeAreaCardImageName);
	cardTrendDivArr[parentId] = type;
	if (cardDivArr != null && !jQuery.isEmptyObject(cardDivArr) && jQuery.inArray(parentId, cardDivArr) > -1) {
		if ($("#visionVisualizeCardChartDateSelectValuesId_" + count).html().length > 0) {
			getCardDateDataFilterChange(count);
		} else {
			getCardData("COUNT", count, "");
		}
	}
}

function applyCardType(cardType, chartType, count,trend) {
	var parentId = "visionVisualizeChart" + count;
	var visualizeAreaCardImageName = $("#cardImageVisualizeArea").attr("data-cardImageName");
	if (cardType != null && cardType != '' && cardType != undefined && cardType == 'Oval') {
		id = "<div id='visionVisualizeChartId" + count + "' type='" + chartType + "' count='" + count + "' cardTrend ='"+trend+"'  cardType='Oval' class='visionVisualChartBoxClass visionVisualChartBoxSelected'></div>"
			+ "<div class='ui-resizable-handle ui-resizable-n' id='ngrip'></div>"
			+ "<div class='ui-resizable-handle ui-resizable-s' id='sgrip'></div>"
			+ "<div class='ui-resizable-handle ui-resizable-e' id='egrip'></div>"
			+ "<div class='ui-resizable-handle ui-resizable-w' id='wgrip'></div>"
			+ "<div id= chartelements" + count + "' type='" + chartType + "' class='chartelements'>"
			+ "<img src='images/Horizontal_Dots.svg' data-toggle='Card Types' id='visionChartDiv" + count + "'  class='visionVisualizeHorizontalDotsClass' onclick=changeCardTypes(this,'" + cardType + "','" + chartType + "','" + count + "','cardShapes','"+trend+"')  title='Card Types' style='transform: rotate(90deg);'/>"
			+ "<img src='images/Save Icon.svg' data-toggle='Save chart' id='visionChartDiv" + count + "'  class='visionVisualizeHorizontalDotsClass' onclick=saveVisualizationData()  title='Save Chart'/>";
			if(trend !=null && trend !='' && trend !=undefined && trend =='Trend'){
			id+= "<img src='images/card_trends_conversion.png' data-toggle='Trend Conversion' id='visionCardTrendLineConversion" + count + "'  class='visionVisualizeHorizontalDotsClass' onclick=changeCardTypes(this,'" + cardType + "','" + chartType + "','" + count + "','cardTrendsConversion','"+trend+"')  title='Card Trend Data Conversion'/>";
			}
			id+= "<img src='images/cancelAllJobs.svg' data-toggle='Close chart' id='visionChartDiv" + count + "' class='visionVisualizeHorizontalDotsClass' onclick=closeCardDiv('visionVisualizeChart" + count + "'," + count + ",'" + chartType + "')  title='Close Chart'/>"
			+ "</div>";
		$("#visionVisualizeChart" + count).html(id);
		$("#visionVisualizeChart" + count).attr('cardType', cardType);
		$("#visionVisualizeChart" + count).attr('data-cardImageName', visualizeAreaCardImageName);
		$("#visionVisualizeChart" + count).removeClass('roundedCard');
		$("#visionVisualizeChart" + count).removeClass('ovalCard');
		$("#visionVisualizeChart" + count).addClass('ovalCard');
		$('#visionVisualizeChart' + count).resizable({
			handles: {
				'n': '#ngrip',
				'e': '#egrip',
				's': '#sgrip',
				'w': '#wgrip'
			}, resize: function(event, ui) {
				var uiId = ui.element[0]['id'];
				var width = $("#" + uiId).width();
				var height = $("#" + uiId).height();
				$("#" + uiId).find(".visionVisualChartBoxClass").css("width", (width - 5) + "px");
				$("#" + uiId).find(".visionVisualChartBoxClass").css("height", (height - 16) + "px");
				$("#" + uiId).find(".visionVisualizeChartIconsClass").css("width", (width - 5) + "px");
				$("#" + uiId).find(".visionVisualizeChartIconsClass").css("height", 16 + "px");
			},
			stop: function(event, ui) {
				var uiId = ui.element[0]['id'];
				$(".ui-resizable-handle").remove();
				$("#" + uiId).append(cardResizeDIv);
				$('#' + uiId).resizable({
					handles: {
						'n': '#ngrip',
						'e': '#egrip',
						's': '#sgrip',
						'w': '#wgrip'
					}
				});
				$('#' + uiId).draggable({
					revert: "invalid",
					containment: "#visualizeArea"
				});
			}
		});
		if (cardDivArr != null && !jQuery.isEmptyObject(cardDivArr) && jQuery.inArray(parentId, cardDivArr) > -1) {
			var dateFilterHtml = $("#visionVisualizeCardChartDateSelectValuesId_" + count).html();
			if (dateFilterHtml !=null && dateFilterHtml !='' && dateFilterHtml !=undefined && dateFilterHtml.length > 0) {
				getCardDateDataFilterChange(count);
			} else {
				getCardData("COUNT", count, "");
			}
		}
	} else if (cardType != null && cardType != '' && cardType != undefined && cardType == 'Round') {
		id = "<div id='visionVisualizeChartId" + count + "' type='" + chartType + "' count='" + count + "' cardTrend ='"+trend+"' cardType='Round' class='visionVisualChartBoxClass visionVisualChartBoxSelected'></div>"
			+ "<div class='ui-resizable-handle ui-resizable-n' id='ngrip'></div>"
			+ "<div class='ui-resizable-handle ui-resizable-s' id='sgrip'></div>"
			+ "<div class='ui-resizable-handle ui-resizable-e' id='egrip'></div>"
			+ "<div class='ui-resizable-handle ui-resizable-w' id='wgrip'></div>"
			+ "<div id= chartelements" + count + "' type='" + chartType + "' class='chartelements'>"
			+ "<img src='images/Horizontal_Dots.svg' data-toggle='Card Types' id='visionChartDiv" + count + "'  class='visionVisualizeHorizontalDotsClass' onclick=changeCardTypes(this,'" + cardType + "','" + chartType + "','" + count + "','cardShapes','"+trend+"')  title='Card Types' style='transform: rotate(90deg);'/>"
			+ "<img src='images/Save Icon.svg' data-toggle='Save chart' id='visionChartDiv" + count + "'  class='visionVisualizeHorizontalDotsClass' onclick=saveVisualizationData()  title='Save Chart'/>";
			if(trend !=null && trend !='' && trend !=undefined && trend =='Trend'){
			id+= "<img src='images/card_trends_conversion.png' data-toggle='Trend Conversion' id='visionCardTrendLineConversion" + count + "'  class='visionVisualizeHorizontalDotsClass' onclick=changeCardTypes(this,'" + cardType + "','" + chartType + "','" + count + "','cardTrendsConversion','"+trend+"')  title='Card Trend Data Conversion'/>";
			}
			id+= "<img src='images/cancelAllJobs.svg' data-toggle='Close chart' id='visionChartDiv" + count + "'  class='visionVisualizeHorizontalDotsClass' onclick=closeCardDiv('visionVisualizeChart" + count + "'," + count + ",'" + chartType + "')  title='Close Chart'/>"
			+ "</div>";
		$("#visionVisualizeChart" + count).html(id);
		$("#visionVisualizeChart" + count).attr('cardType', cardType);
		$("#visionVisualizeChart" + count).attr('data-cardImageName', visualizeAreaCardImageName);
		$("#visionVisualizeChart" + count).removeClass('roundedCard');
		$("#visionVisualizeChart" + count).removeClass('ovalCard');
		$("#visionVisualizeChart" + count).addClass('roundedCard');
		$('#visionVisualizeChart' + count).resizable({
			handles: {
				'n': '#ngrip',
				'e': '#egrip',
				's': '#sgrip',
				'w': '#wgrip'
			}, resize: function(event, ui) {
				var uiId = ui.element[0]['id'];
				var width = $("#" + uiId).width();
				var height = $("#" + uiId).height();
				$("#" + uiId).find(".visionVisualChartBoxClass").css("width", (width - 5) + "px");
				$("#" + uiId).find(".visionVisualChartBoxClass").css("height", (height - 16) + "px");
				$("#" + uiId).find(".visionVisualizeChartIconsClass").css("width", (width - 5) + "px");
				$("#" + uiId).find(".visionVisualizeChartIconsClass").css("height", 16 + "px");
			},
			stop: function(event, ui) {
				var uiId = ui.element[0]['id'];
				$(".ui-resizable-handle").remove();
				$("#" + uiId).append(cardResizeDIv);
				$('#' + uiId).resizable({
					handles: {
						'n': '#ngrip',
						'e': '#egrip',
						's': '#sgrip',
						'w': '#wgrip'
					}
				});
				$('#' + uiId).draggable({
					revert: "invalid",
					containment: "#visualizeArea"
				});
			}
		});
		if (cardDivArr != null && !jQuery.isEmptyObject(cardDivArr) && jQuery.inArray(parentId, cardDivArr) > -1) {
			var dateFilterHtml = $("#visionVisualizeCardChartDateSelectValuesId_" + count).html();
			if (dateFilterHtml !=null && dateFilterHtml !='' && dateFilterHtml !=undefined && dateFilterHtml.length > 0) {
				getCardDateDataFilterChange(count);
			} else {
				getCardData("COUNT", count, "");
			}
		}
	} else {
		var id = "<div id='visionVisualizeChartId" + count + "' type='" + chartType + "' cardTrend ='"+trend+"' count='" + count + "' class='visionVisualChartBoxClass visionVisualChartBoxSelected'></div>"
			+ "<div class='ui-resizable-handle ui-resizable-nw' id='nwgrip'></div>"
			+ "<div class='ui-resizable-handle ui-resizable-ne' id='negrip'></div>"
			+ "<div class='ui-resizable-handle ui-resizable-sw' id='swgrip'></div>"
			+ "<div class='ui-resizable-handle ui-resizable-se' id='segrip'></div>"
			+ "<div class='ui-resizable-handle ui-resizable-n' id='ngrip'></div>"
			+ "<div class='ui-resizable-handle ui-resizable-s' id='sgrip'></div>"
			+ "<div class='ui-resizable-handle ui-resizable-e' id='egrip'></div>"
			+ "<div class='ui-resizable-handle ui-resizable-w' id='wgrip'></div>"
			+ "<div id= chartelements" + count + "' type='" + chartType + "' class='chartelements'>"
			+ "<img src='images/Horizontal_Dots.svg' data-toggle='Card Types' id='visionChartDiv" + count + "'  class='visionVisualizeHorizontalDotsClass' onclick=changeCardTypes(this,'" + cardType + "','" + chartType + "','" + count + "','cardShapes','"+trend+"')  title='Card Types' style='transform: rotate(90deg);'/>"
			+ "<img src='images/Save Icon.svg' data-toggle='Save chart' id='visionChartDiv" + count + "'  class='visionVisualizeHorizontalDotsClass' onclick=saveVisualizationData()  title='Save Chart'/>";
			if(trend !=null && trend !='' && trend !=undefined && trend =='Trend'){
			id+= "<img src='images/card_trends_conversion.png' data-toggle='Trend Conversion' id='visionCardTrendLineConversion" + count + "'  class='visionVisualizeHorizontalDotsClass' onclick=changeCardTypes(this,'" + cardType + "','" + chartType + "','" + count + "','cardTrendsConversion','"+trend+"')  title='Card Trend Data Conversion'/>";
			}
			id+= "<img src='images/cancelAllJobs.svg' data-toggle='Close chart' id='visionChartDiv" + count + "'  class='visionVisualizeHorizontalDotsClass' onclick=closeCardDiv('visionVisualizeChart" + count + "'," + count + ",'" + chartType + "')  title='Close Chart'/>"
			+ "</div>"
			+ "</div>";
		$("#visionVisualizeChart" + count).html(id);
		$("#visionVisualizeChart" + count).attr('cardType', cardType);
		$("#visionVisualizeChart" + count).attr('data-cardImageName', visualizeAreaCardImageName);
		$("#visionVisualizeChart" + count).removeClass('roundedCard');
		$("#visionVisualizeChart" + count).removeClass('ovalCard');
		$('#visionVisualizeChart' + count).resizable({
			handles: {
				'nw': '#nwgrip',
				'ne': '#negrip',
				'sw': '#swgrip',
				'se': '#segrip',
				'n': '#ngrip',
				'e': '#egrip',
				's': '#sgrip',
				'w': '#wgrip'
			}, resize: function(event, ui) {
				var uiId = ui.element[0]['id'];
				var width = $("#" + uiId).width();
				var height = $("#" + uiId).height();
				$("#" + uiId).find(".visionVisualChartBoxClass").css("width", (width - 5) + "px");
				$("#" + uiId).find(".visionVisualChartBoxClass").css("height", (height - 16) + "px");
				$("#" + uiId).find(".visionVisualizeChartIconsClass").css("width", (width - 5) + "px");
				$("#" + uiId).find(".visionVisualizeChartIconsClass").css("height", 16 + "px");
			},
			stop: function(event, ui) {
				var uiId = ui.element[0]['id'];
				$(".ui-resizable-handle").remove();
				$("#" + uiId).append(resizableDIv);
				$('#' + uiId).resizable({
					handles: {
						'nw': '#nwgrip',
						'ne': '#negrip',
						'sw': '#swgrip',
						'se': '#segrip',
						'n': '#ngrip',
						'e': '#egrip',
						's': '#sgrip',
						'w': '#wgrip'
					}
				});
				$('#' + uiId).draggable({
					revert: "invalid",
					containment: "#visualizeArea"
				});
			}
		});
		if (cardDivArr != null && !jQuery.isEmptyObject(cardDivArr) && jQuery.inArray(parentId, cardDivArr) > -1) {
			var dateFilterHtml = $("#visionVisualizeCardChartDateSelectValuesId_" + count).html();
			if (dateFilterHtml !=null && dateFilterHtml !='' && dateFilterHtml !=undefined && dateFilterHtml.length > 0) {
				getCardDateDataFilterChange(count);
			} else {
				getCardData("COUNT", count, "");
			}
		}
	}
}
function encodeImageFileAndAppendAsSrc(currentElement, homepageCardImgChngEvt) {
	var imagebase64 = "";
	$("#importCardImage").trigger("click");
	$("#importCardImage").unbind('change').on('change', function(event) {
		var file = event.target.files[0];
		var fileName = file['name'];
		var fileExtension = fileName.substr(fileName.lastIndexOf('.') + 1);
		if (fileExtension !== null && fileExtension !== '' && fileExtension !== undefined) {
			if (fileExtension !== 'png' && fileExtension !== 'jpeg' && fileExtension !== 'jpg' && fileExtension !== 'svg') {
				var errorMessage = "Upload Failed, Please upload only Images.";
				var errorMessageResponse = getErrorMessageDiv(errorMessage);
				var buttonArray = [
					{
						text: 'Upload',
						click: function() {
							encodeImageFileAndAppendAsSrc(currentElement, homepageCardImgChngEvt);
						},
						isCloseButton: true
					},
					{
						text: 'Close',
						click: function() {
						},
						isCloseButton: true
					}
				];
				stopLoader();
				showPopUpWithButtonFunctionCall(errorMessageResponse, buttonArray);
			} else {
				uploadImageOnServer(file, homepageCardImgChngEvt);
			}
		}
		var $inputFile = $("#cardImageImportDiv");
		$inputFile.children().html("<input type='file' name='importCardImage' id='importCardImage' style='display:none;'/>");
	});
}

function getErrorMessageDiv(errorMessage) {
	var errorMessageResult = "<div class='errorMessageInPopUp'>"
		+ "<img src='images/login_failed_icon_final.png'>"
		+ "<p style=\"font-size: 14px;margin-bottom: 0px;\">" + errorMessage + "</p>"
		+ "</div>";
	return errorMessageResult;
}
function getHorizontalBarChart(chartId, result, count, chartType, saveType) {
	chartType = 'sunburst';
	var chartUpper = chartType.toUpperCase();
	var chartTitle = $("#" + chartUpper + "TITLEECHARTS").val();

	$("#visionVisualizeChartId" + count).remove();
	var horizontalChartId = "visionVisualizeChart" + count;
	var horizontalChartHomeId = "visionVisualizeChartHome" + count;
	$("#" + horizontalChartId).append("<div id='visionVisualizeChartId" + count + "' type='" + chartType + "' count='" + count + "' class='visionVisualChartBoxClass visionVisualChartBoxSelected'></div>")
	$("#" + chartId).css("width", "auto", "!important");
	$("#" + chartId).css("height", "550px", "!important");
	$("#" + horizontalChartId).css("width", "1000px", "!important");
	$("#" + horizontalChartId).css("height", "550px", "!important");
	if ($("#" + chartId).parent().parent().hasClass("homeChartWrapDiv")) {
		$("#" + chartId).parent().parent().attr("class", "col-md-6 col-sm-6 col-lg-12 homeChartWrapDiv treeMapMainDiv");
	}
	$("#" + horizontalChartHomeId).addClass("visionVisualChartBoxClass");
	var dom = document.getElementById(chartId);
	var myChart = echarts.init(dom, null, {
		renderer: 'canvas',
		useDirtyRect: false
	});
	var data = result['data'];
	var yAxisArr = result['yAxisData'];
	var optionObjectEcharts = result['layout'];
	var seriesObjectEcharts = result['dataPropObject'];
	var tableName = result['tableName'];
	if (chartTitle === undefined || chartTitle === '' || chartTitle === null) {
		chartTitle = optionObjectEcharts['text'];
	}

	var seriesArr = [];
	for (var key in data) {
		var seriesObj = {};
		seriesObj['name'] = key;
		seriesObj['type'] = 'bar';
		seriesObj['stack'] = 'total';
		var labelObj = { 'show': true };
		var emphasis = { 'focus': 'series' };
		seriesObj['label'] = labelObj;
		seriesObj['emphasis'] = emphasis;
		seriesObj['data'] = data[key];
		seriesArr.push(seriesObj);
	}

	var option = {

		tooltip: {
			show: true,
			formatter: function(info) {
				var value = info.value;
				var treePathInfo = info.treePathInfo;
				var treePath = [];
				for (var i = 1; i < treePathInfo.length; i++) {
					treePath.push(treePathInfo[i].name);
				}
				return ['<div class="tooltip-title">' +
					echarts.format.encodeHTML(treePath.join('/')) +
					'</div>',
				formatUtil.addCommas(value)
				].join('');
			}
		},
		legend: {},
		grid: {
			left: '3%',
			right: '4%',
			bottom: '3%',
			containLabel: true
		},
		xAxis: {
			type: 'value'
		},
		yAxis: {
			type: 'category',
			data: yAxisArr
		},
		series: seriesArr,
		title: {
			text: chartTitle,
			left: "center",
			padding: [10, 0],
			textStyle: {
				fontSize: 14,
				fontWeight: "normal"
			}
		}

	};
	if (!(saveType != null && saveType != '' && saveType != undefined)) {
		getToolBox(chartId, chartType, tableName);
	}


	var tooltipObject = optionObjectEcharts['tooltip'];
	if (tooltipObject != null && !jQuery.isEmptyObject(tooltipObject)) {
		$.each(tooltipObject, function(key, value) {
			if (key !== null && key === "formatter") {
				tooltipObject['formatter'] = eval(tooltipObject['formatter']);
			}
		});
		option['tooltip'] = tooltipObject;
	}
	var seriesObject = option['series'];
	var labelObject = seriesObjectEcharts['label'];
	if (labelObject != null && !jQuery.isEmptyObject(labelObject)) {
		$.each(labelObject, function(key, value) {
			if (key !== null && key === "formatter") {
				labelObject['formatter'] = eval(labelObject['formatter']);
			}
		});
		seriesObject['label'] = labelObject;
	}
	if (option && typeof option === 'object') {
		myChart.setOption(option);
	}

}

function uploadImageOnServer(fileData, homepageCardImgChngEvt) {
	showLoader();
	var isCardImgChngEvt = '';
	var chartId = '';
	var homepageCardImgChngEvtStr = '';
	if (!isNullOrUndefined(homepageCardImgChngEvt) && !jQuery.isEmptyObject(homepageCardImgChngEvt)) {
		isCardImgChngEvt = homepageCardImgChngEvt['isCardImgChngEvt'];
		chartId = homepageCardImgChngEvt['chartId'];
		homepageCardImgChngEvtStr = JSON.stringify(homepageCardImgChngEvt)
	}

	var fileToBeUploaded = new FormData();
	fileToBeUploaded.append("fileToBeUploaded", fileData);
	fileToBeUploaded.append("homepageCardImgChngEvt", homepageCardImgChngEvtStr);
	$.ajax({
		url: 'saveImageOnServer',
		type: "POST",
		data: fileToBeUploaded,
		enctype: 'multipart/form-data',
		processData: false,
		contentType: false,
		success: function(responseData) {
			stopLoader();
			if (!isNullOrUndefined(responseData) && !jQuery.isEmptyObject(responseData)) {
				var isImageUploaded = responseData['isImageUploaded']
				// Homepage card Image change
				if (!isNullOrUndefined(isCardImgChngEvt) && isCardImgChngEvt && isImageUploaded) {
					var imageEncodedStr = responseData['imageEncodedString'];
					var imageName = responseData['imageName'];
					var currCardImg = $("#" + chartId).find(".cardImageHomepage");
					$(currCardImg).attr({
						"src": imageEncodedStr,
						"data-cardImageName": imageName
					});
					showMesgModelPopup("Image updated successfully.")
					return;
				}

				if (!isNullOrUndefined(isImageUploaded) && isImageUploaded) {
					var imageEncodedStr = responseData['imageEncodedString'];
					var imageName = responseData['imageName'];
					$("#cardImageVisualizeArea").attr({
						"src": imageEncodedStr,
						"data-cardImageName": imageName
					});
				}
			}
		},
		error: function(errorResponse) {
			sessionTimeout(errorResponse);
		}
	})
}


function getCardImageData(chartId, columnName) {
	showLoader();
	var data = {};
	data['chartId'] = chartId;
	data['columnName'] = columnName;
	var tablesArr = [];
	var columnFilterConditions = [];
	$('#visionDashBoardHomeFilterId div').find('div.FilterColumnIdClass').each(function(event) {
		var id = $(this).attr('id');
		var values = [];
		var items = $("#" + id).jqxDropDownList('getCheckedItems');
		$.each(items, function(index) {
			values.push(this.value);
		});
		if (values != null && !jQuery.isEmptyObject(values)) {
			values = values.toString();
		}
		var tableColumn = $("#" + id).attr("data-tablecolumn");
		if (tableColumn != null && tableColumn != '' && tableColumn != undefined) {
			var filterObj = {};
			var fieldData = tableColumn.split('.');
			var tableName = fieldData[0];
			var columnName = fieldData[1];
			if (!isNullOrUndefined(values) && !jQuery.isEmptyObject(values)) {
				filterObj['colName'] = columnName;
				filterObj['operator'] = "IN";
				filterObj['values'] = values;
				columnFilterConditions.push(filterObj);
			}
			if (!(tablesArr.indexOf(tableName) > -1)) {
				tablesArr.push(tableName);
			}
		}
	});
	data['filterConditionArray'] = JSON.stringify(columnFilterConditions);
	data['tablesObj'] = JSON.stringify(tablesArr);
	$.ajax({
		type: "post",
		traditional: true,
		dataType: 'json',
		url: 'getCardImageData',
		cache: false,
		data: data,
		success: function(response) {
			stopLoader();
			if (response != null) {

				var gridId = response['gridId'];
				if (gridId != null && gridId != '' && gridId != undefined) {
					var gridObj = response['gridObj'];
					$("#dialog").html("<div id = '" + gridId + "' class = 'ivisualizationGridDataDivClass'></div>");
					$("#dialog").dialog({
						title: 'Chart Data',
						modal: true,
						width: 1400,
						height: 650,
						fluid: true,
						buttons: [{
							text: (labelObject['Close'] != null ? labelObject['Close'] : 'Close'),
							click: function() {
								$(this).dialog("close");
								$(this).dialog("destroy");
							}

						}
						],
						open: function(event, ui) {
						},
						beforeClose: function(event, ui) {
							$(".visionHeaderMain").css("z-index", "99999");
							$(".visionFooterMain").css("z-index", "99999");
						}
					});
					chartGridConfig(gridObj, 0, paramArray, gridId);
				} else {
					var dataFieldsArray = response['dataFieldsArray'];
					var columnsArray = response['columnsArray'];
					var tableId = "ivisualizationGridDataDiv";

					try {
						$("#" + tableId).jqxGrid("destroy");
						$("#" + tableId).remove();
					} catch (e) {
					}

					$("#dialog").html("<div id = '" + tableId + "' class = 'ivisualizationGridDataDivClass'></div>");
					$("#dialog").dialog({
						title: 'Chart Data',
						modal: true,
						width: 1400,
						height: 650,
						fluid: true,
						open: function(event, ui) {
							setTimeout(function() {
								var source =
								{
									type: 'POST',
									datatype: "json",
									datafields: dataFieldsArray,
									data: data,
									url: 'getCardImgData',
									cache: false,
									root: 'Rows',
									processdata: function(data) {
										showLoader();
										data['getOnlyDataArray'] = 'Y';

									},
									beforeSend: function() {
										//showLoader();

									}, loadError: function(xhr, status, error) {
										stopLoader();
									}, loadComplete: function(data) {
										stopLoader();
									},
									beforeprocessing: function(data) {
										source.totalrecords = data[data.length - 1];
									},
									sort: function() {
										$("[id='" + tableId + "']").jqxGrid('updatebounddata', 'sort');
										try {
											$("[id='" + tableId + "']").jqxGrid('clearselection');
										} catch (e) {
										}

									},
									filter: function() {

										$("[id='" + tableId + "']").jqxGrid('updatebounddata', 'filter');
										try {
											$("[id='" + tableId + "']").jqxGrid('clearselection');
										} catch (e) {
										}

									}
								};

								var dataAdapter = new $.jqx.dataAdapter(source);



								$("[id='" + tableId + "']").jqxGrid(
									{
										width: "100%",
										height: "90%",
										theme: 'energyblue',
										autoshowloadelement: false,
										source: dataAdapter,
										pageable: true,
										pagesize: 50,
										showfilterrow: true,
										filterable: true,
										sortable: true,
										virtualmode: true,
										pagesizeoptions: ['50', '100', '500'],
										rendergridrows: function(params) {
											return params.data;
										},
										columnsresize: true,
										columns: columnsArray
									});
							}, 1000);
							$(".ui-dialog").css("z-index", "99999");
							$(".ui-dialog").addClass("showGridDataJqPopup");
						},
						beforeClose: function(event, ui) {
							$(".visionHeaderMain").css("z-index", "99999");
							$(".visionFooterMain").css("z-index", "99999");
						}
					});
				}

			}

		},
		error: function(e) {
			stopLoader();
			sessionTimeout(e);
		}

	});
}

function showMesgModelPopup(message) {
	var modalObj = {
		title: labelObject['Message'] != null ? labelObject['Message'] : 'Message',
		body: labelObject[message] != null ? labelObject[message] : message,
	};
	var buttonArray = [
		{
			text: labelObject['Ok'] != null ? labelObject['Ok'] : 'Ok',
			click: function() {
			},
			isCloseButton: true
		}
	];
	modalObj['buttons'] = buttonArray;
	$("#modalDailogDiv").remove();
	$("body").append("<div id='modalDailogDiv'></div>");
	createModal("modalDailogDiv", modalObj);
	$("#modalDailogDiv").addClass("modal-custom-class");
	$("#modalDailogDiv .modal-dialog").addClass("modal-xs");
}

function getHomepageFilterParamsArr(existingFilterColStr, chartId) {
    var homepageFilterParamsObj = {};
    var mainFilterConditions = [];
    var chartFilter = $("#" + chartId + "_homePageFilter").val();
    if (chartFilter != null && chartFilter != '' && chartFilter != undefined) {
        chartFilter = JSON.parse(chartFilter);
        if (chartFilter != null && !jQuery.isEmptyObject(chartFilter)) {
            for (var i = 0; i < chartFilter.length; i++) {
                var paramObj = chartFilter[i];
                mainFilterConditions.push(paramObj);
            }
        }
    }
    var slicerFilterCondition = $("#" + chartId + "_filter").val();
    if (slicerFilterCondition != null && slicerFilterCondition != '' && slicerFilterCondition != undefined) {
        slicerFilterCondition = JSON.parse(slicerFilterCondition);
        if (slicerFilterCondition != null && !jQuery.isEmptyObject(slicerFilterCondition) && slicerFilterCondition.length > 0) {
            for (var j = 0; j < slicerFilterCondition.length; j++) {
                var paramObj = slicerFilterCondition[j];
                mainFilterConditions.push(paramObj);
            }
        }
    }
    var chartFilterCond = $("#" + chartId + "_chartFilter").val();
    if (chartFilterCond != null && chartFilterCond != '' && chartFilterCond != undefined) {
        chartFilterCond = JSON.parse(chartFilterCond);
        if (chartFilterCond != null && !jQuery.isEmptyObject(chartFilterCond)) {
            for (var k = 0; k < chartFilterCond.length; k++) {
                var paramObj = chartFilterCond[k];
                mainFilterConditions.push(paramObj);
            }
        }
    }
    if (!isNullOrUndefined(existingFilterColStr) && !jQuery.isEmptyObject(existingFilterColStr)) {
        var existingFilterColArr = JSON.parse(existingFilterColStr);
        if (isNullOrUndefined(mainFilterConditions) || jQuery.isEmptyObject(mainFilterConditions)) {
            mainFilterConditions = existingFilterColArr
        } else {
            $.each(existingFilterColArr, function (index, value) {
                mainFilterConditions.push(value);
            })
        }
    }

    homepageFilterParamsObj['mainFilterConditions'] = mainFilterConditions;
    return homepageFilterParamsObj;
}

function resetHeaderFilters() {
	showLoader();
	$('#visionDashBoardHomeFilterId div').find('div.FilterColumnIdClass').each(function(event) {
		var id = $(this).attr('id');
		$("#" + id).jqxDropDownList('uncheckAll');
	});
	var dashboardName;
    var item =  $("#OptionDropdownData").jqxDropDownList('getSelectedItem');
    if(item !=null)
    {
        dashboardName = item.value;
    }
	getVisualizationchart(dashboardName);
}


function showAutoSuggChartsSaveDelPopup(img, chartType, tableName, columnName, cardType) {
	var responseHtml = '<p class=\"modalPopUpMsgText\">Do you want to save or delete Auto Suggested chart(s)?</p>';
	var buttonArray = [
		{
			text: 'Save',
			click: function() {
				saveHomePageAutoSuggestionsCharts();
				getChartDiv(img, chartType, tableName, columnName, cardType);
			},
			isCloseButton: true
		},
		{
			text: 'Delete',
			click: function() {
				$("#visionVisualizationDataChartViewFilterId").remove();
				deleteHomePageAutoSuggestionsCharts();
				getChartDiv(img, chartType, tableName, columnName, cardType);
			},
			isCloseButton: true
		}
	];
	showPopUpWithButtonFunctionCall(responseHtml, buttonArray);
}




function showAnimatedBubbleSequnce() {
	$('.nonLoadedBubble').map(function(i) {
		let $elm = $(this);
		let interval = i * 500;
		setTimeout(function() {
			$elm.removeClass("nonLoadedBubble");
		}, interval)
	})
}

function showIntelliSenseAutoSuggestions1(divId) {
	var div = "<div id='" + divId + "' class='visionChartsAutoSuggestionUserClass'></div>";
	$("#dialog1").html(div);
	$("#dialog1").dialog({
		title: (labelObject['Co-pilot Mode'] != null ? labelObject['Co-pilot Mode'] : 'Co-pilot Mode'),
		modal: true,
		width: 1200,
		height: 1000, 
		fluid: true,
		buttons: [],
		open: function() {
			$(this).closest(".ui-dialog").find(".ui-button").eq(1).addClass("dialogyes");
			$(".visionHeaderMain").css("z-index", "999");
			$(".visionFooterMain").css("z-index", "999");
			$(".ui-dialog").addClass("bicolumnPopUp");
			showBackStartMessage();
			attachRemovalAction();
			showAnimatedBubbleSequnce();

		},
		beforeClose: function(event, ui) {
			$("#visionChartsAutoSuggestionUserId").empty();
			$(".visionHeaderMain").css("z-index", "99999");
			$(".visionFooterMain").css("z-index", "99999");
		}
	});
}

function showBackStartMessage()  
{
	var userName = $("#rsUserName").val();
	userName = userName.replace("_"," ");
	var user_name="";
	userName = userName.split(' ');
	for (var chr = 0; chr < userName.length; chr++) {
		user_name += userName[chr].substring(0, 1).toUpperCase() + userName[chr].substring(1, userName[chr].length).toLowerCase() + ' '
	}
	var msgText = "<div id='intellisenseViewStartMsgId' class='convai-message nonLoadedBubble'><div class='convai-left-message' ><span>Hi " + user_name + "</span></div></div>"
		+ "<div class='convai-message nonLoadedBubble'><div class='convai-left-message' ><span>Do you want to visualize your data?</span></div></div>"
		+ "<div class='convai-message'><button class='convai-left-message-button nonLoadedBubble' onclick=\"showIntelliSenseMessages('Yes')\" id='intelliSenseYes'>Yes</button>"
		+ "<button class='convai-left-message-button nonLoadedBubble' onclick=\"showIntelliSenseMessages('No')\" id='intelliSenseNo'>No</button></div>";
    $("#visionChartsAutoSuggestionUserId").append(msgText);
    attachRemovalAction();
	showAnimatedBubbleSequnce();
}

function showIntelliSenseMessages(Msg) {
	var msgText = "";
	attachRemovalAction();
	if (Msg != null && Msg != '' && Msg != undefined && Msg == "Yes") {
		msgText = "<div id='intellisenseViewVisualizeMsgId' class='convai-message nonLoadedBubble'><div class='convai-right-message'><span>" + Msg + "</span>"
		+ "</div></div>"
		+ "<div class='intelliSenseViewGoBackClass' onclick=\"goToIntellisensemethod('intellisenseViewStartMsgId','showBackStartMessage')\">"
 		+ "<i class='fa fa-undo' aria-hidden='true' title='go back'></i>"
 		+"</div>";
	    $("#visionChartsAutoSuggestionUserId").append(msgText);
	    showIntelliSenseVisualizedata();
	} else if (Msg != null && Msg != '' && Msg != undefined && Msg == "No") {
		msgText = "<div id='intellisenseViewVisualizeMsgId' class='convai-right-message nonLoadedBubble'><span class=\"existingList\">" + Msg + "</span>"
		+ "</div>"
		+ "<div class='intelliSenseViewGoBackClass' onclick=\"goToIntellisensemethod('intellisenseViewStartMsgId','showBackStartMessage')\">"
 		+ "<i class='fa fa-undo' aria-hidden='true' title='go back'></i>"
 		+ "</div>";
        $("#visionChartsAutoSuggestionUserId").append(msgText);
    }
	showAnimatedBubbleSequnce();
}

function showIntelliSenseVisualizedata()
{
	var msgText = "<div class='convai-message nonLoadedBubble' id='intellisenseViewVisualizeDataId'><div class='convai-left-message' ><span>Do you want to create visualization with new data/existing data?</span></div></div>"
			+ "<div class='convai-message'><button class='convai-left-message-button nonLoadedBubble' onclick='getNewData()'>New Data</button>"
			+ "<button class='convai-left-message-button nonLoadedBubble' onclick=getExistingData()>Existing Data</button></div>";
	$("#visionChartsAutoSuggestionUserId").append(msgText);
	attachRemovalAction();
	showAnimatedBubbleSequnce();
}

function getNewData() {
	var msgText = "<div id='userConversAINewDataDivId' class='userConversAINewDataDivClass'>"
		+ "<div class='convai-message'><div class='convai-right-message'><span class='nonLoadedBubble'>New Data</span>"
		+ "</div></div>"
		+ "<div class='intelliSenseViewGoBackClass' onclick=\"goToIntellisensemethod('intellisenseViewVisualizeDataId','showIntelliSenseVisualizedata')\">"
 		+ "<i class='fa fa-undo' aria-hidden='true' title='go back'></i>"
 		+ "</div>"
		+ "</div>";
	$("#visionChartsAutoSuggestionUserId").append(msgText);
	getIntellisenseViewChartTypes();
	attachRemovalAction();
	showAnimatedBubbleSequnce();
}

function getIntellisenseViewChartTypes()
{
   var msgText =  "<div id='intellisenseViewChartTypesId' class='convai-message nonLoadedBubble'><div class='convai-left-message'><span>Please select File to import the data</span></div></div>"
		+ "<div class='convai-message nonLoadedBubble'><button class='convai-left-message-button nonLoadedBubble' onclick=\"getNewDataType('XLS','Excel')\" id='intelliSenseYes'>XLS</button>"
		+ "<button class='convai-left-message-button nonLoadedBubble' onclick=\"getNewDataType('XLSX','Excel')\" id='intelliSenseYes'>XLSX</button>"
		+ "<button class='convai-left-message-button nonLoadedBubble' onclick=\"getNewDataType('CSV','csv_search')\" id='intelliSenseYes'>CSV</button>"
		+ "<button class='convai-left-message-button nonLoadedBubble' onclick=\"getNewDataType('TEXT','DM_TEXT')\" id='intelliSenseYes'>TEXT</button></div>";
   $("#visionChartsAutoSuggestionUserId").append(msgText);
   attachRemovalAction();
   showAnimatedBubbleSequnce();
}

function goToIntellisensemethod(id, previousId)
{
	if(id == 'visionConvAIMergeTableColumnsParentId'){
	$("#"+id).parent().prev().remove();
	$("#"+id).parent().nextAll().remove();
	$("#"+id).parent().remove();
	
	}
	else{
	if(id == 'userMergeTablesJoinTypesQueryId'){
	$("#"+id).nextAll().remove();
	}
	else{
		$("#"+id).nextAll().remove();
	if(previousId == "4" || previousId == "5" || previousId=='9' ||previousId=='16')
		{
		$("#"+id).prev().remove();
	}
	
	$("#"+id).prev().remove();
	$("#"+id).remove();
	if(previousId=='9')
	$("#chart_type_div").remove();
	}
	}
	if(previousId != null && previousId != '' && previousId != undefined){
		showNextConversationAiMessage(previousId);
	} 
	$("#intelliSenseChartVisualizeDivId"+intellisenseViewChartCount).remove();  
}


function goToIntellisenseRemoveNextDiv(id)
{
	$("#"+id).nextAll().remove();
	$("#"+id).remove();
	$("#intelliSenseChartVisualizeDivId"+intellisenseViewChartCount).remove();  
}
function getNewDataType(fileType, fileImg,replyId) {
	var randomNumber = generateRandomNumber();
	var goBackIconId = "intelliSenseViewGoBackId" + randomNumber;
	var previousId = 4;

	
	var msgText = "<div id='" + goBackIconId + "' class='convai-message' style='height:185px' ><div id='parentFileTablesId' class='convai-right-message parentFileTablesClass replyIntelisenseView'>"
		+ "<div id=\"visualizationDMFileId\" class=\"visualizationDMFileDivClass replyIntelisenseView\">"
		+ "<div id=\"visionShowFileUploadMsg\">Import data</div>"
		+ "<input type=\"file\" name=\"importVisualizationConvAIDMFile\" id=\"importVisualizationConvAIDMFile\" class=\"visionVisualizationDMFilesInput\" style=\"display: none;\">"
		+ "<div class=\"visionVisualizationDMFileUploadclass text-right\" id=\"visionVisualizationDmFileUpload\">"
		+ "<input type=\"hidden\" id=\"selectedTreeTypeName\" value=" + fileType + ">"
		+ "<input type=\"hidden\" id=\"selectedTreeType\" value=\"FILE\">"
		+ "<div id=\"imageFileDiv\" class=\"imageFileDivClass\"><img src=\"images/" + fileImg + ".png\" id=\"excelimageId\" class=\"excelimageClass\"/></div>"
		+ "<div class=\"VisionVisualizationUploadFileContent\"><h5>Import Data From " + fileType + "</h5></div>"
		+ "</div>"
		+ "</div>"
		+ "</div>"
		+ "</div>"
		+ "<div class='intelliSenseViewGoBackClass'"
		+ " onclick=\"goToIntellisensemethod('" + goBackIconId +"','"+ previousId + "')\">"
 		+ "<i class='fa fa-undo' aria-hidden='true' title='go back'></i>"
 		+ "</div>";

	$("#visionChartsAutoSuggestionUserId").append(msgText);
	getNewDataConvAIFileInitialization(fileType,replyId);
	scrollAreaToBottom();
   
}

function getNewDataConvAIFileInitialization(fileType,replyId) {
	$("#visionVisualizationDmFileUpload").click(function() {
		var filetype = $('#selectedTreeTypeName').val();
		console.log("iam in clickable ");
		//            dmTreeFileUpload("N", filetype);

		$("#importVisualizationConvAIDMFile").click();
		//            $("#importVisualizationDMFile").trigger("change");
	});

	$("#importVisualizationConvAIDMFile").on('change', function(event) {

		var filetype = $('#selectedTreeTypeName').val();
		console.log("iam in files change ");
		//            dmTreeFileUpload("N", filetype);
		if (filetype == 'XLSX' || filetype == 'XLS') {
			var files = event.target.files; // FileList object
			parseIntelliSenseSmartBIExcel(files[0], filetype, replyId);
		} else {
			var files = event.target.files;
			//                dmTreeFileUpload("N", filetype);
			uploadSelectedFile(files[0], filetype, replyId);

		}
		event.target.value = '';
	});
	
	
}


function getExistingData()
{
	var msgText = "<div id='userConversAIExistDataDivId' class='userConversAIExistDataDivClass'>"
			+ "<div class='convai-right-message nonLoadedBubble'><span>Existing Data</span>"
			+ "</div>"
			+ "<div class='intelliSenseViewGoBackClass' onclick=\"goToIntellisensemethod('intellisenseViewVisualizeDataId','showIntelliSenseVisualizedata')\">"
 		    + "<i class='fa fa-undo' aria-hidden='true' title='go back'></i>"
 		    + "</div>"
			+ "</div>";
	 $("#visionChartsAutoSuggestionUserId").append(msgText);
	 showAnimatedBubbleSequnce();
	 getExistingTablesData();
}
function getExistingTablesData() {

	var userName = $("#rsUserName").val();
	$.ajax({
		type: "POST",
		url: "getUserTableNames",
		cache: false,
		data: {
			userName: userName
		},
		success: function(response) {
			//TODO: Need to add Loader
			if (response != null && !jQuery.isEmptyObject(response)) {
				var tableDiv = response['tableDiv'];
				var msgText = "<div id='userIntellisenseViewTablesDivId' class='userIntellisenseViewTablesDivClass'>" 
					+ tableDiv
					+ "</div>";
				$("#visionChartsAutoSuggestionUserId").append(msgText);
                showAnimatedBubbleSequnce();
				$('#data-search').on('keyup', function() {
					var searchVal = $(this).val();
					var filterItems = $('[data-intelliSenseViewTablefilter-item]');

					if (searchVal != '') {
						filterItems.addClass('intelliSenseViewTableshidden');
						$('[data-filter-name*="' + searchVal.toUpperCase() + '"]').removeClass('intelliSenseViewTableshidden');
					} else {
						filterItems.removeClass('intelliSenseViewTableshidden');
					}
				});
			}

		},
		error: function(e) {
			console.log(e);
			sessionTimeout(e);
			stopLoader();
		}
	});

}


function parseIntelliSenseSmartBIExcel(file, filetype,replyId) {
	var sheets = [];
	var fileName = file['name'];
	var fileDataType = file['type'];
	var reader = new FileReader();
	if (filetype != null && filetype != '' && filetype != undefined) {
		filetype = filetype.toLowerCase();
	}
	reader.onload = function(e) {

		var mergeFlag = false;
		var data = e.target.result;
		var workbook;
		if (filetype == 'xls') {
			workbook = XLS.read(data, {
				type: 'binary',
				cellDates: true
			});
		} else if (filetype == 'xlsx') {
			workbook = XLSX.read(data, { type: 'binary', cellDates: true, cellNF: true, cellText: false });
			var financeSheets = workbook['Sheets'];
			var mergeFileName = fileName.replace(".xlsx", '');
			$.each(financeSheets, function(key, value) {
				var mergeFinanceSheets = financeSheets[key];
				var merges = mergeFinanceSheets['!merges'];
				if (merges != null && !jQuery.isEmptyObject(merges)) {
					mergeFlag = true;
				}
			});


		}
		var headersObj = {};
		workbook.SheetNames.forEach(function(sheetName) {

			sheets.push(sheetName);
		});

		if (mergeFlag) {
			uploadSelectedFinanceFile(file, filetype, fileName)
		} else {
			getIntelliSenseXlsxFileSheet(workbook, file, filetype, fileName, fileDataType, sheets,replyId);
		}


	}
	reader.onerror = function(ex) {
		console.log(ex);
	};

	reader.readAsBinaryString(file);
}


function getIntelliSenseXlsxFileSheet(workbook, file, filetype, fileName, fileDataType, sheets,replyId) {
	labelObject = {};
	try {
		labelObject = JSON.parse($("#labelObjectHidden").val());
	} catch (e) {
	}
	function extractHeader(ws) {
		const header = []
		const columnCount = XLSX.utils.decode_range(ws['!ref']).e.c + 1;
		for (let i = 0; i < columnCount; ++i) {
			var headerObj = ws[`${XLSX.utils.encode_col(i)}1`];
			if (headerObj != null) {
				header[i] = headerObj.v;
			}
		}
		return header
	}
	var JSONData = {}
	var headersObj = {}
	var sheetsArray = []
	workbook.SheetNames.forEach(function(sheetName) {

		var XL_row_object = XLSX.utils.sheet_to_json(workbook.Sheets[sheetName], { raw: true })
		JSONData[sheetName] = XL_row_object;
		//            document.getElementById("jsonObject").innerHTML = json_object;
		sheetsArray.push(sheetName);
		const sheet = workbook.Sheets[sheetName]
		const headers = extractHeader(sheet);
		headersObj[sheetName] = headers;

	});
	uploadIntelliSenseSmartBISelectedFileXlsx(JSONData, filetype, fileName, headersObj, sheetsArray,replyId);

	$("#visionETLXlsxFileIdAll").click(function() {
		$(".visionETLXlsxFileClass").prop('checked', $(this).prop('checked'));
	});
	var spanText = "<span class='VisionETLXlsxFileSpan'>1." + fileName + "</span>";
	$("#VisionETLXlsxFileNameId").html(spanText);
}
function uploadIntelliSenseSmartBISelectedFileXlsx(jsonData, fileType, fileName, headersObj, sheets,replyId) {
	showLoader();
	var url;
	const myArray = fileName.split(".");
	let tableName = myArray[0];
	tableName = tableName.replace(" ", "_");
	$.ajax({
		type: "post",
		traditional: true,
		url: 'importIntelliSenseTreeChartsDMFileXlsx',
		cache: false,
		data: {
			jsonData: JSON.stringify(jsonData),
			selectedFiletype: fileType,
			fileName: fileName,
			headersObj: JSON.stringify(headersObj),
			sheets: JSON.stringify(sheets),
			tableName: tableName.toUpperCase()
		},
		success: function(response) {
			stopLoader();
			if (response != null && !jQuery.isEmptyObject(response)) {

				var messgae = response['message'];
				if (messgae != null && messgae != '' && messgae != undefined && messgae.indexOf("Table is already") > -1) {
					var tableName = response['tableName'];
					var fileName = response['fileName'];
					var filePath = response['filePath'];
					showConversationAIDialog(tableName, fileName, filePath,replyId);


				} else {
					var tableName = response['tableName'];
					msgText = "<div class='text-right'><span id='intelliSenseTableId' class=\"existingList convai-right-message\" class='intelliSenseTableSpanClass'>" + table_Name + "</span><span><sub class=\"isCreated\"> is Created</sub></span></div>";
					$("#visionChartsAutoSuggestionUserId").append(msgText);
					showIntellisSenseViewTableOptions();
				    attachRemovalAction();
	                showAnimatedBubbleSequnce();
	                scrollAreaToBottom();
	                showNextConversationAiMessage(replyId);
				}
				
				
			}
		},
		error: function(e) {
			console.log("The Error Message is:::" + e.message);
			sessionTimeout(e);
		}
	});
}

function showConversationAIDialog(tableName, fileName, filePath,replyId) {
	var messgae = "<div class='conversationalAIDivClass'>"
		+ "<span>Table Name is already existed.Please choose</span>"
		//+ "<input type='text' id='conversationalAITableId' value='" + tableName + "'/>"
		+ "</div>";
	$("#dialog").html(messgae);
	$("#dialog").dialog({
		title: (labelObject['Message'] != null ? labelObject['Message'] : 'Message'),
		modal: true,
		width: 350,
		height: 200,
		fluid: true,
		buttons: [{
			text: (labelObject['Replace Table'] != null ? labelObject['Replace Table'] : 'Replace Table'),
			click: function() {
				$("#dialog").html("");
				$("#dialog").dialog("close");
				$("#dialog").dialog("destroy");
				showLoader();
				checkExistingFileTableName(tableName, fileName, filePath, tableName,replyId,"Y");
			}

		}, {
			text: (labelObject['Create New Table'] != null ? labelObject['Create New Table'] : 'Create New Table'),
			click: function() {
				$("#dialog").html("");
				$("#dialog").dialog("close");
				$("#dialog").dialog("destroy");
				createNewFileinDb(tableName, fileName, filePath,replyId)
			}

		}],
		open: function() {
			$(this).closest(".ui-dialog").find(".ui-button").eq(1).addClass("dialogyes");
			$(".visionHeaderMain").css("z-index", "999");
			$(".visionFooterMain").css("z-index", "999");
			$(".ui-dialog").addClass("bicolumnPopUp");

		},
		beforeClose: function(event, ui) {
			$(".visionHeaderMain").css("z-index", "99999");
			$(".visionFooterMain").css("z-index", "99999");
		}
	});
}

function createNewFileinDb(tableName, fileName, filePath,replyId)
{
		var messgae = "<div class='conversationalAIDivClass'>"
		+ "<span>Please give new Table Name</span>"
		+ "<input type='text' id='conversationalAITableId' value=''/>"
		+"<div class='conversationalAITableErrorDivClass'></div>"
		+ "</div>";
	$("#dialog").html(messgae);
	$("#dialog").dialog({
		title: (labelObject['Message'] != null ? labelObject['Message'] : 'Message'),
		modal: true,
		width: 350,
		height: 200,
		fluid: true,
		buttons: [{
			text: (labelObject['Ok'] != null ? labelObject['Ok'] : 'Ok'),
			click: function() {
				var newTableName = $("#conversationalAITableId").val();
				if(!(newTableName !=null && newTableName !='' && newTableName !=undefined))
				{
					$(".conversationalAITableErrorDivClass").html("please give Table name");
				}else{
					$(".conversationalAITableErrorDivClass").html("");
				closeDialogBox("#dialog");
				showLoader();
				checkExistingFileTableName(tableName, fileName, filePath, newTableName,replyId);
				}
			}

		}, {
			text: (labelObject['Cancel'] != null ? labelObject['Cancel'] : 'Cancel'),
			click: function() {
				$("#dialog").html("");
				$("#dialog").dialog("close");
				$("#dialog").dialog("destroy");
			}

		}],
		open: function() {
			$(this).closest(".ui-dialog").find(".ui-button").eq(1).addClass("dialogyes");
			$(".visionHeaderMain").css("z-index", "999");
			$(".visionFooterMain").css("z-index", "999");
			$(".ui-dialog").addClass("bicolumnPopUp");

		},
		beforeClose: function(event, ui) {
			$(".visionHeaderMain").css("z-index", "99999");
			$(".visionFooterMain").css("z-index", "99999");
		}
	});
}

function checkExistingFileTableName(tableName, fileName, filePath, newTableName,replyId,deleteFlag) {
	newTableName = newTableName.replaceAll(" ","_");
	$.ajax({
		type: "post",
		traditional: true,
		url: 'createIntelliSenseTableasFile',
		cache: false,
		data: {
			fileName: fileName,
			filePath: filePath,
			tableName: newTableName,
			deleteFlag :deleteFlag
		},
		success: function(response) {
			stopLoader();
			if (response != null && !jQuery.isEmptyObject(response)) {
                var messgae = response['message'];
				var table_Name = response['tableName'];
				if (messgae != null && messgae != '' && messgae != undefined && messgae.indexOf("Table is already") > -1) {
					var fileName = response['fileName'];
					var filePath = response['filePath'];
					showConversationAIDialog(table_Name, fileName, filePath,replyId);
				} else {
					if ($("#intelliSenseTableId").length > 0) {
						$("#intelliSenseTableId").text(table_Name);
					} else {
						msgText = "<div class='text-right'><span id='intelliSenseTableId' class=\"existingList convai-right-message\" class='intelliSenseTableSpanClass'>" + table_Name + "</span><span><sub class=\"isCreated\"> is Created</sub></span></div>";
						$("#visionChartsAutoSuggestionUserId").append(msgText);

					}
					showNextConversationAiMessage(replyId);
				}
			}
		},
		error: function(e) {
			console.log("The Error Message is:::" + e.message);
			sessionTimeout(e);
		}
	});
}
function getConversationalAISelectedTableName(tableName) {
	if ($("#intelliSenseTableId").length > 0) {
		$("#intelliSenseTableId").text(tableName);
	} else {
		var msgText = "<div id='intellisenseViewTableId' class='text-right convai-right-message'><span id='intelliSenseTableId'>" + tableName + "</span>"
		    +"</div>"
		    + "<div class='intelliSenseViewGoBackClass' onclick=\"goToIntellisensemethod('userIntellisenseViewTablesDivId','getExistingTablesData')\">"
 		    + "<i class='fa fa-undo' aria-hidden='true' title='go back'></i>"
 		    + "</div>";
		$("#visionChartsAutoSuggestionUserId").append(msgText);
	}

	$(".userTableNamesDivClass .search ,.userTableNamesDivClass .userIntellisenseViewTableNamesDivClass").remove();
    showIntellisSenseViewTableOptions()
	showAnimatedBubbleSequnce();
	
	
}




function showIntellisSenseViewTableOptions()
{
	var tableName = $("#intelliSenseTableId").text();
	var msgText = "<div id='intelliSenseViewTableOptionsId' class='convai-message nonLoadedBubble'><p class='text-right convai-left-message'><span class='intelliSenseTableSpanClass'>Do you want ViewData/View columns/create chart?</span></p></div>"
		+ "<div class='convai-message'><button class='convai-left-message-button nonLoadedBubble' onclick=\"getIntelliSenseViewTableData('"  + tableName +   "')\" id='intelliSenseYes'>View Data</button>"
			+ "<button class='convai-left-message-button nonLoadedBubble' onclick=\"getIntelliSenseViewTableColumns('" +  tableName + "')\" id='intelliSenseNo'>View Columns</button>"
			+ "<button class='convai-left-message-button nonLoadedBubble' onclick=\"showIntellisenseViewChartTypes()\" id='intelliSenseNo'>Create Chart</button></div>";
	$("#visionChartsAutoSuggestionUserId").append(msgText);
	attachRemovalAction();
	showAnimatedBubbleSequnce();
}

function attachRemovalAction() {
	$("button.convai-left-message-button").click(function() {  
		$(this).parent().find("button.convai-left-message-button").each(function() {
			$(this).remove();
		})
	})

}

function getIntelliSenseViewTableColumns(tableName) {
	var msgText = "<p class='text-right convai-left-message'><span class='intelliSenseViewCloumnsClass'>View columns</span></p>";
	$("#visionChartsAutoSuggestionUserId").append(msgText);
	$.ajax({
		type: "post",
		traditional: true,
		url: 'getIntelliSenseTableColumns',
		cache: false,
		data: {
			tableName: tableName
		},
		success: function(response) {
			stopLoader();
			if (response != null && !jQuery.isEmptyObject(response)) {
				var columnDiv = response['columnDiv'];
				if ($.trim($("#intellisenseViewUserColumnNamesDivId").html()).length > 0) {
					$("#intellisenseViewUserColumnNamesDivId").html(columnDiv);
				} else {
					var userColumnDiv = "<div class='convai-message'><div id='intellisenseViewUserColumnNamesDivId' class='intellisenseViewUserColumnNamesDivClass'>"
						+ columnDiv
						+ "</div>"
						+ "</div>"
					$("#visionChartsAutoSuggestionUserId").append(userColumnDiv);
				}
              setTimeout(function(){

				var msgText = "<div class='convai-message nonLoadedBubble'><p class='text-right convai-left-message'><span class='intelliSenseViewCreateChartClass'>Do you want to Create Chart?</span></p></div>"
					+ "<div class='convai-message'><button class='convai-left-message-button nonLoadedBubble' onclick=\"getIntelliSenseViewCreateChart('Yes')\" id='intelliSenseYes'>Yes</button>"
					+ "<button class='convai-left-message-button nonLoadedBubble' onclick=\"getIntelliSenseViewCreateChart('No')\" id='intelliSenseNo'>No</button></div>";
				$("#visionChartsAutoSuggestionUserId").append(msgText);
					attachRemovalAction();
	showAnimatedBubbleSequnce();
             },2000);
				attachRemovalAction();
	showAnimatedBubbleSequnce();
			}
		},
		error: function(e) {
			console.log("The Error Message is:::" + e.message);
			sessionTimeout(e);
		}
	});
}



function scrollAreaToBottom(divHeight) {
	var element = document.querySelector('#dialog1 .visionChartsAutoSuggestionUserClass').closest("#dialog1");
	if (divHeight != null && divHeight != '' && divHeight != undefined) {
		var scrollTop = element.scrollHeight-divHeight;
		element.scrollTo(0, scrollTop);
		$("#userMergeTableColumnsDivId").css("height","100%","!important");
	}else{
		element.scrollTo(0, element.scrollHeight);
		//$(".visionChartsAutoSuggestionUserClass").animate({ scrollTop: $(".visionChartsAutoSuggestionUserClass").prop("scrollHeight") }, 500); 
			$("#visionChartsAutoSuggestionUserId").animate({ scrollTop: $("#visionChartsAutoSuggestionUserId").prop("scrollHeight") }, 500);
	}
	
}
    
    function getIntelliSenseViewCreateChart(msg)
    {
	if(msg !=null && msg !='' && msg !=undefined && msg == 'Yes')
	{
	  var msgText = "<p class='text-right convai-right-message nonLoadedBubble'><span class='intelliSenseMessageSpanClass'>"+msg+"</span></p>";
	  $("#visionChartsAutoSuggestionUserId").append(msgText);
	  showIntellisenseViewChartTypes('msg');
	}
	  
    }

function showIntellisenseViewChartTypes(msg) {
	if(!(msg !=null && msg !='' && msg !=undefined)){
	var msgText = "<div id='intellisenseViewCreatechartid' class='text-right convai-right-message nonLoadedBubble'><span class='intelliSenseCreateChartClass'>Create chart</span>"
	        +"</div>"
	        + "<div class='intelliSenseViewGoBackClass' onclick=\"goToIntellisensemethod('intelliSenseViewTableOptionsId','showIntellisSenseViewTableOptions')\">"
 		    + "<i class='fa fa-undo' aria-hidden='true' title='go back'></i>"
 		    + "</div>";
	$("#visionChartsAutoSuggestionUserId").append(msgText);
	showAnimatedBubbleSequnce();
	}
	showIntellisenseViewCreateChartTypes();
}



function showIntellisenseViewCreateChartTypes()
{
	$.ajax({
		type: "post",
		traditional: true,
		url: 'getIntelliSenseChartTypes',
		cache: false,
		data: {

		},
		success: function(response) {
			stopLoader();
			if (response != null && !jQuery.isEmptyObject(response)) {
				var chartDiv = response['chartDiv'];
				if ($.trim($("#intelliSenseChartDivId").html()).length > 0) {
					var userAppendDiv = "<p class='convai-left-message nonLoadedBubble' >Select chart type</p>"
						+ chartDiv;
					$("#intelliSenseChartDivId").html(userAppendDiv);
				} else {
					var appendDiv = "<div id='intelliSenseChartDivId' class='intelliSenseChartClass text-left'>"
						+ "<p class='convai-left-message nonLoadedBubble' >Select chart type</p>"
						+ chartDiv
						+ "</div>";
					$("#visionChartsAutoSuggestionUserId").append(appendDiv);
				}
				showAnimatedBubbleSequnce();
				scrollAreaToBottom();
			}
		},
		error: function(e) {
			console.log("The Error Message is:::" + e.message);
			sessionTimeout(e);
		}
	});
}
var chartType1="";
function showIntelliSenseViewChartDiv(chartImage, chartType,replyId) {
	chartType1=chartType;
	$("#intelliSenseChartTypeId").remove();
	$("#intelliSenseChartImageId").remove();
	
	var chartDiv = "<div id='intellisenseViewchartid' class=\"visualIconDivImg text-right replyIntelisenseView convai-right-message p-3 nonLoadedBubble\">"
		+ "<img src=\"images/" + chartImage + "\" class=\"visualDarkMode\">"
		+ "<input type='hidden' id='intelliSenseChartTypeId' value='" + chartType + "'/>"
		+ "<input type='hidden' id='intelliSenseChartImageId' value='" + chartImage + "'/>"
		+ "</div>"
		+ "<div class=\"intelliSenseViewGoBackClass\" onclick=\"goToIntellisensemethod('intellisenseViewchartid','9')\"><i class=\"fa fa-undo\" aria-hidden=\"true\" title=\"go back\"></i></div>";
	$("#visionChartsAutoSuggestionUserId").append(chartDiv);
	$(".iconsRow").remove();  
	showNextConversationAiMessage(replyId);
	showAnimatedBubbleSequnce();
	getIntellisenseViewExampleChartDesign(chartType);
}
function showIntelliSenseViewChartColumns(replyId) {
	var tableName = $("#intelliSenseTableId").text();
	var chartType = $("#intelliSenseChartTypeId").val();
	var columnsCount  = intellisenseViewChartCount;
	$.ajax({
		type: "post",
		traditional: true,
		url: 'getIntelliSenseChartColumns',
		cache: false,
		data: {
			tableName: tableName,
			columnsCount: columnsCount,
			chartType: chartType
		},
		success: function(response) {
			stopLoader();
			if (response != null && !jQuery.isEmptyObject(response)) {
				var chartColumnsDiv = response['chartColumnsDiv'];
				if(chartType !=null && chartType !='' && chartType !=undefined && chartType =='indicator'){
					   var appendDiv = "<div id='intelliSenseChartParentDivId" + columnsCount + "' class='intelliSenseChartParengtClass sayIntelisenseView text-left'>"
					+ "<div id='intelliSenseChartDivId" + columnsCount + "' class='intelliSenseChartClass sayIntelisenseView text-left'>"
					+ "<div id='intelliSenseChartColumnsDivId" + columnsCount + "' class='intelliSenseChartColumnsDivClass nobgbubble sayIntelisenseView'>"
					+ "<p class='convai-left-message nonLoadedBubble' style='display:none'>Select Value columns</p>"
					+ chartColumnsDiv
					+ "</div>"
					+ "</div>"
					+ "</div>";
					$("#visionChartsAutoSuggestionUserId").append(appendDiv);
					setTimeout(function()
				{
					$("#intelliSenseChartColumnsDivId" + columnsCount + "").find("p:first").show();
					var childId = $("#intelliSenseViewColumnsId"+columnsCount +" div:first-child").attr('id');
	                $("#"+childId).show();
	                showIntelliSenseViewChartConfig(columnsCount, chartType);
					showAnimatedBubbleSequnce();
					scrollAreaToBottom();
				},2000); 
				}else{
				var appendDiv = "<div id='intelliSenseChartParentDivId" + columnsCount + "' class='intelliSenseChartParengtClass sayIntelisenseView text-left'>"
					+ "<div id='intelliSenseChartDivId" + columnsCount + "' class='intelliSenseChartClass sayIntelisenseView text-left'>"
					+ "<div id='intelliSenseChartColumnsDivId" + columnsCount + "' class='intelliSenseChartColumnsDivClass nobgbubble sayIntelisenseView'>"
					+ "<p class='convai-left-message nonLoadedBubble' style='display:none'>Select Axis columns</p>"
					+ chartColumnsDiv
					+ "</div>"
					+ "</div>"
					+ "</div>"; 
				$("#visionChartsAutoSuggestionUserId").append(appendDiv);
				$("#intelliSenseViewAxisColumnsId" + columnsCount).attr("columnsCount", 0);
				$("#intelliSenseViewValuesColumnsId" + columnsCount).attr("columnsCount", 0);
				setTimeout(function()
				{
					$("#intelliSenseChartColumnsDivId" + columnsCount + "").find("p:first").show();
					showNextIntelliSenseDiv("intelliSenseViewColumnsId" + columnsCount ,columnsCount,chartType);
					showAnimatedBubbleSequnce();
					scrollAreaToBottom();
				},2000);
				
                showAnimatedBubbleSequnce();
	   			}
			}
		},
		error: function(e) {
			console.log("The Error Message is:::" + e.message);
			sessionTimeout(e);
		}
	});

}

function showNextIntelliSenseDiv(divId,columnsCount,chartType)
{
	var childId = $("#"+divId +" div:first-child").attr('id');
	$("#"+childId).show();
	$("#"+childId).after("<button id='intelliSenseViewNextButtonId' class='convai-left-message-button nonLoadedBubble' onclick=showNextIntelliSenseViewDivId('" + childId + "',"+columnsCount+",'"+chartType+"')>Next</button>");
    showAnimatedBubbleSequnce();
    scrollAreaToBottom();
}
function showNextIntelliSenseViewDivId(childId,columnsCount,chartType)
{
	$("#intelliSenseViewNextButtonId").remove();
	var subChildId = $("#"+childId).next().attr("id");
	if(subChildId !=null && subChildId !='' && subChildId !=undefined)
	{
	$("#"+subChildId).before("<div class='convai-left-message'>Select Value columns</div>");
	$("#"+subChildId).show();
	var superChildId = $("#"+subChildId).next().attr("id")
	if(superChildId !=null && superChildId !='' && superChildId !=undefined
	&& $.trim($("#"+superChildId).html()).length>0)
	{
	  $("#"+subChildId).after("<button id='intelliSenseViewNextButtonId' class='convai-left-message-button'  onclick=showNextIntelliSenseViewDivId('" + subChildId + "')>Next</button>");	
	}else{
		showIntelliSenseViewChartConfig(columnsCount, chartType);
		}
	}
	
	showAnimatedBubbleSequnce();
	scrollAreaToBottom();
}

function applyIntellisenseViewChartColumns(count,noChangeFlag)
{
	var error_count=0;
	$("#intelliSenseViewValuesColumnsId"+count+" div").each(function()
	{
		var divId = $(this).attr('id');
		if(divId !=null && divId !='' && divId !=undefined)
		{
			var inputId = $("#"+divId).find("input").attr('id');
			if(inputId !=null && inputId !='' && inputId !=undefined)
			{
				var aggregateColumn = $("#"+inputId).attr("aggregateColumn");
				if(!(aggregateColumn !=null && aggregateColumn !='' && aggregateColumn !=undefined))
				{
				  error_count++;	
				}
			}
		}
	});
	if(error_count>0)
	{
		$("#intelliSenseViewValuesColumnsAppendId"+count).remove();
		$("#intelliSenseViewValuesColumnsId"+count).append("<div id='intelliSenseViewValuesColumnsAppendId"+count+"' class='convai-left-message'>Please apply the aggregate functions to Value columns</div>");
		$("#intelliSenseViewValuesColumnsAppendId"+count).append("<span class='intellisenseviewAggregateImagespanClass'><img src='images/arrowAggregateImg.png'/></span>");
	}else{
		getIntelliSenseViewChart(count,noChangeFlag);     
	}
} 
function showIntellisenseViewConfigOptions()
{
	var columnsCount = intellisenseViewChartCount;
	var chartType = $("#intelliSenseChartTypeId").val();
	setTimeout(function()
		{
	    var dim = $("#intelliSenseChartConfigDivId" + columnsCount).is(":visible");
	    if(dim == false){
		$("#intelliSenseChartConfigDivId" + columnsCount).show();
		changeIntellisenseViewElementsId(columnsCount, chartType);
		showNextIntelliSenseViewConfigId("intelliSenseChartConfigDivId"+ columnsCount,columnsCount);
		}
		},2000);
}
function showNextIntelliSenseViewConfigId(divId, count)
{
	var li = $("#"+divId).find('ul li:first');
	$(li).addClass("active");
	var text = $("#"+divId).find('ul li:first').find('div > p').text();
   	$("#"+divId).find('ul li:first').before("<div class='intelliSenseViewliClass convai-left-message'>Please provide "+text+"</div>")
   	$("#"+divId).find('ul li:first').show();
   	$("#"+divId).find('ul li:first').after("<button id='intelliSenseViewNextButtonId' class='convai-left-message-button'  onclick=showNextIntelliSenseViewConfigLiId('"+divId+"',"+count+")>Next</button>");
   	$("#"+divId).find('ul li:first').after("<button id='intelliSenseViewSkipAllButtonId' class='convai-left-message-button'  onclick=showNextIntelliSenseViewSkipAll('"+divId+"',"+count+")>Skip All</button>");
    showAnimatedBubbleSequnce();
    scrollAreaToBottom();
}

function showNextIntelliSenseViewSkipAll(divId,count)
{
	var titleVal = $('#'+chartType1.toUpperCase()+'CHARTTITLE'+count).val();
	if (titleVal == '' || titleVal == null || titleVal == undefined) {
		if ($("#titleNotGivenErrorMsgDivId").length === 0) {
			$("#"+divId).find('ul li:first').after("<div id='titleNotGivenErrorMsgDivId' style='color: red;'>Please provide Some Title</div>");
		}
		return ;
	}
	
	$("#titleNotGivenErrorMsgDivId").remove();
	$("#intelliSenseViewSkipAllButtonId").remove();
	$("#intelliSenseViewNextButtonId").remove();
	setTimeout(function(){
		var msgText = "<div class='convai-message nonLoadedBubble' id='intellisenseViewVisualizeDataId'><div class='convai-left-message' ><span>Do you want to apply filters to above chart?</span></div></div>"
			+ "<div class='convai-message'><button class='convai-left-message-button nonLoadedBubble' onclick='showIntellisenseViewFilters("+count+")'>Yes</button>"
			+ "<button class='convai-left-message-button nonLoadedBubble' onclick=showIntellisenseViewNoFilterSaveChart('14')>No</button></div>";
	    $("#visionChartsAutoSuggestionUserId").append(msgText);
	    attachRemovalAction();
	    showAnimatedBubbleSequnce();
	    scrollAreaToBottom();
	  },3000);
}
function showNextIntelliSenseViewConfigLiId(divId,count)
{
	var titleVal = $('#'+chartType1.toUpperCase()+'CHARTTITLE'+count).val();
if (titleVal == '' || titleVal == null || titleVal == undefined) {
    if ($("#titleNotGivenErrorMsgDivId").length === 0) {
        $("#"+divId).find('ul li:first').after("<div id='titleNotGivenErrorMsgDivId' style='color: red;'>Please provide Some Title</div>");
    }
    return ;
}
	
	$("#titleNotGivenErrorMsgDivId").remove();
	$("#intelliSenseViewNextButtonId").remove();
	$("#intelliSenseViewSkipAllButtonId").remove();
	var li = $("#"+divId).find('ul li.active').next('li');
	$("#"+divId).find('ul li.active').removeClass("active");
	var text = $(li).find('div > p').text();
   	$(li).before("<div class='intelliSenseViewliClass convai-left-message'>Please provide "+text+"</div>")
   	$(li).show();
   	$(li).addClass("active");
   	var nextli = $("#"+divId).find('ul li.active').next('li');
   	if(nextli.length>0)
   	{
   	$(li).after("<button id='intelliSenseViewNextButtonId' class='convai-left-message-button'  onclick=showNextIntelliSenseViewConfigLiId('"+divId+"',"+count+")>Next</button>");
   	$(li).after("<button id='intelliSenseViewSkipAllButtonId' class='convai-left-message-button'  onclick=showNextIntelliSenseViewSkipAll('"+divId+"',"+count+")>Skip All</button>");
    }else{
	  setTimeout(function(){ 
		var msgText = "<div class='convai-message nonLoadedBubble' id='intellisenseViewVisualizeDataId'><div class='convai-left-message' ><span>Do you want to apply filters to above chart?</span></div></div>"
			+ "<div class='convai-message'><button class='convai-left-message-button nonLoadedBubble' onclick='showIntellisenseViewFilters("+count+")'>Yes</button>"
			+ "<button class='convai-left-message-button nonLoadedBubble' onclick=showIntellisenseViewNoFilterSaveChart('14')>No</button></div>";
	    $("#visionChartsAutoSuggestionUserId").append(msgText);
	    attachRemovalAction();
	    showAnimatedBubbleSequnce();
	    scrollAreaToBottom();
	  },3000);
    }
    showAnimatedBubbleSequnce();
    scrollAreaToBottom();
	
}

function showIntellisenseViewNoFilterSaveChart(replyId)
{
	 var msgText = "<div class='convai-message nonLoadedBubble' id='intellisenseViewVisualizeDataId'><div class='convai-right-message' ><span>No</span></div></div>"
                  +"<div class='intelliSenseViewGoBackClass'" + "  onclick=\"goToFilteremethod('intellisenseViewVisualizeDataId','intelliSenseChartConfigDivId"+ count+"','"+count+"')\">"
 		             + "<i class='fa fa-undo' aria-hidden='true' title='go back'></i>"
 		             + "</div>";
	    $("#visionChartsAutoSuggestionUserId").append(msgText);
	    attachRemovalAction();
	    showAnimatedBubbleSequnce();	
	    showNextConversationAiMessage(replyId);
}

function showIntellisenseViewFilters(count)
{
   var msgText = "<div class='convai-message nonLoadedBubble' id='intellisenseViewVisualizeDataId'><div class='convai-right-message' ><span>Yes</span></div></div>"
                  +"<div class='intelliSenseViewGoBackClass'" + "  onclick=\"goToFilteremethod('intellisenseViewVisualizeDataId','intelliSenseChartConfigDivId"+ count+"','"+count+"')\">"
 		             + "<i class='fa fa-undo' aria-hidden='true' title='go back'></i>"
 		             + "</div>";
	    $("#visionChartsAutoSuggestionUserId").append(msgText);
	    attachRemovalAction();
	    showAnimatedBubbleSequnce();	
	    getIntellisenseViewFilters(count);
}  


function goToFilteremethod(id,filterId,count,previousId)
{	
	 $("#"+id).nextAll().remove();
	
     $("#"+id).remove();
     
	$("#intelliSenseChartFiltersDivId"+count+"").remove();
	
	if(filterId != null && filterId != '' && filterId != undefined){
		$("#intellisenseViewVisualizeDataId").remove();
		showNextIntelliSenseViewSkipAll(id,count);
	 } 
	
}

function getIntellisenseViewFilters(count)
{
	var tableName = $("#intelliSenseTableId").text();
	$.ajax({
		type: "post",
		traditional: true,
		url: 'getIntelliSenseViewFilters',
		cache: false,
		data: {
          tableName :tableName,
          count:count,
          columnsCount:0
		},
		success: function(response) {
			stopLoader();
			if (response != null && !jQuery.isEmptyObject(response)) {
				var chartDiv = response['chartColumnsDiv'];
				if ($.trim($("#intelliSenseChartFiltersDivId"+count).html()).length > 0) {
					var userAppendDiv = "<p class='convai-left-message nonLoadedBubble' >Select Filter columns</p>"
						+ "<input type='hidden' id='intelliSenseChartFiltersDivId"+count+"' value='0'/>"
						+ "<img src='images/Plus_White_Icon.svg' title='Add Columns' onclick=\"getIntelliSenseViewAddFilterColumns(this,"+count+",'intelliSenseChartFiltersDivId"+count+"')\" class='intellisenseviewaddFiltervaluecolumns' style='display: inline;'>"
						+ "<div id='intellisenseViewChartFiltersColumnsDivId"+count+"' class='intellisenseViewchartFiltercolumnsclass'>"
						+ chartDiv
						+ "</div>";
					$("#intelliSenseChartFiltersDivId"+count).html(userAppendDiv);
				} else {
					var appendDiv = "<div id='intelliSenseChartFiltersDivId"+count+"' class='intelliSenseChartClass text-left'>"
						+ "<p class='convai-left-message nonLoadedBubble' >Select Filter columns</p>"
						+ "<input type='hidden' id='intelliSenseChartFiltersDivId"+count+"' value='0'/>"
						+ "<img src='images/Plus_White_Icon.svg' title='Add Columns' onclick=\"getIntelliSenseViewAddFilterColumns(this,"+count+",'intelliSenseChartFiltersDivId"+count+"')\" class='intellisenseviewaddFiltervaluecolumns' style='display: inline;'>"
						+"<div id='intellisenseViewChartFiltersColumnsDivId"+count+"' class='intellisenseViewchartFiltercolumnsclass'>"
						+ chartDiv
						+"</div>"
						+ "</div>";
					$("#visionChartsAutoSuggestionUserId").append(appendDiv);
				}
				
				
				var timeOut = null;
				$('[id^="visionVisualizeChartFiltersFieldDivId"]').unbind('keyup').on('keyup', function(event) {
					clearTimeout(timeOut);
					timeOut = setTimeout(function() {
						var count;
						var targetId = event.currentTarget.id;
						var parentId = $("#"+targetId).parent().parent().parent().attr("id");
                        if(parentId !=null && parentId !='' && parentId !=undefined)
                        {
	                      count = parentId.replace("intellisenseViewChartFiltersColumnsDivId","");
	                    }
                        checkIntellisenseViewAxisColumnNull(count,"changeFlag");

					}, 3000);
				});
				$('[id^="visionVisualizeChartFiltersFieldDivId"]').unbind('change').on('change', function(event) {
					    var count;
						var targetId = event.currentTarget.id;
						var parentId = $("#"+targetId).parent().parent().parent().attr("id");
                        if(parentId !=null && parentId !='' && parentId !=undefined)
                        {
	                      count = parentId.replace("intellisenseViewChartFiltersColumnsDivId","");
	                    }
                         checkIntellisenseViewAxisColumnNull(count,"changeFlag");
				});
				$('[id^="visionVisualizeChartFiltersFieldDivId"]').on('checkChange', function(event) {
					clearTimeout(timeOut);
					timeOut = setTimeout(function() {
						var count;
						var targetId = event.currentTarget.id;
						var parentId = $("#"+targetId).parent().parent().parent().attr("id");
                        if(parentId !=null && parentId !='' && parentId !=undefined)
                        {
	                      count = parentId.replace("intellisenseViewChartFiltersColumnsDivId","");
	                    }
                         checkIntellisenseViewAxisColumnNull(count,"changeFlag");  
					}, 3000);

				});
				showAnimatedBubbleSequnce();
				scrollAreaToBottom();
			}
		},
		error: function(e) {
			console.log("The Error Message is:::" + e.message);
			sessionTimeout(e);
		}
	});
}

function getIntelliSenseViewAddFilterColumns($this,count,hiddenId)
{
	var columnCount = $("#"+hiddenId).val();
	columnCount++;
	var tableName = $("#intelliSenseTableId").text();
	$.ajax({
		type: "post",
		traditional: true,
		url: 'getIntelliSenseViewFilters',
		cache: false,
		data: {
          tableName :tableName,
          count:count,
          columnsCount:columnCount
		},
		success: function(response) {
			stopLoader();
			if (response != null && !jQuery.isEmptyObject(response)) {
				var chartDiv = response['chartColumnsDiv'];
				$("#intellisenseViewChartFiltersColumnsDivId"+count).append(chartDiv);
				showAnimatedBubbleSequnce();
				scrollAreaToBottom();
				$("#"+hiddenId).val(columnCount);
				var timeOut = null;
				$('[id^="visionVisualizeChartFiltersFieldDivId"]').unbind('keyup').on('keyup', function(event) {
					clearTimeout(timeOut);
					timeOut = setTimeout(function() {
						var count;
						var targetId = event.currentTarget.id;
						var parentId = $("#"+targetId).parent().parent().parent().attr("id");
                        if(parentId !=null && parentId !='' && parentId !=undefined)
                        {
	                      count = parentId.replace("intellisenseViewChartFiltersColumnsDivId","");
	                    }
                        checkIntellisenseViewAxisColumnNull(count,"changeFlag");

					}, 3000);
				});
				$('[id^="visionVisualizeChartFiltersFieldDivId"]').unbind('change').on('change', function(event) {
					    var count;
						var targetId = event.currentTarget.id;
						var parentId = $("#"+targetId).parent().parent().parent().attr("id");
                        if(parentId !=null && parentId !='' && parentId !=undefined)
                        {
	                      count = parentId.replace("intellisenseViewChartFiltersColumnsDivId","");
	                    }
                        checkIntellisenseViewAxisColumnNull(count,"changeFlag");
				});
				$('[id^="visionVisualizeChartFiltersFieldDivId"]').on('checkChange', function(event) {
					clearTimeout(timeOut);
					timeOut = setTimeout(function() {
						var count;
						var targetId = event.currentTarget.id;
						var parentId = $("#"+targetId).parent().parent().parent().attr("id");
                        if(parentId !=null && parentId !='' && parentId !=undefined)
                        {
	                      count = parentId.replace("intellisenseViewChartFiltersColumnsDivId","");
	                    }
                        checkIntellisenseViewAxisColumnNull(count,"changeFlag");
					}, 3000);

				});
			}
		},
		error: function(e) {
			console.log("The Error Message is:::" + e.message);
			sessionTimeout(e);
		}
	});
}
var morechartstimer=0;
var moreChartsInterval;
var moreChartsMessage=true;
function getIntelliSenseFilterColumn($this,chartCount,columnCount)
{
	var selectedVal = $("#userFilterColumnNamesDivId"+chartCount+columnCount).val();
	var tableName = $("#intelliSenseTableId").text();
	$.ajax({
		type: "post",
		traditional: true,
		url: 'getIntelliSenseViewFiltersValues',
		cache: false,
		data: {
          tableName :tableName,
          selectedVal:selectedVal,
          count:chartCount,
          columnsCount:columnCount
		},
		success: function(response) {
			stopLoader();
			if (response != null && !jQuery.isEmptyObject(response)) {
				var chartDiv = response[selectedVal];
				var checkBoxList = response["checkBoxList"];
				$("#intellisenseViewFilterDivId"+ chartCount+columnCount).html(chartDiv);
			    $("#visionVisualizeChartFiltersFieldValuesId" + chartCount+columnCount).jqxListBox({
					filterable: true,
					checkboxes: true,
					source: checkBoxList,
					theme: 'energyblue',
					displayMember: 'text',
					valueMember: 'value'
				});
				
				var timeOut = null;
				moreChartsMessage =true;
				$('[id^="visionVisualizeChartFiltersFieldDivId"]').unbind('keyup').on('keyup', function(event) {
					clearTimeout(timeOut);
					timeOut = setTimeout(function() {
						var count;
						var targetId = event.currentTarget.id;
						var parentId = $("#"+targetId).parent().parent().parent().attr("id");
                        if(parentId !=null && parentId !='' && parentId !=undefined)
                        {
	                      count = parentId.replace("intellisenseViewChartFiltersColumnsDivId","");
	                    }
                        checkIntellisenseViewAxisColumnNull(count,"changeFlag");
                       

					}, 3000);
				});
				$('[id^="visionVisualizeChartFiltersFieldDivId"]').unbind('change').on('change', function(event) {
					    var count;
						var targetId = event.currentTarget.id;
						var parentId = $("#"+targetId).parent().parent().parent().attr("id");
                        if(parentId !=null && parentId !='' && parentId !=undefined)
                        {
	                      count = parentId.replace("intellisenseViewChartFiltersColumnsDivId","");
	                    }
                        checkIntellisenseViewAxisColumnNull(count,"changeFlag");
                        
				});
				$('[id^="visionVisualizeChartFiltersFieldDivId"]').on('checkChange', function(event) {
					clearTimeout(timeOut);
					timeOut = setTimeout(function() {
						var count;
						var targetId = event.currentTarget.id;
						var parentId = $("#"+targetId).parent().parent().parent().attr("id");
                        if(parentId !=null && parentId !='' && parentId !=undefined)
                        {
	                      count = parentId.replace("intellisenseViewChartFiltersColumnsDivId","");
	                    }
                        checkIntellisenseViewAxisColumnNull(count,"changeFlag");
                        if(moreChartsMessage){
                        moreChartsInterval = setInterval(morechartstimerInterval,1000);
                        }
                        
					}, 3000);

				});
				
				showAnimatedBubbleSequnce();
				scrollAreaToBottom();
			}
		},
		error: function(e) {
			console.log("The Error Message is:::" + e.message);
			sessionTimeout(e);
		}
	});
}

function morechartstimerInterval()
{
	morechartstimer ++;
	if(morechartstimer > 10)
	{
		showNextConversationAiMessage('20');
		clearInterval(moreChartsInterval);
		morechartstimer=0;
		moreChartsMessage=false;
	}
}
function showIntellisenseViewMoreCharts(count)
{
   var msgText = "<div class='convai-message nonLoadedBubble' id='intellisenseViewVisualizeDataId'><div class='convai-left-message' ><span>Do you want to create more charts?</span></div></div>"
			+ "<div class='convai-message'><button class='convai-left-message-button nonLoadedBubble' onclick='showIntellisenseViewChartsMore('Yes')'>Yes</button>"
			+ "<button class='convai-left-message-button nonLoadedBubble' onclick=showIntellisenseViewChartsMore('No')>No</button></div>";
	    $("#visionChartsAutoSuggestionUserId").append(msgText);
	    attachRemovalAction();
	    showAnimatedBubbleSequnce();
}

function getIntelliSenseAxisColumn($this, chartCount, columnsCount) {
	var axisColumn = $("#userAxisColumnNamesDivId" + chartCount + columnsCount).val();
	var tableName = $("#intelliSenseTableId").text();
	if (axisColumn != null && axisColumn != '' && axisColumn != undefined) {
	$("#intellisenseViewAxisInputId" + chartCount + columnsCount).attr("value", tableName + "." + axisColumn);
	$("#intelliSenseViewAxisColumnsAppendId"+chartCount).remove();
	setTimeout(function()
	 {
	   applyIntellisenseViewChartColumns(count);	
	 },3000);
	}
}

function getIntelliSenseValuesColumn($this, chartCount, columnsCount) {
	var valueColumn = $("#userValuesColumnNamesDivId" + chartCount + columnsCount).val();
 var tableName = $("#intelliSenseTableId").text();
 if (valueColumn != null && valueColumn != '' && valueColumn != undefined
 && tableName != null && tableName != '' && tableName != undefined) {
 $("#intellisenseViewValuesInputId" + chartCount + columnsCount).attr("value", tableName + "." + valueColumn); 
 $("#intellisenseViewValuesInputId" + chartCount + columnsCount).attr("aggregateColumn","");
	setTimeout(function()
	{
	applyIntellisenseViewChartColumns(chartCount);	
	},3000);
	}
}

function getIntelliSenseViewChart(count,noChangeFlag) {
	var chartType = $("#intelliSenseChartTypeId").val();
	var img = $("#intelliSenseChartImageId").val();
	var id = "<div id='visionVisualizeChart" + count + "' type='" + chartType + "' class='visionVisualizeChartBoxClass'>"
		+ "<div id='visionVisualizeChartId" + count + "' type='" + chartType + "' count='" + count + "' class='visionVisualChartBoxClass visionVisualChartBoxSelected'>"
		+ "<img src='images/" + img + "' id ='visionVisualizeChartImageId" + count + "' type='" + chartType + "' class='visionVisualChartImageClass'/></div>"
		+ "<div class='ui-resizable-handle ui-resizable-nw' id='nwgrip'></div>"
		+ "<div class='ui-resizable-handle ui-resizable-ne' id='negrip'></div>"
		+ "<div class='ui-resizable-handle ui-resizable-sw' id='swgrip'></div>"
		+ "<div class='ui-resizable-handle ui-resizable-se' id='segrip'></div>"
		+ "<div class='ui-resizable-handle ui-resizable-n' id='ngrip'></div>"
		+ "<div class='ui-resizable-handle ui-resizable-s' id='sgrip'></div>"
		+ "<div class='ui-resizable-handle ui-resizable-e' id='egrip'></div>"
		+ "<div class='ui-resizable-handle ui-resizable-w' id='wgrip'></div>"
		+ "<div id= chartelements" + count + "' type='" + chartType + "' class='chartelements'>"
		+ "<img src='images/Save Icon.svg' data-toggle='Save chart' id='visionChartDiv" + count + "'  class='visionVisualizeHorizontalDotsClass' onclick=saveConversationAIVisualizationData('20')  title='Save Chart'/>";
	+ "</div>"
		+ "</div>";

	if (!($.trim($("#visionVisualizeChartId" + count).html()).length > 0)) { 
		$("#intelliSenseChartVisualizeDivId" + count).append(id);
	}
	scrollAreaToBottom();
	var chartTypeUpper = '';
	var tableName = $("#intelliSenseTableId").text();
	var chartId = "visionVisualizeChartId" + count + "";
	var filtersId = "intellisenseViewChartFiltersColumnsDivId"+count;
	var axisColumns = [];
	var valuesColumns = [];
	var tablesObj = [];
	
	$('#visionVisualizeChart' + count).resizable({
				handles: {
					'nw': '#nwgrip',
					'ne': '#negrip',
					'sw': '#swgrip',
					'se': '#segrip',
					'n': '#ngrip',
					'e': '#egrip',
					's': '#sgrip',
					'w': '#wgrip'
				}, resize: function(event, ui) {
					var uiId = ui.element[0]['id'];
					var width = $("#" + uiId).width();
					var height = $("#" + uiId).height();
					$("#" + uiId).find(".visionVisualChartBoxClass").css("width", (width - 5) + "px");
					$("#" + uiId).find(".visionVisualChartBoxClass").css("height", (height - 16) + "px");
					$("#" + uiId).find(".visionVisualizeChartIconsClass").css("width", (width - 5) + "px");
					$("#" + uiId).find(".visionVisualizeChartIconsClass").css("height", 16 + "px");
				},
				stop: function(event, ui) {
					var uiId = ui.element[0]['id'];
					$(".ui-resizable-handle").remove();
					$("#" + uiId).append(resizableDIv);
					$('#' + uiId).resizable({
						handles: {
							'nw': '#nwgrip',
							'ne': '#negrip',
							'sw': '#swgrip',
							'se': '#segrip',
							'n': '#ngrip',
							'e': '#egrip',
							's': '#sgrip',
							'w': '#wgrip'
						}
					});
					$('#' + uiId).draggable({
						revert: "invalid",
						containment: "#visionChartsAutoSuggestionUserId" 
					});
				}
			});
			
			
			
	
	$("#intelliSenseViewAxisColumnsId"+count+" div").each(function()
	{
	  var divId =  $(this).attr('id');
	  if(divId !=null && divId !='' && divId !=undefined)
	  {
		var inputId = $("#"+divId).find("input").attr('id');
		if(inputId !=null && inputId !='' && inputId !=undefined)
		{
			var inputVal = $("#"+inputId).attr('value');
			if(inputVal !=null && inputVal !='' && inputVal !=undefined
			&& tableName != null && tableName != '' && tableName !=undefined)
			{
				var columnObj = {};
		        columnObj['tableName'] = tableName;
		        columnObj['columnName'] = inputVal;
		        axisColumns.push(columnObj);
		        if (!(tablesObj.indexOf(tableName) > -1)) {
			         tablesObj.push(tableName);
		        }
			}
		}
	  }	
	});
	
	$("#intelliSenseViewValuesColumnsId"+count+" div").each(function()
	{
		var divId = $(this).attr('id');
		if(divId !=null && divId !='' && divId !=undefined)
		{
			var inputId = $("#"+divId).find("input").attr('id');
			if(inputId !=null && inputId !='' && inputId !=undefined)
			{
				var valueColumn = $("#"+inputId).attr('value');
				var columnObj = {};
		        columnObj['tableName'] = tableName;
		        columnObj['columnName'] = valueColumn;
		        var aggregateColumn = $("#"+inputId).attr("aggregateColumn");
		        if (aggregateColumn != null && aggregateColumn != '' && aggregateColumn != undefined) {
				  columnObj['aggColumnName'] = aggregateColumn;
			    }
		        valuesColumns.push(columnObj);
		        if (!(tablesObj.indexOf(tableName) > -1)) {
			      tablesObj.push(tableName); 
		        }
				
				
			}
		}
	});
	
	
	var filterArr = [];
	$('#' + filtersId + ' div.intellisenseViewFilterDivClass').each(function(i, ele) {
        var colName = $(this).children('div:nth-child(1)').children('div:nth-child(1)').children('div:nth-child(1)').find("span").text();
		//var colName = $(this).children('div:nth-child(1)').children('div:nth-child(1)').find("input").val();
		var operator = $(this).children('div:nth-child(1)').children('div:nth-child(1)').children('div:nth-child(2)').find("select").val();
		var checkId = $(this).children('div:nth-child(1)').children('div:nth-child(2)');
		var checkValues = $("#" + checkId[0]['id']).jqxListBox('getCheckedItems');
		var values = [];
		$.each(checkValues, function(index) {
			values.push(this.value);
		});
		if (values != null && !jQuery.isEmptyObject(values)) {
			values = values.toString();
		}
		var filterObj = {};
		if (values != null && values != '' && values != undefined) {
			filterObj['colName'] = colName;
			filterObj['operator'] = operator;
			filterObj['values'] = values;
			filterArr.push(filterObj);
		}
		alert("values");
	});
	
	
	var chartOptAllObj = {};
	var chartConfigPositionKeyObj = {};
	var chartConfigToggleStatus = {};
	var errorMessageStr = "";
	var errorCount = 0;
	var chartConfigId = "intelliSenseChartConfigDivId" + count + " ul li";
	$('#' + chartConfigId).each(function(i, ele) {
		var optColName = $(this).attr("data-column-name");
		var optKeyType = $(this).attr("data-key-type");
		if (optKeyType != null && optKeyType != '' && optKeyType != undefined) {
			chartConfigPositionKeyObj[optColName] = optKeyType;
		}
		var optName = $("#" + optColName).attr("data-opt-name");
		var optMan = $("#" + optColName).attr("data-man");
		var inputType = $("#" + optColName).attr("type");
		var optValue = $("#" + optColName).val();
		if (inputType == 'checkbox') {
			if ($("#" + optColName).is(':checked')) {
				optValue = true;
			} else {
				optValue = false;
			}
		}
		if (inputType == 'number') { //nested
			if (optValue != null && optValue != '' && optValue >= 1) {
				optValue = parseInt(optValue);
			}
		}
		chartTypeUpper = chartType.toUpperCase();
		//        var isChartHoverActive = $("#toggleButtonForchartHover" + chartTypeUpper).hasClass('active');
		if (optColName.includes('HOVERLABELDATA')) {
			if (optValue !== '' && optValue !== null && optValue !== undefined) {
				if (optValue === 'none') {
					$("#toggleButtonForchartHover" + chartTypeUpper).removeClass('active');
					$("#toggleButtonForchartHover" + chartTypeUpper).find('.on-off-text').text('off');
				} else {
					$("#toggleButtonForchartHover" + chartTypeUpper).addClass('active');
					$("#toggleButtonForchartHover" + chartTypeUpper).find('.on-off-text').text('on');
				}
			}
		}
		//        else if (!isChartHoverActive && optColName.includes('HOVERLABELDATA')) {
		//            optValue = 'none';
		//        }
		var isToggleActive = $(this).hasClass('active-filter');
		if (optValue != null && optValue != '' && isToggleActive) {
			chartOptAllObj[optColName] = optValue;
		} else if (optMan == 'M') {
			errorCount++;
			errorMessageStr += "<tr><td>  " + '<p class="visionGenericTabStatusDialog">' + " " + '<span style="color:blue;">' + " " + optName + "</span><b>:</b> Should not be null.</tr></td><br>";
		} else if (!isToggleActive && optColName.includes('SHOWLEGEND')) {
			chartOptAllObj[optColName] = false;
		}

	});

	var data = {};
	var filteredchartOptAllObj = {};
	$.each(chartConfigPositionKeyObj, function(key, value) {
		var newKey = key.replace(/[0-9]/g, '');
		filteredchartOptAllObj[newKey] = value;
	});
	data['axisColumns'] = JSON.stringify(axisColumns);
	data['valuesColumns'] = JSON.stringify(valuesColumns);
	data['tablesObj'] = JSON.stringify(tablesObj);
	data['filterColumns'] = JSON.stringify(filterArr);
	data['chartType'] = chartType;
	data['chartId'] = chartId;
	data['chartCOnfigObjStr'] = JSON.stringify(chartOptAllObj);
	var plotlyChartLabelType = $("#" + chartTypeUpper + "LABELDATA" + count).val();
	var plotlyChartHoverType = $("#" + chartTypeUpper + "HOVERLABELDATA" + count).val();
	data['chartConfigPositionKeyStr'] = JSON.stringify(filteredchartOptAllObj);

	$.ajax({
		url: 'fetchChartData',
		type: "POST",
		data: data,
		dataType: 'json',
		traditional: true,
		cache: false,
		success: function(response) {
			stopLoader();

			$("#Loader").css("display", "none");
			$("body").css({ "pointer-events": "auto" });
			if (response != null && !jQuery.isEmptyObject(response)) {
               if (chartType != null && chartType != '' && chartType == 'treemap') {
						getIntellisenseViewTreeMapChart(chartId, response, count, chartType);
						return;
					}

				var resultObj = response;
				var dataPropObject = resultObj['dataPropObject'];
				var chartDataObj = resultObj['data'];
				var layoutObj = resultObj['layout'];
				var treeMapColObj = resultObj['treeMapCol'];
				var compareChartFlag = resultObj['compareChartFlag'];
				var data = [];
				var dataObj = {};
				var config = {
					responsive: true,
					displayModeBar: true,
					downloadImage: true,
					displaylogo: false,

					modeBarButtonsToRemove: ['zoom2d', 'pan', 'pan2d', 'zoomIn2d', 'zoomOut2d', 'resetViewMapbox', 'resetScale2d', 'sendDataToCloud', 'hoverClosestCartesian', 'autoScale2d', 'lasso2d', 'select2d', 'zoom2d']
				};
				$("#visionVisualizeChartId" + count).css('width', '100%', '!important');
				$("#visionVisualizeChartId" + count).css('height', '100%', '!important');
				//shakir
				var axisColumnName;
				var valuesColumnName;
				var chartName = {};
				var defaultLegendNames = {};
				var userProvidedLegendNames = {};

				$.each(axisColumns, function(index, value) {
					var axisName = value.columnName.split(".")[1];
					axisColumnName = axisName.replace(/[()]/g, "");
					axisColumnName = axisColumnName.replace(/_/g, " ");
					defaultLegendNames[axisColumnName] = axisColumnName;
				});
				$.each(valuesColumns, function(index, value) {
					var columnLabel = value.columnLabel;
					var valueName = value.columnName.split(".")[1];
					valuesColumnName = valueName.replace(/[()]/g, "");
					valuesColumnName = valuesColumnName.replace(/_/g, " ");
					defaultLegendNames[valuesColumnName] = valuesColumnName;
					//if (columnLabel != '' && columnLabel != null && columnLabel != undefined) {
					userProvidedLegendNames[valuesColumnName] = columnLabel;
					//}
				});

				//shakir
				if (chartType !== null && chartType !== '' && chartType !== undefined && chartType === 'pie') {
					$.each(chartDataObj, function(key) {
						var traceObj = {};
						var colorObj = {};
						if (key !== axisColumnName) {
							traceObj['labels'] = chartDataObj[axisColumnName];
							traceObj['values'] = chartDataObj[key];
							traceObj['type'] = chartType;
							traceObj['name'] = '';
							traceObj['marker'] = colorObj;
							traceObj = getChartLabelOrHoverDataFormatter('texttemplate', traceObj, chartDataObj[key], plotlyChartLabelType, 'label', 'value');
							traceObj = getChartLabelOrHoverDataFormatter('hovertemplate', traceObj, chartDataObj[key], plotlyChartHoverType, 'label', 'value');
							$.each(dataPropObject, function(key, val) {
								traceObj[key] = val;
							});
						}
						if (traceObj !== null && !jQuery.isEmptyObject(traceObj)) {
							data.push(traceObj);
						}
					});
				} else if (chartType != null && chartType != '' && chartType != undefined && chartType == 'donut') {
					$.each(chartDataObj, function(key) {
						var traceObj = {};
						var colorObj = {};
						if (key !== axisColumnName) {
							traceObj['labels'] = chartDataObj[axisColumnName];
							traceObj['values'] = chartDataObj[key];
							traceObj['hole'] = 0.4;
							traceObj['type'] = 'pie';
							traceObj['name'] = '';
							traceObj['marker'] = colorObj;
							traceObj = getChartLabelOrHoverDataFormatter('texttemplate', traceObj, chartDataObj[key], plotlyChartLabelType, 'label', 'value');
							traceObj = getChartLabelOrHoverDataFormatter('hovertemplate', traceObj, chartDataObj[key], plotlyChartHoverType, 'label', 'value');
							$.each(dataPropObject, function(key, val) {
								traceObj[key] = val;
							});
						}
						if (traceObj !== null && !jQuery.isEmptyObject(traceObj)) {
							data.push(traceObj);
						}
					});
				} else if (chartType != null && chartType != '' && chartType != undefined && chartType == 'bar') {
					var colorCount = 0;
					colorArray = ['#1864ab', '#fd7e14', '#0b7285', '#ff6b6b'];
					$.each(chartDataObj, function(keyName) {
						var traceObj = {};
						var colorObj = {};
						if (keyName !== axisColumnName) {
							traceObj['y'] = chartDataObj[axisColumnName];
							traceObj['x'] = chartDataObj[keyName];
							traceObj['type'] = chartType;
							traceObj['orientation'] = 'h';
							traceObj = getChartLabelOrHoverDataFormatter('texttemplate', traceObj, chartDataObj[keyName], plotlyChartLabelType, 'y', 'x');
							traceObj = getChartLabelOrHoverDataFormatter('hovertemplate', traceObj, chartDataObj[keyName], plotlyChartHoverType, 'y', 'x');
							var keys = keyName.split("ASCOL");
							keyName = keys[0];
							traceObj = addlegendLabelToTrace(traceObj, keyName, defaultLegendNames, userProvidedLegendNames);
							$.each(dataPropObject, function(key, val) {
								if (key === 'marker' && !jQuery.isEmptyObject(val) && val !== null) {
									var colorsArray = val['colors'];
									if (colorsArray !== undefined && colorsArray !== null && !$.isArray(colorsArray)) {
										colorObj['color'] = colorsArray;
									} else if (colorsArray !== undefined && colorsArray !== null && $.isArray(colorsArray)) {
										colorObj['color'] = colorsArray[colorCount++];
									} else {
										colorObj['color'] = colorArray[colorCount++];
									}
									traceObj[key] = colorObj;
								} else if (key === 'marker' && (jQuery.isEmptyObject(val) || val === null)) {
									colorObj['color'] = colorArray[colorCount++];
									traceObj[key] = colorObj;
								} else {
									traceObj[key] = val;
								}
							});
						}
						if (traceObj !== null && !jQuery.isEmptyObject(traceObj)) {
							data.push(traceObj);
						}
					});
				} else if (chartType != null && chartType != '' && chartType != undefined && chartType == 'column') {
					var colorCount = 0;
					colorArray = ['#1864ab', '#fd7e14', '#0b7285', '#ff6b6b'];
					$.each(chartDataObj, function(keyName, val) {
						var traceObj = {};
						var colorObj = {};
						if (keyName !== axisColumnName) {
							traceObj['x'] = chartDataObj[axisColumnName];
							traceObj['y'] = chartDataObj[keyName];
							traceObj['type'] = 'bar';
							traceObj = getChartLabelOrHoverDataFormatter('texttemplate', traceObj, chartDataObj[keyName], plotlyChartLabelType, 'x', 'y');
							traceObj = getChartLabelOrHoverDataFormatter('hovertemplate', traceObj, chartDataObj[keyName], plotlyChartHoverType, 'x', 'y');
							var keys = keyName.split("ASCOL");
							keyName = keys[0];
							traceObj = addlegendLabelToTrace(traceObj, keyName, defaultLegendNames, userProvidedLegendNames);
							$.each(dataPropObject, function(key, val) {
								if (key === 'marker' && !jQuery.isEmptyObject(val) && val !== null) {
									var colorsArray = val['colors'];
									if (colorsArray !== undefined && colorsArray !== null && !$.isArray(colorsArray)) {
										colorObj['color'] = colorsArray;
									} else if (colorsArray !== undefined && colorsArray !== null && $.isArray(colorsArray)) {
										colorObj['color'] = colorsArray[colorCount++];
									} else {
										colorObj['color'] = colorArray[colorCount++];
									}
									traceObj[key] = colorObj;
								} else if (key === 'marker' && (jQuery.isEmptyObject(val) || val === null)) {
									colorObj['color'] = colorArray[colorCount++];
									traceObj[key] = colorObj;
								} else {
									traceObj[key] = val;
								}
							});
						}
						if (traceObj !== null && !jQuery.isEmptyObject(traceObj)) {
							data.push(traceObj);
						}
					});
				} else if (chartType != null && chartType != '' && chartType != undefined && chartType == 'lines') {
					var colorCount = 0;
					var lineColorCount = 0;
					colorArray = ['#1864ab', '#fd7e14', '#0b7285', '#ff6b6b'];
					$.each(chartDataObj, function(keyName, val) {
						var traceObj = {};
						var colorObj = {};
						if (keyName !== axisColumnName) {
							traceObj['x'] = chartDataObj[axisColumnName];
							traceObj['y'] = chartDataObj[keyName];
							traceObj['type'] = chartType;
							traceObj = getChartLabelOrHoverDataFormatter('texttemplate', traceObj, chartDataObj[keyName], plotlyChartLabelType, 'x', 'y');
							traceObj = getChartLabelOrHoverDataFormatter('hovertemplate', traceObj, chartDataObj[keyName], plotlyChartHoverType, 'x', 'y');
							var keys = keyName.split("ASCOL");
							keyName = keys[0];
							traceObj = addlegendLabelToTrace(traceObj, keyName, defaultLegendNames, userProvidedLegendNames);
							$.each(dataPropObject, function(key, val) {
								if (key === 'marker' && !jQuery.isEmptyObject(val) && val !== null) {
									var colorsArray = val['color'];
									if (colorsArray !== undefined && colorsArray !== null && !$.isArray(colorsArray)) {
										colorObj['color'] = colorsArray;
									} else if (colorsArray !== undefined && colorsArray !== null && $.isArray(colorsArray)) {
										colorObj['color'] = colorsArray[colorCount++];
									} else {
										colorObj['color'] = colorArray[colorCount++];
									}
									colorObj['size'] = val['size'];
									traceObj[key] = colorObj;
								} else if (key === 'marker' && (jQuery.isEmptyObject(val) || val === null)) {
									colorObj['color'] = colorArray[colorCount++];
									traceObj[key] = colorObj;
								} else if (key === 'line' && !jQuery.isEmptyObject(val) && val !== null) {
									var lineObject = Object.assign({}, val);
									var colorsArray = lineObject['color'];
									if (colorsArray !== undefined && colorsArray !== null && !$.isArray(colorsArray)) {
										lineObject['color'] = colorsArray;
									} else if (colorsArray !== undefined && colorsArray !== null && $.isArray(colorsArray)) {
										lineObject['color'] = colorsArray[lineColorCount++];
									} else {
										lineObject['color'] = colorArray[lineColorCount++];
									}
									traceObj[key] = lineObject;
								} else {
									traceObj[key] = val;
								}
							});
						}
						if (traceObj !== null && !jQuery.isEmptyObject(traceObj)) {
							data.push(traceObj);
						}
					});
				} else if (chartType != null && chartType != '' && chartType != undefined && chartType == 'scatter') {
					var colorCount = 0;
					colorArray = ['#1864ab', '#fd7e14', '#0b7285', '#ff6b6b'];
					$.each(chartDataObj, function(keyName, val) {
						var traceObj = {};
						var colorObj = {};
						if (keyName !== axisColumnName) {
							traceObj['x'] = chartDataObj[axisColumnName];
							traceObj['y'] = chartDataObj[keyName];
							traceObj['type'] = chartType;
							traceObj['mode'] = 'markers';
							traceObj = getChartLabelOrHoverDataFormatter('texttemplate', traceObj, chartDataObj[keyName], plotlyChartLabelType, 'x', 'y');
							traceObj = getChartLabelOrHoverDataFormatter('hovertemplate', traceObj, chartDataObj[keyName], plotlyChartHoverType, 'x', 'y');
							var keys = keyName.split("ASCOL");
							keyName = keys[0];
							traceObj = addlegendLabelToTrace(traceObj, keyName, defaultLegendNames, userProvidedLegendNames);
							traceObj['marker'] = colorObj;
							$.each(dataPropObject, function(key, val) {
								if (key === 'marker' && !jQuery.isEmptyObject(val) && val !== null) {
									var colorsArray = val['color'];
									if (colorsArray !== undefined && colorsArray !== null && !$.isArray(colorsArray)) {
										colorObj['color'] = colorsArray;
									} else if (colorsArray !== undefined && colorsArray !== null && $.isArray(colorsArray)) {
										colorObj['color'] = colorsArray[colorCount++];
									} else {
										colorObj['color'] = colorArray[colorCount++];
									}
									colorObj['size'] = val['size'];
									traceObj[key] = colorObj;
								} else if (key === 'marker' && (jQuery.isEmptyObject(val) || val === null)) {
									colorObj['color'] = colorArray[colorCount++];
									traceObj[key] = colorObj;
								} else {
									traceObj[key] = val;
								}
							});
						}
						if (traceObj !== null && !jQuery.isEmptyObject(traceObj)) {
							data.push(traceObj);
						}
					});
				} else if (chartType != null && chartType != '' && chartType != undefined && chartType == 'treemap') {
					var treeDomain = 0
					for (var key in chartDataObj) {
						var treeDataObj = chartDataObj[key];
						var treeObj = {};
						treeObj['type'] = chartType;
						treeObj['labels'] = treeDataObj[treeMapColObj['labels']];
						treeObj['parents'] = treeDataObj[treeMapColObj['parents']];
						treeObj['values'] = treeDataObj[treeMapColObj['values']];
						treeObj['textinfo'] = "label+value";
						treeObj['branchvalues'] = "total";
						var length = Object.keys(chartDataObj).length;
						var split = ((100 / length) / 100);
						if (chartDataObj != null && !jQuery.isEmptyObject(chartDataObj) && Object.keys(chartDataObj).length > 1) {
							treeObj['domain'] = { x: [treeDomain, ((treeDomain + split) - 0.02)] };
							treeDomain = treeDomain + split + 0.02;
						}
						data.push(treeObj);
					}



					//                        dataObj['type'] = chartType;
					//                        dataObj['labels'] = ['Eve', "Cain", "Seth", "Enos", "Noam", "Abel", "Awan", "Enoch", "Azura"];
					//                        dataObj['parents'] = ["", "Eve", "Eve", "Seth", "Seth", "Eve", "Eve", "Awan", "Eve"];
					//                        dataObj['values'] = [10, 14, 12, 10, 2, 6, 6, 1, 4];
					//                        dataObj['textinfo'] = "label+value";

				} else if (chartType != null && chartType != '' && chartType != undefined && chartType == 'histogram') {
					dataObj['x'] = chartDataObj[0];
					dataObj['y'] = chartDataObj[key];
					dataObj['type'] = chartType;
					colorObj['size'] = 20;
					dataObj['name'] = 'value';
					dataObj['marker'] = colorObj;
				} else if (chartType != null && chartType != '' && chartType != undefined && chartType == 'funnel') {
					var colorCount = 0;
					colorArray = ['#1864ab', '#fd7e14', '#0b7285', '#ff6b6b'];
					$.each(chartDataObj, function(keyName) {
						var traceObj = {};
						var colorObj = {};
						if (keyName !== axisColumnName) {
							traceObj['y'] = chartDataObj[axisColumnName];
							traceObj['x'] = chartDataObj[keyName];
							traceObj['type'] = chartType;
							//traceObj['orientation'] = 'h';
							traceObj['name'] = '';
							traceObj = getChartLabelOrHoverDataFormatter('texttemplate', traceObj, chartDataObj[keyName], plotlyChartLabelType, 'y', 'x');
							traceObj = getChartLabelOrHoverDataFormatter('hovertemplate', traceObj, chartDataObj[keyName], plotlyChartHoverType, 'y', 'x');
							var keys = keyName.split("ASCOL");
							keyName = keys[0];
							$.each(dataPropObject, function(key, val) {
								if (key === 'marker' && !jQuery.isEmptyObject(val) && val !== null) {
									var colorsArray = val['colors'];
									if (colorsArray !== undefined && colorsArray !== null && colorsArray.length !== null) {
										colorObj['color'] = colorsArray[colorCount++];
									} else {
										colorObj['color'] = colorArray[colorCount++];
									}
									traceObj[key] = colorObj;
								} else if (key === 'marker' && (jQuery.isEmptyObject(val) || val === null)) {
									colorObj['color'] = colorArray[colorCount++];
									traceObj[key] = colorObj;
								} else {
									traceObj[key] = val;
								}
							});
						}
						if (traceObj !== null && !jQuery.isEmptyObject(traceObj)) {
							data.push(traceObj);
						}
					});
				} else if (chartType != null && chartType != '' && chartType != undefined && chartType == 'waterfall') {
					var colorCount = 0;
					colorArray = ['#1864ab', '#fd7e14', '#0b7285', '#ff6b6b'];
					$.each(chartDataObj, function(key) {
						var traceObj = {};
						var colorObj = {};
						if (key !== axisColumnName) {
							var measureArr = [];
							var axisCols = chartDataObj[axisColumnName];
							if (axisCols != null && !jQuery.isEmptyObject(axisCols)) {
								var axisLength = axisCols.length;
								for (var l = 0; l < axisLength; l++) {
									measureArr.push("relative");
								}
								traceObj['measure'] = measureArr;
							}
							traceObj['x'] = chartDataObj[axisColumnName];
							traceObj['y'] = chartDataObj[key];
							traceObj['type'] = chartType;
							traceObj['orientation'] = 'v';
							traceObj['name'] = 'value';
							$.each(dataPropObject, function(key, val) {
								if (key === 'marker' && !jQuery.isEmptyObject(val) && val !== null) {
									var colorsArray = val['colors'];
									if (colorsArray !== undefined && colorsArray !== null && colorsArray.length !== null) {
										colorObj['color'] = colorsArray[colorCount++];
									} else {
										colorObj['color'] = colorArray[colorCount++];
									}
									traceObj[key] = colorObj;
								} else if (key === 'marker' && (jQuery.isEmptyObject(val) || val === null)) {
									colorObj['color'] = colorArray[colorCount++];
									traceObj[key] = colorObj;
								} else {
									traceObj[key] = val;
								}
							});
						}
						if (traceObj !== null && !jQuery.isEmptyObject(traceObj)) {
							data.push(traceObj);
						}
					});
				} else if (chartType != null && chartType != '' && chartType != undefined && chartType == 'scatterpolar') {
					var colorCount = 0;
					colorArray = ['#1864ab', '#fd7e14', '#0b7285', '#ff6b6b'];
					$.each(chartDataObj, function(keyName) {
						var traceObj = {};
						var colorObj = {};
						if (keyName !== axisColumnName) {
							traceObj['r'] = chartDataObj[keyName];
							traceObj['theta'] = chartDataObj[axisColumnName];
							traceObj['type'] = chartType;
							traceObj['fill'] = 'toself';
							var keys = keyName.split("ASCOL");
							keyName = keys[0];
							traceObj = addlegendLabelToTrace(traceObj, keyName, defaultLegendNames, userProvidedLegendNames);
							$.each(dataPropObject, function(key, val) {
								if (key === 'marker' && !jQuery.isEmptyObject(val) && val !== null) {
									var colorsArray = val['colors'];
									if (colorsArray !== undefined && colorsArray !== null && !$.isArray(colorsArray)) {
										colorObj['color'] = colorsArray;
									} else if (colorsArray !== undefined && colorsArray !== null && $.isArray(colorsArray)) {
										colorObj['color'] = colorsArray[colorCount++];
									} else {
										colorObj['color'] = colorArray[colorCount++];
									}
									traceObj[key] = colorObj;
								} else if (key === 'marker' && (jQuery.isEmptyObject(val) || val === null)) {
									colorObj['color'] = colorArray[colorCount++];
									traceObj[key] = colorObj;
								} else {
									traceObj[key] = val;
								}
							});
						}
						if (traceObj !== null && !jQuery.isEmptyObject(traceObj)) {
							data.push(traceObj);
						}
					});
				} else if (chartType != null && chartType != '' && chartType != undefined && chartType == 'indicator') {
					var traceObj = {};
					var domainObj = {};
					var domainArr = [];
					domainArr.push(0);
					domainArr.push(1);
					domainObj["x"] = domainArr;
					domainObj["y"] = domainArr;
					traceObj['domain'] = domainObj;
					traceObj['value'] = chartDataObj;
					traceObj['type'] = chartType;
					traceObj['mode'] = "gauge+number";
					traceObj['gauge'] = resultObj['gauge'];
					if (dataPropObject != null && !jQuery.isEmptyObject(dataPropObject)) {
						$.each(dataPropObject, function(key, val) {
							traceObj[key] = val;
						});
					}
					if (traceObj !== null && !jQuery.isEmptyObject(traceObj)) {
						data.push(traceObj);
					}
				} else {
					dataObj['x'] = chartDataObj[0];
					dataObj['y'] = chartDataObj[key];
					dataObj['type'] = chartType;
					dataObj['name'] = 'value';
					dataObj['marker'] = colorObj;
				}
				var chartOuterId = 'visionVisualizeChart' + count;
				let observer = new MutationObserver(function(mutations) {
					window.dispatchEvent(new Event('resize'));
				});

				let child = document.getElementById(chartOuterId);
				observer.observe(child, { attributes: true });
				if (chartOuterId != null && chartOuterId != '' && jQuery.inArray(chartOuterId, chartDivArr) <= -1) {
					chartDivArr.push(chartOuterId);
				}
				var margin = {};
				if (chartType != null && chartType != '' && chartType != undefined && chartType == 'treemap') {
					margin = {
						l: 0,
						r: 0,
						b: 0,
						t: 0,
						pad: 0
					};
				} else {
					margin = {
						l: 40,
						r: 30,
						b: 30,
						t: 40,
						pad: 4
					};
				}
				var layout = {
					margin: margin,
					dragmode: false

				};

				$.each(layoutObj, function(key, val) {
					layout[key] = val;
				});
				var polar = {
					radialaxis: {
						visible: true
					},
					showlegend: false
				};
				if (chartType == 'scatterpolar') {
					layout['polar'] = polar;
					layout['dragmode'] = true;
				}

				$("#" + chartId).empty();
				Plotly.newPlot(chartId, data, layout, config);
				if(!(noChangeFlag !=null && noChangeFlag !='' && noChangeFlag !=undefined && noChangeFlag !="undefined")){ 
				   showNextConversationAiMessage('15');
				}else{
                       showIntellisenseViewConfigOptions();					
				}
                scrollAreaToBottom();
			}

		}, error: function(e) {
			console.log("The Error Message is:::" + e.message);
			sessionTimeout(e);
		}
	});

}

function showIntelliSenseViewChartConfig(columnsCount, chartType) {
	var tableName = $("#intelliSenseTableId").text();
	$.ajax({
		type: "post",
		traditional: true,
		url: 'getIntelliSenseChartConfig',
		cache: false,
		data: {
			tableName: tableName,
			columnsCount: columnsCount,
			chartType: chartType
		},
		success: function(response) {
			stopLoader();
			if (response != null && !jQuery.isEmptyObject(response)) {
				var configOptions = response['configOptions'];
				$("#intelliSenseChartConfigDivId"+columnsCount).remove();
				var appendDiv ="<div id='intelliSenseChartConfigDivId" + columnsCount + "' class='intelliSenseChartConfigDivClass nobgbubble sayIntelisenseView' style='display:none'>"
					+"<div class='intellisenseChartConfigDivClass'>"
					+ "<p class='convai-left-message'>Do the required changes(Like title name, legend changes...)</p>"
					+ configOptions[chartType]
					+"</div>"
					+"<div class='intellisenseChartsDivClass'>"
					+"</div>"
					+ "</div>";
					$("#intelliSenseChartVisualizeDivId"+ columnsCount + "").remove();
					$("body").append("<div id='intelliSenseChartVisualizeDivId" + columnsCount + "' class='intelliSenseChartVisualizeDivClass'></div>");
					$("#intelliSenseChartVisualizeDivId"+ columnsCount + "").draggable();
				$("body").append(appendDiv);
				showAnimatedBubbleSequnce();
				scrollAreaToBottom();
	   			


	
			}
		},
		error: function(e) {
			console.log("The Error Message is:::" + e.message);
			sessionTimeout(e);
		}
	});

}
function checkIntellisenseViewAxisColumnNull(count,noChangeFlag)
{
	var error_count =0;
	$("#intelliSenseViewAxisColumnsId"+count+" div").each(function()
	{
	  var divId =  $(this).attr('id');
	  if(divId !=null && divId !='' && divId !=undefined)
	  {
		var inputId = $("#"+divId).find("input").attr('id');
		if(inputId !=null && inputId !='' && inputId !=undefined)
		{
			var inputVal = $("#"+inputId).attr('value');
			if(!(inputVal !=null && inputVal !='' && inputVal !=undefined))
			{
				error_count++;
			}
		}
	  }	
	});
	if(error_count == 0)
	{
		applyIntellisenseViewChartColumns(count,noChangeFlag);
	}else{
		$("#intelliSenseViewAxisColumnsAppendId"+count).remove();
		$("#intelliSenseViewAxisColumnsId"+count).append("<div id='intelliSenseViewAxisColumnsAppendId"+count+"' class='convai-left-message'>Please select the Axis columns</div>");
	}
	
}

function getIntelliSenseViewAggregateFunctions($event, columnId, chartId, chartCount, columnCount, columnVal, tableName,changeFlag) {
	clearTimeout(dragEventTimeout);
	var div = "<li onclick=applyIntelliSenseViewAggregateFunctions('AVG','" + columnId + "','" + chartId + "','" + chartCount + "','" + columnCount + "','" + columnVal + "','" + tableName + "','" + changeFlag + "')>Average</li>"
		+ "<li onclick=applyIntelliSenseViewAggregateFunctions('Count','" + columnId + "','" + chartId + "','" + chartCount + "','" + columnCount + "','" + columnVal + "','" + tableName + "','" + changeFlag + "')>Count</li>"
		+ "<li onclick=applyIntelliSenseViewAggregateFunctions('Sum','" + columnId + "','" + chartId + "','" + chartCount + "','" + columnCount + "','" + columnVal + "','" + tableName + "','" + changeFlag + "')>Sum</li>"
		+ "<li onclick=applyIntelliSenseViewAggregateFunctions('Max','" + columnId + "','" + chartId + "','" + chartCount + "','" + columnCount + "','" + columnVal + "','" + tableName + "','" + changeFlag + "')>Max</li>"
		+ "<li onclick=applyIntelliSenseViewAggregateFunctions('Min','" + columnId + "','" + chartId + "','" + chartCount + "','" + columnCount + "','" + columnVal + "','" + tableName + "','" + changeFlag + "')>Min</li>";
	$("#jqxAggregate").remove();
	$('body').append("<div id='jqxAggregate'><ul></ul></div>");
	$("#jqxAggregate ul").html(div);
	var contextMenu = $("#jqxAggregate").jqxMenu({ width: '90px', height: 140 + 'px', autoOpenPopup: false, mode: 'popup' });
	contextMenu.jqxMenu('open', parseInt(event.clientX) + 5, parseInt(event.clientY) + 5);
	$(".dxpPageContent").scroll(function(event) {
		if ($("#jqxAggregate ul").length > 0) {
			var pos = $(".dxpPageContent").scrollTop();
			$("#jqxAggregate").css("top", $event.offsetTop - pos);
		}
	});
}

function applyIntelliSenseViewAggregateFunctions(aggregateType, columnId, chartId, chartCount, columnCount, columnName, tableName,changeFlag) {
	$("#" + columnId).empty();
setTimeout(function(){
	var colVal = $("#userValuesColumnNamesDivId"+chartCount+columnCount).val();
	var aggregateColumn = aggregateType + "(" +tableName +"."+ colVal + ")";
	$("#" + columnId).attr("value", aggregateColumn);
	$("#" + columnId).attr("aggregateColumn", aggregateColumn);
	var axisId = "intellisenseViewAxisInputId" + chartCount + "0";
	var valuesId = "intellisenseViewValuesInputId" + chartCount + "0"; 
	$("#intelliSenseViewExampleChartAggregateImageId").show();
	$("#intelliSenseViewValuesColumnsAppendId"+chartCount).remove();
	if ($.trim($("#" + axisId).val()).length > 0 && $.trim($("#" + valuesId).val()).length > 0) {
		checkIntellisenseViewAxisColumnNull(chartCount,changeFlag);
	}
},2000);
}

function getIntellisenseViewExampleChartDesign(chartType) {
	chartType = chartType.toUpperCase();
	$.ajax({
		type: "post",
		traditional: true,
		url: 'getIntelliSenseExampleChartDesign',
		cache: false,
		data: {
			chartType: chartType
		},
		success: function(response) {
			stopLoader();
			if (response != null && !jQuery.isEmptyObject(response)) {
				var chartColumnsDiv = response['chartColumnsDiv'];
				$("#visionChartsAutoSuggestionUserExamplesId").html(chartColumnsDiv);
				$("#intelliSenseViewExampleChartDescriptionId").show();
				$("#intelliSenseViewExampleChartImageId").show();
				$("#intelliSenseViewExampleChartDataImageId").show();
			}
		},
		error: function(e) {
			console.log("The Error Message is:::" + e.message);
			sessionTimeout(e);
		}
	});
}

function getIntelliSenseViewAddColumns($this, parentColId, tableName, columnName, chartCount, columnType,chartType) {
	var columnsCount = $("#" + parentColId).attr("columnsCount");
	if(chartType !=null && chartType !='' && chartType !=undefined && chartType =='treemap' || chartType == 'sunburst'){
		if(columnsCount >= 1)
		{
			var errorMessageResponse = "More than 2 columns are not allowed";
			var buttonArray = [
					{
						text: 'Close',
						click: function() {
						},
						isCloseButton: true
					}
				];
				showPopUpWithButtonFunctionCall(errorMessageResponse, buttonArray);
				return;
		}
	}
	columnsCount++;

	$.ajax({
		type: "post",
		traditional: true,
		url: 'getIntelliSenseChartSubColumns',
		cache: false,
		data: {
			columnsCount: columnsCount,
			tableName: tableName,
			chartCount: chartCount,
			columnType: columnType
		},
		success: function(response) {
			stopLoader();
			if (response != null && !jQuery.isEmptyObject(response)) {
				var chartColumnsDiv = response['chartColumnsDiv'];
				$("#" + parentColId).attr("columnsCount", columnsCount);
				$("#" + parentColId).append(chartColumnsDiv);
			}
		},
		error: function(e) {
			console.log("The Error Message is:::" + e.message);
			sessionTimeout(e);
		}
	});
}

function changeIntellisenseViewElementsId(chartCount, chartType) {
	var perviousAdjacentElements = $('#intelliSenseChartConfigDivId' + chartCount).prevAll();
	var nextAdjacentElements = $('#intelliSenseChartConfigDivId' + chartCount).siblings();
	var setOfCharts = new Set();
	setOfCharts.add(chartType);
	$.each(perviousAdjacentElements, function() {
		var chartType = $(this).attr('data-chartType');
		if (setOfCharts.has(chartType)) {
			return;
		} else {
			setOfCharts.add(chartType);
		}
	});

	$.each(nextAdjacentElements, function() {
		var chartType = $(this).attr('data-chartType');
		if (setOfCharts.has(chartType)) {
			return;
		} else {
			setOfCharts.add(chartType);
		}
	});

	if (setOfCharts.size !== 0 && setOfCharts !== null && setOfCharts.has(chartType)) {
		var chartConfigId = "intelliSenseChartConfigDivId" + chartCount + " ul li";
		$('#' + chartConfigId).each(function(index, element) {
			var optColName = $(this).attr("data-column-name");
			if (optColName !== null && optColName !== '' && optColName !== undefined) {
				$("#" + chartConfigId).find("#" + optColName).attr("id", optColName + chartCount);
				$(this).attr("data-column-name", optColName + chartCount);
			}
			if (optColName.includes(chartType.toUpperCase() + 'COLOR')) {
				var chartColorsSiblings = $("#" + optColName).siblings();
				if (chartColorsSiblings.length !== 0) {
					chartColorsSiblings.each(function(index, element) {
						if ($(this).prop("tagName").toLowerCase() === 'input') {
							$("#" + chartConfigId).find("#" + optColName + '_CLR').attr('id', optColName + chartCount + '_CLR');
						} else if ($(this).prop("tagName").toLowerCase() === 'div') {
							$("#" + chartConfigId).find("#" + optColName + '_CLR_DIV').attr('id', optColName + chartCount + '_CLR_DIV');
						}
					});
				} else {
					$("#" + optColName + chartCount).siblings().each(function(index, element) {
						if ($(this).prop("tagName").toLowerCase() === 'input') {
							$("#" + chartConfigId).find("#" + optColName + '_CLR').attr('id', optColName + chartCount + '_CLR');
						} else if ($(this).prop("tagName").toLowerCase() === 'div') {
							$("#" + chartConfigId).find("#" + optColName + '_CLR_DIV').attr('id', optColName + chartCount + '_CLR_DIV');
						}
					});
				}
			}

		});
	}
}


function getIntellisenseViewTreeMapChart(chartId, result, count, chartType, saveType, axisColumns, filterCondition) {
	chartType = 'treemap';
	var chartUpper = chartType.toUpperCase();
	var chartTitle = $("#" + chartUpper + "TITLEECHARTS").val();
	isCurrencyConversionEvent = $("#isCurrencyConversionEvent").val();
	if (isCurrencyConversionEvent === undefined || isCurrencyConversionEvent === '') {
		isCurrencyConversionEvent = result['isCurrencyConversionEvent'];
	}
	currencySymbol = $("#toCurrencyDropDown_jqxDropDownList option:selected").attr('data-currencySymbol');
	if (currencySymbol === undefined || currencySymbol === '') {
		currencySymbol = result['currencySymbol'];
	}

	toCurrencyDropDownValue = $("#toCurrencyDropDown").val();
	if (toCurrencyDropDownValue === undefined || toCurrencyDropDownValue === '') {
		toCurrencyDropDownValue = result['toCurrencyDropDownValue'];
	}
	$("#visionVisualizeChartId" + count).remove();
	var treeMapChartId = "visionVisualizeChart" + count;
	var treemapChartHomeId = "visionVisualizeChartHome" + count;
	$("#" + treeMapChartId).append("<div id='visionVisualizeChartId" + count + "' type='" + chartType + "' count='" + count + "' class='visionVisualChartBoxClass visionVisualChartBoxSelected'></div>")
	$("#" + chartId).css("width", "auto", "!important");
	$("#" + chartId).css("height", "350px", "!important");
	$("#" + treeMapChartId).css("width", "auto", "!important");
	$("#" + treeMapChartId).css("height", "400px", "!important");
	if ($("#" + chartId).parent().parent().hasClass("homeChartWrapDiv")) {
		$("#" + chartId).parent().parent().attr("class", "col-md-6 col-sm-6 col-lg-12 homeChartWrapDiv treeMapMainDiv");
	}
	$("#" + treemapChartHomeId).addClass("visionVisualChartBoxClass");
	var dom = document.getElementById(chartId);
	var myChart = echarts.init(dom, null, {
		renderer: 'canvas',
		useDirtyRect: true
	});
	var data = result['data'];
	var radioButtonStr = result['radioButtonStr'];
	var optionObjectEcharts = result['layout'];
	var seriesObjectEcharts = result['dataPropObject'];
	if (chartTitle === undefined || chartTitle === '' || chartTitle === null) {
		chartTitle = optionObjectEcharts['text'];
	}
	var tableName = result['tableName'];
	const formatUtil = echarts.format;
	var labelFormatter = function(data) {
		return data.name;
	};

	var valueFormatter = function(data) {
		return formatnumber(data.value);
	};

	var labelAndValueFormatter = function(data) {
		var label = data.name;
		var formattedValue = formatnumber(data.value);
		return "(" + label + "," + formattedValue + ")";
	};
	var option = {
		tooltip: {
			show: true,
			formatter: function(info) {
				var value = info.value;
				var treePathInfo = info.treePathInfo;
				var treePath = [];
				for (var i = 1; i < treePathInfo.length; i++) {
					treePath.push(treePathInfo[i].name);
				}
				return ['<div class="tooltip-title">' +
					echarts.format.encodeHTML(treePath.join('/')) +
					'</div>',
				formatUtil.addCommas(value)
				].join('');
			}
		},
		series: {
			name: "▶",
			type: 'treemap',
			visibleMin: 1,
			visualMin: 1,
			/*roam: 'move',*/
			label: {
				show: true,
				distance: 5,
				width: 25,
				overflow: 'truncate',
				formatter: function(params) {
					let arr = [params.name, echarts.format.addCommas(params.value)];
					return arr.join('\n');
				}
			},
			levels: [
				{
					itemStyle: {
						//borderWidth: 3,
						//borderColor: '#333',
						//gapWidth: 1
					}
				},
			],
			data: data,
			leafDepth: 1

		},
		title: {
			text: chartTitle,
			left: "center",
			padding: [15, 0],
			textStyle: {
				fontSize: 14,
				fontWeight: "normal"
			}
		}
	};

	if (!(saveType != null && saveType != '' && saveType != undefined)) {
		getToolBox(chartId, chartType, tableName);
	}

	$("#" + chartId + "_radioButtons").html(radioButtonStr);
	$("#" + chartId + "_radioButtons input:radio").unbind("change").on("change", function() {
		var checkedVal = $("#" + chartId + "_radioButtons").find(":radio:checked").val();
		getParticularVisualizeChart(chartId, checkedVal, chartType);
	});

	var tooltipObject = optionObjectEcharts['tooltip'];
	if (tooltipObject != null && !jQuery.isEmptyObject(tooltipObject)) {
		$.each(tooltipObject, function(key, value) {
			if (key !== null && key === "formatter") {
				tooltipObject['formatter'] = eval(tooltipObject['formatter']);
			}
		});
		option['tooltip'] = tooltipObject;
	}
	var seriesObject = option['series'];
	var labelObject = seriesObjectEcharts['label'];
	if (labelObject != null && !jQuery.isEmptyObject(labelObject)) {
		$.each(labelObject, function(key, value) {
			if (key !== null && key === "formatter") {
				labelObject['formatter'] = eval(labelObject['formatter']);
			}
		});
		seriesObject['label'] = labelObject;
	}
	if (option && typeof option === 'object') {
		myChart.setOption(option);
		$("#" + chartId).attr("echartOption", JSON.stringify(option));
	}

	myChart.on('contextmenu', function(params) {
		var colorsObj = '';
		selectHomeAggregateFunction(chartId, chartType, axisColumns, filterCondition, colorsObj);
	});
	showIntellisenseViewConfigOptions(count,chartType);
}

function showIntelliSenseAutoSuggestions(divId) { 
	var userName = $("#rsUserName").val();
	userName = userName.replace("_", " ");
	var user_name = "";
	userName = userName.split(' '); 
	for (var chr = 0; chr < userName.length; chr++) {
		user_name += userName[chr].substring(0, 1).toUpperCase() + userName[chr].substring(1, userName[chr].length).toLowerCase() + ' '
	}
	/*var div = "<div id='visionChartsAutoSuggestionUserExampleParentId' class='visionChartsAutoSuggestionUserExampleParentClass'><div id='" + divId + "' class='visionChartsAutoSuggestionUserClass'></div>"
	           + "<div id='visionChartsAutoSuggestionExampleId' class='visionChartsAutoSuggestionExampleClass'></div></div>";*/
	           
	var div = "<div id='visionChartsAutoSuggestionUserExampleParentId' class='visionChartsAutoSuggestionUserExampleParentClass'><div id='" + divId + "' class='visionChartsAutoSuggestionUserClass'></div><div id='visionChartsAutoSuggestionExampleId' class='visionChartsAutoSuggestionExampleClass'>"	      
            +'<div id="chatSection"></div><div id="searchResultText"></div>'
            +"</div></div>";
            
            
   
	$("#dialog1").html(div);
	$("#dialog1").dialog({
		title: (labelObject['Co-pilot Mode'] != null ? labelObject['Co-pilot Mode'] : 'Co-pilot Mode'),
		modal: true,
		width: 500,
		height: 600,
		fluid: true,
		overflow:'hidden',
		buttons: [],
		open: function() {
			$(this).closest(".ui-dialog").find(".ui-button").eq(1).addClass("dialogyes");
			$(".visionHeaderMain").css("z-index", "999");
			$(".visionFooterMain").css("z-index", "999");
			$(".ui-dialog").addClass("conversAiDialog");
			$('#dialog1').css('overflow', 'hidden' , "!important"); 
			$(".ui-dialog").css("overflow","hidden","!important");
			$(".visionChartsAutoSuggestionExampleClass").hide();
			/*attachRemovalAction();
			showAnimatedBubbleSequnce();*/
			
			
						
			var titleBar = $(this).prev(".ui-dialog-titlebar");
			titleBar.append('<button class="minimize-button" onclick=minimizeConvAIExampleDialog(this) style="border: none; background: none; padding: 5px;position: absolute;top: 50% ;transform: translateY(-50%);right: 35px;background: none;border: none;padding: 0;cursor: pointer;z-index: 1;"><i class="fas fa-minus"></i></button>');
			titleBar.append('<button class="plus-button" onclick=maximizeConvAIExampleDialog(this) style="display:none;border: none; background: none; padding: 0;position: absolute;top: 50% ;transform: translateY(-50%);right: 40px;background: none;border: none;padding: 0;cursor: pointer;z-index: 1;"><i class="fas fa-plus"></i></button>');
			titleBar.append('<button class="help-button" onclick=toggleConvAIExampleDialog() style="border:none;background: none;padding: 5px;position: absolute;top: 50% ;transform: translateY(-50%);right: 60px;"><i class="fas fa-question-circle"></i></button>');

			/*titleBar.on("click", ".help-button", function() {
				var helpContent = $(this).closest(".ui-dialog").find(".visionChartsAutoSuggestionExampleClass");
				var dialogContent = $(this).closest(".ui-dialog");
				dialogContent.animate({ height: "600px", width: "1300px", top: "13%", left: "15%" }, 300);
				helpContent.toggle();

			});*/

/*			titleBar.unbind("click").bind("click", ".minimize-button", function() {
				$(this).siblings(".help-button").hide();
				$("#visionChartsAutoSuggestionUserExampleParentId").hide();
				var dialog = $(this).closest(".ui-dialog");
				dialog.animate({ height: "40px", width: "150px", top: "85%", left: "83%" }, 300);
                $(this).siblings(".minimize-button").hide();
				$(this).siblings(".plus-button").show().css({ right: "25px" });
			});
			// Handle plus button click event
			titleBar.unbind("click").bind("click", ".plus-button", function() {
				$("#visionChartsAutoSuggestionUserExampleParentId").show();
				var dialog = $(this).closest(".ui-dialog");
				dialog.animate({ height: "600px", width: "1200px", top: "13%", left: "15%" }, 300);
                $(this).siblings(".plus-button").hide();
				$(this).siblings(".minimize-button").show();
				$(this).siblings(".help-button").show();
				attachRemovalAction();
				showAnimatedBubbleSequnce();
			});*/



			
			

		},
		beforeClose: function(event, ui) {
			$("#visionChartsAutoSuggestionUserId").remove();    
			$(".visionHeaderMain").css("z-index", "99999");
			$(".visionFooterMain").css("z-index", "99999");
			$("#intelliSenseChartVisualizeDivId"+intellisenseViewChartCount).remove();
			$(this).html("");
			$(this).dialog("destroy");
		}
	});

	var msgText = "<div id='intellisenseViewStartMsgId' class='convai-message nonLoadedBubble'><div class='convai-left-message' ><span>Hi " + user_name + "</span></div></div>";
	$("#visionChartsAutoSuggestionUserId").append(msgText);
	
	var chatSection = '<div id="info">'
		+ '<div class="center"><textarea  id="myTextarea" class="textSearch" placeholder="Type Search..." onkeypress="onTextSearch()"></textarea><span><span class="mircoClass" onclick="(\'myTextarea\')"><i class="fa fa-microphone" style="font-size:24px"></i></span>'
		+'<span class="voiceBeatClass"style="display:none" onclick="voiceStop()"><img src="images/animationMic.gif" style="width: 50px"></span>'
		+ '<button class="searchButtonCls" id="searchButtonId" onclick="textSearch()">Search</button></div>'
		+ '<div id="div_language" class="integralConvASearchMultiLanguagrClass"><select id="languageSelect" class="languageSelectionBox" name="language" onchange="languageSelect()">'
		+ '</select></div></div>'
		+ '<div id="speechStatus"></div>';
	$("#chatSection").append(chatSection);  
	
	
	var languages = {
    
    "en": {
      layout: "qwerty",
      name: "English"
    },
    "tr": {
      layout: "ms-Turkish F",
      name: "Turkish (T\u00fcrk\u00e7e)"
    },
     "ar": {
      layout: "ms-Arabic (101)",
      name: "Arabic (\u0627\u0644\u0639\u0631\u0628\u064a\u0629)"
    },
    "de": {
      layout: "ms-German",
      name: "German (Deutsch)"
    },
     "sq": {
      layout: "ms-Albanian",
      name: "ms-Albanian"
    },
     "bn": {
      layout: "ms-Bengali",
      name: "Bengali"
    },
    "te": {
      layout: "ms-Telugu",
      name: "Telugu"
    },
     "zh": {
      layout: "ms-Chinese ChaJei IME",
      name: "Chinese"
    },
     "fr": {
      layout: "ms-Belgian French",
      name: "French US"
    },
    "fr-ca": {
      layout: "ms-Canadian French",
      name: "French UK"
    },
    "nl": {
      layout: "ms-Dutch",
      name: "Dutch"
    },
    "hu": {
      layout: "ms-Hungarian 101-key",
      name: "Hungarian"
    },
     "it": {
      layout: "ms-Italian",
      name: "Italian"
    },
    "ja": {
      layout: "ms-Japanese Hiragana",
      name: "Japanese"
    },
    "ko": {
      layout: "ms-Korean",
      name: "Korean"
    },
    "no": {
      layout: "ms-Norwegian with Sami",
      name: "Norwegian"
    },
     "pt": {
      layout: "ms-Portuguese",
      name: "Portuguese PT"
    },
     "br": {
      layout: "ms-Portuguese (Brazilian ABNT)",
      name: "Portuguese BR"
    },
     "eu": {
      layout: "ms-Portuguese",
      name: "Portuguese EU"
    },
     "ro": {
      layout: "ms-Romanian (Standard)",
      name: "Romanian"
    },
     "ru": {
      layout: "ms-Russian",
      name: "Russian"
    },
     "es": {
      layout: "ms-Spanish",
      name: "Spanish ES"
    },
     "mx": {
      layout: "ms-Spanish Variation",
      name: "Spanish Mx"
    },
    
    
  };
  
  $('#myTextarea')
    .keyboard({
      usePreview: false,
      autoAccept :true
    })
    // activate the typing extension
    .addTyping({
      showTyping: true,
      delay: 250
    });
   addLang();
   
	function selectLang() {
		var lang = $("#languageSelect").val();
		var obj = languages[lang],
			kb = $('#myTextarea').getkeyboard();
		if (obj) {
			kb.options.language = lang;
			kb.redraw(obj.layout);
		}
	}

 function addLang() {
    var html = '';
    Object.keys(languages).forEach(function(language) {
      html += `<option value="${language}">${languages[language].name}</option>`;
    });
    $('#languageSelect')
      .html(html)
      .val($('#myTextarea').getkeyboard().options['language'] || "en");
      
  }
  document.getElementById("myTextarea").addEventListener("focusin", selectLang);
	
	$(".ui-dialog,.ui-dialog-content ").css("overflow","hidden","!important");

	attachRemovalAction();
	showAnimatedBubbleSequnce();

	$.ajax({
		type: "POST",
		url: "getConversationalAIMessage",
		cache: false,
		data: {
			messageId: 1
		},
		success: function(response) {
			if (response != null && !jQuery.isEmptyObject(response)) {
				var mainDiv = response['mainDiv'];
				$("#visionChartsAutoSuggestionUserId").append(mainDiv);
				attachRemovalAction();
			    showAnimatedBubbleSequnce();
			}
		},
		error: function(e) {
			console.log(e);
			sessionTimeout(e);
			stopLoader();
		}
	});


}


function showConversationAIMessage(msg,replyId,prevId,condition)
{
	var randomNumber = generateRandomNumber();
	var msgText = "<div id='visionConversationalAI"+randomNumber+"' class='convai-message nonLoadedBubble'><div class='convai-right-message'><span>" + msg + "</span>"
		+ "</div></div>";
		if(prevId !=null && prevId !='' && prevId !=undefined){
			 msgText += "<div class='intelliSenseViewGoBackClass'" + "  onclick=\"goToIntellisensemethod('visionConversationalAI"+randomNumber+"','"+ prevId + "')\">"
 		             + "<i class='fa fa-undo' aria-hidden='true' title='go back'></i>"
 		             + "</div>";
		}
		
	$("#visionChartsAutoSuggestionUserId").append(msgText);	
	attachRemovalAction();
	showAnimatedBubbleSequnce();
	if(condition !=null && condition !='' && condition !=undefined && condition =='Delete_Chart'){
		$("#visionVisualizeChart"+intellisenseViewChartCount).remove();
	}
	else if(condition !=null && condition !='' && condition !=undefined && condition =='Existing_Table'){
		var tableName = $("#intelliSenseTableId").text();
		$("#visionChartsAutoSuggestionUserId").empty();
		var randomNumber = generateRandomNumber();
	    var msgText = "<div id='visionConversationalAI"+randomNumber+"' class='convai-message nonLoadedBubble'><div class='convai-right-message'><span id='intelliSenseTableId'>" + tableName + "</span>"
		+ "</div></div>";
		$("#visionChartsAutoSuggestionUserId").append(msgText);	
		
	}
	else if(condition !=null && condition !='' && condition !=undefined && condition =='New_Table'){
		$("#visionChartsAutoSuggestionUserId").empty();
	}
	showNextConversationAiMessage(replyId);
}


function showNextConversationAiMessage(replyId)
{
	$.ajax({
		type: "POST",
		url: "getConversationalAIMessage", 
		cache: false,
		data: {
			messageId: replyId 
		},
		success: function(response) {
			if (response != null && !jQuery.isEmptyObject(response)) {
				var mainDiv = response['mainDiv'];
				var rightNxtMtd = response['rightNxtMtd'];
				var leftNxtMtd = response['leftNxtMtd'];
				var repliedId = response['replyId'];
				$("#visionChartsAutoSuggestionUserId").append(mainDiv);
				attachRemovalAction();
			    showAnimatedBubbleSequnce();
			    scrollAreaToBottom();
				if(rightNxtMtd !=null && rightNxtMtd !='' && rightNxtMtd !=undefined)
				{
					window[rightNxtMtd](repliedId);
				}
				if(leftNxtMtd !=null && leftNxtMtd !='' && leftNxtMtd !=undefined)
				{
					window[leftNxtMtd](repliedId);
				}
				
			}
		},
		error: function(e) {
			console.log(e);
			sessionTimeout(e);
			stopLoader();
		}
	});
}



function getExistingTables(replyId) {

	var userName = $("#rsUserName").val();
	$.ajax({
		type: "POST",
		url: "getUserTableNamesData",
		cache: false,
		data: {
			userName: userName,
			replyId:replyId
		},
		success: function(response) {
			//TODO: Need to add Loader
			if (response != null && !jQuery.isEmptyObject(response)) {
				var tableDiv = response['tableDiv'];
				var msgText = "<div id='userIntellisenseViewTablesDivId' class='userIntellisenseViewTablesDivClass'>" 
					+ tableDiv
					+ "</div>";
				$("#visionChartsAutoSuggestionUserId").append(msgText);
                showAnimatedBubbleSequnce();
				$('#data-search').on('keyup', function() {
					var searchVal = $(this).val();
					var filterItems = $('[data-intelliSenseViewTablefilter-item]');

					if (searchVal != '') {
						filterItems.addClass('intelliSenseViewTableshidden');
						$('[data-filter-name*="' + searchVal.toUpperCase() + '"]').removeClass('intelliSenseViewTableshidden');
					} else {
						filterItems.removeClass('intelliSenseViewTableshidden');
					}
				});
			}

		},
		error: function(e) {
			console.log(e);
			sessionTimeout(e);
			stopLoader();
		}
	});

}



function getConversationalAISelectedDataTableName(tableName,replyId) {
	var randomNumber = generateRandomNumber();
	const prevId = 5;
	if ($("#intelliSenseTableId").length > 0) {
		$("#intelliSenseTableId").text(tableName);
	} else {
		var msgText = "<div id='intellisenseViewTableId"+ randomNumber + "' class='text-right convai-right-message'><span id='intelliSenseTableId'>" + tableName + "</span>"
		    +"</div>"
		    + "<div class='intelliSenseViewGoBackClass'" + "  onclick=\"goToIntellisensemethod('intellisenseViewTableId"+randomNumber+"','"+ prevId + "')\">"
 			+ "<i class='fa fa-undo' aria-hidden='true' title='go back'></i>"
 			+ "</div>";
		$("#visionChartsAutoSuggestionUserId").append(msgText);
	}

	$(".userTableNamesDivClass .search ,.userTableNamesDivClass .userIntellisenseViewTableNamesDivClass").remove();
    attachRemovalAction();
	showAnimatedBubbleSequnce();
	showNextConversationAiMessage(replyId);
}

function showConversationalAIChartTypes(replyId)
{
	$.ajax({
		type: "post",
		traditional: true,
		url: 'getIntelliSenseChartTypes',
		cache: false,
		data: {
          replyId:replyId
		},
		success: function(response) {
			stopLoader();
			if (response != null && !jQuery.isEmptyObject(response)) {
				var chartDiv = response['chartDiv'];
				if ($.trim($("#intelliSenseChartDivId").html()).length > 0) {
					var userAppendDiv =  chartDiv;
					$("#intelliSenseChartDivId").html(userAppendDiv);
				} else {
					var appendDiv = "<div id='intelliSenseChartDivId' class='intelliSenseChartClass text-left'>"
						//+ "<p class='convai-left-message nonLoadedBubble' >Select chart type</p>"
						+ chartDiv
						+ "</div>";
					$("#visionChartsAutoSuggestionUserId").append(appendDiv);
				}
				showAnimatedBubbleSequnce();
				scrollAreaToBottom();
			}
		},
		error: function(e) {
			console.log("The Error Message is:::" + e.message);
			sessionTimeout(e);
		}
	});
}

function getConversationalAIFileTypes(replyId)
{
   var msgText =  "<div class='convai-message nonLoadedBubble'><button class='convai-left-message-button nonLoadedBubble' onclick=\"getNewDataType('XLS','Excel','"+replyId+"')\" id='intelliSenseYes'>XLS</button>"
		+ "<button class='convai-left-message-button nonLoadedBubble' onclick=\"getNewDataType('XLSX','Excel','"+replyId+"')\" id='intelliSenseYes'>XLSX</button>"
		+ "<button class='convai-left-message-button nonLoadedBubble' onclick=\"getNewDataType('CSV','csv_search','"+replyId+"')\" id='intelliSenseYes'>CSV</button>"
		+ "<button class='convai-left-message-button nonLoadedBubble' onclick=\"getNewDataType('TEXT','DM_TEXT','"+replyId+"')\" id='intelliSenseYes'>TEXT</button></div>";
   $("#visionChartsAutoSuggestionUserId").append(msgText);
   attachRemovalAction();
   showAnimatedBubbleSequnce();
}

function getConversationalAIColumns(replyId) {
	var tableName = $("#intelliSenseTableId").text();
	$.ajax({
		type: "post",
		traditional: true,
		url: 'getIntelliSenseTableColumns',
		cache: false,
		data: {
			tableName: tableName
		},
		success: function(response) {
			stopLoader();
			if (response != null && !jQuery.isEmptyObject(response)) {
				var columnDiv = response['columnDiv'];
				if ($.trim($("#intellisenseViewUserColumnNamesDivId").html()).length > 0) {
					$("#intellisenseViewUserColumnNamesDivId").html(columnDiv);
				} else {
					var userColumnDiv = "<div class='convai-message'><div id='intellisenseViewUserColumnNamesDivId' class='intellisenseViewUserColumnNamesDivClass'>"
						+ columnDiv
						+ "</div>"
						+ "</div>"
					$("#visionChartsAutoSuggestionUserId").append(userColumnDiv);  
				}
              
		     attachRemovalAction();
	         showAnimatedBubbleSequnce();
	         showNextConversationAiMessage(replyId);
			}
		},
		error: function(e) {
			console.log("The Error Message is:::" + e.message);
			sessionTimeout(e);
		}
	});
}

function exitConversationAI()
{
				$(".ui-dialog-content").remove();
				$("#dialog1").remove();
				$("body").append("<div id='dialog1'></div>");
				$("#intelliSenseChartVisualizeDivId"+intellisenseViewChartCount).remove();
}


function redirectConversationAIMessage(redirectType)
{
	
	exitConversationAI();
	if(redirectType == 'Visualization'){
          window.open("https://www.piloggroup.com/ivisualize-digital-analytics.php", "_blank");
     }else if(redirectType == 'iTransform')
     {
	    window.open("https://www.piloggroup.com/itransform-ETL.php", "_blank");
	 }
	
	/*var msgText = "<div  class='convai-message nonLoadedBubble'><div class='convai-right-message'><span>" + redirectType + "</span>"
		+ "</div></div>";
	$("#visionChartsAutoSuggestionUserId").append(msgText);	
	attachRemovalAction();
	         showAnimatedBubbleSequnce();*/
	          
	            /*var contextPath = $("#contextPath").val();
                var host = document.location.host;
                var protocal;
                var context = "";
                if (host.indexOf("8080") > -1) {
                    protocal = "http";
                    context = "/integral";
                } else if (host.indexOf("8443") > -1) {
                    protocal = "http";
                    context = "/integral";
                } else if (host.indexOf("8090") > -1) {
                    protocal = "http";
                    context = "/integral";
                } else if (host.indexOf("8081") > -1) {
                    protocal = "http";
                    context = "/integral";
                } else if (host.indexOf("9999") > -1) {
                    protocal = "http";
                    context = "/integral";
                } else {
                    protocal = "https";
                    context = "";
                }
                contextPath = protocal + '://' + host + context;
                var popup = window.open(contextPath, "_blank");
               
         var readyStateCheckInterval = setInterval(function() {
         if (popup.document.readyState === "complete") {
             clearInterval(readyStateCheckInterval);
             if(redirectType == 'Visualization'){
               popup.loadVisuvalization();
             }else if(redirectType == 'iTransform')
             {
	           popup.loadETL('ETL');
	          }
            }
          }, 3000);*/
          
}

function saveConversationAIVisualizationData(replyId) {
	var dataArr = [];
	var totalChartDivs = $("[class^='visionVisualizeChartBoxClass']");
	$.each(totalChartDivs, function(index, val) {
		var tableName = $("#intelliSenseTableId").text();
	    var chartId = "visionVisualizeChartId" + intellisenseViewChartCount + "";
		var count = chartId.replace("visionVisualizeChartId", "");
		var type = $("#intelliSenseChartTypeId").val();
		var filtersId = "intellisenseViewChartFiltersColumnsDivId"+count; 

		var axisColumns = [];
		var valuesColumns = [];
		var tablesObj = [];
		var dateColumnData;

		$("#intelliSenseViewAxisColumnsId"+count+" div").each(function()
	{
	  var divId =  $(this).attr('id');
	  if(divId !=null && divId !='' && divId !=undefined)
	  {
		var inputId = $("#"+divId).find("input").attr('id');
		if(inputId !=null && inputId !='' && inputId !=undefined)
		{
			var inputVal = $("#"+inputId).attr('value');
			if(inputVal !=null && inputVal !='' && inputVal !=undefined
			&& tableName != null && tableName != '' && tableName !=undefined)
			{
				var columnObj = {};
		        columnObj['tableName'] = tableName;
		        columnObj['columnName'] = inputVal;
		        axisColumns.push(columnObj);
		        if (!(tablesObj.indexOf(tableName) > -1)) {
			         tablesObj.push(tableName);
		        }
			}
		}
	  }	
	});
	
	$("#intelliSenseViewValuesColumnsId"+count+" div").each(function()
	{
		var divId = $(this).attr('id');
		if(divId !=null && divId !='' && divId !=undefined)
		{
			var inputId = $("#"+divId).find("input").attr('id');
			if(inputId !=null && inputId !='' && inputId !=undefined)
			{
				var valueColumn = $("#"+inputId).attr('value');
				var columnObj = {};
		        columnObj['tableName'] = tableName;
		        columnObj['columnName'] = valueColumn;
		        var aggregateColumn = $("#"+inputId).attr("aggregateColumn");
		        if (aggregateColumn != null && aggregateColumn != '' && aggregateColumn != undefined) {
				  columnObj['aggColumnName'] = aggregateColumn;
			    }
		        valuesColumns.push(columnObj);
		        if (!(tablesObj.indexOf(tableName) > -1)) {
			      tablesObj.push(tableName); 
		        }
				
				
			}
		}
	});



	var filterArr = [];
	   $('#' + filtersId + ' div.intellisenseViewFilterDivClass').each(function(i, ele) {
        var colName = $(this).children('div:nth-child(1)').children('div:nth-child(1)').children('div:nth-child(1)').find("span").text();
		//var colName = $(this).children('div:nth-child(1)').children('div:nth-child(1)').find("input").val();
		var operator = $(this).children('div:nth-child(1)').children('div:nth-child(1)').children('div:nth-child(2)').find("select").val();
		var checkId = $(this).children('div:nth-child(1)').children('div:nth-child(2)');
		var checkValues = $("#" + checkId[0]['id']).jqxListBox('getCheckedItems');
		var values = [];
		$.each(checkValues, function(index) {
			values.push(this.value);
		});
		if (values != null && !jQuery.isEmptyObject(values)) {
			values = values.toString();
		}
		var filterObj = {};
		if (values != null && values != '' && values != undefined) {
			filterObj['colName'] = colName;
			filterObj['operator'] = operator;
			filterObj['values'] = values;
			filterArr.push(filterObj);
		}
		alert("values");
	});
		var parmaFromArr = [];
		var parmaToArr = [];
		var paramDateArr = {};
		if (type != null && type != '' && type != undefined && type == 'Card') {
			var paramFromObj1 = {};
			var paramToObj1 = {};
			var colName = $("#visionVisualizeCardChartDateValuesId_" + count).find('div.visualizeDivData').attr("data-column-name");
			var innerFilterDivClassArray = $("#visionVisualizeCardChartDateSelectValuesId_" + count).find(".innerFilterDivClass");
			if (innerFilterDivClassArray != null && !jQuery.isEmptyObject(innerFilterDivClassArray) && innerFilterDivClassArray.length > 0) {
				var fromSelectId = $(innerFilterDivClassArray[0]).find("#ddwFrom" + count).attr("id");
				paramFromObj1.colName = colName;
				paramToObj1.colName = colName;
				if (fromSelectId != null && fromSelectId != '' && fromSelectId != undefined) {
					var fromMinval;
					var fromMaxval;
					var toMinval;
					var toMaxval
					var fromSelectValue = $("#" + fromSelectId).val();
					if (fromSelectValue != null && fromSelectValue != '' && fromSelectValue != undefined) {
						paramFromObj1.operator = fromSelectValue;
						if (fromSelectValue == "BETWEEN") {
							fromMinval = $("#tbminFrom" + count).val();
							fromMaxval = $("#tbmaxFrom" + count).val();
							paramFromObj1.minvalue = fromMinval;
							paramFromObj1.maxvalue = fromMaxval;
						}
						parmaFromArr.push(paramFromObj1);
					}
					var toSelectId = $(innerFilterDivClassArray[1]).find("select").attr("id");
					var toSelectValue = $("#" + toSelectId).val();
					if (toSelectValue != null && toSelectValue != '' && toSelectValue != undefined) {
						paramToObj1.operator = toSelectValue;
						if (toSelectValue == "BETWEEN") {
							toMinval = $("#tbminTo" + count).val();
							toMaxval = $("#tbmaxTo" + count).val();
							paramToObj1.minvalue = toMinval;
							paramToObj1.maxvalue = toMaxval;
						}
						parmaToArr.push(paramToObj1);
					}

				} else {
					paramToObj1.operator = "EQUALS";
					paramFromObj1.operator = "EQUALS";
					var fromValue = $("#visionVisualizeCardDateFromSelectValueId" + count).val();
					var toValue = $("#visionVisualizeCardDateToSelectValueId" + count).val();
					paramFromObj1.values = fromValue;
					paramToObj1.values = toValue;
					parmaFromArr.push(paramFromObj1);
					parmaToArr.push(paramToObj1);

				}

			} else if (dateColumnData != null && dateColumnData != '' && dateColumnData != undefined) {
				paramDateArr['dateColumnData'] = dateColumnData;
			}

		}

		var chartOptAllObj = {};
		var chartConfigToggleStatus = {};
		var chartConfigPositionKeyObj = {};
		var errorMessageStr = "";
		var errorCount = 0;
		var chartConfigId = "intelliSenseChartConfigDivId" + count + " ul li"; 
		$('#' + chartConfigId).each(function(i, ele) {
			var optColName = $(this).attr("data-column-name");
			var optKeyType = $(this).attr("data-key-type");
			if (optKeyType != null && optKeyType != '' && optKeyType != undefined) {
				chartConfigPositionKeyObj[optColName] = optKeyType;
			}
			var optName = $("#" + optColName).attr("data-opt-name");
			var optMan = $("#" + optColName).attr("data-man");
			var inputType = $("#" + optColName).attr("type");
			var optValue = $("#" + optColName).val();
			if (inputType == 'checkbox') {
				if ($("#" + optColName).is(':checked')) {
					optValue = true;
				} else {
					optValue = false;
				}
			}
			var isChartHoverActive = $("#toggleButtonForchartHover" + type.toUpperCase()).hasClass('active');
			if (!isChartHoverActive && optColName.includes('HOVERLABELDATA')) {
				optValue = 'none';
			}
			if (inputType == 'number') { //nested
				if (optValue != null && optValue != '' && optValue >= 1) {
					optValue = parseInt(optValue);
				}
			}
			var toggleBtnClasses = $(this).find('.toggle-btn').attr('class');
			if (toggleBtnClasses !== null && toggleBtnClasses !== '' && toggleBtnClasses !== undefined) {
				if (toggleBtnClasses.includes('active')) {
					chartConfigToggleStatus[optColName] = true;
				} else {
					chartConfigToggleStatus[optColName] = false;
				}
			}
			var isToggleActive = $(this).hasClass('active-filter');
			if (optValue != null && optValue != '' && isToggleActive) {
				chartOptAllObj[optColName] = optValue;
			} else if (optMan == 'M') {
				errorCount++;
				errorMessageStr += "<tr><td>  " + '<p class="visionGenericTabStatusDialog">' + " " + '<span style="color:blue;">' + " " + optName + "</span><b>:</b> Should not be null.</tr></td><br>";
			} else if (optColName.includes('SHOWLEGEND') && !isToggleActive) {
				chartOptAllObj[optColName] = false;
			}

		});

		var currencyConversionObject = {};
		var isCurrencyConversionEvent = $("#isCurrencyConversionEvent").val();
		var fromCurrencyDropDownValue = $("#fromCurrencyDropDown").val();
		var toCurrencyDropDownValue = $("#toCurrencyDropDown").val();
		var currencySymbol = $("#toCurrencyDropDown_jqxDropDownList option:selected").attr('data-currencySymbol');
		if (isCurrencyConversionEvent !== null && isCurrencyConversionEvent !== undefined && isCurrencyConversionEvent !== '') {
			currencyConversionObject['isCurrencyConversionEvent'] = isCurrencyConversionEvent;
		}
		if (fromCurrencyDropDownValue !== null && fromCurrencyDropDownValue !== undefined && fromCurrencyDropDownValue !== '') {
			currencyConversionObject['fromCurrencyDropDownValue'] = fromCurrencyDropDownValue;
		}
		if (toCurrencyDropDownValue !== null && toCurrencyDropDownValue !== undefined && toCurrencyDropDownValue !== '') {
			currencyConversionObject['toCurrencyDropDownValue'] = toCurrencyDropDownValue;
		}
		if (currencySymbol !== null && currencySymbol !== undefined && currencySymbol !== '') {
			currencyConversionObject['currencySymbol'] = currencySymbol;
		}
		var data = {};
		var filteredchartPositionAllObj = {};
		$.each(chartConfigPositionKeyObj, function(key, value) {
			var newKey = key.replace(/[0-9]/g, '');
			filteredchartPositionAllObj[newKey] = value;
		});
		var filteredChartOptAllObj = {};
		$.each(chartOptAllObj, function(key, value) {
			var newKey = key.replace(/[0-9]/g, '');
			filteredChartOptAllObj[newKey] = value;
		});
		var totChartId = chartId.replace("visionVisualizeChart", "visionVisualizeChartId");
		var colorsObj = $("#" + totChartId).attr("colors");

		var data = {};
		data['axisColumns'] = JSON.stringify(axisColumns);
		data['valuesColumns'] = JSON.stringify(valuesColumns);
		data['tablesObj'] = JSON.stringify(tablesObj);
		data['chartType'] = type;
		data['chartId'] = chartId;
		data['filterConditions'] = JSON.stringify(filterArr);
		data['chartPropObj'] = JSON.stringify(filteredChartOptAllObj);
		data['chartConfigPositionKeyStr'] = JSON.stringify(filteredchartPositionAllObj);
		data['colorsObj'] = colorsObj;
		data['chartConfigToggleStatus'] = JSON.stringify(chartConfigToggleStatus);
		data['currencyConversionObject'] = JSON.stringify(currencyConversionObject);
		if (type != null && type != '' && type != undefined && type == 'Card') {
			var cardType = $("#" + chartId).attr("cardType");
			data['cardType'] = cardType;
			data['cardTrendsChartType'] = cardTrendDivArr[chartId];
			if (parmaFromArr != null && !jQuery.isEmptyObject(parmaFromArr) &&
				parmaToArr != null && !jQuery.isEmptyObject(parmaToArr)) {
				data['paramFromArr'] = JSON.stringify(parmaFromArr);
				data['paramToArr'] = JSON.stringify(parmaToArr);
			} else if (paramDateArr != null && !jQuery.isEmptyObject(paramDateArr)) {
				data['paramDateArr'] = JSON.stringify(paramDateArr);
			}
			var visualAreaCardTitle = $("#visionVisualizeCardTitle").val();
			var cardImageEncodedStr = $("#cardImageVisualizeArea").attr("src");
			data['cardTitle'] = visualAreaCardTitle;
			data['cardImageEncodedStr'] = cardImageEncodedStr;

		}
		dataArr.push(data);
	});
	var value = "";
	if (dataArr != null && dataArr != '' && !jQuery.isEmptyObject(dataArr)) {
		$.ajax({
			url: 'getdashbordname',
			type: "POST",
			dataType: 'html',
			traditional: true,
			cache: false,
			success: function(response) {
				if (response != null && !jQuery.isEmptyObject(response)) {
					var dashBoardArrFromDB = JSON.parse(response);
					var jqxddl = "<div id='dropDownDashBoardList'></div>";
					jqxddl += "<div id='textReason'><textarea id='reasonId' class='visionDeleteReason' style='display:none' placeholder='Please type a new dashboard name ...'></textarea><br></div>";
					jqxddl += "<div id='dailog_error_id' style='display:none;color:red'>" + (labelObject['Please give any DashBoard Name'] != null ? labelObject['Please give any DashBoard Name'] : 'Please give any DashBoard Name') + "</div>";
					$("#dialog").html(jqxddl);
                    $("#dialog").dialog({
						title: (labelObject['DashBoard Name'] != null ? labelObject['DashBoard Name'] : 'DashBoard Name'),
						modal: true,
						height: 'auto',
						minWidth: 300,
						maxWidth: 'auto',
						fluid: true,
						buttons: [{
							text: (labelObject['Ok'] != null ? labelObject['Ok'] : 'Ok'),
							click: function() {
								var dashBoardName = $("#dropDownDashBoardList").val();
								if (!(dashBoardName != null && dashBoardName != '' && dashBoardName != undefined) || dashBoardName == 'New') {
									dashBoardName = $("#reasonId").val();
								}
								if (dashBoardName != null && dashBoardName != '' && dashBoardName != undefined && dashBoardName != 'Select' && dashBoardName != 'New') {
									$("#dailog_error_id").hide();
									$(this).html("");
									$(this).dialog("destroy");
									$.ajax({
										url: 'saveVisualizeData',
										type: "POST",
										data:
										{
											'data': JSON.stringify(dataArr),
											'dashBoardName': dashBoardName
										},
										traditional: true,
										cache: false,
										success: function(response) {
											console.log("testing");
											var msg = " Charts " + response;
											
											var modalObj = {
												title: 'Save',
												body: msg
											};
											var buttonArray = [
												{
													text: 'Close',
													click: function() {
														try{
											// $("#visionChartsAutoSuggestionUserId").html("");
											// $("#intelliSenseChartVisualizeDivId"+intellisenseViewChartCount).remove();
											if(replyId !=null && replyId !='' && replyId !=undefined && replyId == '23')
											{
												exitConversationAI()
                                            }else{
	                                           intellisenseViewChartCount++;
	                                           showNextConversationAiMessage(replyId);
                                            }
											
											}catch(e)
											{}
													},
													isCloseButton: true
												}
											];
											modalObj['buttons'] = buttonArray;
											createModal("dataDxpSplitterValue", modalObj);
											$(".modal-dialog").addClass("opacity-animate3");
										}, error: function(e) {
											sessionTimeout(e);
										}
									});
								} else {
									$("#dailog_error_id").show();
								}
							}
						},
						{
							text: (labelObject['Cancel'] != null ? labelObject['Cancel'] : 'Cancel'),
							click: function() {
								$(this).html("");
								$(this).dialog("destroy");
								try{
									// $("#visionChartsAutoSuggestionUserId").html("");
									// $("#intelliSenseChartVisualizeDivId"+intellisenseViewChartCount).remove();
									if(replyId !=null && replyId !='' && replyId !=undefined && replyId == '23')
									{
										exitConversationAI()
									}else{
									   intellisenseViewChartCount++;
									   showNextConversationAiMessage(replyId);
									}
									
									}catch(e)
									{}
							}
						}],
						open: function() {
							
								$("#dropDownDashBoardList").jqxDropDownList({
									source: dashBoardArrFromDB,
									theme: 'energyblue',
									width: '200px',
									height: '30px',
									filterable: true,
								});
								$("#dropDownDashBoardList").jqxDropDownList('selectItem', 'Select');
								$("#dropDownDashBoardList").unbind('change').on('change', function(event) {
									var selectedItem = event.args.item;
									if (selectedItem) {
										var selectedValue = selectedItem.value;
										if (selectedValue === 'New') {

											$("#reasonId").show();
										} else {
											$("#reasonId").hide();
										}
									}
								});
						
							$(this).closest(".ui-dialog").find(".ui-button").eq(1).addClass("dialogyes");
							$(this).closest(".ui-dialog").find(".ui-button").eq(2).addClass("dialogno");
							$(".visionHeaderMain").css("z-index", "999");
							$(".visionFooterMain").css("z-index", "999");
							$(this).parent().hasClass('ui-dialog')
							{
								$(this).parent().addClass('saveConversationalAIChart');
							}
						},
						beforeClose: function(event, ui) {
							$(".visionHeaderMain").css("z-index", "99999");
							$(".visionFooterMain").css("z-index", "99999");
						}
					});
				}
			}, error: function(e) {
				sessionTimeout(e);
			}
		});
	}
}


function getConversationalAIData(replyId){
	
	var tableName = $("#intelliSenseTableId").text();	
	$.ajax({
		type: "post",
		traditional: true,
		url: 'viewAnalyticsTableGrid',
		cache: false,
		data: {
			tableName: tableName
		},
		success: function(response) {
			stopLoader();
			if (response != null && !jQuery.isEmptyObject(response)) {
				$("#visionChartsAutoSuggestionUserId").append("<div id=\"intellisenseViewtableData\" class='intellisenseViewtableDataClass'></div>");  
				var column=response['columnArray'];
	
				var dataArray = response['dataArray'];
				var dataFieldsArray = response['dataFieldsArray'];
				var columnsArray = response['columnsArray'];
				var data = response['columnsArray'];
				var totalCount = response['totalCount'];
				var source =
				{
					type: 'POST',
					datatype: "json",
					datafields: dataFieldsArray,
					data: {
			        tableName: tableName
		             },
					url: 'viewAnalyticsTableGridData',
					root: 'Rows',
					processdata: function(data) {
						showLoader();
						data['getOnlyDataArray'] = 'Y';
					},
					beforeSend: function() {
						//showLoader();

					}, loadError: function(xhr, status, error) {
						$('#intellisenseViewtableData').css("width", "100%");
						stopLoader();
					}, loadComplete: function(data) {
						$('#intellisenseViewtableData').css("width", "100%");
						stopLoader();
					},
					beforeprocessing: function(data) {
						source.totalrecords = data[data.length - 1];
					},
					sort: function() {
						//                                                $("#intellisenseViewtableData").remove();
						$("#intellisenseViewtableData").jqxGrid('updatebounddata', 'sort');
						try {
							$("#intellisenseViewtableData").jqxGrid('clearselection');
						} catch (e) {
						}

					},
					filter: function() {
						$("#intellisenseViewtableData").jqxGrid('updatebounddata', 'filter');
						try {
							$("#intellisenseViewtableData").jqxGrid('clearselection');
						} catch (e) {
						}
					}
				};
				var dataAdapter = new $.jqx.dataAdapter(source);

				$("#intellisenseViewtableData").jqxGrid(
					{
						width: "100%",
						height: "400px",
						theme: 'energyblue',
						autoshowloadelement: false,
						source: dataAdapter,
						pageable: true,
						pagesize: 50,
						showfilterrow: true,
						filterable: true,
						sortable: true,
						virtualmode: true,
						pagesizeoptions: ['50', '100', '500'],
						rendergridrows: function(params) {
							return params.data;
						},
						columnsresize: true,
						columns: columnsArray
					});
					
              attachRemovalAction();
	         showAnimatedBubbleSequnce();
	         showNextConversationAiMessage(replyId);

			}

		},
		error: function(e) {
			stopLoader();
			sessionTimeout(e);
		}

	});
	
}

function generateRandomNumber(){	
	const min = 1000000000000000000; // Minimum value for the long positive integer
	const max = 9999999999999999999; // Maximum value for the long positive integer
	const randomFloat = Math.random();
	const scaledFloat = randomFloat * (max - min + 1) + min;
	const longPositiveInteger = Math.floor(scaledFloat);
	return longPositiveInteger;
} 

function getConversationAINewChartTypes(replyId)
{
	$("#visionVisualizeBasicTabs").remove();
	var chartDiv = "<div id='intelliSenseChartDivId' class='intelliSenseChartClass text-left'>"
	              + "<div id=\"visionVisualizeBasicTabs\" class=\"visionVisualizeChartsTabsClass nonLoadedBubble\">"
	              + "<div class=\"row iconsRow\">";
	var chartType = $("#intelliSenseChartTypeId").val();
	if (!(chartType != null && chartType != '' && chartType != undefined)) {
		chartType = chartType1;
	}
	if(chartType == 'pie' || chartType == 'donut')
	{
		 chartDiv +=  "<div class=\"col-lg-4  col-md-4 visualIconDivImg\">"
					+ "<img onclick=\"showIntelliSenseViewNewChartDiv('Pie.svg', 'pie',"+replyId+" )\" src=\"images/Pie.svg\" class=\"visualDarkMode\" title=\"Pie chart looks like circle it is divided into sectors that each represent a proportion of the whole.\">"
					+ "</div>" 
				    + "<div class=\"col-lg-4  col-md-4 visualIconDivImg\">"
					+ "<img onclick=\"showIntelliSenseViewNewChartDiv('Donut.svg', 'donut',"+replyId+")\" src=\"images/Donut.svg\" class=\"visualDarkMode\" title=\"Doughnut chart looks like circle with hole it is divided into sectors that each represent a proportion of the whole\">"
					+ "</div>";
	}else if(chartType == 'bar' || chartType == 'lines' || chartType == 'funnel' || chartType== 'column' || chartType== 'scatter'
	|| chartType=='scatterpolar')
	{
		chartDiv  +=  "<div class=\"col-lg-4  col-md-4 visualIconDivImg\">"
					+ "<img onclick=\"showIntelliSenseViewNewChartDiv('Bar.svg', 'bar',"+replyId+")\" src=\"images/Bar.svg\" class=\"visualDarkMode\" title=\"A bar chart is a chart that presents categorical data with rectangular bars with lengths proportional to the values that they represent. The bars can be plotted horizontally\">"
					+ "</div>"
					+ "<div class=\"col-lg-4  col-md-4 visualIconDivImg\">"
					+ "<img onclick=\"showIntelliSenseViewNewChartDiv('Column.svg', 'column',"+replyId+")\" src=\"images/Column.svg\" class=\"visualDarkMode\" title=\"A column chart is a chart that presents categorical data with rectangular bars with heights proportional to the values that they represent. The bars can be plotted vertically\">"
					+ "</div>" + "<div class=\"col-lg-4  col-md-4 visualIconDivImg\">"
					+ "<img onclick=\"showIntelliSenseViewNewChartDiv('Line.svg', 'lines',"+replyId+")\" src=\"images/Line.svg\" class=\"visualDarkMode\" title=\"A line chart is a type of chart which displays information as a series of data points called \" markers'=\"\" connected=\"\" by=\"\" straight=\"\" line=\"\" segments'=\"\">"
					+ "</div>" + "<div class=\"col-lg-4  col-md-4 visualIconDivImg\">"
					+ "<img onclick=\"showIntelliSenseViewNewChartDiv('Scatter.svg', 'scatter',"+replyId+")\" src=\"images/Scatter.svg\" class=\"visualDarkMode\" title=\"Scatter chart\">"
					+ "</div>"
					+ "<div class=\"col-lg-4  col-md-4 visualIconDivImg\">"
					+ "<img onclick=\"showIntelliSenseViewNewChartDiv('Funnel.svg', 'funnel',"+replyId+")\" src=\"images/Funnel.svg\" class=\"visualDarkMode\" title=\"Funnel charts can be used to illustrate stages in a process, they could be used to show anything that’s decreasing in size\">"
					+ "</div>"
					+ "<div class=\"col-lg-4  col-md-4 visualIconDivImg\">"
					+ "<img onclick=\"showIntelliSenseViewNewChartDiv('Redar-Chart.svg', 'scatterpolar',"+replyId+")\" src=\"images/Redar-Chart.svg\" class=\"visualDarkMode\" title=\"A radar chart is a graphical method of displaying multivariate data in the form of a two-dimensional chart of three or more quantitative variables represented on axes starting from the same point\">"
					+ "</div>";
					
	}else if(chartType == 'sunburst' || chartType == 'treemap')
	{
		chartDiv +=  "<div class=\"col-lg-4  col-md-4 visualIconDivImg\">"
					+ "<img onclick=\"showIntelliSenseViewNewChartDiv('Tree_Chart.svg', 'treemap',"+replyId+")\" src=\"images/Tree_Chart.svg\" class=\"visualDarkMode\" title=\"Tree maps display hierarchical data as a set of nested rectangles. Each branch of the tree is given a rectangle, which is then tiled with smaller rectangles representing sub-branches\">"
					+ "</div>"
					+ "<div class=\"col-lg-4  col-md-4 visualIconDivImg\">"
					+ "<img onclick=\"showIntelliSenseViewNewChartDiv('Sunburst.svg', 'sunburst',"+replyId+")\" src=\"images/Sunburst.svg\" class=\"visualDarkMode\" title=\"The sunburst chart is ideal for displaying hierarchical data. Each level of the hierarchy is represented by one ring or circle with the innermost circle as the top of the hierarchy\">"
					+ "</div>"
	}
	chartDiv += "</div>";
	chartDiv += "</div>";
	chartDiv += "</div>";
	$("#visionChartsAutoSuggestionUserId").append(chartDiv);
	 attachRemovalAction();
	         showAnimatedBubbleSequnce();
	        
	
}

function showIntelliSenseViewNewChartDiv(chartImage, chartType,replyId) {
	$("#intelliSenseChartTypeId").remove();
	$("#intelliSenseChartImageId").remove();
	if (!(chartType != null && chartType != '' && chartType != undefined)) {
		chartType = chartType1;
	}
	var chartDiv = "<div id='intellisenseViewNewchartid' class=\"visualIconDivImg text-right replyIntelisenseView convai-right-message p-3 nonLoadedBubble\">"
		+ "<img src=\"images/" + chartImage + "\" class=\"visualDarkMode\">"
		+ "<input type='hidden' id='intelliSenseChartTypeId' value='" + chartType + "'/>"
		+ "<input type='hidden' id='intelliSenseChartImageId' value='" + chartImage + "'/>"
		+ "</div>"
		+ "<div class=\"intelliSenseViewGoBackClass\" onclick=\"goToIntellisensemethod('intellisenseViewNewchartid','16')\"><i class=\"fa fa-undo\" aria-hidden=\"true\" title=\"go back\"></i></div>";
	$("#visionChartsAutoSuggestionUserId").append(chartDiv);
	$(".iconsRow").remove();  
	showNextConversationAiMessage(replyId);
	showAnimatedBubbleSequnce();
	getIntellisenseViewExampleChartDesign(chartType);
}

function showIntelliSenseViewNewChartConfig(replyId)
{
	var chartType= $("#intelliSenseChartTypeId").val();
	var columnsCount = intellisenseViewChartCount;
	showIntelliSenseViewChartConfig(intellisenseViewChartCount,chartType);
	setTimeout(function(){
		var chartConfigHtml = $("#intelliSenseChartConfigDivId" + intellisenseViewChartCount).html();
		$("#intelliSenseChartConfigDivId" + intellisenseViewChartCount).remove();
		var chartDiv = "<div id='intelliSenseChartConfigDivId"+intellisenseViewChartCount+"'  class='intelliSenseChartConfigDivClass nobgbubble sayIntelisenseView' style='display:none'>"
		        +chartConfigHtml
		        +"</div>";
		$("#visionChartsAutoSuggestionUserId").append(chartDiv);
		
		$("#intelliSenseChartConfigDivId" + columnsCount).find("ul li").map(function() {
					$(this).addClass("sayIntelisenseView convai-left-message");
					$(this).hide();
				});
				showAnimatedBubbleSequnce();
				scrollAreaToBottom();
	   			$("#intelliSenseChartConfigDivId" + columnsCount).unbind('keyup').on('keyup', function(event) {
					clearTimeout(timeOut);
					timeOut = setTimeout(function() {
						var target = event.currentTarget;
						var configTargetId = target['id'];
						var chartCount;
						if (configTargetId != null && configTargetId != '' && configTargetId != undefined) {
							chartCount = configTargetId.replace("intelliSenseChartConfigDivId", "");
							checkIntellisenseViewAxisColumnNull(chartCount,"changeFlag");
						}
					}, 3000);
				});
				$("#intelliSenseChartConfigDivId" + columnsCount).unbind('change').on('change', function(event) {
					var target = event.currentTarget;
					var configTargetId = target['id'];
					var chartCount;
					if (configTargetId != null && configTargetId != '' && configTargetId != undefined) {
						chartCount = configTargetId.replace("intelliSenseChartConfigDivId", "");
						checkIntellisenseViewAxisColumnNull(chartCount,"changeFlag");
					}
				});
				
				$(".filter-container").unbind('click').on('click', function(event) {
				
				  //$(this).parent().siblings(':last').toggleClass("showSubItems");
				  $(this).parent().siblings(':last').toggle();
				  var ulId =  $(this).parent().parent().find('ul').attr("id");
				  $("#"+ulId +" > li").each(function(){
					$(this).toggle();
				 });
				  $(this).find('img').toggleClass('open');
				
		         
	            }); 


	 $(".toggle-btn").unbind('click').on('click', function(event) {
		$(this).toggleClass('active');
		var onOfftext = $(this).children(':first').text();
		if (onOfftext === 'off') {
			$(this).children(':first').text('on');
			$(this).parents('.main-container').siblings(':last').find('*').attr('disabled', false);
		} else {
			$(this).children(':first').text('off');
			$(this).parents('.main-container').siblings(':last').find('*').attr('disabled', true);
		}
		var isActive = $(this).hasClass('active');
		var currentToggleSelector = $(this).closest("li");
		//        var divWithChartCount = $(this).closest("div:has(*[data-charttype = " + chartType + "])").children().attr('id');
		var divWithChartCount = $(this).closest(".intelliSenseChartConfigDivClass").attr('id');
		var chartCnt = divWithChartCount.replace("intelliSenseChartConfigDivId","");
		var toBeToggledSelectors = currentToggleSelector.children("ul").children();
		var currentElementId = $(this).attr('id');
		var upperChartType = chartType.toUpperCase();
		if (isActive) {
			$.each(toBeToggledSelectors, function(index, element) {
				$(this).addClass('active-filter');
			});
			if (currentElementId !== '' && currentElementId !== null && currentElementId !== undefined) {
				if (currentElementId === 'toggleButtonForchartHover' + upperChartType) {
					$('#' + upperChartType + 'HOVERLABELDATA').attr('disabled', false);
					$('#' + upperChartType + 'HOVERLABELDATA').val('x+y');
				}
			}
		} else {
			$.each(toBeToggledSelectors, function(index, element) {
				$(this).removeClass('active-filter');
			});
			if (currentElementId !== '' && currentElementId !== null && currentElementId !== undefined) {
				if (currentElementId === 'toggleButtonForchartHover' + upperChartType) {
					$('#' + upperChartType + 'HOVERLABELDATA').attr('disabled', true);
					$('#' + upperChartType + 'HOVERLABELDATA').val('none');
				}
			}
		}
		checkIntellisenseViewAxisColumnNull(chartCnt,"changeFlag");
	});
		
		checkIntellisenseViewAxisColumnNull(columnsCount,"changeFlag");
	},3000);
	
}

function getshowIntellisenseViewChartConfigOptions()
{
	var columnsCount = intellisenseViewChartCount;
	var chartConfigHtml = $("#intelliSenseChartConfigDivId" + intellisenseViewChartCount).html();
		$("#intelliSenseChartConfigDivId" + intellisenseViewChartCount).remove();
		var chartDiv = "<div id='intelliSenseChartConfigDivId"+intellisenseViewChartCount+"'  class='intelliSenseChartConfigDivClass nobgbubble sayIntelisenseView' style='display:none'>"
		        +chartConfigHtml
		        +"</div>";
		$("#visionChartsAutoSuggestionUserId").append(chartDiv);
		
		$("#intelliSenseChartConfigDivId" + columnsCount).find("ul li").map(function() {
					$(this).addClass("sayIntelisenseView convai-left-message");
					$(this).hide();
				});
				showAnimatedBubbleSequnce();
				scrollAreaToBottom();
	   			$("#intelliSenseChartConfigDivId" + columnsCount).unbind('keyup').on('keyup', function(event) {
					clearTimeout(timeOut);
					timeOut = setTimeout(function() {
						var target = event.currentTarget;
						var configTargetId = target['id'];
						var chartCount;
						if (configTargetId != null && configTargetId != '' && configTargetId != undefined) {
							chartCount = configTargetId.replace("intelliSenseChartConfigDivId", "");
							checkIntellisenseViewAxisColumnNull(chartCount,"changeFlag");
						}
					}, 3000);
				});
				$("#intelliSenseChartConfigDivId" + columnsCount).unbind('change').on('change', function(event) {
					var target = event.currentTarget;
					var configTargetId = target['id'];
					var chartCount;
					if (configTargetId != null && configTargetId != '' && configTargetId != undefined) {
						chartCount = configTargetId.replace("intelliSenseChartConfigDivId", "");
						checkIntellisenseViewAxisColumnNull(chartCount,"changeFlag");
					}
				});
				
				$(".filter-container").unbind('click').on('click', function(event) {
				
				  //$(this).parent().siblings(':last').toggleClass("showSubItems");
				  $(this).parent().siblings(':last').toggle();
				  var ulId =  $(this).parent().parent().find('ul').attr("id");
				  $("#"+ulId +" > li").each(function(){
					$(this).toggle();
				 });
				  $(this).find('img').toggleClass('open');
				
		         
	            }); 


	 $(".toggle-btn").unbind('click').on('click', function(event) {
		$(this).toggleClass('active');
		var onOfftext = $(this).children(':first').text();
		if (onOfftext === 'off') {
			$(this).children(':first').text('on');
			$(this).parents('.main-container').siblings(':last').find('*').attr('disabled', false);
		} else {
			$(this).children(':first').text('off');
			$(this).parents('.main-container').siblings(':last').find('*').attr('disabled', true);
		}
		var isActive = $(this).hasClass('active');
		var currentToggleSelector = $(this).closest("li");
		//        var divWithChartCount = $(this).closest("div:has(*[data-charttype = " + chartType + "])").children().attr('id');
		var divWithChartCount = $(this).closest(".intelliSenseChartConfigDivClass").attr('id');
		var chartCnt = divWithChartCount.replace("intelliSenseChartConfigDivId","");
		var toBeToggledSelectors = currentToggleSelector.children("ul").children();
		var currentElementId = $(this).attr('id');
		var upperChartType = chartType.toUpperCase();
		if (isActive) {
			$.each(toBeToggledSelectors, function(index, element) {
				$(this).addClass('active-filter');
			});
			if (currentElementId !== '' && currentElementId !== null && currentElementId !== undefined) {
				if (currentElementId === 'toggleButtonForchartHover' + upperChartType) {
					$('#' + upperChartType + 'HOVERLABELDATA').attr('disabled', false);
					$('#' + upperChartType + 'HOVERLABELDATA').val('x+y');
				}
			}
		} else {
			$.each(toBeToggledSelectors, function(index, element) {
				$(this).removeClass('active-filter');
			});
			if (currentElementId !== '' && currentElementId !== null && currentElementId !== undefined) {
				if (currentElementId === 'toggleButtonForchartHover' + upperChartType) {
					$('#' + upperChartType + 'HOVERLABELDATA').attr('disabled', true);
					$('#' + upperChartType + 'HOVERLABELDATA').val('none');
				}
			}
		}
		checkIntellisenseViewAxisColumnNull(chartCount,"changeFlag");
	});
		
	setTimeout(function(){
		showIntellisenseViewConfigOptions();
	},2000);
}


function showConversationalAIAutoGeneratedCharts(replyId)
{
	var tableName = $("#intelliSenseTableId").text();
	showAutoMsgFlag = false;
	showAutoMsgDependFlag = false;
	$.ajax({
		url: 'getModalFileColumns',
		type: "POST",
		dataType: 'json',
		traditional: true,
		cache: false,
		async: false,
		data: {
			tableName: tableName
		},
		success: function(response) {
			stopLoader();
			if (response != null && !jQuery.isEmptyObject(response)) {
				var stringList = response['stringList'];
				var numberList = response['numberList'];
				var remarksArr = response['remarksArr'];
				if (remarksArr != null && !jQuery.isEmptyObject(remarksArr)) {
					var remarksStr = "";
					$.each(remarksArr, function(i, val) {
						remarksStr += val + ",";
					});
					remarksStr = remarksStr.replace(/,\s*$/, "");
					remarksStr = remarksStr + " : Should not be null";
					var modalObj = {
						title: 'Message',
						body: remarksStr
					};
					var buttonArray = [
						{
							text: 'Close',
							click: function() {

							},
							isCloseButton: true
						}
					];
					modalObj['buttons'] = buttonArray;
					createModal("dataDxpSplitterValue", modalObj);
					$(".modal-dialog").addClass("opacity-animate3");

				} else {
					getIntelliSenseViewModalAnalytics(stringList, numberList, tableName,replyId);
				}
			}
		}, error: function(e) {
			console.log("The Error Message is:::" + e.message);
			sessionTimeout(e);
		}
	});
}

function getIntelliSenseViewModalAnalytics(stringList, numberList, tableName,replyId) {
    $.ajax({
        url: 'getIntelliSenseViewModalChartConfigOptions',
        type: "POST",
        dataType: 'json',
        traditional: true,
        cache: false,
        async: false,
        data: {
            tableName: tableName
        },
        success: function (response) {
            stopLoader();
            if (response != null && !jQuery.isEmptyObject(response)) {
	            var chartFilterConfigObj= response['jsonChartFilterObj'];
                var valueColumns = [];
                var chartType = "column";
                var createcount = 0;
                autoSuggestedChartCount = 0;
                $("#modalFileCharts").remove();
                $("#visionVisualizationDataChartcount").show();
                $("#visionVisualizationDataChartViewFilterId").show();
                $("#visionVisualizationDataModalChartViewId").addClass("modalChartsBasedonFileImport");
                var divStr = "<div id='modalFileCharts' class='modalFileChartsClass row'></div>";
                if (numberList != null && !jQuery.isEmptyObject(numberList)) {
                    $.each(numberList, function (i, val) {
                        if (val != null && val != '' && val != undefined) {
                            var columnName = val;
                            var tableName = val.split(".")[0];
                            var columnObj = {};
                            columnObj['tableName'] = tableName;
                            columnObj['columnName'] = "SUM(" + columnName + ")";
                            columnObj['aggColumnName'] = "SUM";
                            valueColumns.push(columnObj);
                        }
                    });
                }
                $("#visionChartsAutoSuggestionUserId").append(divStr);
                $("#modalFileCharts").append("<input type='hidden' id='autoSuggestedTableName' value=''/>");
                $("#autoSuggestedTableName").val(tableName);
                if (stringList != null && !jQuery.isEmptyObject(stringList)) {
                    var c = 0;
                    $.each(stringList, function (i, val) {
                        var tablesObj = [];
                        var axisColumns = [];
                        if (val != null && val != '' && val != undefined) {
                            var columnName = val;
                            var tableName = val.split(".")[0];
                            var columnObj = {};
                            columnObj['tableName'] = tableName;
                            columnObj['columnName'] = columnName;
                            axisColumns.push(columnObj);
                            if (!(tablesObj.indexOf(tableName) > -1)) {
                                tablesObj.push(tableName);
                            }
                        }
                        var chartTypes = ['pie', 'donut', 'bar', 'pie', 'donut', 'lines', 'column'];
                        for (var i = 0; i < numberList.length; i++) {
                            //				var chartTypeNum = Math.floor(Math.random() * (5 - 1 + 1)) + 1;
                            //				chartTypeNum =(chartTypeNum == 5)? 3 :chartTypeNum;
                            chartType = chartTypes[c];
                            if (c >= chartTypes.length - 1) {
                                c = -1;
                            }
                            c++;
                            var valueColumn = [];
                            var numVal = numberList[i];
                            if (numVal != null && numVal != '' && numVal != undefined) {
                                var columnName = numVal;
                                var tableName = numVal.split(".")[0];
                                var columnObj = {};
                                columnObj['tableName'] = tableName;
                                columnObj['columnName'] = "SUM(" + columnName + ")";
                                columnObj['aggColumnName'] = "SUM";
                                valueColumn.push(columnObj);
                            }
                            var dataObj = {};
                            dataObj['axisColumns'] = JSON.stringify(axisColumns);
                            dataObj['valuesColumns'] = JSON.stringify(valueColumn);
                            dataObj['tablesObj'] = JSON.stringify(tablesObj);
                            dataObj['chartType'] = chartType;
                            dataObj['axisColumnName'] = val.split(".")[1];

                            var number = (Math.random() + ' ').substring(2, 10) + (Math.random() + ' ').substring(2, 10);
                            $("#modalFileCharts").append("<div id='visionVisualizeModalChart" + number + "' class='col-md-6 col-sm-6 col-lg-4 visionVisualizeModalChartClass'><div id='visionVisualizeModalInnerChart" + number + "' class='visionVisualizeModalChartInnerClass'></div><div id='visionVisualizeModalInnerChart" + number + "config' class='visionVisualizeModalChartConfigClass' style='display:none'></div></div>");
                            var chartId = "visionVisualizeModalInnerChart" + number;
                            dataObj['chartId'] = chartId;
                            var configObj = chartFilterConfigObj[chartType];
                            $("#" + chartId + "config").html(configObj);
                            var chartOptAllObj = {};
                            var chartConfigToggleStatus = {};
                            var chartConfigPositionKeyObj = {};
                            var errorMessageStr = "";
                            var errorCount = 0;
                            $("#" + chartId + "config ul li").each(function (i, ele) {
                                var optColName = $(this).attr("data-column-name");
                                var optKeyType = $(this).attr("data-key-type");
                                if (optKeyType != null && optKeyType != '' && optKeyType != undefined) {
                                    chartConfigPositionKeyObj[optColName] = optKeyType;
                                }
                                var optName = $("#" + optColName).attr("data-opt-name");
                                var optMan = $("#" + optColName).attr("data-man");
                                var inputType = $("#" + optColName).attr("type");
                                var optValue = $("#" + optColName).val();
                                if (inputType == 'checkbox') {
                                    if ($("#" + optColName).is(':checked')) {
                                        optValue = true;
                                    } else {
                                        optValue = false;
                                    }
                                }
                                var isChartHoverActive = $("#toggleButtonForchartHover" + chartType.toUpperCase()).hasClass('active');
                                if (!isChartHoverActive && optColName.includes('HOVERLABELDATA')) {
                                    optValue = 'none';
                                }
                                if (inputType == 'number') { //nested
                                    if (optValue != null && optValue != '' && optValue >= 1) {
                                        optValue = parseInt(optValue);
                                    }
                                }
                                var toggleBtnClasses = $(this).find('.toggle-btn').attr('class');
                                if (toggleBtnClasses !== null && toggleBtnClasses !== '' && toggleBtnClasses !== undefined) {
                                    if (toggleBtnClasses.includes('active')) {
                                        chartConfigToggleStatus[optColName] = true;
                                    } else {
                                        chartConfigToggleStatus[optColName] = false;
                                    }
                                }
                                var isToggleActive = $(this).hasClass('active-filter');
                                if (optValue != null && optValue != '' && isToggleActive) {
                                    chartOptAllObj[optColName] = optValue;
                                } else if (optMan == 'M') {
                                    errorCount++;
                                    errorMessageStr += "<tr><td>  " + '<p class="visionGenericTabStatusDialog">' + " " + '<span style="color:blue;">' + " " + optName + "</span><b>:</b> Should not be null.</tr></td><br>";
                                } else if (optColName.includes('SHOWLEGEND') && !isToggleActive) {
                                    chartOptAllObj[optColName] = false;
                                }

                            });

                            var filteredchartOptAllObj = {};
                            $.each(chartConfigPositionKeyObj, function (key, value) {
                                var newKey = key.replace(/[0-9]/g, '');
                                filteredchartOptAllObj[newKey] = value;
                            });
                            dataObj["chartPropObj"] = JSON.stringify(chartOptAllObj);
                            dataObj["chartConfigPositionKeyStr"] = JSON.stringify(filteredchartOptAllObj);
                            dataObj["chartConfigToggleStatus"] = JSON.stringify(chartConfigToggleStatus);
                            $("#" + chartId).attr("dataObj", JSON.stringify(dataObj));
                            $("#" + chartId + "config ul").remove();
                            getModalChartSuggestions(chartId, dataObj, valueColumn, axisColumns, tablesObj, createcount,
                                    val.split(".")[1], chartType, chartOptAllObj, filteredchartOptAllObj, chartConfigToggleStatus);
                            autoSuggestedChartCount++;
                            createcount++;
                        }
                        if (numberList.length > 1) {
                            var dataObj = {};
                            dataObj['axisColumns'] = JSON.stringify(axisColumns);
                            dataObj['valuesColumns'] = JSON.stringify(valueColumns);
                            dataObj['tablesObj'] = JSON.stringify(tablesObj);
                            dataObj['chartType'] = chartType;
                            dataObj['axisColumnName'] = val.split(".")[1];
                            var number = (Math.random() + ' ').substring(2, 10) + (Math.random() + ' ').substring(2, 10);
                            $("#modalFileCharts").append("<div id='visionVisualizeModalChart" + number + "' class='col-md-6 col-sm-6 col-lg-4 visionVisualizeModalChartClass'><div id='visionVisualizeModalInnerChart" + number + "' class='visionVisualizeModalChartInnerClass'></div><div id='visionVisualizeModalInnerChart" + number + "config' class='visionVisualizeModalChartConfigClass' style='display:none'></div></div>");
                            var chartId = "visionVisualizeModalInnerChart" + number;
                            dataObj['chartId'] = chartId;
                            var configObj = chartFilterConfigObj[chartType];
                            $("#" + chartId + "config").html(configObj);
                            var chartOptAllObj = {};
                            var chartConfigToggleStatus = {};
                            var chartConfigPositionKeyObj = {};
                            var errorMessageStr = "";
                            var errorCount = 0;
                            $("#" + chartId + "config ul li").each(function (i, ele) {
                                var optColName = $(this).attr("data-column-name");
                                var optKeyType = $(this).attr("data-key-type");
                                if (optKeyType != null && optKeyType != '' && optKeyType != undefined) {
                                    chartConfigPositionKeyObj[optColName] = optKeyType;
                                }
                                var optName = $("#" + optColName).attr("data-opt-name");
                                var optMan = $("#" + optColName).attr("data-man");
                                var inputType = $("#" + optColName).attr("type");
                                var optValue = $("#" + optColName).val();
                                if (inputType == 'checkbox') {
                                    if ($("#" + optColName).is(':checked')) {
                                        optValue = true;
                                    } else {
                                        optValue = false;
                                    }
                                }
                                var isChartHoverActive = $("#toggleButtonForchartHover" + chartType.toUpperCase()).hasClass('active');
                                if (!isChartHoverActive && optColName.includes('HOVERLABELDATA')) {
                                    optValue = 'none';
                                }
                                if (inputType == 'number') { //nested
                                    if (optValue != null && optValue != '' && optValue >= 1) {
                                        optValue = parseInt(optValue);
                                    }
                                }
                                var toggleBtnClasses = $(this).find('.toggle-btn').attr('class');
                                if (toggleBtnClasses !== null && toggleBtnClasses !== '' && toggleBtnClasses !== undefined) {
                                    if (toggleBtnClasses.includes('active')) {
                                        chartConfigToggleStatus[optColName] = true;
                                    } else {
                                        chartConfigToggleStatus[optColName] = false;
                                    }
                                }
                                var isToggleActive = $(this).hasClass('active-filter');
                                if (optValue != null && optValue != '' && isToggleActive) {
                                    chartOptAllObj[optColName] = optValue;
                                } else if (optMan == 'M') {
                                    errorCount++;
                                    errorMessageStr += "<tr><td>  " + '<p class="visionGenericTabStatusDialog">' + " " + '<span style="color:blue;">' + " " + optName + "</span><b>:</b> Should not be null.</tr></td><br>";
                                } else if (optColName.includes('SHOWLEGEND') && !isToggleActive) {
                                    chartOptAllObj[optColName] = false;
                                }

                            });

                            var filteredchartOptAllObj = {};
                            $.each(chartConfigPositionKeyObj, function (key, value) {
                                var newKey = key.replace(/[0-9]/g, '');
                                filteredchartOptAllObj[newKey] = value;
                            });
                            $("#" + chartId + "config ul").remove();
                            dataObj["chartPropObj"] = JSON.stringify(chartOptAllObj);
                            dataObj["chartConfigPositionKeyStr"] = JSON.stringify(filteredchartOptAllObj);
                            dataObj["chartConfigToggleStatus"] = JSON.stringify(chartConfigToggleStatus);
                            $("#" + chartId).attr("dataObj", JSON.stringify(dataObj));
                            getModalChartSuggestions(chartId, dataObj, valueColumns, axisColumns, tablesObj, createcount,
                                    val.split(".")[1], chartType, chartOptAllObj, filteredchartOptAllObj, chartConfigToggleStatus);
                            autoSuggestedChartCount++;
                        }
                        createcount++;
                    });
                }
                  showNextConversationAiMessage(replyId);
                
            }
        }, error: function (e) {
            console.log("The Error Message is:::" + e.message);
            sessionTimeout(e);
        }
    });
} 

function getMergedTables(replyId)
{
	var userName = $("#rsUserName").val();
	$.ajax({
		type: "POST",
		url: "getUserMergeTableNamesData",
		cache: false,
		data: {
			userName: userName,
			replyId:replyId
		},
		success: function(response) {
			//TODO: Need to add Loader
			if (response != null && !jQuery.isEmptyObject(response)) {
				var tableDiv = response['tableDiv'];
				var tablesArr = response['tablesArr'];
				$("#visionChartsAutoSuggestionUserId").append(tableDiv);
				$("#userIntellisenseViewMergeTableNamesDivId").jqxListBox({
					source: tablesArr,
					theme: 'energyblue',
					checkboxes: true,
					filterable: true
				});
                showAnimatedBubbleSequnce();
                scrollAreaToBottom();
			}

		},
		error: function(e) {
			console.log(e);
			sessionTimeout(e);
			stopLoader();
		}
	});
}

function showConversationalMergeTableNames(replyId)
{
	var checkValues = $("#userIntellisenseViewMergeTableNamesDivId").jqxListBox('getCheckedItems');
		var values = [];
		$.each(checkValues, function(index) {
			values.push(this.value);
		});
		
		if(values !=null && !jQuery.isEmptyObject(values))
		{
			$("#userMergeTableNamesDivId").remove(); 
			$("#userIntellisenseViewMergeTableNamesErrorDivId").html("");
			convAIMergeTables = [];
			var tableName = $("#intelliSenseTableId").text();
	        $("#userIntellisenseViewMergeTableNamesErrorDivId").empty();
			var randomNumber = generateRandomNumber();
			var msgText = "<div id='visionConversationalAI" + randomNumber + "' class='convai-message nonLoadedBubble'>";
			$.each(values, function(i, val) {
				msgText += "<div class='convai-right-message'><span>" + val + "</span>"
					+ "</div>"
			}); 
			msgText += "</div>";
			msgText += "<div class='intelliSenseViewGoBackClass'" + "  onclick=\"goToIntellisensemethod('visionConversationalAI"+randomNumber+"','"+ 33 + "')\">"
 		             + "<i class='fa fa-undo' aria-hidden='true' title='go back'></i>"
 		             + "</div>";
 
			values = [tableName, ...values];
			convAIMergeTables = values;
			$("#visionChartsAutoSuggestionUserId").append(msgText);	
			attachRemovalAction();
			scrollAreaToBottom();
			showNextConversationAiMessage(replyId); 
		}else{
			$("#userIntellisenseViewMergeTableNamesErrorDivId").html("please select Tables");
		}
}

function getMergeTableJoinColumns(replyId)
{
	
	if (convAIMergeTables != null && !jQuery.isEmptyObject(convAIMergeTables)) {
		var values = convAIMergeTables;
		$("#userMergeTableNamesDivId").remove();  
		$.ajax({
			type: "POST",
			url: "getUserMergeTableNamesColumns",
			cache: false,
			data: {
				tableNames: JSON.stringify(values),
				replyId: replyId
			},
			success: function(response) {
				//TODO: Need to add Loader
				if (response != null && !jQuery.isEmptyObject(response)) {
					var tableDiv = response['tableDiv'];
					var tablesObj = response['tablesObj'];
					$("#visionChartsAutoSuggestionUserId").append(tableDiv);
					$("#userMergeTableColumnsDivId").flowchart({
						linkWidth: 2,
						defaultSelectedLinkColor: 'blue',
						grid: 10,
						distanceFromArrow: 0,
						multipleLinksOnInput: true,
						multipleLinksOnOutput: true,
						defaultSelectedLinkColor: 'blue'
						
					});
					var i=0;
					var operators = {};
					var left=0;
					$.each(tablesObj,function(key,val)
					{
						var tableName = key;
						var inputoutputObj = val;
						var inputs = inputoutputObj['inputs'];
						var outputs = inputoutputObj['outputs'];
						var operator = "operator" + i;
						var operatorObj =  {
								top: 20,
								left: left+50,
								properties: {
									title: tableName,
									inputs: inputs,
									outputs: outputs,
								}
							};
						operators[operator] = operatorObj;
						if(i==0 || i==((Object.keys(tablesObj).length)-1))
						{
							left =250;
						}
						else{
							left =550; 
						}
						i++;
						$("#userMergeTableColumnsDivId").flowchart('createOperator',operator,operatorObj);
					});
					/*var data = {
							operators:operators
						};*/
					
                    $(".flowchart-operator-title").show();
                    $(".flowchart-operator-connector-label").show();
                    $(".flowchart-operator").css("width","auto","!important");
                    $(".flowchart-operator").css("height","auto","!important");
                    $(".flowchart-operator-connector-arrow").css("top","13px","!important");
                    var j=0;
                    var childLeft;
					$("#userMergeTableColumnsDivId div").find("div.flowchart-operator").each(function() {
						var nextDivWidth = $(this).width();
						var nextDivHeight = $(this).height();
						var totalWidth;
						if(j==0)
						{
							totalWidth = nextDivWidth+130;
						}
						else if(j !=0){
							totalWidth = childLeft+nextDivWidth+80;
							$(this).css("left",childLeft,"!important");
						}
						j++;  
						var tableWidth = nextDivWidth+20;
						$(this).css("width",tableWidth+"px","!important");
						$(this).css("height",nextDivHeight+"px","!important");
						childLeft = totalWidth;
					});
					
					$("#userMergeTableColumnsDivId div").find("div.flowchart-operator").each(function() {
						$(this).draggable({
							  containment: "#userMergeTableColumnsDivId",
						});
						$("#userMergeTableColumnsDivId").droppable({  
							accept: '.flowchart-operator',
							drop: function(event, ui) {
								
								var uiDrag = ui.draggable[0];
								var droppedOn= $(this).find(".flowchart-operators-layer");
								var droppedHeight = $(uiDrag).height();
								$(uiDrag).appendTo(droppedOn);
								var childDiv = $("#userMergeTableColumnsDivId div").children('.flowchart-operator').last();
								$(childDiv[0]).css("top","20px","!important");
								$(childDiv[0]).css("height",droppedHeight+"px","!important");
							}
						});
					});
					showAnimatedBubbleSequnce();
					setTimeout(function() {
						linkJoinOperators();
					}, 2000);
					var divHeight= $("#userMergeTableColumnsDivId").height();
					$("#userMergeTableColumnsDivId").css("height",divHeight+"px","!important");
					scrollAreaToBottom(divHeight-100);
					 
				}

			},
			error: function(e) {
				console.log(e);
				sessionTimeout(e);
				stopLoader();
			}
		});
	}
}


function deleteFlowChartSelectedOperators()
{
	$("#userMergeTableColumnsDivId").flowchart('deleteSelected');
}

function mergeTables()
{
	$("#Loader").css("display", "block");
	$("body").css({ "pointer-events": "auto" });
	$.ajax({
		type: "POST",
		url: "getEditorMergeTableNames",
		cache: false,
		data: {
			
		},
		success: function(response) {
			if (response != null && !jQuery.isEmptyObject(response)) {
				stopLoader();
				var tableDiv = response['tableDiv'];
				$("#dialog").html(tableDiv);
				$("#dialog").dialog({
					title: (labelObject["Merge Tables"] != null ? labelObject["Merge Tables"] : "Merge Tables"), 
					modal: true,
					width: 700,
					height: 430,
					fluid: true,
					buttons: [{
						text: (labelObject['Ok'] != null ? labelObject['Ok'] : 'Ok'),
						click: function() {
							$("#Loader").css("display", "block");
	                        $("body").css({ "pointer-events": "auto" });
							var tablesArr =[];
							$("#userEditorMergeTablesAppendId ul li").each(function(){
								var tableName = $(this).attr("title");
								if(tableName !=null && tableName !='' && tableName !=undefined)
								{
									tablesArr.push(tableName);
								}
							});
							if (tablesArr != null && !jQuery.isEmptyObject(tablesArr)) {
								$(".userEditorMergeTablesErrorDivClass").html("");
								getMergeNewTableName(tablesArr);
								$(this).html("");
								$(this).dialog("close");
								$(this).dialog("destroy");
							} else {
								stopLoader();
                                $(".userEditorMergeTablesErrorDivClass").html("Please add tables for Merging");
							}
						}

					}],
					open: function() {
						$(this).closest(".ui-dialog").find(".ui-button").eq(1).addClass("dialogyes");
						$(".visionHeaderMain").css("z-index", "999");
						$(".visionFooterMain").css("z-index", "999");
						$("#dialog").addClass("mergeTablesPopUp");
						$('#mergeTableFilterId').keyup(function() {

							var searchText = $(this).val();
                            searchText = searchText.toUpperCase();
							$('#userEditorMergeTablesId > li').each(function() {

								var currentLiText = $(this).text(),
									showCurrentLi = currentLiText.indexOf(searchText) !== -1;

								$(this).toggle(showCurrentLi);

							});
						});

					},
					beforeClose: function(event, ui) {
						$(".visionHeaderMain").css("z-index", "99999");
						$(".visionFooterMain").css("z-index", "99999");
					}
				});

			}

		},
		error: function(e) {
			console.log(e);
			sessionTimeout(e);
			stopLoader();
		}
	});
}

function getMergeNewTableName(tablesArr)
{
	stopLoader();
	var tableDiv = "<div class='editorMergeNewTableDivClass'>"
	       +"<span class='editorMergeNewTableSpanClass'>Please Give new Table name :</span>"
	       +"<input type='text' id='editorMergeNewTableId' value=''/>"
	       +"<div id='editorMergeNewTableErrorClass'></div>"
	       +"</div>";
	$("#dialog1").html(tableDiv);
	$("#dialog1").dialog({
		title: (labelObject["New Table Name"] != null ? labelObject["New Table Name"] : "New Table Name"),
		modal: true,
		width: 350,
		height: 150,
		fluid: true,
		buttons: [{
			text: (labelObject['Ok'] != null ? labelObject['Ok'] : 'Ok'),
			click: function() {
				$("#Loader").css("display", "block");
	            $("body").css({ "pointer-events": "auto" });
				var tableName = $("#editorMergeNewTableId").val();
				if (tableName != null && tableName != '' && tableName != undefined) {
					$("#editorMergeNewTableErrorClass").html("");
					tableName = tableName.toUpperCase();
					checkExistMergeTableName(tableName,tablesArr);
					$(this).html("");
					$(this).dialog("close");
					$(this).dialog("destroy");
				} else {
					stopLoader();
                   $("#editorMergeNewTableErrorClass").html("please provide table name");
				}
                
			}

		}],
		open: function() {
			$(this).closest(".ui-dialog").find(".ui-button").eq(1).addClass("dialogyes");
			$(".visionHeaderMain").css("z-index", "999");
			$(".visionFooterMain").css("z-index", "999");
		},
		beforeClose: function(event, ui) {
			$(".visionHeaderMain").css("z-index", "99999");
			$(".visionFooterMain").css("z-index", "99999");
		}
	});
}

function checkExistMergeTableName(tableName,tablesArr)
{
	$.ajax({
		type: "POST",
		url: "checkExistMergeTableName",
		cache: false,
		data: {
			newTableName :tableName,
		},
		success: function(response) {
			if (response != null && !jQuery.isEmptyObject(response)) {
				stopLoader();
				var message = response['Message'];
				if(message !=null && message !='' && message !=undefined && message.indexOf("not existed")>-1)
				{
					getMergeTableColumns(tableName,tablesArr);
					
				} else {
					var tableDiv = "<div class='editorMergeNewTableDivClass'>"
						+ "<span class='editorMergeNewTableSpanClass'>Table is already existed with that name.Please Give new Table name :</span>"
						+ "<input type='text' id='editorMergeNewTableId' value='" + tableName + "'/>"
						+ "<div id='editorMergeNewTableErrorClass'></div>"
						+ "</div>";
					$("#dialog").html(tableDiv);
					$("#dialog").dialog({
						title: (labelObject["Merge Columns"] != null ? labelObject["Merge Columns"] : "Merge Columns"),
						modal: true,
						width: 350,
						height: 150,
						fluid: true,
						buttons: [{
							text: (labelObject['Ok'] != null ? labelObject['Ok'] : 'Ok'),
							click: function() {
								var tableName = $("#editorMergeNewTableId").val();
								if (tableName != null && tableName != '' && tableName != undefined) {
									$("#editorMergeNewTableErrorClass").html("");
									tableName = tableName.toUpperCase();
									checkExistMergeTableName(tableName, tablesArr);
									$(this).html("");
									$(this).dialog("close");
									$(this).dialog("destroy");
								} else {
									$("#editorMergeNewTableErrorClass").html("please provide table name");
								}

							}

						}],
						open: function() {
							$(this).closest(".ui-dialog").find(".ui-button").eq(1).addClass("dialogyes");
							$(".visionHeaderMain").css("z-index", "999");
							$(".visionFooterMain").css("z-index", "999");
						},
						beforeClose: function(event, ui) {
							$(".visionHeaderMain").css("z-index", "99999");
							$(".visionFooterMain").css("z-index", "99999");
						}
					});
				}
				

			}

		},
		error: function(e) {
			console.log(e);
			sessionTimeout(e);
			stopLoader();
		}
	});
}

function getMergeTableColumns(tableName,tablesArr)
{
	$("#Loader").css("display", "block");
	$("body").css({ "pointer-events": "auto" });
	$.ajax({
		type: "POST",
		url: "getEditorMergeTableColumns",
		cache: false,
		data: {
			newTableName:tableName,
			tablesArr :JSON.stringify(tablesArr)
		},
		success: function(response) {
			if (response != null && !jQuery.isEmptyObject(response)) {
				stopLoader();
				var tableDiv = response['tableDiv'];
				$("#dialog").html(tableDiv);
				$("#dialog").dialog({
					title: (labelObject["Merge Columns"] != null ? labelObject["Merge Columns"] : "Merge Columns"), 
					modal: true,
					width: 900,
					height: 430,
					fluid: true,
					buttons: [{
						text: (labelObject['Ok'] != null ? labelObject['Ok'] : 'Ok'),
						click: function() {
							var duplicateFlag = false;
							var duplicates = {};
							$("#editorMergeTableColumnsTableId tr td:nth-child(3)").each(function() {
								var tdText = $(this).find("input").val();
								alert(tdText);
								if (duplicates[tdText] != null && duplicates[tdText] != '' && duplicates[tdText] != undefined) {
									$(this).find("input").addClass("applyMergeTableColumnsColor");
									duplicateFlag = true;
								}else{
									$(this).find("input").removeClass("applyMergeTableColumnsColor");
								}
								duplicates[tdText] = tdText;
							});
							if(duplicateFlag)
							{
								$(".userEditorMergeTableDuplicateColsErrorClass").html("Please change Duplicate column Names or Delete Duplicate columns");
							} else {
								$(".userEditorMergeTableDuplicateColsErrorClass").html("");
								var sourceDestiCols = {};
								var destiColTypes = {};
								$("#editorMergeTableColumnsTableId tr").each(function() {
								var sourceCol = $(this).find("td:nth-child(2)").find("input").val();
								var destinationCol = $(this).find("td:nth-child(3)").find("input").val();
								var columnType = $(this).find("td:nth-child(4)").find("input").val();
								destiColTypes[destinationCol] = columnType;
								sourceDestiCols[sourceCol] = destinationCol;
							});
							getMergeJoinColumns(sourceDestiCols,destiColTypes,tablesArr,tableName);
								$(this).html("");
								$(this).dialog("close");
								$(this).dialog("destroy");
							}  
							
						}

					}],
					open: function() {
						$(this).closest(".ui-dialog").find(".ui-button").eq(1).addClass("dialogyes");
						$(".visionHeaderMain").css("z-index", "999");
						$(".visionFooterMain").css("z-index", "999");
                    },
					beforeClose: function(event, ui) {
						$(".visionHeaderMain").css("z-index", "99999");
						$(".visionFooterMain").css("z-index", "99999");
					}
				});

			}

		},
		error: function(e) {
			console.log(e);
			sessionTimeout(e);
			stopLoader();
		}
	});
}

function getMergeJoinColumns(sourceDestiCols,destiColTypes,tablesArr,tableName)
{
	$("#Loader").css("display", "block");
	$("body").css({ "pointer-events": "auto" });
	$.ajax({
		type: "POST",
		url: "createTableANdJoinTables",
		cache: false,
		data: {
			sourceDestiCols :JSON.stringify(sourceDestiCols),
			destiColTypes :JSON.stringify(destiColTypes),
			tablesObj :JSON.stringify(tablesArr),
			newTableName :tableName
		},
		success: function(response) {
			if (response != null && !jQuery.isEmptyObject(response)) {
				stopLoader();
				var tabsString = response['tabsString'];
					$("#dialog").html(tabsString);
					$("#dialog").dialog({
						title: (labelObject["Merge Join Columns"] != null ? labelObject["Merge Join Columns"] : "Merge Join Columns"),
						modal: true,
						width: 800,
						height: 430,
						fluid: true,
						buttons: [{
							text: (labelObject['Ok'] != null ? labelObject['Ok'] : 'Ok'),
							click: function() {
								if($("#viewMergeJoinQueryDivId").html().length >0)
								{
									$("#viewMergeJoinQueryErrorDivId").html("");
									var joinQuery = $("#viewMergeJoinQueryDivId").html();
									var joinQueryVal = $("#viewMergeJoinQueryDivId").val();
									mergeTablesData(sourceDestiCols, destiColTypes, tablesArr, tableName, joinQueryVal);
									$(this).html("");
									$(this).dialog("close");
									$(this).dialog("destroy");
								}else{
									$("#viewMergeJoinQueryErrorDivId").html("please give join mapping and save join mapping");
								}

							}

						}],
						open: function() {
							$(this).closest(".ui-dialog").find(".ui-button").eq(1).addClass("dialogyes");
							$(".visionHeaderMain").css("z-index", "999");
							$(".visionFooterMain").css("z-index", "999");
						},
						beforeClose: function(event, ui) {
							$(".visionHeaderMain").css("z-index", "99999");
							$(".visionFooterMain").css("z-index", "99999");
						}
					});
					var selectedJoinTables = response['selectedJoinTables'];
					$('#tabs-1').html(selectedJoinTables);
					$(".visionETLColMapImage").mousedown(function(event) {
						treeIconClickEvent = event;
					})
				}

		},
		error: function(e) {
			console.log(e);
			sessionTimeout(e);
			stopLoader();
		}
	});
}
function mergeTablesAddFilter(tableName)
{
	var divId = tableName+"_table";
	$("#userEditorMergeTablesId").find("li#"+divId+"").remove();
	var divId =  "<li id='"+divId+"' title='"+tableName+"' class='userEditorMergeTableClass'>"
	+"<span class='columnAddTableName'>"+tableName+"</span>"
	+ "<span class='columnAddImg'><img src='images/close_white.png' class='addCloseIcon' onclick=\"mergeTablesRollbackFilter('"+tableName+"')\"></span>"
	+"</li>";
	$("#userEditorMergeTablesAppendId ul").append(divId);
}
function mergeTablesRollbackFilter(tableName)
{
	var divId = tableName+"_table";
	$("#userEditorMergeTablesAppendId ul").find("li#"+divId+"").remove();
	var divId =  "<li id='"+divId+"' title='"+tableName+"' class='userEditorMergeTableClass'>"
	+"<span class='columnAddTableName'>"+tableName+"</span>"
	+ "<span class='columnAddImg'><img src='images/image2vector.svg' class='addcolumnIcon' onclick=\"mergeTablesAddFilter('"+tableName+"')\"></span>"
	+"</li>";
	$("#userEditorMergeTablesId").prepend(divId);
}
function deleteMergeColumnSelectedRow($this, rowId)
{
	$("#"+rowId).remove();
}

function mergeTablesData(sourceDestiCols, destiColTypes, tablesArr, tableName, joinQueryVal,replyId)
{
	$("#Loader").css("display", "block");
	$("body").css({ "pointer-events": "auto" });
	$.ajax({
		type: "POST",
		url: "insertMergeTablesData",
		cache: false,
		data: {
			sourceDestiCols :JSON.stringify(sourceDestiCols),
			destiColTypes :JSON.stringify(destiColTypes),
			tablesObj :JSON.stringify(tablesArr),
			newTableName :tableName,
			joinQueryVal:joinQueryVal
		},
		success: function(response) {
			stopLoader();
			var message;
			if (response != null && !jQuery.isEmptyObject(response)) {
				message = response['message'];
			} else {
				message = "0 Records are Imported.";
			}
			$("#dialog").html(message);
			$("#dialog").dialog({
				title: (labelObject["Merge Tables Data"] != null ? labelObject["Merge Tables Data"] : "Merge Tables Data"),
				modal: true,
				width: 350,
				height: 150,
				fluid: true,
				buttons: [{
					text: (labelObject['Ok'] != null ? labelObject['Ok'] : 'Ok'),
					click: function() {
						$(this).html("");
						$(this).dialog("close");
						$(this).dialog("destroy");
						if (replyId != null && replyId != '' && replyId != undefined) {
							$("#intelliSenseTableId").remove();
							var mergeTableName = $("#userMergeNewTableNameId").val();
							var msgText = "<div class='text-right'><span id='intelliSenseTableId' class=\"existingList convai-right-message\" class='intelliSenseTableSpanClass'>" + mergeTableName + "</span><span><sub class=\"isCreated\"> is Created</sub></span></div>";
							$("#visionChartsAutoSuggestionUserId").append(msgText);
							showAnimatedBubbleSequnce();
							scrollAreaToBottom();
							showNextConversationAiMessage(replyId);   
						}


					}

				}],
				open: function() {
					$(this).closest(".ui-dialog").find(".ui-button").eq(1).addClass("dialogyes");    
					$(".visionHeaderMain").css("z-index", "999");
					$(".visionFooterMain").css("z-index", "999");
				},
				beforeClose: function(event, ui) {
					$(".visionHeaderMain").css("z-index", "99999");
					$(".visionFooterMain").css("z-index", "99999");
				}
			});
					
				

		},
		error: function(e) {
			console.log(e);
			sessionTimeout(e);
			stopLoader();
		}
	});
}

function voicetoText(textAreaId) {


	$(".voiceBeatClass").show();
	$(".mircoClass").hide();

	var noteContent = '';
	var instructions = $("#speechStatus");
	var SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;
	var recognition = new SpeechRecognition();

	recognition.continuous = true;
	/* recognition.interimResults = true;*/

	recognition.lang = $("#languageSelect").val();
	recognition.start();

	recognition.onresult = function(event) {


		var current = event.resultIndex;

		var transcript = event.results[current][0].transcript;

		noteContent += transcript;
		$("#" + textAreaId).val(noteContent);
	}

	document.querySelector(".voiceBeatClass").onclick = () => {
		$(".voiceBeatClass").hide();
		$(".mircoClass").show();
		recognition.stop();
	};
	recognition.onstart = function() {
		instructions.text('Voice recognition activated. Try speaking into the microphone.');
	}

	recognition.onspeechend = function() {
		instructions.text('You were quiet for a while so voice recognition turned itself off.');
	}

	recognition.onerror = function(event) {
		if (event.error == 'no-speech') {
			instructions.text('No speech was detected. Try again.');
		}
	}


}

function textSearch()
{
	var randomNumber = generateRandomNumber();
	$("#Loader").css("display", "block");
	var message = $("#myTextarea").val();
    var language = $('#languageSelect').val();
    var userName = $("#rsUserName").val();
    var leftMessage = "<div id='leftMessageDivId"+ randomNumber + "' class='leftMessageDiv'>" + message+"</div>"
    $("#searchResultText").append(leftMessage);

	$.ajax({
		dataType: 'JSON',
		type: 'POST',
		url: "getUserSearchData",
		traditional: true,
		cache: false,
		data: {
			message: message,  
			lang: language,
			userName: userName
		},
		success: function (response) {
			ajaxStop();
			$("#Loader").css("display", "none");
			if (response != null && !jQuery.isEmptyObject(response)) {
				$("#myTextarea").val("");
				var searchRes=response['result'].says[0];
				var url=response['result'].urls;
				$("#searchResultText").append("<div id='messageConversation"+ randomNumber + "'></div>")
				var list="";
				if (url!=undefined){
				var urlen= url.length
				 for (var i=0;i<urlen;i++){
                    list+="<a href="+url[i]+" style=\"color:blue;\">"+url[i]+"</a><br>"
               }
               }
               var rightMessage = "<div class='rightMessageDiv'><p>" + searchRes+"</p>"+list+"</div>"
				$("#messageConversation"+randomNumber).append(rightMessage);
			   
			 }
			 			 
		},
	});
	 	
}

function linkJoinOperators()
{
	var flowChartData = $("#userMergeTableColumnsDivId").flowchart('getData');
	var operators = flowChartData['operators'];
	if(operators !=null && !jQuery.isEmptyObject(operators))
	{
		var keysLength = Object.keys(operators).length;
		linkMultipleJoinOperators(operators,operators['operator0'],operators['operator1'],keysLength,1,0);
	}
}

function linkMultipleJoinOperators(operators,fromOp,toOp,keysLength,loopCount,i)
{
	if(loopCount<keysLength)
	{
		mapJoinOperators(fromOp,toOp,'operator'+i,'operator'+(i+1));
		loopCount++;
		i++;
		linkMultipleJoinOperators(operators,operators['operator'+i],operators['operator'+(i+1)],keysLength,loopCount,i)
		
	}
}

function mapJoinOperators(fromOp,toOp,fromOperatorId,toOperatorId)
{
	var outputData = fromOp['properties']['outputs'];
	var inputData = toOp['properties']['inputs'];
	if(outputData !=null && !jQuery.isEmptyObject(outputData) && inputData !=null && !jQuery.isEmptyObject(inputData))
	{
		$("#visionConvAIDefaultMapLinkColumnsId").html("");
		$.each(outputData,function(outputKey,outputVal){
			var outValue = outputVal['label'];
			$.each(inputData,function(inputKey,inputVal)
			{
				var inputValue = inputVal['label'];
				if(outValue !=null && outValue !='' && outValue !=undefined
				&& inputValue !=null && inputValue !='' && inputValue !=undefined && outValue == inputValue)
				{
					var linkId = $("#linkDynamicId").val();
					var linkObj = {};
					linkObj['fromConnector'] = outputKey;
					linkObj['fromOperator'] = fromOperatorId;
					//linkObj['fromSubConnector'] = 0;
					linkObj['toConnector'] = inputKey;
					linkObj['toOperator'] = toOperatorId;
					linkObj['color'] = 'red';
					//linkObj['toSubConnector'] = 0;
		            $("#userMergeTableColumnsDivId").flowchart('createLink',parseInt(linkId) ,linkObj);
		            linkId++;
		            $("#linkDynamicId").val(linkId);	
				}
			});
		});
	}else{
		$("#visionConvAIDefaultMapLinkColumnsId").html("Please adjust the Table Operators");
	}
}

function getMergeJoinCondColumns(replyId)
{
	var linksObj ={};
	var flowChartData = $("#userMergeTableColumnsDivId").flowchart('getData');
	var operators = flowChartData['operators'];
	var links = flowChartData['links'];
	var linksTables = {};
	var tablesObj = [];
	if(!(links !=null && !jQuery.isEmptyObject(links)))
	{
		$("#convAIMergeTableJoinColumnsLinkId").remove();
		$(".userMergeTablesJoinErrorClass").prepend("<div id='convAIMergeTableJoinColumnsLinkId' class='convAIMergeTableJoinColumnsLinkClass'>Please link join columns</div>");
	}else{
		$("#convAIMergeTableJoinColumnsLinkId").remove();
	$.each(links,function(key,val){
		var linkData = val;
		var fromConnector = linkData['fromConnector'];
		var toConnector = linkData['toConnector'];
		var fromOperator = linkData['fromOperator'];
		var toOperator = linkData['toOperator'];
		var fromToOperator = fromOperator + toOperator;
		
		var fromOperatorData = operators[fromOperator];
		var fromPropertiesData = fromOperatorData['properties'];
		var fromTableName = fromPropertiesData['title'];
		var fromOutputs = fromPropertiesData['outputs'];
		var fromColName = fromOutputs[fromConnector]['label'];
		
		
		var toOperatorData = operators[toOperator];
		var toPropertiesData = toOperatorData['properties'];
		var toTableName = toPropertiesData['title'];
		var toOutputs = toPropertiesData['inputs'];  
		var toColName = toOutputs[toConnector]['label'];
		
		if(linksObj !=null && !jQuery.isEmptyObject(linksObj) && linksObj[fromToOperator] !=null 
		&& linksObj[fromToOperator] !='' && linksObj[fromToOperator] !=undefined)
		{
		   	var joinCondition =  " AND "+fromTableName+"."+fromColName +" = "+toTableName+"."+toColName;
		   	var existJoinCondition = linksObj[fromToOperator];
		   	linksObj[fromToOperator] = existJoinCondition+joinCondition;
		}else {
			linksObj[fromToOperator] = " ON "+fromTableName+"."+fromColName +" = "+toTableName+"."+toColName;
			linksTables[fromToOperator] = fromTableName+"."+toTableName;
			if(!(tablesObj.indexOf(fromTableName) >-1))
			{
				tablesObj.push(fromTableName);
			}
			if(!(tablesObj.indexOf(toTableName) >-1))
			{
				tablesObj.push(toTableName);
			}
		}
	});
	
	getMergeTableJoinType(linksObj,tablesObj,linksTables,replyId);
	}
}
function getMergeTableJoinType(linksObj,tablesObj,linksTables,replyId)
{
	
	var table = "<table id='userMergeJoinTypesTableId' border='1'>"
	$.each(tablesObj, function(i, val) {
		table += "<tr><td><input type='text' value='" + val + "'/></td></tr>";
		var selectBox = "<select id='mergeTablesSelectBoxId" + i + "'>"
			+ "<option value='SELECT'>Select</option>"
			+ "<option value='INNER JOIN'>INNER JOIN</option>"
			+ "<option value='LEFT OUTER JOIN'>LEFT OUTER JOIN</option>"
			+ "<option value='RIGHT OUTER JOIN'>RIGHT OUTER JOIN</option>"
			+ "<option value='FULL OUTER JOIN'>FULL OUTER JOIN</option>";
		if (i < Object.keys(tablesObj).length - 1) {
			table += "<tr><td>" + selectBox + "</td></tr>";
		}
	});
	table += "</table>";
	table += "<div class='convAIUserJoinTypes'><button onclick='getConversationalAIJoinQuery("+JSON.stringify(linksObj)+","+replyId+")'>Next</button></div>";
	$("#userMergeTablesJoinTypesId").remove();
	var mainDiv = "<div id='userMergeTablesJoinTypesId' class='visionConversationalAIClass convai-left-message nonLoadedBubble'>Please Select Join Types<br>"+
	             table+"</div>";
	 $("#visionChartsAutoSuggestionUserId").append(mainDiv);
	 showAnimatedBubbleSequnce();
	 scrollAreaToBottom();
}

function getConversationalAIJoinQuery(linksObj, replyId) {

	var selectFlag = false;
	var selectCount = 0;
	$("#userMergeJoinTypesTableId tr").each(function() {
		var tdArray = this.cells;
		if (tdArray != null && tdArray.length != 0) {
			if (selectCount != 0 && selectCount % 2 == 1) {
				var selectedVal = $(tdArray[0]).find("option:selected").val();
				if (!(selectedVal != null && selectedVal != '' && selectedVal != undefined && selectedVal != 'SELECT')) {
					selectFlag = true;
				}
			}
			selectCount++;
		}
	});


	if (selectFlag) {
		$("#convAIUserJoinTypesErrorId").remove();
		$(".convAIUserJoinTypes").append("<div id='convAIUserJoinTypesErrorId' class='convAIUserJoinTypesErrorClass'>please select join type</div>");
	} else {
		$("#convAIUserJoinTypesErrorId").remove();
		goToIntellisenseRemoveNextDiv('userMergeTablesJoinTypesQueryId');
		var i = 0;
		var j = 0;
		var joinQuery = " FROM ";
		$("#userMergeJoinTypesTableId tr").each(function() {
			var tdArray = this.cells;
			if (tdArray != null && tdArray.length != 0) {
				var selectedVal = $(tdArray[0]).find("option:selected").val();
				if (selectedVal != null && selectedVal != '' && selectedVal != undefined) {
					var joinType = $(tdArray[0]).find("option:selected").val();
					joinQuery += joinType + " ";
				} else {
					var tableName = $(tdArray[0]).find("input").val();
					joinQuery += tableName + " " + tableName + " ";
				}
				if (i != 0 && i % 2 == 0) {
					joinQuery += linksObj[Object.keys(linksObj)[j]] + " ";
					j++;
				}
				i++;
			}
		});

		$("#userMergeTablesJoinTypesQueryId").remove();
		var mainDiv = "<div id='userMergeTablesJoinTypesQueryId' class='visionConversationalAIClass convai-left-message nonLoadedBubble'>"
			+ joinQuery + "</div>";
		$("#visionChartsAutoSuggestionUserId").append(mainDiv);
		showAnimatedBubbleSequnce();
		scrollAreaToBottom();
		showNextConversationAiMessage(replyId);
	}
}

function getMergeConvAINewTableName(replyId)
{
	$("#userMergeNewTableNameDivId").remove();
	var tableNameDiv = "<div id='userMergeNewTableNameDivId' class='userMergeNewTableNameDivClass'><input type='text' id='userMergeNewTableNameId' value=''/>"
	                  + "<button id='userMergeNewTableNameButtonId' onclick='getMergeConvAINewTable("+replyId+")'>Enter</button> "
	                  +"<div class='userMergeTableNameInputClass'></div></div>";
	var mainDiv = "<div  class='visionConversationalAIClass convai-right-message nonLoadedBubble'>"
	             +tableNameDiv+"</div><div class='intelliSenseViewGoBackClassTemp'" + "  onclick=\"goToIntellisensemethod('userMergeTablesJoinTypesQueryId','"+35+"')\">"
 		             + "<i class='fa fa-undo' aria-hidden='true' title='go back'></i>"
 		             + "</div>";
	             $("#visionChartsAutoSuggestionUserId").append(mainDiv);
	$('.intelliSenseViewGoBackClassTemp').hide();
	 showAnimatedBubbleSequnce();
	 scrollAreaToBottom();
}

function getMergeConvAINewTable(replyId)
{
	$('.intelliSenseViewGoBackClassTemp').show();
	var tableName = $("#userMergeNewTableNameId").val();
	$('#userMergeNewTableNameId').prop('disabled', true);
	if(!(tableName !=null && tableName !='' && tableName !=undefined))
	{
		$(".userMergeTableNameInputClass").html("Please Enter Table Name")
	}else{
			$.ajax({
		type: "post",
		traditional: true,
		url: 'checkExistMergeTableName',
		cache: false,
		data: {
			newTableName: tableName.toUpperCase()
		},
		success: function(response) {
			stopLoader();
			if (response != null) {
				var Message = response['Message'];
				if (Message != null && Message != '' && Message != undefined && Message.indexOf("already existed") > -1) {
					var appendMsg = " Table Name is already Existed.please give new Table Name"
					$(".userMergeTableNameInputClass").html(appendMsg);

				} else {
					$("#userMergeNewTableNameButtonId").remove();
					showNextConversationAiMessage(replyId);
				}	
							
							
							}
		}, 
				error: function(e) {
			console.log("The Error Message is:::" + e.message);
			sessionTimeout(e);
		}
	});
	}
}

function getMergeConvAINewTableColumns()
{
	$("#Loader").css("display", "block");
	$("body").css({ "pointer-events": "auto" });
	var tableName = $("#userMergeNewTableNameId").val();
	$.ajax({
		type: "POST",
		url: "getConvAIMergeTableColumns",
		cache: false,
		data: {
			tablesArr :JSON.stringify(convAIMergeTables)
		},
		success: function(response) {
			if (response != null && !jQuery.isEmptyObject(response)) {
				stopLoader();
				var tableDiv = response['tableDiv'];
				var mainDiv = "<div  class='visionConversationalAIClass nonLoadedBubble'>"
					+ tableDiv 
					+ "</div>";
				$("#visionChartsAutoSuggestionUserId").append(mainDiv);
				var allUncheckBoxValues = [];
				var duplicateCheckBoxVals = {};
				var duplicateFlag =false;
				var exceptFirstCheckBoxVals = [];
				var checkDivsCount=0;
				$("#visionConvAIMergeTableColumnsParentId div").each(function() {
					var divTableName = $(this).find(".visionConvAIMergeTableColumnsNameClass").html();
					var duplicateCols = [];
					$(this).find(":checkBox").map(function(event) {
						var selected = $(this).attr("id");
						if (allUncheckBoxValues.indexOf(this.value) > -1) {
							duplicateCols.push(selected);
							$('label[for="' + selected + '"]').addClass('userConvAISelectMergeColumnsDuplicateClass');
							duplicateFlag = true;
						}
						allUncheckBoxValues.push(this.value);
						if(checkDivsCount>0)
						{
							exceptFirstCheckBoxVals.push(this.value);
						}
					});
					checkDivsCount++;
					if(divTableName !=null && divTableName !='' && divTableName !=undefined){
						duplicateCheckBoxVals[divTableName] =duplicateCols;
					}
                });
				$("#visionConvAIMergeTableColumnsParentId div:first").each(function() {
					var divTableName = $(this).find(".visionConvAIMergeTableColumnsNameClass").html();
					var duplicateCols = [];
					$(this).find(":checkBox").map(function(event) {
						var selected = $(this).attr("id");
						if (exceptFirstCheckBoxVals.indexOf(this.value) > -1) {
							duplicateCols.push(selected);
							$('label[for="' + selected + '"]').addClass('userConvAISelectMergeColumnsDuplicateClass');
						}
					});
					if(divTableName !=null && divTableName !='' && divTableName !=undefined){
						duplicateCheckBoxVals[divTableName] =duplicateCols;
					}
                });
				if(duplicateCheckBoxVals !=null && !jQuery.isEmptyObject(duplicateCheckBoxVals))
				{
					var msgText = "<div  class='visionConversationalAIClass nonLoadedBubble' id='visionConvAIDuplicatesTableRemoveId'>"
					           + "<span>Duplicates columns are available in above tables.Please select one table for considering duplicate columns or you want to give manual mapping</span>"
					           + "<div  id='visionConvAIDuplicateTableButtonsRemoveId' class='visionConversationalAIClass  convai-right-message nonLoadedBubble'>"
					$.each(duplicateCheckBoxVals, function(key, val) {
                        msgText += "<button id='"+key+"_btn' class='convAiDuplicateTableColumnsSelectClass' onclick=removeConvAiDuplicateTableColumns('"+key+"','"+JSON.stringify(duplicateCheckBoxVals)+"')>"+key+"</button>";
					});
					 msgText += "<button id='manual_btn' class='convAiDuplicateTableColumnsSelectClass' onclick=removeConvAiDuplicateTableColumns('Manual','"+JSON.stringify(duplicateCheckBoxVals)+"')>Manual</button>"
					          + "</div>"
					          + "</div>";
					$("#visionChartsAutoSuggestionUserId").append(msgText);
				}
				
				showAnimatedBubbleSequnce();
				scrollAreaToBottom();
             }

		},
		error: function(e) {
			console.log(e);
			sessionTimeout(e);
			stopLoader();
		}
	});

}


function removeConvAiDuplicateTableColumns(tableName,duplicateCheckBoxVals)
{
	if(duplicateCheckBoxVals !=null && duplicateCheckBoxVals !='' && duplicateCheckBoxVals !=undefined)
	{
		duplicateCheckBoxVals = JSON.parse(duplicateCheckBoxVals);
	}
	if(tableName !=null && tableName !='' && tableName !=undefined)
	{
		$("#visionConvAIDuplicatesTableRemoveId span").remove();
		$("#visionConvAIDuplicateTableButtonsRemoveId").remove();
		var messgae =  "<div class='visionConversationalAIClass  convai-right-message nonLoadedBubble' id='visionConvAIDuplicateTableSelectId'>"
			             +"<span class='visionConvAIDuplicateTableSelectClass'>"+tableName+"</span>"
			             +"</div><div class='intelliSenseViewGoBackClass'" + "  onclick=\"goToIntellisensemethod('visionConvAIMergeTableColumnsParentId','"+37+"')\">"
 		             + "<i class='fa fa-undo' aria-hidden='true' title='go back'></i>"
 		             + "</div>";
			             $("#visionChartsAutoSuggestionUserId").append(messgae);
		if(tableName =='Manual')
		{
			var msgText = "<div  class='visionConversationalAIClass nonLoadedBubble'>"
				+ "<div class='visionConvAIDuplicateColumnsManualClass'>Please check the columns manually</div>"
				+ "<div class='userEditorMergeTableDuplicateColsErrorClass'></div>"
				+ " <div class='userMergeTableColumnsNextButtonClass'>"
				+ "<button onclick=getMergeConvAITableJoinColumns()>Proceed</button>"
				+ "</div>"
				+ "</div>";
			$("#visionChartsAutoSuggestionUserId").append(msgText);
		}
		else{
			$.each(duplicateCheckBoxVals,function(key,val){
				if(tableName !=key)
				{
					$.each(val,function(i,value){
						 $("#"+value).parent('label').parent('.convAIMergeSelectTableColumnsSpanClass').remove();
					})
				}
			});
			$("#visionConvAIMergeTableColumnsParentId div").each(function() {
				$(this).find(":checkBox").map(function(event) {
					var selected = $(this).attr("id");
					$('#'+selected).prop('checked', true);
				});
				if(!($(this).find("span").length>0))
				{
					var divwithoutcheckId = $(this).attr('id');
					$("#"+divwithoutcheckId).remove();
				}
            });
            getMergeConvAITableJoinColumns();
		}
		showAnimatedBubbleSequnce();
		scrollAreaToBottom();
	}
}


function getMergeConvAITableJoinColumns() {
	var duplicateFlag = false;
	var allCheckBoxValues = [];
	var errorMessage = "";
	$("#visionConvAIMergeTableColumnsParentId div").each(function() {
		$(this).find(":checkBox").map(function(event) {
			var selected = $(this).attr("id");
			$('label[for="'+selected+'"]').removeClass('userConvAISelectMergeColumnsDuplicateClass'); 
			$('label[for="'+selected+'"]').addClass('userConvAISelectMergeColumnsNormalClass'); 
		 });
		$(this).find(":checkBox:checked").map(function(event) {
			var selected = $(this).attr("id");
			if(allCheckBoxValues.indexOf(this.value)>-1){
				$('label[for="'+selected+'"]').removeClass('userConvAISelectMergeColumnsNormalClass');
				$('label[for="'+selected+'"]').addClass('userConvAISelectMergeColumnsDuplicateClass');
				duplicateFlag = true;
				errorMessage = "Duplicate columns are available in checked columns,please uncheck";
			}
			
			allCheckBoxValues.push(this.value); 
		 });
		
	});
	if(!(allCheckBoxValues !=null && !jQuery.isEmptyObject(allCheckBoxValues)))
	{
		var allUncheckBoxValues = [];
		$("#visionConvAIMergeTableColumnsParentId div").each(function() {
		 $(this).find(":checkBox").map(function(event) {
			var selected = $(this).attr("id");
			if(allUncheckBoxValues.indexOf(this.value)>-1){
				$('label[for="'+selected+'"]').removeClass('userConvAISelectMergeColumnsNormalClass');
				$('label[for="'+selected+'"]').addClass('userConvAISelectMergeColumnsDuplicateClass');
				duplicateFlag = true;
				errorMessage = "Duplicate columns are available in Tables,please select unique columns only";
			}
			allUncheckBoxValues.push(this.value); 
		 });
		
	});
	}
	if (duplicateFlag) {
		$(".userEditorMergeTableDuplicateColsErrorClass").html(errorMessage);
	} else {
		$(".userEditorMergeTableDuplicateColsErrorClass").html("");
		var sourceDestiCols = {};
		var destiColTypes = {};
		$("#visionConvAIMergeTableColumnsParentId div").each(function() {
			if (!(allCheckBoxValues != null && !jQuery.isEmptyObject(allCheckBoxValues))) {
				$(this).find(":checkBox").map(function(event) {
					var sourceCol = $(this).attr("data-tablecolName");
					var destinationCol = this.value;
					var columnType = $(this).attr("data-colType");
					destiColTypes[destinationCol] = columnType;
					sourceDestiCols[sourceCol] = destinationCol;
				});
			} else {
				$(this).find(":checkBox:checked").map(function(event) {
					var sourceCol = $(this).attr("data-tablecolName");
					var destinationCol = this.value;
					var columnType = $(this).attr("data-colType");
					destiColTypes[destinationCol] = columnType;
					sourceDestiCols[sourceCol] = destinationCol;
				});
			}
			 
		});
      var tableName= $("#userMergeNewTableNameId").val();
		$.ajax({
			type: "POST",
			url: "createTableANdJoinTables",
			cache: false,
			data: {
				sourceDestiCols: JSON.stringify(sourceDestiCols),
				destiColTypes: JSON.stringify(destiColTypes),
				tablesObj: JSON.stringify(convAIMergeTables),
				newTableName: tableName
			},
			success: function(response) {
				if (response != null && !jQuery.isEmptyObject(response)) {
					stopLoader();
					var joinQueryVal= $("#userMergeTablesJoinTypesQueryId").html();
					mergeTablesData(sourceDestiCols, destiColTypes, convAIMergeTables, tableName, joinQueryVal,"6");
				}

			},
			error: function(e) {
				console.log(e);
				sessionTimeout(e);
				stopLoader();
			}
		});
      }
}
function onSqlTextSearch(){
	
	var key = window.event.keyCode;
     if (key === 13) {
	   $('#textAreaId').blur();
       textSearchData();
    }
}
function onTextSearch(){
	
	var key = window.event.keyCode;
     if (key === 13) {
	   $('#myTextarea').blur();
       textSearch();
    }
}

function searchTablesAi(){
 
	$("#searchDataContent").toggle(); 
}

function textSearchData()
{
	var randomNumber = generateRandomNumber();
	$("#Loader").css("display", "block");
	var message = $("#textAreaId").val();
    var language = $('#languageSelect').val();
    var userName = $("#rsUserName").val();   
    var [x, sessionId] = getChatbotParams();

	$.ajax({
		dataType: 'JSON',
		type: 'POST',
		url: "getChatRplyResponse",
		traditional: true,
		cache: false,
		data: {
			message: message,  
			//lang: language,
			sessionId: sessionId
		},
		success: function (response) {
			ajaxStop();
			$("#Loader").css("display", "none");
			 $("#textAreaId").val("");
			if (response != null && !jQuery.isEmptyObject(response)) {
				var result = response['result'];
				var query= result[sessionId];
				var editorContainer = $("#Current_V10_editor_1"); // Gets the container through the Id
				var editor = ace.edit(editorContainer["0"]);
				editor.session.setValue(query);
		     }
			 			 
		},
	});
	 	
}



function exportCcTable(type, id, name) {
  
    var ExportXLS = $('#' + id).html();
    if (!ExportXLS.includes("jqx")) {
		if(type == "Excel"){
      var uri = 'data:application/vnd.ms-excel;base64,';
      var template = '<html xmlns:o="urn:schemas-microsoft-com:office:office" xmlns:x="urn:schemas-microsoft-com:office:excel" xmlns="http://www.w3.org/TR/REC-html40"><head><!--[if gte mso 9]><xml><x:ExcelWorkbook><x:ExcelWorksheets><x:ExcelWorksheet><x:Name>{worksheet}</x:Name><x:WorksheetOptions><x:DisplayGridlines/></x:WorksheetOptions></x:ExcelWorksheet></x:ExcelWorksheets></x:ExcelWorkbook></xml><![endif]--></head><body><table>{table}</table></body></html>';
      var base64 = function(s) {
        return window.btoa(unescape(encodeURIComponent(s)));
      };
      var format = function(s, c) {
        return s.replace(/{(\w+)}/g, function(m, p) {
          return c[p];
        });
      };
      var ctx = {
        worksheet: name || '',
        table: ExportXLS
      };
      var link = document.createElement("a");
      link.download = "export.xls";
      link.href = uri + base64(format(template, ctx));
      link.click();
		}
		else if (type == 'CSV') {
    $('#' + id).tableExport({
      type: 'csv',
      postCallback: function() {
        console.log('done loading my humongoid file');
      }
    });
  }
    }
   
  else if (type == "Excel") {
    $("#" + id).jqxGrid('exportdata', 'xls', 'jqxGrid');
  } else if (type == "CSV") {
    $("#" + id).jqxGrid('exportdata', 'csv', 'jqxGrid');
  }
}


function generateexcel(event ,tablename,flag){
	 var id="";
	 var divId = "";
	if (flag=='Y'){
	 id="divGrid-"+tablename;
	 divId="selectPopover";
	}
	else{
		id="transposeDataId";
		 
	}
	 var setId = event.target.id;
	
    $("#selectPopover").remove();
	$("#visualizeTablesGridData").append("<div class=\"selectPopoverCls\"id=\"selectPopover\"></div>");
	var selectionDiv="<div id='selctionData' class='selectClass'><li id='selectXls' onclick=\"exportCcTable('Excel', '"+id+"')\"><a href='#'>XLSX</a></li><li id='selectCsv' onclick=\"exportCcTable('CSV', '"+id+"')\"><a href='#'>CSV</a></li></div>"
	$("#selectPopover").html(selectionDiv);
	 $("#selectPopover").jqxPopover({
        position: 'right',
        width: 75,
        height: 78,
        showCloseButton: true,
        selector: $("#" + setId),
       
    });
    

$('#selectPopover').jqxPopover({showArrow: true, arrowOffsetValue: 10});
$("#selectPopover").jqxPopover('open');
if (flag=="Y"){
$("#selectPopover").addClass("selectPopoverChange");  
}
else{
$("#selectPopover").removeClass("selectPopoverChange");	
}

}

function getUserEditorDefaultExistedTables()
{
	var divHtml = $("#visionVisualizeShowTablesDataId").html();
	if (!(divHtml != null && divHtml.length > 0)) {
		var userName = $("#rsUserName").val();
		$.ajax({
			type: "POST",
			url: "getUserTableNames",
			cache: false,
			data: {
				userName: userName,
				editorFlag: "Y"
			},
			success: function(response) {
				//TODO: Need to add Loader
				if (response != null && !jQuery.isEmptyObject(response)) {
					var tableDiv = response['tableDiv'];
				    var htmlDiv = "<div id='visionEditorShowTablesDivId' class='visionEditorShowTablesDivClass'></div>"
				                  + "<div id='visionEditorShowTablesColumnsDivId' class='visionEditorShowTablesColumnsDivClass'></div>";
					$("#visionVisualizeShowTablesDataId").html(htmlDiv);
					$("#visionEditorShowTablesDivId").html(tableDiv);
					showAnimatedBubbleSequnce();
					$('#table-search').on('keyup', function() {
						var searchVal = $(this).val();
						var filterItems = $('[data-intelliSenseViewTablefilter-item]');

						if (searchVal != '') {
							filterItems.addClass('intelliSenseViewTableshidden');
							$('[data-filter-name*="' + searchVal.toUpperCase() + '"]').removeClass('intelliSenseViewTableshidden');
						} else {
							filterItems.removeClass('intelliSenseViewTableshidden');
						}
					});
				}

			},
			error: function(e) {
				console.log(e);
				sessionTimeout(e);
				stopLoader();
			}
		});
	}

}

function getEditorViewTableColumns(tableName)
{
			$.ajax({
			type: "POST",
			url: "getIntelliSenseTableColumns",
			cache: false,
			data: {
				tableName: tableName,
				editorFlag :"Y"
			},
			success: function(response) {
				//TODO: Need to add Loader
				if (response != null && !jQuery.isEmptyObject(response)) {
					var columnDiv = response['columnDiv'];
				    $("#visionEditorShowTablesColumnsDivId").html(columnDiv);
					showAnimatedBubbleSequnce();
					$('#column_search').on('keyup', function() {
						var searchVal = $(this).val();
						var filterItems = $('[data-intelliSenseViewColumnfilter-item]');
                        if (searchVal != '') {
							filterItems.addClass('intelliSenseViewTableshidden');
							$('[data-filter-name*="' + searchVal.toUpperCase() + '"]').removeClass('intelliSenseViewTableshidden');
						} else {
							filterItems.removeClass('intelliSenseViewTableshidden');
						}
					});
				}

			},
			error: function(e) {
				console.log(e);
				sessionTimeout(e);
				stopLoader();
			}
		});
}

function toggleConvAIExampleDialog()
{
	 $("#visionChartsAutoSuggestionUserId").toggle();
	 $("#visionChartsAutoSuggestionExampleId").toggle();

	
}

function minimizeConvAIExampleDialog($this)
{
	$($this).siblings(".help-button").hide();
	$("#visionChartsAutoSuggestionUserExampleParentId").hide();
	var dialog = $($this).closest(".ui-dialog");
	dialog.animate({ height: "40px", width: "150px", top: "85%", left: "83%" }, 300);
	$($this).hide();
	$($this).siblings(".minimize-button").hide();
	$($this).siblings(".plus-button").show().css({ right: "25px" });
}

function maximizeConvAIExampleDialog($this)
{
	$("#visionChartsAutoSuggestionUserExampleParentId").show();
	var dialog = $($this).closest(".ui-dialog");
	dialog.animate({ height: "550px", width: "1200px", top: "13%", left: "15%" }, 300);
	$($this).siblings(".plus-button").hide();
	$($this).hide();
	$($this).siblings(".minimize-button").show();
	$($this).siblings(".help-button").show();
	attachRemovalAction();
	showAnimatedBubbleSequnce();  
}

function getIntelliSenseViewConvAIDeleteColumns($this,id)
{
	$("#"+id).remove();
}

function showEditCardMenu($this, cardId, currEvt) {
	var editCardMenu = ""
	switch (currEvt) {
		case "cardEditEvt":
			editCardMenu = getCardEditMenu(cardId);
			break;
		case "aggregateEvt":
			editCardMenu = getAggregateMenu(cardId);
			break;
		default:
			console.log("Please provide card event type (edit or aggregate) :::::: ");
			return;
	}
	$("#editCardMenu").remove();
	$("#" + cardId).append("<div class=\"editCardMenuClass\" id=\"editCardMenu\"></div>");
	$("#editCardMenu").html(editCardMenu);
	var contextMenu = $("#editCardMenu").jqxMenu({ width: '100px', height: 140 + 'px', autoOpenPopup: false, mode: 'popup' });
	contextMenu.jqxMenu('open', parseInt(event.clientX) + 5, parseInt(event.clientY) + 5);
	$(".dxpPageContent").scroll(function() { scrollPositionSubMenu($this) });
	$(".editCardMenuClass").hover(function() {
		$("#" + cardId).find(".homepageCardEdit").show();
	}, function() {
		$("#" + cardId).find(".homepageCardEdit").hide();
		$(this).jqxMenu('close');
		$(".dxpPageContent").unbind('scroll', scrollPositionSubMenu);
	})
}

function getCardEditMenu(cardId) {
	return `<ul>
				<li onclick=getEditCard('${cardId}')>Edit Card</li>
				<li onclick=deleteHomepageCard('${cardId}')>Delete Card</li>
			</ul>`;
}

function getAggregateMenu(cardId) {
	return `<ul>
				<li onclick=setAggregateCardHp(this,'AVG','${cardId}')>Average</li>
				<li onclick=setAggregateCardHp(this,'COUNT','${cardId}')>Count</li>
				<li onclick=setAggregateCardHp(this,'UNIQUECOUNT','${cardId}')>Count(Distinct)</li>
				<li onclick=setAggregateCardHp(this,'SUM','${cardId}')>Sum</li>
				<li onclick=setAggregateCardHp(this,'MAX','${cardId}')>Max</li>
				<li onclick=setAggregateCardHp(this,'MIN','${cardId}')>Min</li>
			</ul>`;
}

function scrollPositionSubMenu($this) {

	if ($("#editCardMenu ul").length > 0) {
		var offsetParTop = $this.getBoundingClientRect().top;
		var posTop = (offsetParTop > 0) ? offsetParTop + 9 : offsetParTop - 30;
		$("#editCardMenu").css("top", posTop);
	}

}

function deleteHomepageCard(cardId) {
	var responseHtml = '<p class=\"modalPopUpMsgText\">Are you sure you want to delete the card ?</p>';
	var buttonArray = [
		{
			text: 'Yes',
			click: function() {
				deleteCard(cardId);
			},
			isCloseButton: true
		},
		{
			text: 'No',
			click: function() {
				return;
			},
			isCloseButton: true
		}
	];
	showPopUpWithButtonFunctionCall(responseHtml, buttonArray);
}

function deleteCard(cardId) {
	showLoader();
	$.ajax({
		url: 'deleteVisualizeChart',
		type: "POST",
		dataType: 'html',
		traditional: true,
		cache: false,
		async: true,
		data: {
			chartId: cardId,
			chartType: "Card"
		},
		success: function(response) {
			stopLoader()
			if (!isNullOrUndefined(response) && response !== null) {
				$("#" + cardId).remove();
				showMesgModelPopup("Card deleted successfully.");
			} else {
				showMesgModelPopup("Unable to delete card.");
			}
		},
		error: function(error) {
		}
	});
}

function showDashboardList() {
	var dashboardList = $("#DxpdashbordoptionListId").children();
	//var dashBoardArr = Array.from(dashboardList).map((e) => $(e).val());
	var dashBoardArr = [];
	var items = $("#OptionDropdownData").jqxDropDownList('getItems')
	$.each(items, function(index) {
		dashBoardArr.push(this.value);
	});
	var deleteDashboardDiv = "<div id=\"jqxDashboardList\"></div>";
	var buttonArray = [
		{
			text: 'Delete',
			click: function() {
				var checkedItems = $("#jqxDashboardList").jqxListBox('getCheckedItems')
				if (isNullOrUndefined(checkedItems) || jQuery.isEmptyObject(checkedItems)) {
					var responseHtml = '<p class=\"modalPopUpMsgText\">Please select Dashboard(s) to delete.</p>';
					var buttonArrayInn = [
						{
							text: 'Ok',
							click: function() {
								showDashboardList();
							},
							isCloseButton: true
						}
					]
					showPopUpWithButtonFunctionCall(responseHtml, buttonArrayInn,"Delete");
					return;
				}
				var checkedList = $.map(checkedItems, (e) => e.value);
				deleteDashboard(checkedList)
			},
			isCloseButton: true
		},
		{
			text: 'Cancel',
			click: function() {
				return;
			},
			isCloseButton: true
		}
	];
	showPopUpWithButtonFunctionCall(deleteDashboardDiv, buttonArray,"Delete")
	$("#jqxDashboardList").jqxListBox({ source: dashBoardArr, width: 450, checkboxes: true, height: 250,filterable: true
 });
}

function deleteDashboard(checkedList) {
	showLoader();
	$.ajax({
		url: 'deleteDashboard',
		type: "POST",
		dataType: 'html',
		traditional: true,
		cache: false,
		async: true,
		data: {
			dashboardList: JSON.stringify(checkedList),
		},
		success: function(response) {
			stopLoader();
			if (!isNullOrUndefined(response) && response !== "") {
				var responseHtml = '<p class=\"modalPopUpMsgText\">' + response + '</p>';
				var buttonArrayInn = [
					{
						text: 'Ok',
						click: function() {
							getVisualizationchart();
						},
						isCloseButton: true
					}
				]
				showPopUpWithButtonFunctionCall(responseHtml, buttonArrayInn);

			} else {
				showMesgModelPopup("Unable to delete Dashboard(s).");
			}
		}
	})
}

function getEditCard(cardId) {
	var isApplyEvt = $("#" + cardId).attr("data-isApplyEvt");
	if (!isNullOrUndefined(isApplyEvt) && isApplyEvt !== "" && isApplyEvt === 'Y') {
		getEditableCardSess(cardId);
	} else {
		getEditableCardDb(cardId);
	}
}

function getEditableCardSess(cardId) {
	var cardSessStr = sessionStorage.getItem(cardId);
	if (!isNullOrUndefined(cardSessStr) && cardSessStr !== '') {
		var cardSessObj = JSON.parse(cardSessStr);
		var cardDataTemp = {};

		var cardDateParamObj = cardSessObj['cardDateParamObj'];

		if (!isNullOrUndefined(cardDateParamObj) && !jQuery.isEmptyObject(cardDateParamObj)) {
			cardDataTemp['cardFromDate'] = cardDateParamObj['paramFromArr'];
			cardDataTemp['cardToDate'] = cardDateParamObj['paramToArr'];
			cardDataTemp['cardDateArr'] = cardDateParamObj['paramDateArr'];
		}

		var cardDataObj = cardSessObj['cardDataObj'];
		var tempTitle = cardDataObj['title'];
		var tempTrend = cardDataObj['trend'];
		var tempYAxis = cardDataObj['valueStr'];

		var cardDataMain = cardSessObj['cardDataMain'];
		cardDataMain['Lebel'] = tempTitle;
		cardDataMain['cardTrendType'] = tempTrend;
		cardDataMain['yAxix'] = tempYAxis;
		var cardType = cardDataMain['cardType'];
		var cardTrend = cardDataMain['cardTrend'];
		if (!isNullOrUndefined(cardTrend) && cardTrend !== '' && cardTrend === 'NoTrend') {
			editCardBasic(cardId, cardDataMain);
		} else {
			editCardTrends(cardId, cardDataTemp, cardDataMain);
		}

	}
}

function getEditableCardDb(cardId) {
	if (!isNullOrUndefined(cardId) && cardId !== "") {
		var cardIdArr = [cardId];
		showLoader();
		$.ajax({
			type: "POST",
			dataType: "JSON",
			url: "getChartData",
			data: {
				chartIds: JSON.stringify(cardIdArr)
			},
			success: function(response) {
				stopLoader();
				if (!isNullOrUndefined(response) && !jQuery.isEmptyObject(response)) {
					var cardDataTemp = {};
					var cardDataMain = response['dataarr'][0];
					var cardType = cardDataMain['cardType'];
					var cardTrend = cardDataMain['cardTrend'];

                    
					if (!isNullOrUndefined(cardTrend) && cardTrend !== '' && cardTrend === 'NoTrend') {
						editCardBasic(cardId, cardDataMain);
					} else {
						var cardDateStr = cardDataMain['paramCardDateObj'];
						if (!isNullOrUndefined(cardDateStr) && cardDateStr !== '') {
							var cardDateObj = JSON.parse(cardDateStr);
							if (cardDateObj != null && !jQuery.isEmptyObject(cardDateObj)) {
								var cardFromDate = cardDateObj['paramFromArr']; 
								var cardToDate = cardDateObj['paramToArr'];
								var cardDateArr = cardDateObj['paramDateArr'];
								cardDataTemp['cardFromDate'] = cardFromDate;
								cardDataTemp['cardToDate'] = cardToDate;
								cardDataTemp['cardDateArr'] = cardDateArr;
							}
							editCardTrends(cardId, cardDataTemp, cardDataMain,cardTrend);
						}
					}

				}
			},
			error: function(error) {
			}
		})
	}
}

function getColumnCard(valueStr) {
	if (!isNullOrUndefined(valueStr) && valueStr !== "") {
		var valueObj = JSON.parse(valueStr)
		var tableNdCol = valueObj[0]['columnName'];
		var t = tableNdCol.split(".");
		var table = t[0];
		table = table.substring(table.lastIndexOf('(') + 1);
		var column = tableNdCol.replace(table + '.', "");
		return column;
	}
	return '';
}

function editCardBasic(cardId, cardDataMain) {
	var valueStr = cardDataMain['yAxix'];
	var column = getColumnCard(valueStr);
	var cardTitle = cardDataMain['Lebel'];
	var toSaveHtml = saveCardHtml();
	var columnHtml = getCardTitle(cardTitle) + getValCol(column, cardId) + toSaveHtml;
	var modalDiv = `<div id='hpCardEditModal'></div>`;
	var buttonsArray = [
		{
			text: "Apply",
			click: function() {
				applyCardChangesHp(cardId, '', '', cardDataMain);
			},
			isCloseButton: true
		},
		{
			text: "Cancel",
			click: function() {

			},
			isCloseButton: true
		}
	]
	showPopUpWithButtonFunctionCall(modalDiv, buttonsArray, "Edit Card");
	$("#hpCardEditModal").addClass("homepageCardEditMain");
	$(".homepageCardEditMain").prepend(columnHtml);

}

function editCardTrends(cardId, editCard, cardDataMain,cardTrend) {
	if (!isNullOrUndefined(editCard) && !jQuery.isEmptyObject(editCard)) {
		var cardFromDate = editCard['cardFromDate'];
		var cardToDate = editCard['cardToDate'];

		var cardFromDateArr = [];
		var cardToDateArr = [];
		if (!isNullOrUndefined(cardFromDate) && cardFromDate !== "") {
			cardFromDateArr = JSON.parse(cardFromDate);
		}
		if (!isNullOrUndefined(cardToDate) && cardFromDate !== "") {
			cardToDateArr = JSON.parse(cardToDate);
		}
		var tableNdColDate = cardFromDateArr[0]['colName'];
		var d = tableNdColDate.split(".");
		var dateTable = d[0];
		var dateColumn = d[1]
		showLoader();
		$.ajax({
			type: "POST",
			traditional: true,
			dataType: 'json',
			url: 'getCardDateValues',
			cache: false,
			data: {
				tableName: dateTable,
				columnName: dateColumn,
				count: ""
			},
			traditional: true,
			cache: false,
			success: function(response) {
				stopLoader();
				if (!isNullOrUndefined(response) && !jQuery.isEmptyObject(response)) {
					//var cardDateHtml = response['cardDateDiv'];
					var cardDateHtml = `<div id='homepageCardEditMain' class='homepageCardEditMain'>${response['cardDateDiv']}</div>`
					var buttonsArray = [
						{
							text: "Apply",
							click: function() {
								applyCardChangesHp(cardId, cardFromDateArr, cardToDateArr, cardDataMain,cardTrend);
							},
							isCloseButton: true
						},
						{
							text: "Cancel",
							click: function() {

							},
							isCloseButton: true
						}
					]
					showPopUpWithButtonFunctionCall(cardDateHtml, buttonsArray, "Edit Card");
					var valueStr = cardDataMain['yAxix'];
					var column = getColumnCard(valueStr);
					var cardTitle = cardDataMain['Lebel'];
					var columnHtml = getCardTitle(cardTitle) + getValCol(column, cardId) + getDateCol(dateColumn);
					var toSaveHtml = saveCardHtml();
					$("#homepageCardEditMain").prepend(columnHtml);
					$("#homepageCardEditMain").append(toSaveHtml);

					var cardTrendType = cardDataMain['cardTrendType'];
					if (!isNullOrUndefined(cardTrendType) && cardTrendType !== "") {
						$("#hpCardEditTrendType").val(cardTrendType);
					}

					if (!isNullOrUndefined(cardFromDateArr) && !jQuery.isEmptyObject(cardFromDateArr)) {
						var fromDateVal = cardFromDateArr[0]['values'];
						$("#visionVisualizeCardDateFromSelectValueId").val(fromDateVal);
					}

					if (!isNullOrUndefined(cardToDateArr) && !jQuery.isEmptyObject(cardToDateArr)) {
						var toDateVal = cardToDateArr[0]['values'];
						$("#visionVisualizeCardDateToSelectValueId").val(toDateVal);
					}
				}
			}
		})
	}
}

function getCardTitle(cardTitle) {
	return `<div class="homepageEditCardCurrCol">
				<span style="color: #444040;">Title</span>
				<p class="homepageCardEditColumn" id="homepageEditCardTitle" contenteditable="true">${cardTitle}</p>
			</div>`;
}

function getValCol(valColName, cardId) {

	return `<div class="homepageEditCardCurrCol">
				<span style="color: #444040;">Value</span>
				<div class='hpCardEditColDiv'>
					<p class="homepageCardEditColumn" id="hpEditCardAggCol">${valColName}</p>
					<img src="images/Horizontal_Dots.svg" title="Aggregate Functions" onclick="showEditCardMenu(this, '${cardId}','aggregateEvt')" class="hpEditCardAggrImg" style="display: inline; ">
				</div>
			</div>`;
}

function getDateCol(dateColName) {
	return `<div id="" class="visionVisualizeCardDateValueClass homepageCardDateSelect">
				<div class="innerFilterDivStrFromClass homepageCardEditInnerFrom">
					<span style="color: #444040;">Date</span>
					<div id="" class="visionVisualizeCardDateFromValueClass">
						<p class="homepageCardEditColumn homepageCardEditValueClass">${dateColName}</p>
					</div>
				</div>
				<div class="innerFilterDivStrToClass homepageCardEditInnerFrom">
					<span>Trends</span>
					<div id="" class="visionVisualizeCardDateToValueClass">
							<select id="hpCardEditTrendType" class="visionVisualizeCardDateToSelectValueClass homepageCardEditValueClass homepageCardEditColumn" 
							onchange="getCardDateToSelectValue()">
								<option value="pie">Pie</option>
								<option value="donut">Donut</option>
								<option value="column">Column</option>
								<option value="lines">Line</option>
							</select>
					</div>
				</div>
		</div>`;
}

function saveCardHtml() {
	return `<div class="homepageEditedSaveCardDiv">
				<input type="checkbox" id="homepageEditedCardSave" name="saveCard" value="">
				<label class="homepageEditedCardSaveLabel" for="homepageEditedCardSave">Would you like to save the card ?</label>
			</div>`;
}



function applyCardChangesHp(cardId, cardFromDateArr, cardToDateArr, cardDataMain,cardTrend) {
	var cardDataObj = {};
	var cardDateParamObj = {};

	var fromDateVal = $("#visionVisualizeCardDateFromSelectValueId").val();
	var toDateVal = $("#visionVisualizeCardDateToSelectValueId").val();
	var newTitle = $("#homepageEditCardTitle").text();
	var newAggrCol = $("#hpEditCardAggCol").text();
	var newTrendType = $("#hpCardEditTrendType").val();

	if (!isNullOrUndefined(fromDateVal) && fromDateVal !== '' && !isNullOrUndefined(toDateVal) && toDateVal !== '') {
		cardFromDateArr[0]['values'] = fromDateVal;
		cardToDateArr[0]['values'] = toDateVal;
		cardDateParamObj['paramFromArr'] = JSON.stringify(cardFromDateArr);
		cardDateParamObj['paramToArr'] = JSON.stringify(cardToDateArr);
		var cardDateParamStr = JSON.stringify(cardDateParamObj);
		cardDataObj['cardDateParamObj'] = cardDateParamStr;
	}

	cardDataObj['title'] = newTitle;
	cardDataObj['trend'] = newTrendType;


	var aggColumnName = cardDataMain['aggColumnName'];
	var filterCondition = cardDataMain['filterCondition'];
	var cardType = cardDataMain['cardType'];
	var valueStr = cardDataMain['yAxix'];
	var table = cardDataMain['table'];

	if (!isNullOrUndefined(valueStr) && valueStr !== '') {
		var valueArr = JSON.parse(valueStr);
		if (!isNullOrUndefined(newAggrCol) && newAggrCol !== '') {
			var s = newAggrCol.split("(");
			s[1] = '(' + table + '.' + s[1];
			newAggrCol = s.join('');
			valueArr[0]['columnName'] = newAggrCol;
			valueArr[0]['aggColumnName'] = s[0];
			valueStr = JSON.stringify(valueArr);
			cardDataObj['valueStr'] = valueStr;
		}
	}

	var toSave = $("#homepageEditedCardSave").is(":checked");
	var cardDataStr = JSON.stringify(cardDataObj);
	if (toSave) {
		$("#" + cardId).attr("data-isApplyEvt", "N");
		saveCardHp(cardId, cardDataStr);
	} else {
		var cardSessObj = {
			"cardDateParamObj": cardDateParamObj,
			"cardDataObj": cardDataObj,
			"cardDataMain": cardDataMain
		}
		$("#" + cardId).attr("data-isApplyEvt", "Y");
		var cardSessStr = JSON.stringify(cardSessObj);
		sessionStorage.setItem(cardId, cardSessStr);
	}
	getHomePageCardData(newTitle, aggColumnName, cardId, table, valueStr, filterCondition, cardDateParamStr, cardType, newTrendType,cardTrend);
}

function saveCardHp(cardId, cardDataObj) {
	showLoader();
	$.ajax({
		type: "POST",
		dataType: "html",
		url: "updateCardData",
		async: false,
		data: {
			cardData: cardDataObj,
			cardId: cardId
		},
		success: function(response) {
			stopLoader();
			if (!isNullOrUndefined(response) && response !== "") {
				showMesgModelPopup(response);
			} else {
				showMesgModelPopup("Unable to update card.");
			}
		},
		error: function(error) {
		}
	})
}


function setAggregateCardHp($this, aggregateType, cardId) {
	var $a = $("#hpEditCardAggCol")
	var currAggrCol = $a.text();
	if (!isNullOrUndefined(currAggrCol) && currAggrCol !== '') {
		var currAggType = currAggrCol.substring(0, currAggrCol.indexOf('('));
		var newAggrCol = "";
		if(currAggType !=null && currAggType !='' && currAggType !=undefined){
			newAggrCol = currAggrCol.replace(currAggType, aggregateType);
		}else{
			newAggrCol = aggregateType+"("+currAggrCol+")";
		}
		
		$a.text(newAggrCol);
	}
}

function saveFileOnServer(file, fileType) {
	showLoader();
	var fileToBeUploaded = new FormData();
	fileToBeUploaded.append("fileToBeUploaded", file);
	$.ajax({
		url: 'saveFileOnServer',
		type: "POST",
		data: fileToBeUploaded,
		enctype: 'multipart/form-data',
		processData: false,
		contentType: false,
		success: function(response) {
			stopLoader();
			var result = "Failed to upload File.";
			if (!isNullOrUndefined(response) && !jQuery.isEmptyObject(response)) {
				var uploadStatus = response['uploadStatus'];
				if (uploadStatus !== "true") {
					$("#visionShowFileUploadMsg").html('<p style="color: red;">' + result + '</p>');
					return;
				}

				switch (fileType) {
					case "CSV":
						loadCsvDataAsGrid(response);
						break;
					case "TEXT":
						loadCsvDataAsGrid(response);
						break;
					case "JSON":
						break;
					case "XML":
						break;
				}
			} else {
				$("#visionShowFileUploadMsg").html('<p style="color: red;">' + result + '</p>');
			}
		}
	})
}

function loadCsvDataAsGrid(uploadedFileData) {
	showLoader();
	var data = {};
	if (!isNullOrUndefined(uploadedFileData) && !jQuery.isEmptyObject(uploadedFileData)) {
		data['filePath'] = uploadedFileData['updatedFileName']
	}
	$.ajax({
		type: "post",
		traditional: true,
		dataType: 'json',
		url: 'getFileObjectMetaData',
		data: data,
		cache: false,
		success: function(response) {
			stopLoader();
			if (!isNullOrUndefined(response) && !jQuery.isEmptyObject(response)) {
				$("#dialog").html("");
				$("#dialog").dialog("close");
				$("#dialog").dialog("destroy");
				var originalFileName = uploadedFileData['originalFileName'];
				var fileNameArr = originalFileName.split(".");
				var tableName = fileNameArr[0];
				tableName = tableName.replace(" ", "_").toUpperCase();
				var dataFieldsArray = response['dataFieldsArray'];
				var columnsArray = response['columnsArray'];
				columnsArray.map((e) => {
					e.datafield = e.datafield.toUpperCase();
					e.text = e.text.replaceAll("_", " ");
				})
				dataFieldsArray.map((e) => {
					e.name = e.name.toUpperCase();
				})
				var updatedFileName = uploadedFileData['updatedFileName'];
				var data = {
					tableName: tableName
				};
				createFileAsTable(updatedFileName, originalFileName, tableName);
				var source =
				{
					type: 'POST',
					datatype: "json",
					datafields: dataFieldsArray,
					data: data,
					url: 'gettableObjectData',
					cache: false,
					root: 'Rows',
					async: false,
					processdata: function(data) {
						showLoader();
						data['getOnlyDataArray'] = 'Y';

					},
					beforeSend: function() {
						//showLoader();

					}, loadError: function(xhr, status, error) {
						stopLoader();
					}, loadComplete: function(data) {
						stopLoader();
					},
					beforeprocessing: function(data) {
						source.totalrecords = data[data.length - 1];
					},
				};
				var dataAdapter = new $.jqx.dataAdapter(source);
				var headerTooltipRenderer = function(element) {
					$(element).parent().jqxTooltip({
						position: 'mouse', theme: 'energyblue',
						position: 'bottom-right',
						showArrow: false, content: $(element).text()
					});
				}
				$("#visualizeAreaGirdData1").jqxGrid(
					{
						width: "100%",
						height: "90%",
						theme: 'energyblue',
						autoshowloadelement: false,
						source: dataAdapter,
						pageable: true,
						pagesize: 50,
						showfilterrow: true,
						filterable: true,
						sortable: true,
						virtualmode: true,
						columnsreorder: true,
						selectionmode: 'checkbox',
						pagesizeoptions: ['50', '100', '500'],
						rendergridrows: function(params) {
							return params.data;
						},
						columnsresize: true,
						columns: columnsArray
					});
			}
			$("#visualizeAreaGirdData1").on('columnclick', function(event) {
				var args = event.args;
				var dataField = args.datafield;
				var dataField1 = args.text;
				var rowIndex = args.rowindex;
				var cellValue = args.value;
				var column = $('#visualizeAreaGirdData1').jqxGrid('getcolumn', event.args.datafield).text;
				var gridId123 = '#' + gridId;
					var menuItems = "";

					menuItems += "<li><input type='button' id='renameId' value='Rename Column'  onclick=renameColumnValue('" + dataField + "','" + tableName + "','" + gridId123 + "')></li>";
					menuItems += "<li><input type='button' value='Function' onclick=selectType('" + dataField + "','" + tableName + "','" + gridId123 + "')></li>";
					menuItems += "<li><input type='button' value='Suffix Value' onclick=suffixValue('" + dataField + "','" + tableName + "','" + gridId123 + "')></li>";
					menuItems += "<li><input type='button' value='Prefix Value' onclick=prefixValue('" + dataField + "','" + tableName + "','" + gridId123 + "')></li>";
					menuItems += "<li><input type='button' value='Find Value' onclick=createFind('" + dataField + "','" + tableName + "','" + gridId123 + "')></li>";
					menuItems += "<li><input type='button' value='Remove Duplicates' onclick=deleteDuplicate('" + dataField + "','" + tableName + "','" + gridId123 + "')></li>";
$("#jqxMenu").remove();
				$("#VisualizePageBody").append("<div id='jqxMenu'><ul></ul></div>");
				$("#jqxMenu ul").html(menuItems);
				var contextMenu = $("#jqxMenu").jqxMenu({ width: '120px', height: '150px', autoOpenPopup: false, mode: 'popup' });

				var scrollTop = $(window).scrollTop();
				var scrollLeft = $(window).scrollLeft();

				contextMenu.jqxMenu('open', parseInt(event.args.originalEvent.clientX) + 5 + scrollLeft, parseInt(event.args.originalEvent.clientY) + 5 + scrollTop);
				return false;
			});

			$("#visualizeAreaGirdData1").on('celldoubleclick', function(event) {
				var args = event.args;
				var val = $(this).text();
				var cellValue = args.value;
				var column = $('#visualizeAreaGirdData1').jqxGrid('getcolumn', event.args.datafield).text;
				$("#dialog").html(cellValue);
				$("#dialog").dialog({
					title: (labelObject['Message'] != null ? labelObject['Message'] : 'Message'),
					modal: true,
					width: 350,
					height: 200,
					fluid: true,
					open: function() {
						$(this).closest(".ui-dialog").find(".ui-button").eq(1).addClass("dialogyes");
						$(".visionHeaderMain").css("z-index", "999");
						$(".visionFooterMain").css("z-index", "999");
						$(".ui-dialog").addClass("bicolumnPopUp");

					},
					beforeClose: function(event, ui) {
						$(".visionHeaderMain").css("z-index", "99999");
						$(".visionFooterMain").css("z-index", "99999");
					}
				});
			});
			$("#VisualizeBIColumns").css("display", "block");
			$("#Fields").css("display", "block");
			switchSmartBiDesignTabs("li_contentView", "visionGridDataView");
			showExportSheetIntro();
		}
	})
}

function addCustomFilter(dataField,gridId,searchTerm,caseSensitiveCheckBox){
	if (caseSensitiveCheckBox === 'on') {
		
	var filtergroup = new $.jqx.filter();
	var filter = filtergroup.createfilter('stringfilter', searchTerm,  'contains');
	filter.caseSensitive = true;
	filtergroup.addfilter(0, filter);
	$(gridId).jqxGrid('addfilter', dataField, filtergroup);
	$(gridId).jqxGrid('applyfilters');
 $(gridId).on('loadcomplete', function () {
    // Execute the highlightSerchTerm function after the grid is fully loaded
    highlightSerchTerm(gridId, dataField, searchTerm);
  });
	
 

}
else{
	var filtergroup = new $.jqx.filter();
	var filter = filtergroup.createfilter('stringfilter', searchTerm,  'contains');
	filtergroup.addfilter(0, filter);
	$(gridId).jqxGrid('addfilter', dataField, filtergroup);
	$(gridId).jqxGrid('applyfilters');
  

  // Bind the dataBound event to the grid
  $(gridId).on('loadcomplete', function () {
    // Execute the highlightSerchTerm function after the grid is fully loaded
    highlightSerchTerm(gridId, dataField, searchTerm);
  });
	
}
}

function highlightSerchTerm(gridId, dataField, searchTerm) {
  var columnindex = $(gridId).jqxGrid('getcolumnindex', dataField);

  $(gridId).find(".jqx-grid-content").find(".jqx-grid-cell").each(function(i) {
		var cell = this;

		if ($(this).attr("columnindex") == columnindex) {
			var cellvalue = $(this).find("div").text();
			   if (cellvalue.toLowerCase().indexOf(searchTerm.toLowerCase()) > -1) {
				$(this).find("div").addClass("highlightSerchTerm");
				$(this).find("div").addClass("searchTermMatched");
				//$(this).parent().prepend($(this).parent().detach());
				//$(this).find("div").text(searchTerm);
			} else {
				$(this).find("div").removeClass("highlightSerchTerm");
				
			}
		}

	});
	searchTerm="";
}
function removeIiWidgetOverlay() {
  console.log("rremove fucmntion was called ");
  $(".ui-widget-overlay").remove();
}

function closeDialogBox(id) {
    $(id).remove();
    $(id).dialog();
    $(id).html("");
    $(id).dialog("close");
    $(id).dialog("destroy");

    var div = document.getElementById(id.substring(1));
    if (div === null) {
        $('body').append("<div id='" + id.substring(1) + "'></div>");
    }

}

function onTextSQLSearch() {

    var key = window.event.keyCode;
    if (key === 13) {
        $('#textAreaId').blur();
        textSearchData();
      }
}

function incKeySize() {
	var widthSize = parseInt($(".ui-keyboard-button").css("min-width"));
	var height = parseInt($(".ui-keyboard-button").css("height"));
	var fontSize = parseInt($(".ui-keyboard-button .ui-keyboard-text").css("font-size"));
	if (widthSize != "") {
		widthSize = widthSize + 1;
		height = height + 1;
		fontSize = fontSize + 1
		$(".ui-keyboard-button").css("height", height + "px");
		$(".ui-keyboard-button").css("min-width", widthSize + "px");
		$(".ui-keyboard-button .ui-keyboard-text").css("font-size", +fontSize + "px");
		$(".ui-keyboard-button").hover(function() {
			$(".ui-keyboard-button .ui-keyboard-text").css("font-size", +fontSize + "px");
		});
	}

}
// new functions
function decKeySize() {
	var widthSize = parseInt($(".ui-keyboard-button").css("min-width"));
	var height = parseInt($(".ui-keyboard-button").css("height"));
	if (widthSize >= 25) {
		widthSize = widthSize - 1;
		height = height - 1;
		$(".ui-keyboard-button").css("min-width", widthSize + "px");
		$(".ui-keyboard-button").css("height", height + "px");
		$(".ui-keyboard-button").hover(function() {
			$(".ui-keyboard-button .ui-keyboard-text").css("font-size", +fontSize + "px");
		});
	}

}



function isArrayNumeric(arr) {
  return arr.every(element => !isNaN(element));
}

function getEditDashBoardNames() {

	var userName = $("#rsUserName").val();
	$.ajax({
		type: "POST",
		url: "getEditDashBoardNames",
		cache: false,
		data: {
			userName: userName
		},
		success: function(response) {
			//TODO: Need to add Loader
			if (response != null && !jQuery.isEmptyObject(response)) {
				var tableDiv = response['tableDiv'];
				var divHtml = "<div class='HomePageEditDashBoardNamesId'>"+tableDiv+"</div>";
				closeAllDialogsBoxes();
				$("#dialog").html(divHtml);
				$("#dialog").dialog({
					title: (labelObject['Message'] != null ? labelObject['Message'] : 'Message'),
					modal: true,
					width: 350,
					height: 200,
					fluid: true,
					open: function() {
						$('#dashBoard-names-search').on('keyup', function() {
							var searchVal = $(this).val();
							var filterItems = $('[data-intelliSenseViewTablefilter-item]');

							if (searchVal != '') {
								filterItems.addClass('intelliSenseViewTableshidden');
								$('[data-filter-name*="' + searchVal.toUpperCase() + '"]').removeClass('intelliSenseViewTableshidden');
							} else {
								filterItems.removeClass('intelliSenseViewTableshidden');
							}
						});
						$(this).closest(".ui-dialog").find(".ui-button").eq(1).addClass("dialogyes");
						$(".visionHeaderMain").css("z-index", "999");
						$(".visionFooterMain").css("z-index", "999");
						$(".ui-dialog").addClass("editDashboardPopup");

					},
					beforeClose: function(event, ui) {
						$(".visionHeaderMain").css("z-index", "99999");
						$(".visionFooterMain").css("z-index", "99999");
					}
				});
				
			}

		},
		error: function(e) {
			console.log(e);
			sessionTimeout(e);
			stopLoader();
		}
	});

}

function saveDashBoardName(dashBoardVal,dashBoardName)
{
	var newDashBoardName = $("#" + dashBoardName).find("span").text();
	if (!(newDashBoardName != null && newDashBoardName != '' && newDashBoardName != undefined)) {
		showMesgModelPopup("please give Dashboard Name");
		return;
	}
	$.ajax({
		type: "POST",
		url: "getSaveDashBoardNames",
		cache: false,
		data: {
			newDashBoardName: newDashBoardName,
			dashBoardName: dashBoardVal
		},
		success: function(response) {
			//TODO: Need to add Loader
			if (response != null && !jQuery.isEmptyObject(response)) {
				var responseMsg = response['message']; 
				$("#dialog1").html(responseMsg);
				$("#dialog1").dialog({
					title: (labelObject['Message'] != null ? labelObject['Message'] : 'Message'),
					modal: true,
					width: 350,
					height: 200,
					fluid: true,
					buttons: [{
						text: (labelObject['Ok'] != null ? labelObject['Ok'] : 'Ok'),
						click: function() {
							$(this).html("");
							$(this).dialog("close");
							$(this).dialog("destroy");
						}

					}],
					open: function() {
						$(this).closest(".ui-dialog").find(".ui-button").eq(1).addClass("dialogyes");
						$(".visionHeaderMain").css("z-index", "999");
						$(".visionFooterMain").css("z-index", "999");
						$(".ui-dialog").addClass("editDashboardPopup");

					},
					beforeClose: function(event, ui) {
						$(".visionHeaderMain").css("z-index", "99999");
						$(".visionFooterMain").css("z-index", "99999");
					}
				});

			}

		},
		error: function(e) {
			console.log(e);
			sessionTimeout(e);
			stopLoader();
		}
	});
	
}


function getWeatherDetails(flag) {
	showLoader();
	/*getLocationDetails();*/
	var city = sessionStorage.getItem("city");
	$.ajax({
		type: "POST",
		url: "getWeatherDetailsFromCity",
		cache: false,
		data: {
			city: city,
			flag:flag
		},
		success: function(response) {
			stopLoader();
			//TODO: Need to add Loader
			if (response != null && !jQuery.isEmptyObject(response)) {
				var responseMsg = response['response'];
				if(flag=="HD"){
					getHoverAndImageData(response['temperature'],response['description'],response['dayOfWeek'],response['sunrise'],response['sunset']);
					return;
				}
				$("#dialog1").html(responseMsg);
				//getHoverAndImageData(response['temperature'],response['description'],response['dayOfWeek'],response['sunrise'],response['sunset']);
				$("#dialog1").dialog({
					title: (labelObject['Message'] != null ? labelObject['Message'] : 'Message'),
					modal: true,
					width: 600,
					height: 450,
					/*maxHeight:1000,*/
					fluid: true,
					buttons: [{
						text: (labelObject['Ok'] != null ? labelObject['Ok'] : 'Ok'),
						click: function() {
							$(this).html("");
							$(this).dialog("close");
							$(this).dialog("destroy");
						}

					}],
					open: function() {
						$(this).closest(".ui-dialog").find(".ui-button").eq(1).addClass("dialogyes");
						$(".ui-dialog .ui-dialog-content").css("overflow","hidden");
						$(".ui-dialog .ui-dialog-content").css("height","400px");
						$(".visionHeaderMain").css("z-index", "999");
						$(".visionFooterMain").css("z-index", "999");
						$(".ui-dialog").addClass("editDashboardPopup");

					},
					beforeClose: function(event, ui) {
						$(".visionHeaderMain").css("z-index", "99999");
						$(".visionFooterMain").css("z-index", "99999");
					}
				});

			}

		},
		error: function(e) {
			console.log(e);
			sessionTimeout(e);
			stopLoader();
		}
	});

}


function getLocationDetails() {    
    if (navigator.geolocation) {
        navigator.geolocation.getCurrentPosition(
            position => {
                const latitude = position.coords.latitude;
                const longitude = position.coords.longitude;
                console.log("Latitude:", latitude);
                console.log("Longitude:", longitude);
                const nominatimApiUrl = `https://nominatim.openstreetmap.org/reverse?format=json&lat=${latitude}&lon=${longitude}`;
                fetch(nominatimApiUrl)
                    .then(response => response.json())
                    .then(data => { 
                        var  city = data.address.city;
						if (!(city != null && city != '' && city != undefined)) {
							city = data.address.neighbourhood;
						}
						sessionStorage.setItem("city", city);  
						console.log("City:", city);
						
									setInterval(
									getWeatherDetails("HD"),
										3600000);
									
                    })
                    .catch(error => {
                        console.error("Error getting city:", error.message);
                    });
            },
            error => {
                console.error("Error getting location:", error.message);
            }
        );
    } else {
        console.error("Geolocation is not supported by this browser.");
    }
}

function getChartNotes(chartId)
{
	    $.ajax({
		type: "POST",
		url: "getChartNotes",
		cache: false,
		data: {
			chartId:chartId
		},
		success: function(response) {
			//TODO: Need to add Loader
			if (response != null && !jQuery.isEmptyObject(response)) {
				var responseMsg = response['notes'];
				responseMsg = (responseMsg !=null && responseMsg !='' && responseMsg != undefined && responseMsg !='undefined') ? responseMsg : "";
				var htmlDiv = "<div class='chartNotesTextAreaDivClass'><textarea  id='chartNotesTextAreaId' class='form-control'>"+responseMsg+"</textarea>"
				+"<div id='chartNotesTextAreaErrorDivId' class='class='dialog-error-message' style='color:red'></div>"
				+"</div>";
				closeAllDialogsBoxes();
				$("#dialog1").html(htmlDiv);
				$("#dialog1").dialog({
					title: (labelObject['Message'] != null ? labelObject['Message'] : 'Message'),
					modal: true,
					width: 350,
					height: "auto",
					maxHeight:1000,
					fluid: true,
					buttons: [{
						text: (labelObject['Save'] != null ? labelObject['Save'] : 'Save'),
						click: function() {
							var notes = $("#chartNotesTextAreaId").val();
							if(!(notes !=null && notes !='' && notes !=undefined))
							{
							    $("#chartNotesTextAreaErrorDivId").html("please fill the notes");
							    return;
							}
							$("#chartNotesTextAreaErrorDivId").html("");
							saveChartNotes(chartId,notes);
							$(this).html("");
							$(this).dialog("close");
							$(this).dialog("destroy");
						}

					},{
						text: (labelObject['Cancel'] != null ? labelObject['Cancel'] : 'Cancel'),
						click: function() {
							$(this).html("");
							$(this).dialog("close");
							$(this).dialog("destroy");
						}

					}],
					open: function() {
						$(this).closest(".ui-dialog").find(".ui-button").eq(1).addClass("dialogyes");
						$(".visionHeaderMain").css("z-index", "999");
						$(".visionFooterMain").css("z-index", "999");
						$(".ui-dialog").addClass("editDashboardPopup");

					},
					beforeClose: function(event, ui) {
						$(".visionHeaderMain").css("z-index", "99999");
						$(".visionFooterMain").css("z-index", "99999");
					}
				});

			}

		},
		error: function(e) {
			console.log(e);
			sessionTimeout(e);
			stopLoader();
		}
	});
}

function saveChartNotes(chartId, notes)
{
	$.ajax({
		type: "POST",
		url: "saveChartNotes",
		cache: false,
		data: {
			chartId: chartId,
			chartNotes:notes
		},
		success: function(response) {
			//TODO: Need to add Loader
			if (response != null && !jQuery.isEmptyObject(response)) {
				var responseMsg = response['message'];
				$("#dialog").html(responseMsg);
				$("#dialog").dialog({
					title: (labelObject['Message'] != null ? labelObject['Message'] : 'Message'),
					modal: true,
					width: 350,
					height: "auto",
					maxHeight: 1000,
					fluid: true,
					buttons: [{
						text: (labelObject['Ok'] != null ? labelObject['Ok'] : 'Ok'),
						click: function() {
							$(this).html("");
							$(this).dialog("close");
							$(this).dialog("destroy");
						}

					}],
					open: function() {
						$(this).closest(".ui-dialog").find(".ui-button").eq(1).addClass("dialogyes");
						$(".visionHeaderMain").css("z-index", "999");
						$(".visionFooterMain").css("z-index", "999");
						$(".ui-dialog").addClass("editDashboardPopup");

					},
					beforeClose: function(event, ui) {
						$(".visionHeaderMain").css("z-index", "99999");
						$(".visionFooterMain").css("z-index", "99999");
					}
				});

			}

		},
		error: function(e) {
			console.log(e);
			sessionTimeout(e);
			stopLoader();
		}
	});
}

function getBasicAreaChart(chartId, response, count, chartType) {
	$("#visionVisualizeChartId" + count).remove();
	var basicAreaChartId = "visionVisualizeChart" + count;
	var basicAreaChartHomeId = "visionVisualizeChartHome" + count;
	$("#" + basicAreaChartId).append("<div id='visionVisualizeChartId" + count + "' type='" + chartType + "' count='" + count + "' class='visionVisualChartBoxClass visionVisualChartBoxSelected'></div>")
	$("#" + chartId).css("width", "auto", "!important");
	$("#" + chartId).css("height", "330px", "!important");
	$("#" + basicAreaChartId).css("width", "auto", "!important");
	$("#" + basicAreaChartId).css("height", "330px", "!important");
	$("#" + basicAreaChartHomeId).css("width", "auto", "!important");
	$("#" + basicAreaChartHomeId).css("height", "330px", "!important");
	$("#" + basicAreaChartHomeId).addClass("visionVisualChartBoxClass");
	var chartDom = document.getElementById(chartId);
	var myChart = echarts.init(chartDom);
	var chartDataObj = response['data'];
	var keys = Object.keys(chartDataObj);
	var xAxisArr ;
	var yAxisArr ;
	var noOfCol= keys.length;
	for (var i = 0; i < noOfCol; i++) {
    var key = keys[i];
    if (Array.isArray(chartDataObj[key])) {
        if (chartDataObj[key].every((val) => typeof val === 'number')) {
            yAxisArr = chartDataObj[key]; 
        } else {
            xAxisArr = chartDataObj[key];
        }
    }
}

	var chartEditoptions;
	var hoverlabeldata;
	var labeldata;
	var bigChartType=chartType.toUpperCase();
	if(response['chartCOnfigObjStr']!= null && response['chartCOnfigObjStr']!= undefined){
	 chartEditoptions= JSON.parse(response['chartCOnfigObjStr']);
	if(chartEditoptions[bigChartType+'HOVERBORDERCOLOR'+count]!= null && chartEditoptions[bigChartType+'HOVERBORDERCOLOR'+count]!="")
		hoverlabeldata=chartEditoptions[bigChartType+'HOVERBORDERCOLOR'+count]
	if(chartEditoptions[bigChartType+'LABELDATA'+count]!= null && chartEditoptions[bigChartType+'LABELDATA'+count]!="")
		labeldata=chartEditoptions[bigChartType+'LABELDATA'+count]
	}

	var EditIcon = {
	'height': 512,
	'width': 512,
	'id': chartId,
	'path': 'M490.3 40.4C512.2 62.27 512.2 97.73 490.3 119.6L460.3 149.7L362.3 51.72L392.4 21.66C414.3-.2135 449.7-.2135 471.6 21.66L490.3 40.4zM172.4 241.7L339.7 74.34L437.7 172.3L270.3 339.6C264.2 345.8 256.7 350.4 248.4 353.2L159.6 382.8C150.1 385.6 141.5 383.4 135 376.1C128.6 370.5 126.4 361 129.2 352.4L158.8 263.6C161.6 255.3 166.2 247.8 172.4 241.7V241.7zM192 63.1C209.7 63.1 224 78.33 224 95.1C224 113.7 209.7 127.1 192 127.1H96C78.33 127.1 64 142.3 64 159.1V416C64 433.7 78.33 448 96 448H352C369.7 448 384 433.7 384 416V319.1C384 302.3 398.3 287.1 416 287.1C433.7 287.1 448 302.3 448 319.1V416C448 469 405 512 352 512H96C42.98 512 0 469 0 416V159.1C0 106.1 42.98 63.1 96 63.1H192z',
	'color': 'rgb(31,119,180)'
};

	var option;
	var rawData = yAxisArr;
	var total = rawData.reduce((sum, value) => sum + value, 0);
	var percentArr = rawData.map(value => ((value / total) * 100).toFixed(2) + '%');
	var mode= $('#'+bigChartType+'MODE'+count).val();
	var title= $('#'+bigChartType+'CHARTTITLE'+count).val();
	var labelData = $('#' + bigChartType + 'LABELDATA'+count).val();
	var hoverlabeldata = $('#' + bigChartType + 'HOVERLABELDATA'+count).val();
	var labelPosition = $('#' + bigChartType + 'LABELPOSITION'+count).val();
	var markerShape = $('#'+bigChartType+'MARKERSHAPE'+count).val();
	var symbolSize= $('#'+bigChartType+'MARKERSIZE'+count).val();

	var hoverBGColor=$('#'+bigChartType+'HOVERBG'+count).val();
	var hoverBorderColor=$('#'+bigChartType+'HOVERBORDERCOLOR'+count).val();
	var hoverFontColor=$('#'+bigChartType+'HOVERFONTCOLOR'+count).val();
	var hoverTextFont=$('#'+bigChartType+'HOVERFONTFAMILY'+count).val();
	if(hoverTextFont == undefined || hoverTextFont == null || hoverTextFont == ' '){
				hoverTextFont='Arial, sans-serif';
					$('#'+bigChartType+'HOVERFONTFAMILY'+count).val('Arial, sans-serif');

}
	var hoverTextSize=$('#'+bigChartType+'HOVERFONTSIZE'+count).val();

	hoverTextSize=(hoverTextSize != undefined && hoverTextSize!= '' && hoverTextSize!= null) ? parseInt(hoverTextSize) : 10;
	symbolSize= (symbolSize != undefined &&  symbolSize != '' && symbolSize!= null) ?parseInt( symbolSize) : 10;

	var markerColor=$('#'+bigChartType+'COLORSMARKER'+count).val();
	var markerSize=$('#'+bigChartType+'MARKERSIZE'+count).val();
	markerSize= (markerSize != undefined &&  markerSize != '' && markerSize!= null) ? parseInt(markerSize) : 10;
	
	

	var areaColor =$('#'+bigChartType+'COLORSAREA'+count).val();
	var areaopacity =$('#'+bigChartType+'OPACITY'+count).val();
	areaopacity= (areaopacity != undefined &&  areaopacity != '' && areaopacity!= null) ? areaopacity : "0.8";

	var linecolor=$('#'+bigChartType+'LINECOLORS').val();
	var lineWidth=$('#'+bigChartType+'LINEWIDTH').val();
		lineWidth= (lineWidth != undefined &&  lineWidth != '' && lineWidth!= null) ? parseInt(lineWidth) : 10;

	var linetype=$('#'+bigChartType+'LINEDASH').val();
	var isSmooth= false;
	if(linetype === 'smooth'){
	 isSmooth=true;		
}
	
	
	
	option = {
		title:{
			text:title,
			
		},
  xAxis: {
    type: 'category',
    data: xAxisArr
  },
  yAxis: {
    type: 'value'
  },
  series: [
    {
      smooth:0.5,
      data: yAxisArr,
      type: 'line',
	symbol:markerShape,
       lineStyle: {
        color: linecolor, // Line color in hexadecimal notation
        width: lineWidth, // Line width
        type: linetype // Line type: 'solid', 'dashed', 'dotted', etc.
      },
      areaStyle: {
        color: areaColor,
        opacity: areaopacity // Area opacity
      },
      itemStyle: {
        color: markerColor, // Marker color in hexadecimal notation
        borderColor: '#168ab9', // Border color of the marker
        borderWidth: 2, // Border width of the marker
        borderType: 'solid', // Border type of the marker
        opacity: 1, // Opacity of the marker
        shadowColor: '#168ab9', // Shadow color of the marker
        shadowBlur: 10 // Shadow blur of the marker
      },
      label: {
	position:labelPosition,
        formatter: function(params) {
          var dataIndex = params.dataIndex;
          if (labeldata != null && labeldata.trim() !== '') {
            if (labeldata === 'x') {
              return params.name;
            }
            if (labeldata === 'y') {
              return params.value.toString(); // Convert value to string
            }
            if (labeldata === '%') {
              return ' (' + percentArr[dataIndex] + ')';
            }
            if (labeldata === 'x+y') {
              return params.name + ': ' + params.value.toString(); // Convert value to string
            }
            if (labeldata === 'x+%') {
              return params.name + ' (' + percentArr[dataIndex] + ')';
            }
            if (labeldata === 'y+%') {
              return params.value.toString() + ' (' + percentArr[dataIndex] + ')'; // Convert value to string
            }
          }
        }
      }
    }
  ],
    tooltip: {
    trigger: 'axis',
	axisPointer: {
  type: 'cross', // You can also use 'shadow', 'cross', etc. for different pointer types
  label: {
    backgroundColor: hoverBGColor, // Set the background color of the tooltip label
    borderColor: hoverBorderColor, // Set the border color of the tooltip label
    borderWidth: 1, // Set the border width of the tooltip label
    borderRadius: 5, // Set the border radius of the tooltip label
    color: hoverFontColor, // Set the text color of the tooltip label
    fontFamily: hoverTextFont, // Set the font family of the tooltip label
    fontSize: hoverTextSize, // Set the font size of the tooltip label
    fontWeight: 'bold', // Set the font weight of the tooltip label
  },
},

    formatter: function(params) {
      var dataIndex = params[0].dataIndex;
      if (hoverlabeldata != null && hoverlabeldata.trim() !== '') {
        if (hoverlabeldata === 'x') {
          return params[0].name;
        }
        if (hoverlabeldata === 'y') {
          return params[0].value.toString(); // Convert value to string
        }
        if (hoverlabeldata === '%') {
          return ' (' + percentArr[dataIndex] + ')';
        }
        if (hoverlabeldata === 'x+y') {
          return params[0].name + ': ' + params[0].value.toString(); // Convert value to string
        }
        if (hoverlabeldata === 'x+%') {
          return params[0].name + ' (' + percentArr[dataIndex] + ')';
        }
        if (hoverlabeldata === 'y+%') {
          return params[0].value.toString() + ' (' + percentArr[dataIndex] + ')'; // Convert value to string
        }
      }
    }
  },
 /* toolbox: {
  feature: {
    myDelete: {
      show: true,
      title: 'Delete',
      icon: 'image://images/delete.png',
      onclick: function () {
        deleteVisualizeChart(chartId, "", chartType, "");
      }
    },
    Edit: {
      show: true,
      title: 'Edit',
      icon: EditIcon,
      onclick: function () {
        homePageChartSetting(chartId, chartType, "", chartDataObj, count, event, "", "");
      }
    }
  }
}*/

};


		
	if(mode === "lines")
		markerSize=0;
	if(labeldata !== "''")
		option.series[0].label.show='true';
	option.series[0].symbolSize= markerSize;
	if (option && typeof option === 'object') {
		myChart.setOption(option);
		$("#" + chartId).attr("echartOption", JSON.stringify(option));
	}



}

function getStackedAreaChart(chartId, response, count, chartType) {
              $("#visionVisualizeChartId" + count).remove();
              var basicAreaChartId = "visionVisualizeChart" + count;
              var basicAreaChartHomeId = "visionVisualizeChartHome" + count;
              $("#" + basicAreaChartId).append("<div id='visionVisualizeChartId" + count + "' type='" + chartType + "' count='" + count + "' class='visionVisualChartBoxClass visionVisualChartBoxSelected'></div>")
              $("#" + chartId).css("width", "auto", "!important");
              $("#" + chartId).css("height", "330px", "!important");
              $("#" + basicAreaChartId).css("width", "auto", "!important");
              $("#" + basicAreaChartId).css("height", "330px", "!important");
              $("#" + basicAreaChartHomeId).css("width", "auto", "!important");
              $("#" + basicAreaChartHomeId).css("height", "330px", "!important");
              $("#" + basicAreaChartHomeId).addClass("visionVisualChartBoxClass");
              var chartDom = document.getElementById(chartId);
              var myChart = echarts.init(chartDom);
              var chartDataObj = response['data'];
              var keys = Object.keys(chartDataObj);
              var xAxisArr;
              var yAxisArr = [];
              var series = [];
              var chartEditoptions;
              var hoverlabeldata;
              var labeldata;
              var bigChartType=chartType.toUpperCase();
              var colorsObj = response['colorsObj'];
				var colorsObj = response['colorsObj'];
	var colorsArr=[];
	if(colorsObj!= undefined && colorsObj!= null && colorsObj!= ''){
		colorsArr = JSON.parse(colorsObj);
	}
	else{
		colorsArr=['#1864ab', '#fd7e14', '#0b7285', '#ff6b6b'];
		response['colorsObj']= ['#1864ab', '#fd7e14', '#0b7285', '#ff6b6b'];
	}


              if(response['chartCOnfigObjStr']!= null && response['chartCOnfigObjStr']!= undefined){
               chartEditoptions= JSON.parse(response['chartCOnfigObjStr']);
              if(chartEditoptions[bigChartType+'HOVERBORDERCOLOR'+count]!= null && chartEditoptions[bigChartType+'HOVERBORDERCOLOR'+count]!="")
                hoverlabeldata=chartEditoptions[bigChartType+'HOVERBORDERCOLOR'+count]
              if(chartEditoptions[bigChartType+'LABELDATA'+count]!= null && chartEditoptions[bigChartType+'LABELDATA'+count]!="")
                labeldata=chartEditoptions[bigChartType+'LABELDATA'+count]
              }
              var option;
              
              
              var mode= $('#'+bigChartType+'MODE'+count).val();
              var title= $('#'+bigChartType+'CHARTTITLE'+count).val();
              var labelData = $('#' + bigChartType + 'LABELDATA'+count).val();
              if(labelData == null || labelData == undefined || labelData == "''")
					labelData='x+y';
              var hoverlabeldata = $('#' + bigChartType + 'HOVERLABELDATA'+count).val();
              var labelPosition = $('#' + bigChartType + 'LABELPOSITION'+count).val();
              var markerShape = $('#'+bigChartType+'MARKERSHAPE'+count).val();
				markerShape=	(markerShape != null || markerShape != undefined || markerShape != "")? markerShape : "triangle";
              var symbolSize= $('#'+bigChartType+'MARKERSIZE'+count).val();
            
              var hoverBGColor=$('#'+bigChartType+'HOVERBG'+count).val();
              var hoverBorderColor=$('#'+bigChartType+'HOVERBORDERCOLOR'+count).val();
              var hoverFontColor=$('#'+bigChartType+'HOVERFONTCOLOR'+count).val();
              var hoverTextFont=$('#'+bigChartType+'HOVERFONTFAMILY'+count).val();
              if(hoverTextFont == undefined || hoverTextFont == null || hoverTextFont == ''){
	hoverTextFont='Arial, sans-serif';
	$('#'+bigChartType+'HOVERFONTFAMILY'+count).val('Arial, sans-serif');

}
              var hoverTextSize=$('#'+bigChartType+'HOVERFONTSIZE'+count).val();
              hoverTextSize=(hoverTextSize != undefined && hoverTextSize!= '' && hoverTextSize!= null) ? parseInt(hoverTextSize) : 10;
              symbolSize= (symbolSize != undefined &&  symbolSize != '' && symbolSize!= null) ?parseInt( symbolSize) : 10;
            
              var markerColor=colorsArr;
              markerColor=markerColor.reverse();
              var markerSize=$('#'+bigChartType+'MARKERSIZE'+count).val();
              markerSize= (markerSize != undefined &&  markerSize != '' && markerSize!= null) ? parseInt(markerSize) : 10;
              
              
            
              var areaColorArr =colorsArr;
              areaColorArr=areaColorArr.reverse();	
              var areaopacity =$('#'+bigChartType+'OPACITY'+count).val();
              areaopacity= (areaopacity != undefined &&  areaopacity != '' && areaopacity!= null) ? areaopacity : "0.8";
            
            
              var linecolor=colorsArr;
              linecolor=linecolor.reverse();
              var lineWidth=$('#'+bigChartType+'LINEWIDTH').val();
                lineWidth= (lineWidth != undefined &&  lineWidth != '' && lineWidth!= null) ? parseInt(lineWidth) : 10;
            
              var linetype=$('#'+bigChartType+'LINEDASH').val();
              var isSmooth= false;
              if(linetype === 'smooth'){
               isSmooth=true;		
            }
			if(mode === "lines")
                markerSize=0;
              
              
              
              var noOfCol=keys.length;
				var percentArr=[];
			  var dataMap = {};
	var seriesData=[];
				 var index =0;
	for (var i = 0; i < noOfCol; i++) {
    var key = keys[i];
    if (Array.isArray(chartDataObj[key])) {
        if (chartDataObj[key].every((val) => typeof val === 'number')) {
            seriesData[index]= chartDataObj[key];
			index++;
        } else {
            xAxisArr = chartDataObj[key];
        }
    }
}
			var rawData=seriesData;
              for (var i = 0; i < noOfCol -1; i++) {
				  
				  
	            var total = rawData[i].reduce((sum, value) => sum + value, 0);
	            percentArr[i] = rawData[i].map(value => ((value / total) * 100).toFixed(2) + '%');
                
                var seriesObj = {
                smooth:0.5,
                  name: keys[i], 
                  type: 'line', 
                  stack: 'stacked', 
                  data: seriesData[i],
				  symbolSize: markerSize,
				  symbol: markerShape,
				  //if(labeldata !== "''")
//	                label:{show:'true'},
                  areaStyle: {
                    color: areaColorArr[i%areaColorArr.length],
                    opacity: areaopacity // Area opacity
                  },
                lineStyle: {
                    color: linecolor[i%linecolor.length], 
                    width: lineWidth, 
                    type: linetype ,
                  },
              itemStyle: {
                    color: markerColor[i%markerColor.length], // Marker color in hexadecimal notation
                    borderColor: '#168ab9', // Border color of the marker
                    borderWidth: 2, // Border width of the marker
                    borderType: 'solid', // Border type of the marker
                    opacity: 1, // Opacity of the marker
                    shadowColor: '#168ab9', // Shadow color of the marker
                    shadowBlur: 10 // Shadow blur of the marker
                  },
              label: {
				  show:'true',
              position:labelPosition,
                    formatter: function(params) {
                      var dataIndex = params.dataIndex;
						var ind=0;
                      if (labeldata != null && labeldata.trim() !== '') {
						  
                        if (labeldata === 'x') {
                          return params.name;
                        }
                        if (labeldata === 'y') {
                          return params.value.toString(); // Convert value to string
                        }
                        if (labeldata === '%') {
                          return ' (' + percentArr[ind][dataIndex] + ')';
                        }
                        if (labeldata === 'x+y') {
                          return params.name + ': ' + params.value.toString(); // Convert value to string
                        }
                        if (labeldata === 'x+%') {
                          return params.name + ' (' + percentArr[ind][dataIndex] + ')';
                        }
                        if (labeldata === 'y+%') {
                          return params.value.toString() + ' (' + percentArr[ind][dataIndex] + ')'; // Convert value to string
                        }
						  ind++;
                      }
                    }
                  }
                };
                 series.push(seriesObj);
                }
                
               
               
              option = {
                title: {
                  text: title
                },
              tooltip: {
                trigger: 'axis',
                axisPointer: {
                type: 'cross', // You can also use 'shadow', 'cross', etc. for different pointer types
                label: {
                    backgroundColor: hoverBGColor, // Set the background color of the tooltip label
                    borderColor: hoverBorderColor, // Set the border color of the tooltip label
                    borderWidth: 1, // Set the border width of the tooltip label
                    borderRadius: 5, // Set the border radius of the tooltip label
                    color: hoverFontColor, // Set the text color of the tooltip label
                    fontFamily: hoverTextFont, // Set the font family of the tooltip label
                    fontSize: hoverTextSize, // Set the font size of the tooltip label
                    fontWeight: 'bold', // Set the font weight of the tooltip label
                  },
                },
                
                formatter: function(params) {
                      var dataIndex = params[0].dataIndex;
					var ind=0;
                      if (hoverlabeldata != null && hoverlabeldata.trim() !== '') {
                        if (hoverlabeldata === 'x') {
                          return params[0].name;
                        }
                        if (hoverlabeldata === 'y') {
                          return params[0].value.toString(); // Convert value to string
                        }
                        if (hoverlabeldata === '%') {
                          return ' (' + percentArr[ind][dataIndex] + ')';
                        }
                        if (hoverlabeldata === 'x+y') {
                          return params[0].name + ': ' + params[0].value.toString(); // Convert value to string
                        }
                        if (hoverlabeldata === 'x+%') {
                          return params[0].name + ' (' + percentArr[ind][dataIndex] + ')';
                        }
                        if (hoverlabeldata === 'y+%') {
                          return params[0].value.toString() + ' (' + percentArr[ind][dataIndex] + ')'; // Convert value to string
                        }
						  ind++;
                      }
                    }
                  },
                legend: {
                  data: xAxisArr
                },
                toolbox: {
                  feature: {
                    saveAsImage: {}
                  }
                },
                grid: {
                  left: '3%',
                  right: '4%',
                  bottom: '3%',
                  containLabel: true
                },
                xAxis: [
                  {
                    type: 'category',
                    boundaryGap: false,
                    data: xAxisArr
                  }
                ],
                yAxis: [
                  {
                    type: 'value'
                  }
                ],
                series: series,
               /* toolbox:{
                feature:{
                myDelete: {
                    show: true,
                    title: 'Delete',
                    icon: 'image://images/delete.png',
                    onclick: function () {
                       deleteVisualizeChart(chartId, "", chartType, "");
                    }
                  }
                }
              }*/
              };
              
              if (option && typeof option === 'object') {
                myChart.setOption(option);
                $("#" + chartId).attr("echartOption", JSON.stringify(option));
              }
            
            
            
            }

function getGradientStackedAreaChart(chartId, response, count, chartType) {
	chartType='GradStackAreaChart';
                                      $("#visionVisualizeChartId" + count).remove();
                                      var basicAreaChartId = "visionVisualizeChart" + count;
                                      var basicAreaChartHomeId = "visionVisualizeChartHome" + count;
                                      $("#" + basicAreaChartId).append("<div id='visionVisualizeChartId" + count + "' type='" + chartType + "' count='" + count + "' class='visionVisualChartBoxClass visionVisualChartBoxSelected'></div>")
                                      $("#" + chartId).css("width", "auto", "!important");
                                      $("#" + chartId).css("height", "330px", "!important");
                                      $("#" + basicAreaChartId).css("width", "auto", "!important");
                                      $("#" + basicAreaChartId).css("height", "330px", "!important");
                                      $("#" + basicAreaChartHomeId).css("width", "auto", "!important");
                                      $("#" + basicAreaChartHomeId).css("height", "330px", "!important");
                                      $("#" + basicAreaChartHomeId).addClass("visionVisualChartBoxClass");
                                      var chartDom = document.getElementById(chartId);
                                      var myChart = echarts.init(chartDom);
                                      var chartDataObj = response['data'];
                                      var keys = Object.keys(chartDataObj);
                                      var xAxisArr;
                                      var yAxisArr = [];
                                      var series = [];
                                      var chartEditoptions;
                                      var hoverlabeldata;
                                      var labeldata;
                                      var bigChartType=chartType.toUpperCase();
                                      if(response['chartCOnfigObjStr']!= null && response['chartCOnfigObjStr']!= undefined){
                                       chartEditoptions= JSON.parse(response['chartCOnfigObjStr']);
                                      if(chartEditoptions[bigChartType+'HOVERBORDERCOLOR'+count]!= null && chartEditoptions[bigChartType+'HOVERBORDERCOLOR'+count]!="")
                                        hoverlabeldata=chartEditoptions[bigChartType+'HOVERBORDERCOLOR'+count]
                                      if(chartEditoptions[bigChartType+'LABELDATA'+count]!= null && chartEditoptions[bigChartType+'LABELDATA'+count]!="")
                                        labeldata=chartEditoptions[bigChartType+'LABELDATA'+count]
                                      }
                                      var colorsObj = response['colorsObj'];
									var colorsArr=[];
									if(colorsObj!= undefined && colorsObj!= null && colorsObj!= ''){
										colorsArr = JSON.parse(colorsObj);
									}
									else{
										colorsArr=['#80FFA5', '#00DDFF', '#37A2FF', '#FF0087', '#FFBF00'];
										response['colorsObj']= ['#80FFA5', '#00DDFF', '#37A2FF', '#FF0087', '#FFBF00'];
									}
                                      var option;
                                      
                                      
                                      var mode= $('#'+bigChartType+'MODE'+count).val();
                                      var title= $('#'+bigChartType+'CHARTTITLE'+count).val();
                                      var labelData = $('#' + bigChartType + 'LABELDATA'+count).val();
                                      if(labelData == null || labelData == undefined || labelData == "''")
                                  labelData='x+y';
                                      var hoverlabeldata = $('#' + bigChartType + 'HOVERLABELDATA'+count).val();
                                      var labelPosition = $('#' + bigChartType + 'LABELPOSITION'+count).val();
                                      var markerShape = $('#'+bigChartType+'MARKERSHAPE'+count).val();
                                markerShape=	(markerShape != null || markerShape != undefined || markerShape != "")? markerShape : "triangle";
                                      var symbolSize= $('#'+bigChartType+'MARKERSIZE'+count).val();
                                    
                                      var hoverBGColor=$('#'+bigChartType+'HOVERBG'+count).val();
                                      var hoverBorderColor=$('#'+bigChartType+'HOVERBORDERCOLOR'+count).val();
                                      var hoverFontColor=$('#'+bigChartType+'HOVERFONTCOLOR'+count).val();
                                      var hoverTextFont=$('#'+bigChartType+'HOVERFONTFAMILY'+count).val();
                                      if(hoverFontColor == undefined || hoverFontColor == null || hoverFontColor == '')
                                          hoverFontColor='Arial, sans-serif';
                                      var hoverTextSize=$('#'+bigChartType+'HOVERFONTSIZE'+count).val();
                                      hoverTextSize=(hoverTextSize != undefined && hoverTextSize!= '' && hoverTextSize!= null) ? parseInt(hoverTextSize) : 10;
                                      symbolSize= (symbolSize != undefined &&  symbolSize != '' && symbolSize!= null) ?parseInt( symbolSize) : 10;
                                    
                                      var markerColor=colorsArr;
                                      markerColor=markerColor.reverse();
                                      var markerSize=$('#'+bigChartType+'MARKERSIZE'+count).val();
                                      markerSize= (markerSize != undefined &&  markerSize != '' && markerSize!= null) ? parseInt(markerSize) : 10;
                                      
                                      
                                    
                                      var areaColorArr =colorsArr;
                                      areaColorArr=areaColorArr.reverse();	
                                      var areaopacity =$('#'+bigChartType+'OPACITY'+count).val();
                                      areaopacity= (areaopacity != undefined &&  areaopacity != '' && areaopacity!= null) ? areaopacity : "0.8";
                                    
                                    
                                      var linecolor=colorsArr;
                                      //linecolor=linecolor.reverse();
                                    
                                      var lineWidth=$('#'+bigChartType+'LINEWIDTH').val();
                                        lineWidth= (lineWidth != undefined &&  lineWidth != '' && lineWidth!= null) ? parseInt(lineWidth) : 10;
                                    
                                      var linetype=$('#'+bigChartType+'LINEDASH').val();
                                      var isSmooth=true;;
                                      if(linetype === 'smooth'){
                                       		
                                    }
                              if(mode === "lines")
                                        markerSize=0;
                                      
                                      
                                      
                                      var noOfCol=keys.length;
                                var percentArr=[];
                                var dataMap = {};
                          var seriesData=[];
                          			
                        var color= ['#80FFA5', '#00DDFF', '#37A2FF', '#FF0087', '#FFBF00'];
	var index = 0;
	for (var i = 0; i < noOfCol; i++) {
		var key = keys[i];
		if (Array.isArray(chartDataObj[key])) {
			if (chartDataObj[key].every((val) => typeof val === 'number')) {
				seriesData[index] = chartDataObj[key];
				index++;
			} else {
				xAxisArr = chartDataObj[key];
			}
		}
	}
                              var rawData=seriesData;
                                      for (var i = 0; i < noOfCol -1; i++) {
                                  
                                  
                                      var total = rawData[i].reduce((sum, value) => sum + value, 0);
                                      percentArr[i] = rawData[i].map(value => ((value / total) * 100).toFixed(2) + '%');
                                        
                                        var seriesObj = {
                                        smooth:0.5,
                                          name: keys[i], 
                                          type: 'line', 
                                          stack: 'stacked', 
                                          data: seriesData[i],
                                  symbolSize: markerSize,
                                  symbol: markerShape,
                                  //if(labeldata !== "''")
                        //	                label:{show:'true'},
                                          areaStyle: {
                                            color: new echarts.graphic.LinearGradient(0, 0, 0, 1, [
										          {
										            offset: 0,
										            color: color[i % color.length]
										          },
										          {
										            offset: 1,
										            color: color[i+1 % color.length]
										          }
										        ])
                                            
                                          },
                                        lineStyle: {
                                            color: linecolor[i%linecolor.length], 
                                            width: lineWidth, 
                                            type: linetype ,
                                          },
                                      itemStyle: {
                                            color: markerColor[i%markerColor.length], // Marker color in hexadecimal notation
                                            borderColor: '#168ab9', // Border color of the marker
                                            borderWidth: 2, // Border width of the marker
                                            borderType: 'solid', // Border type of the marker
                                            opacity: 1, // Opacity of the marker
                                            shadowColor: '#168ab9', // Shadow color of the marker
                                            shadowBlur: 10 // Shadow blur of the marker
                                          },
                                      label: {
                                  show:'true',
                                      position:labelPosition,
                                            formatter: function(params) {
                                              var dataIndex = params.dataIndex;
                                    var ind=0;
                                              if (labeldata != null && labeldata.trim() !== '') {
                                      
                                                if (labeldata === 'x') {
                                                  return params.name;
                                                }
                                                if (labeldata === 'y') {
                                                  return params.value.toString(); // Convert value to string
                                                }
                                                if (labeldata === '%') {
                                                  return ' (' + percentArr[ind][dataIndex] + ')';
                                                }
                                                if (labeldata === 'x+y') {
                                                  return params.name + ': ' + params.value.toString(); // Convert value to string
                                                }
                                                if (labeldata === 'x+%') {
                                                  return params.name + ' (' + percentArr[ind][dataIndex] + ')';
                                                }
                                                if (labeldata === 'y+%') {
                                                  return params.value.toString() + ' (' + percentArr[ind][dataIndex] + ')'; // Convert value to string
                                                }
                                      ind++;
                                              }
                                            }
                                          }
                                        };
                                         series.push(seriesObj);
                                        }
                                        
                                       
                                       
                                      option = {
										   color: ['#80FFA5', '#00DDFF', '#37A2FF', '#FF0087', '#FFBF00'],
                                        title: {
                                          text: title
                                        },
                                      tooltip: {
                                        trigger: 'axis',
                                        axisPointer: {
                                        type: 'cross', // You can also use 'shadow', 'cross', etc. for different pointer types
                                        label: {
                                            backgroundColor: hoverBGColor, // Set the background color of the tooltip label
                                            borderColor: hoverBorderColor, // Set the border color of the tooltip label
                                            borderWidth: 1, // Set the border width of the tooltip label
                                            borderRadius: 5, // Set the border radius of the tooltip label
                                            color: hoverFontColor, // Set the text color of the tooltip label
                                            fontFamily: hoverTextFont, // Set the font family of the tooltip label
                                            fontSize: hoverTextSize, // Set the font size of the tooltip label
                                            fontWeight: 'bold', // Set the font weight of the tooltip label
                                          },
                                        },
                                        
                                        formatter: function(params) {
                                              var dataIndex = params[0].dataIndex;
                                  var ind=0;
                                              if (hoverlabeldata != null && hoverlabeldata.trim() !== '') {
                                                if (hoverlabeldata === 'x') {
                                                  return params[0].name;
                                                }
                                                if (hoverlabeldata === 'y') {
                                                  return params[0].value.toString(); // Convert value to string
                                                }
                                                if (hoverlabeldata === '%') {
                                                  return ' (' + percentArr[ind][dataIndex] + ')';
                                                }
                                                if (hoverlabeldata === 'x+y') {
                                                  return params[0].name + ': ' + params[0].value.toString(); // Convert value to string
                                                }
                                                if (hoverlabeldata === 'x+%') {
                                                  return params[0].name + ' (' + percentArr[ind][dataIndex] + ')';
                                                }
                                                if (hoverlabeldata === 'y+%') {
                                                  return params[0].value.toString() + ' (' + percentArr[ind][dataIndex] + ')'; // Convert value to string
                                                }
                                      ind++;
                                              }
                                            }
                                          },
                                        legend: {
                                          data: xAxisArr
                                        },
                                        toolbox: {
                                          feature: {
                                            saveAsImage: {}
                                          }
                                        },
                                        grid: {
                                          left: '3%',
                                          right: '4%',
                                          bottom: '3%',
                                          containLabel: true
                                        },
                                        xAxis: [
                                          {
                                            type: 'category',
                                            boundaryGap: false,
                                            data: xAxisArr
                                          }
                                        ],
                                        yAxis: [
                                          {
                                            type: 'value'
                                          }
                                        ],
                                        series: series,
                                        /*toolbox:{
                                        feature:{
                                        myDelete: {
                                            show: true,
                                            title: 'Delete',
                                            icon: 'image://images/delete.png',
                                            onclick: function () {
                                               deleteVisualizeChart(chartId, "", chartType, "");
                                            }
                                          }
                                        }
                                      }*/
                                      };
                                      
                                      if (option && typeof option === 'object') {
                                        myChart.setOption(option);
                                        $("#" + chartId).attr("echartOption", JSON.stringify(option));
                                      }
                                    
                                    
                                    
                                    }


function getAreaPiecesChart(chartId, response, count, chartType) {
	$("#visionVisualizeChartId" + count).remove();
	var basicAreaChartId = "visionVisualizeChart" + count;
	var basicAreaChartHomeId = "visionVisualizeChartHome" + count;
	$("#" + basicAreaChartId).append("<div id='visionVisualizeChartId" + count + "' type='" + chartType + "' count='" + count + "' class='visionVisualChartBoxClass visionVisualChartBoxSelected'></div>")
	$("#" + chartId).css("width", "auto", "!important");
	$("#" + chartId).css("height", "330px", "!important");
	$("#" + basicAreaChartId).css("width", "auto", "!important");
	$("#" + basicAreaChartId).css("height", "330px", "!important");
	$("#" + basicAreaChartHomeId).css("width", "auto", "!important");
	$("#" + basicAreaChartHomeId).css("height", "330px", "!important");
	$("#" + basicAreaChartHomeId).addClass("visionVisualChartBoxClass");
	var chartDom = document.getElementById(chartId);
	var myChart = echarts.init(chartDom);
	var chartDataObj = response['data'];
	var keys = Object.keys(chartDataObj);
	var xAxisArr ;
	var yAxisArr ;
	var noOfCol= keys.length;
	for (var i = 0; i < noOfCol; i++) {
		var key = keys[i];
		if (Array.isArray(chartDataObj[key])) {
			if (chartDataObj[key].every((val) => typeof val === 'number')) {
				yAxisArr = chartDataObj[key];
			} else {
				xAxisArr = chartDataObj[key];
			}
		}
	}

	var chartEditoptions;
	var hoverlabeldata;
	var labeldata;
	var bigChartType=chartType.toUpperCase();
	if(response['chartCOnfigObjStr']!= null && response['chartCOnfigObjStr']!= undefined){
	 chartEditoptions= JSON.parse(response['chartCOnfigObjStr']);
	if(chartEditoptions[bigChartType+'HOVERBORDERCOLOR'+count]!= null && chartEditoptions[bigChartType+'HOVERBORDERCOLOR'+count]!="")
		hoverlabeldata=chartEditoptions[bigChartType+'HOVERBORDERCOLOR'+count]
	if(chartEditoptions[bigChartType+'LABELDATA'+count]!= null && chartEditoptions[bigChartType+'LABELDATA'+count]!="")
		labeldata=chartEditoptions[bigChartType+'LABELDATA'+count]
	}

	

	var option;
	var rawData = yAxisArr;
	var total = rawData.reduce((sum, value) => sum + value, 0);
	var percentArr = rawData.map(value => ((value / total) * 100).toFixed(2) + '%');
	var mode= $('#'+bigChartType+'MODE'+count).val();
	var title= $('#'+bigChartType+'CHARTTITLE'+count).val();
	var labelData = $('#' + bigChartType + 'LABELDATA'+count).val();
	var hoverlabeldata = $('#' + bigChartType + 'HOVERLABELDATA'+count).val();
	var labelPosition = $('#' + bigChartType + 'LABELPOSITION'+count).val();
	var markerShape = $('#'+bigChartType+'MARKERSHAPE'+count).val();
	var symbolSize= $('#'+bigChartType+'MARKERSIZE'+count).val();

	var hoverBGColor=$('#'+bigChartType+'HOVERBG'+count).val();
	var hoverBorderColor=$('#'+bigChartType+'HOVERBORDERCOLOR'+count).val();
	var hoverFontColor=$('#'+bigChartType+'HOVERFONTCOLOR'+count).val();
	var hoverTextFont=$('#'+bigChartType+'HOVERFONTFAMILY'+count).val();
	if(hoverFontColor == undefined || hoverFontColor == null || hoverFontColor == '')
			hoverFontColor='Arial, sans-serif';
	var hoverTextSize=$('#'+bigChartType+'HOVERFONTSIZE'+count).val();

	hoverTextSize=(hoverTextSize != undefined && hoverTextSize!= '' && hoverTextSize!= null) ? parseInt(hoverTextSize) : 10;
	symbolSize= (symbolSize != undefined &&  symbolSize != '' && symbolSize!= null) ?parseInt( symbolSize) : 10;

	var markerColor=$('#'+bigChartType+'COLORSMARKER'+count).val();
	var markerSize=$('#'+bigChartType+'MARKERSIZE'+count).val();
	markerSize= (markerSize != undefined &&  markerSize != '' && markerSize!= null) ? parseInt(markerSize) : 10;
	
	

	var areaColor =$('#'+bigChartType+'COLORSAREA'+count).val();
	var areaopacity =$('#'+bigChartType+'OPACITY'+count).val();
	areaopacity= (areaopacity != undefined &&  areaopacity != '' && areaopacity!= null) ? areaopacity : "0.8";

	var linecolor=$('#'+bigChartType+'LINECOLORS').val();
	var lineWidth=$('#'+bigChartType+'LINEWIDTH').val();
		lineWidth= (lineWidth != undefined &&  lineWidth != '' && lineWidth!= null) ? parseInt(lineWidth) : 10;

	var linetype=$('#'+bigChartType+'LINEDASH').val();
	var isSmooth= false;
	
	
	if(linetype === 'smooth'){
	 isSmooth=true;		
}
	var EditIcon = {
	'height': 512,
	'width': 512,
	'id': chartId,
	'path': 'M490.3 40.4C512.2 62.27 512.2 97.73 490.3 119.6L460.3 149.7L362.3 51.72L392.4 21.66C414.3-.2135 449.7-.2135 471.6 21.66L490.3 40.4zM172.4 241.7L339.7 74.34L437.7 172.3L270.3 339.6C264.2 345.8 256.7 350.4 248.4 353.2L159.6 382.8C150.1 385.6 141.5 383.4 135 376.1C128.6 370.5 126.4 361 129.2 352.4L158.8 263.6C161.6 255.3 166.2 247.8 172.4 241.7V241.7zM192 63.1C209.7 63.1 224 78.33 224 95.1C224 113.7 209.7 127.1 192 127.1H96C78.33 127.1 64 142.3 64 159.1V416C64 433.7 78.33 448 96 448H352C369.7 448 384 433.7 384 416V319.1C384 302.3 398.3 287.1 416 287.1C433.7 287.1 448 302.3 448 319.1V416C448 469 405 512 352 512H96C42.98 512 0 469 0 416V159.1C0 106.1 42.98 63.1 96 63.1H192z',
	'color': 'rgb(31,119,180)'
};
	
	
	option = {
		title:{
			text:title,
			
		},
  xAxis: {
    type: 'category',
    data: xAxisArr
  },
  yAxis: {
    type: 'value'
  },
  visualMap: {
	type: 'piecewise',
	show: false,
	dimension: 0,
	seriesIndex: 0,
	pieces: [
//		{
//			gt: 1,
//			lt: 3,
//			color: 'rgba(0, 0, 180, 0.4)'
//		},
//		{
//			gt: 5,
//			lt: 7,
//			color: 'rgba(0, 0, 180, 0.4)'
//		}
	]
},
  series: [
    {
      smooth:0.5,
      data: yAxisArr,
      type: 'line',
	symbol:markerShape,
	markLine: {
		symbol: ['none', 'none'],
		label: { show: false },
		//data: [{ xAxis: 1 }, { xAxis: 3 }, { xAxis: 5 }, { xAxis: 7 }]
	},
	
       lineStyle: {
        color: linecolor, // Line color in hexadecimal notation
        width: lineWidth, // Line width
        type: linetype // Line type: 'solid', 'dashed', 'dotted', etc.
      },
      areaStyle: {
//        color: new echarts.graphic.LinearGradient( // Custom gradient for area color
//          0, 0, 0, 1, // Define the direction of the gradient (top to bottom in this case)
//          [
//            { offset: 0, color: areaColor }, // Color at 0% position
//            //{ offset: 1, color: '#36a0d9' } // Color at 100% position
//          ]
//        ),
//        opacity: areaopacity // Area opacity
      },
      itemStyle: {
        color: markerColor, // Marker color in hexadecimal notation
        borderColor: '#168ab9', // Border color of the marker
        borderWidth: 2, // Border width of the marker
        borderType: 'solid', // Border type of the marker
        opacity: 1, // Opacity of the marker
        shadowColor: '#168ab9', // Shadow color of the marker
        shadowBlur: 10 // Shadow blur of the marker
      },
      label: {
	position:labelPosition,
        formatter: function(params) {
          var dataIndex = params.dataIndex;
          if (labeldata != null && labeldata.trim() !== '') {
            if (labeldata === 'x') {
              return params.name;
            }
            if (labeldata === 'y') {
              return params.value.toString(); // Convert value to string
            }
            if (labeldata === '%') {
              return ' (' + percentArr[dataIndex] + ')';
            }
            if (labeldata === 'x+y') {
              return params.name + ': ' + params.value.toString(); // Convert value to string
            }
            if (labeldata === 'x+%') {
              return params.name + ' (' + percentArr[dataIndex] + ')';
            }
            if (labeldata === 'y+%') {
              return params.value.toString() + ' (' + percentArr[dataIndex] + ')'; // Convert value to string
            }
          }
        }
      }
    }
  ],
    tooltip: {
    trigger: 'axis',
	axisPointer: {
  type: 'cross', // You can also use 'shadow', 'cross', etc. for different pointer types
  label: {
    backgroundColor: hoverBGColor, // Set the background color of the tooltip label
    borderColor: hoverBorderColor, // Set the border color of the tooltip label
    borderWidth: 1, // Set the border width of the tooltip label
    borderRadius: 5, // Set the border radius of the tooltip label
    color: hoverFontColor, // Set the text color of the tooltip label
    fontFamily: hoverTextFont, // Set the font family of the tooltip label
    fontSize: hoverTextSize, // Set the font size of the tooltip label
    fontWeight: 'bold', // Set the font weight of the tooltip label
  },
},

    formatter: function(params) {
      var dataIndex = params[0].dataIndex;
      if (hoverlabeldata != null && hoverlabeldata.trim() !== '') {
        if (hoverlabeldata === 'x') {
          return params[0].name;
        }
        if (hoverlabeldata === 'y') {
          return params[0].value.toString(); // Convert value to string
        }
        if (hoverlabeldata === '%') {
          return ' (' + percentArr[dataIndex] + ')';
        }
        if (hoverlabeldata === 'x+y') {
          return params[0].name + ': ' + params[0].value.toString(); // Convert value to string
        }
        if (hoverlabeldata === 'x+%') {
          return params[0].name + ' (' + percentArr[dataIndex] + ')';
        }
        if (hoverlabeldata === 'y+%') {
          return params[0].value.toString() + ' (' + percentArr[dataIndex] + ')'; // Convert value to string
        }
      }
    }
  },
 /* toolbox: {
    feature: {
      myDelete: {
        show: true,
        title: 'Delete',
        icon: 'image://images/delete.png',
        onclick: function () {
          deleteVisualizeChart(chartId, "", chartType, "");
        }
      }
    }
  }*/
};

		var piecesMarker=[];
		for(var i=0;i<counter;i++){
		var lowerBound=$(`#AREAPIECESCHARTLOWERBOUND_${i}`).val();
		var upperBound=$(`#AREAPIECESCHARTUPPERBOUND_${i}`).val();
		if( lowerBound != null && lowerBound != undefined && lowerBound != "" && upperBound!= null || upperBound!= undefined && upperBound != ""){
		var pieceObject={};
			var markerObject={};
			pieceObject['gt']=	parseInt(lowerBound);
			pieceObject['lt']=parseInt(upperBound);
			piecesMarker.push(parseInt(lowerBound));
			piecesMarker.push(parseInt(upperBound));
			pieceObject['color']='rgba(0, 0, 180, 0.4)';
		option.visualMap.pieces.push(pieceObject);
		}
		else{
												if(xAxisArr.length > 4){
												var pieceObject = {};
												var markerObject = {};
												var xAxisArrLen = xAxisArr.length;
												var range1 = Math.floor(xAxisArrLen/3);
												var range2= xAxisArrLen - range1;
												piecesMarker.push(parseInt(0));
												piecesMarker.push(parseInt(range1));
												piecesMarker.push(parseInt(range2));
												piecesMarker.push(parseInt(xAxisArrLen-1));
												pieceObject[0]=	{
														  gt: 0,
														  lt: range1,
														  color: areaColor
													  },
												pieceObject[1]={
														  gt: range2,
														  lt: xAxisArrLen-1,
														  color: areaColor
												}
												option.visualMap.pieces.push(pieceObject[0]);
												
												option.visualMap.pieces.push(pieceObject[1]);
												}
												else 
												{
													for(var i=0;i<xAxisArr.length;i++)
													piecesMarker.push(i);
												}
												
											}
	}
	var markLine = {
		symbol: ['none', 'none'],
		label: { show: false },
		data: piecesMarker.map((value) => ({ xAxis: value }))
	  };
	 option.series[0].markLine=markLine;
	if(mode === "lines")
		markerSize=0;
	if(labeldata !== "''")
		option.series[0].label.show='true';
	option.series[0].symbolSize= markerSize;
	if (option && typeof option === 'object') {
		myChart.setOption(option);
		$("#" + chartId).attr("echartOption", JSON.stringify(option));
	}



}



function getHoverAndImageData(temp, description, dayOfWeek,sunriseTime,sunsetTime) {
	var image = "sunrise"
	const sunrise = new Date(sunriseTime);
    const sunset = new Date(sunsetTime);
    const currentDate = new Date();
	$('.weatherIcon').attr('title', "");
	var currentTime = currentTimeData();
	if (description.includes("rain")){
                $('.weatherIcon').find("img").attr('src', "images/rainy.png");
                $('.weatherIcon').find("img").css('width', "30px");
                var img=$('.weatherIcon').find("img").attr('src');
                }
        else if (currentDate >= sunrise && currentDate <= sunset) {
                // Daytime
                $('.weatherIcon').find("img").attr('src', "images/Sunrise.png");
                $('.weatherIcon').find("img").css('width', "30px");
                var img=$('.weatherIcon').find("img").attr('src');
        }
        
         else { 
                // Nighttime
                $('.weatherIcon').find("img").attr('src', "images/Sunset.png");
                $('.weatherIcon').find("img").css('width', "30px");
                var img=$('.weatherIcon').find("img").attr('src');
        }
	$("#tooltip-content").remove();
	$(".weatherIcon").append("<div id=\"tooltip-content\">"
		+ "<span>" + description + "</span>"
		+ "<div class=\"d-flex\" style=\"display:none\"><img src="+img+" style=\"width:50px;vertical-align: middle;\"><h3>" + temp + "<sup>°C|°F</sup></h3></div>"
		+ "<span>" + dayOfWeek + "</span>"
		+ "</div>");
	$("#tooltip-content").hide();
	$('.weatherIcon').mouseenter(function() {
		$("#tooltip-content").show();
		$("#tooltip-content").jqxPopover({
			offset: { left: 0, top:35 },
			position: 'right',
			width: 147,
			height: 90,
			autoClose: true,
			/*title: "Weather Details",*/
			/*showCloseButton: true,*/
			selector: $(".weatherIcon")
			
		});
		$("#tooltip-content").jqxPopover('open');
		$(".jqx-popover-arrow").css('top','30%','!important');
	}).mouseleave(function() {
		$("#tooltip-content").jqxPopover('close');
	});


}
function currentTimeData() {
	const now = new Date();

// Get the current hour
const currentHour = now.getHours();

// Determine AM or PM
const period = currentHour >= 12 ? 'PM' : 'AM';

// Convert to 12-hour format
const formattedHour = currentHour % 12 === 0 ? 12 : currentHour % 12;

// Create the formatted time string with :00 minutes
const formattedTime = `${formattedHour}:00 ${period}`;

console.log(formattedTime); 
return formattedTime;
}



function opentab(tabid) {
	var  tablinks = document.getElementsByClassName("buttonClass");
    var tabInnerContents = document.getElementsByClassName("passDataInfo");
	for (tablink of tablinks) {
		tablink.classList.remove("active-link");
	}
	for (tabInnerContent of tabInnerContents) {
		tabInnerContent.classList.remove("active-tab");
	}
	event.currentTarget.classList.add("active-link");
	document.getElementById(tabid).classList.add("active-tab");
}













var counter = 1;

function handlePlusInAreaPieces(event) {
	if(counter == 1){
  $("#plusbuttonInAreaPieces").hide();
  $("#minusbuttonInAreaPieces").show();}
  $(`#plusbuttonInAreaPieces_${counter-1}`).hide();
  $(`#minusbuttonInAreaPieces_${counter-1}`).show();
  
   var divtoAdded = `<div class="dummydivclass"><input placeholder="Lower Bound" type="number" id="AREAPIECESCHARTLOWERBOUND_${counter}" style="width: 50px">
    <input placeholder="Upper Bound" type="number" id="AREAPIECESCHARTUPPERBOUND_${counter}" style="width: 50px">
    <span style="width: 20px" id="plusbuttonInAreaPieces_${counter}" onclick="handlePlusInAreaPieces(event)">+</span>
    <span style="width: 20px" id="minusbuttonInAreaPieces_${counter}" style="display:none" onclick="handleMinusInAreaPieces(event)">-</span>
	</div>`;
  // Use jQuery's append to add the HTML string to the DOM
  $("#addingLowerAndUpperBound").append(divtoAdded);

  counter++; // Increment the counter after appending the new elements
}
function handleMinusInAreaPieces(event){
	var reqId = event.target.id;
	var reqCounter= reqId.split('_')[1];
	
	
	$(`#AREAPIECESCHARTLOWERBOUND_${reqCounter}`).remove();
	$(`#AREAPIECESCHARTUPPERBOUND_${reqCounter}`).remove();
	
	$(`#plusbuttonInAreaPieces_${reqCounter}`).remove();
  $(`#minusbuttonInAreaPieces_${reqCounter}`).remove();
	}
	
function getChartPropertiesEchart(bigChartType,count){	
	var chartProperties ;
	if(bigChartType === "GANTTCHART"){
		 chartProperties =[
			'CHARTTITLE','BARHEIGHT','COLORSAREA'
		];
	}
	else{
	 chartProperties = [
		'MODE', 'CHARTTITLE', 'LABELDATA', 'HOVERLABELDATA', 'LABELPOSITION', 
		'MARKERSHAPE', 'MARKERSIZE', 'HOVERBG', 'HOVERBORDERCOLOR', 'HOVERFONTCOLOR',
		'HOVERFONTFAMILY', 'HOVERFONTSIZE', 'COLORSMARKER', 'COLORSAREA', 'OPACITY',
		'LINECOLORS', 'LINEWIDTH', 'LINEDASH'
	  ];
	  }
	  
	  var properties = {};
	  
	  for (var i = 0; i < chartProperties.length; i++) {
		var property = chartProperties[i];
		if (['LINECOLORS', 'LINEWIDTH', 'LINEDASH'].includes(property)) {
				var value=$('#' + bigChartType + property).val();
			}
		else
			var value = $('#' + bigChartType + property+count).val();
	  
		if (property === 'HOVERFONTCOLOR' && (value === undefined || value === null || value === '')) {
		  value = 'Arial, sans-serif';
		}
	  
		if (property === 'HOVERFONTSIZE') {
		  value = (value !== undefined && value !== '' && value !== null) ? value : "10";
		}
	  
		if (property === 'MARKERSIZE' || property === 'LINEWIDTH') {
		  value = (value !== undefined && value !== '' && value !== null) ? value : "10";
		}
	  
		if (property === 'OPACITY') {
		  value = (value !== undefined && value !== '' && value !== null) ? value : '0.8';
		}
	  
		properties[bigChartType + property ] = value;
	  }
	  
return properties;


}	
function getBasicAreaChartTypeFromDashBoard(
	chartId,
	response,
	count,
	chartType
  ) {
	$('#'+chartId).remove();
	var basicAreaChartId = "homeChartParentDiv" + count;
	var basicAreaChartHomeId = "homeChartParentDiv" + count;
	$("#" + basicAreaChartHomeId).append(
	  "<div id='"+chartId+
		"' type='" +
		chartType +
		"' count='" +
		count +
		"' class='chartMain visionVisualChartBoxClass visionVisualChartBoxSelected'></div>"
	);
	$("#" + chartId).css("width", "auto", "!important");
	$("#" + chartId).css("height", "330px", "!important");
	$("#" + basicAreaChartId).css("width", "auto", "!important");
	$("#" + basicAreaChartId).css("height", "330px", "!important");
	$("#" + basicAreaChartHomeId).css("width", "auto", "!important");
	$("#" + basicAreaChartHomeId).css("height", "330px", "!important");
	$("#" + basicAreaChartHomeId).addClass("visionVisualChartBoxClass");
	var chartDom = document.getElementById(chartId);
	var myChart = echarts.init(chartDom);
	var chartDataObj = response["data"];
	var chartCOnfigObjStr = JSON.parse(response["chartCOnfigObjStr"]);
	var keys = Object.keys(chartDataObj);
	var xAxisArr;
	var yAxisArr;
	var noOfCol = keys.length;
	var tableName= response['tableName'];
	
	var colorsObj = response['colorsObj'];
	var colorsArr=[];
	if(colorsObj!= undefined && colorsObj!= null && colorsObj!= ''){
		colorsArr = JSON.parse(colorsObj)['clrs'];
	}
	else{
		colorsArr=['#1864ab', '#fd7e14', '#0b7285', '#ff6b6b'];
		}
	response['colorsObj']= colorsArr;
	for (var i = 0; i < noOfCol; i++) {
	  var key = keys[i];
	  var match = key.match(/(\d+)$/); // Match the numeric suffix at the end of the key
	  if (match) {
		yAxisArr=chartDataObj[key];
	  } else {
		xAxisArr = chartDataObj[key];
	  }
	}
  
	var chartEditoptions;
	var hoverlabeldata;
	var labeldata;
	var bigChartType = chartType.toUpperCase();
	if (
	  response["chartCOnfigObjStr"] != null &&
	  response["chartCOnfigObjStr"] != undefined
	) {
	  chartEditoptions = JSON.parse(response["chartCOnfigObjStr"]);
	  if (
		chartEditoptions[bigChartType + "HOVERBORDERCOLOR" + count] != null &&
		chartEditoptions[bigChartType + "HOVERBORDERCOLOR" + count] != ""
	  )
		hoverlabeldata =
		  chartEditoptions[bigChartType + "HOVERBORDERCOLOR" + count];
	  if (
		chartEditoptions[bigChartType + "LABELDATA" + count] != null &&
		chartEditoptions[bigChartType + "LABELDATA" + count] != ""
	  )
		labeldata = chartEditoptions[bigChartType + "LABELDATA" + count];
	}
  	
	var option;
	var rawData = yAxisArr;
	var total = rawData.reduce((sum, value) => sum + value, 0);
	var percentArr = rawData.map(
	  (value) => ((value / total) * 100).toFixed(2) + "%"
	);
  
	var mode = chartCOnfigObjStr[bigChartType + "MODE"];
	var title = chartCOnfigObjStr[bigChartType + "CHARTTITLE"];
	var labeldata = chartCOnfigObjStr[bigChartType + "LABELDATA"];
	var hoverlabeldata = chartCOnfigObjStr[bigChartType + "HOVERLABELDATA"];
	var labelPosition = chartCOnfigObjStr[bigChartType + "LABELPOSITION"];
	var markerShape = chartCOnfigObjStr[bigChartType + "MARKERSHAPE"];
	var symbolSize = chartCOnfigObjStr[bigChartType + "MARKERSIZE"] || "10";
  
	var hoverBGColor = chartCOnfigObjStr[bigChartType + "HOVERBG"];
	var hoverBorderColor = chartCOnfigObjStr[bigChartType + "HOVERBORDERCOLOR"];
	var hoverFontColor = chartCOnfigObjStr[bigChartType + "HOVERFONTCOLOR"];
	var hoverTextSize = chartCOnfigObjStr[bigChartType + "HOVERFONTSIZE"] || "10";
	var hoverTextFont =
	  chartCOnfigObjStr[bigChartType + "HOVERFONTCOLOR"] || "Arial, sans-serif";
  
	var markerColor = chartCOnfigObjStr[bigChartType + "COLORSMARKER"] || colorsArr;
	var markerSize = chartCOnfigObjStr[bigChartType + "MARKERSIZE"] || "10";
	var areaColor = chartCOnfigObjStr[bigChartType + "COLORSAREA"] || colorsArr;
	var areaopacity = chartCOnfigObjStr[bigChartType + "OPACITY"] || "0.8";
  
	var linecolor = chartCOnfigObjStr[bigChartType + "LINECOLORS"] || colorsArr;
	var lineWidth = chartCOnfigObjStr[bigChartType + "LINEWIDTH"] || "10";
  
	var linetype = chartCOnfigObjStr[bigChartType + "LINEDASH"];
  
	var isSmooth = false;
	if (linetype === "smooth") {
	  isSmooth = true;
	}
  
	option = {
	  title: {
		text: title,
	  },
	  xAxis: {
		type: "category",
		data: xAxisArr,
	  },
	  yAxis: {
		type: "value",
	  },
	  series: [
		{
		  smooth: 0.5,
		  data: yAxisArr,
		  type: "line",
		  symbol: markerShape,
		  lineStyle: {
			color: markerColor || colorsArr[0], // Line color in hexadecimal notation
			width: lineWidth, // Line width
			type: linetype, // Line type: 'solid', 'dashed', 'dotted', etc.
		  },
		  areaStyle: {
			color: areaColor || colorsArr[0],
			opacity: areaopacity, // Area opacity
		  },
		  itemStyle: {
			color: linecolor ||colorsArr[0], // Marker color in hexadecimal notation
			borderColor: "#168ab9", // Border color of the marker
			borderWidth: 2, // Border width of the marker
			borderType: "solid", // Border type of the marker
			opacity: 1, // Opacity of the marker
			shadowColor: "#168ab9", // Shadow color of the marker
			shadowBlur: 10, // Shadow blur of the marker
		  },
		  label: {
			position: labelPosition,
			formatter: function (params) {
			  var dataIndex = params.dataIndex;
			  if (labeldata != null && labeldata.trim() !== "") {
				if (labeldata === "x") {
				  return params.name;
				}
				if (labeldata === "y") {
				  return params.value.toString(); // Convert value to string
				}
				if (labeldata === "%") {
				  return " (" + percentArr[dataIndex] + ")";
				}
				if (labeldata === "x+y") {
				  return params.name + ": " + params.value.toString(); // Convert value to string
				}
				if (labeldata === "x+%") {
				  return params.name + " (" + percentArr[dataIndex] + ")";
				}
				if (labeldata === "y+%") {
				  return (
					params.value.toString() + " (" + percentArr[dataIndex] + ")"
				  ); // Convert value to string
				}
			  }
			},
		  },
		},
	  ],
	  tooltip: {
		trigger: "axis",
		axisPointer: {
		  type: "cross", // You can also use 'shadow', 'cross', etc. for different pointer types
		  label: {
			backgroundColor: hoverBGColor, // Set the background color of the tooltip label
			borderColor: hoverBorderColor, // Set the border color of the tooltip label
			borderWidth: 1, // Set the border width of the tooltip label
			borderRadius: 5, // Set the border radius of the tooltip label
			color: hoverFontColor, // Set the text color of the tooltip label
			fontFamily: hoverTextFont, // Set the font family of the tooltip label
			fontSize: hoverTextSize, // Set the font size of the tooltip label
			fontWeight: "bold", // Set the font weight of the tooltip label
		  },
		},
  
		formatter: function (params) {
		  var dataIndex = params[0].dataIndex;
		  if (hoverlabeldata != null && hoverlabeldata.trim() !== "") {
			if (hoverlabeldata === "x") {
			  return params[0].name;
			}
			if (hoverlabeldata === "y") {
			  return params[0].value.toString(); // Convert value to string
			}
			if (hoverlabeldata === "%") {
			  return " (" + percentArr[dataIndex] + ")";
			}
			if (hoverlabeldata === "x+y") {
			  return params[0].name + ": " + params[0].value.toString(); // Convert value to string
			}
			if (hoverlabeldata === "x+%") {
			  return params[0].name + " (" + percentArr[dataIndex] + ")";
			}
			if (hoverlabeldata === "y+%") {
			  return (
				params[0].value.toString() + " (" + percentArr[dataIndex] + ")"
			  ); // Convert value to string
			}
		  }
		},
	  },
	  
	};
	getToolBox(chartId, chartType, tableName,chartCOnfigObjStr,response,count,Object.keys(response.data).length) ;
	if (mode === "lines") markerSize = 0;
	if (labeldata !== "''") option.series[0].label.show = "true";
	option.series[0].symbolSize = markerSize;
	if (option && typeof option === "object") {
	  myChart.setOption(option);
	  $("#" + chartId).attr("echartOption", JSON.stringify(option));
	}
  }
function getStackedAreaChartFromDashBoard(chartId, response, count, chartType) {
	$('#'+chartId).remove();
	var basicAreaChartId = "homeChartParentDiv" + count;
	var basicAreaChartHomeId = "homeChartParentDiv" + count;
	$("#" + basicAreaChartHomeId).append(
	  "<div id='"+chartId+
		"' type='" +
		chartType +
		"' count='" +
		count +
		"' class='visionVisualChartBoxClass visionVisualChartBoxSelected'></div>"
	);
	$("#" + chartId).css("width", "auto", "!important");
	$("#" + chartId).css("height", "330px", "!important");
	$("#" + basicAreaChartId).css("width", "auto", "!important");
	$("#" + basicAreaChartId).css("height", "330px", "!important");
	$("#" + basicAreaChartHomeId).css("width", "auto", "!important");
	$("#" + basicAreaChartHomeId).css("height", "330px", "!important");
	$("#" + basicAreaChartHomeId).addClass("visionVisualChartBoxClass");
	var chartDom = document.getElementById(chartId);
	var myChart = echarts.init(chartDom);
	var chartDataObj = response["data"];
	var chartCOnfigObjStr = JSON.parse(response["chartCOnfigObjStr"]);
	var keys = Object.keys(chartDataObj);
	var xAxisArr;
	var yAxisArr = [];
	var series = [];
	var chartEditoptions;
	var hoverlabeldata;
	var labeldata;
	var bigChartType = chartType.toUpperCase();
	var tableName= response['tableName'];
	var colorsObj = response['colorsObj'];
	var colorsArr=[];
	if(colorsObj!= undefined && colorsObj!= null && colorsObj!= ''){
		colorsArr = JSON.parse(colorsObj);
	}
	else{
		colorsArr=['#1864ab', '#fd7e14', '#0b7285', '#ff6b6b'];
		response['colorsObj']= ['#1864ab', '#fd7e14', '#0b7285', '#ff6b6b'];
	}
	if (
	  response["chartCOnfigObjStr"] != null &&
	  response["chartCOnfigObjStr"] != undefined
	) {
	  chartEditoptions = JSON.parse(response["chartCOnfigObjStr"]);
	  if (
		chartEditoptions[bigChartType + "HOVERBORDERCOLOR" + count] != null &&
		chartEditoptions[bigChartType + "HOVERBORDERCOLOR" + count] != ""
	  )
		hoverlabeldata =
		  chartEditoptions[bigChartType + "HOVERBORDERCOLOR" + count];
	  if (
		chartEditoptions[bigChartType + "LABELDATA" + count] != null &&
		chartEditoptions[bigChartType + "LABELDATA" + count] != ""
	  )
		labeldata = chartEditoptions[bigChartType + "LABELDATA" + count];
	}
	var option;
  
	var option;
	var rawData = yAxisArr;
	var total = rawData.reduce((sum, value) => sum + value, 0);
	var percentArr = rawData.map(
	  (value) => ((value / total) * 100).toFixed(2) + "%"
	);
  
	var mode = chartCOnfigObjStr[bigChartType + "MODE"];
	var title = chartCOnfigObjStr[bigChartType + "CHARTTITLE"];
	var labelData = chartCOnfigObjStr[bigChartType + "LABELDATA"];
	var hoverlabeldata = chartCOnfigObjStr[bigChartType + "HOVERLABELDATA"];
	var labelPosition = chartCOnfigObjStr[bigChartType + "LABELPOSITION"];
	var markerShape = chartCOnfigObjStr[bigChartType + "MARKERSHAPE"];
	var symbolSize = chartCOnfigObjStr[bigChartType + "MARKERSIZE"] || "10";
  
	var hoverBGColor = chartCOnfigObjStr[bigChartType + "HOVERBG"];
	var hoverBorderColor = chartCOnfigObjStr[bigChartType + "HOVERBORDERCOLOR"];
	var hoverFontColor = chartCOnfigObjStr[bigChartType + "HOVERFONTCOLOR"];
	var hoverTextSize = chartCOnfigObjStr[bigChartType + "HOVERFONTSIZE"] || "10";
	var hoverTextFont =
	  chartCOnfigObjStr[bigChartType + "HOVERFONTCOLOR"] || "Arial, sans-serif";
  
	var markerColorArr =
	  chartCOnfigObjStr[bigChartType + "COLORSMARKER"].split(",") || colorsArr;
	  markerColorArr= markerColorArr.reverse();
	var markerSize = chartCOnfigObjStr[bigChartType + "MARKERSIZE"] || "10";
	var areaColorArr = chartCOnfigObjStr[bigChartType + "COLORSAREA"].split(",") || colorsArr;
	areaColorArr= areaColorArr.reverse();
	var areaopacity = chartCOnfigObjStr[bigChartType + "OPACITY"] || "0.8";
  
	var linecolorArr = chartCOnfigObjStr[bigChartType + "LINECOLORS"].split(",") || colorsArr;
	linecolorArr = linecolorArr.reverse();
	var lineWidth = chartCOnfigObjStr[bigChartType + "LINEWIDTH"] || "10";
  
	var linetype = chartCOnfigObjStr[bigChartType + "LINEDASH"];
  
	var isSmooth = false;
	if (linetype === "smooth") {
	  isSmooth = true;
	}
	if (mode === "lines") markerSize = 0;
  
	var noOfCol = keys.length;
	var percentArr = [];
	var dataMap = {};
	var seriesData = [];
	for (var i = 0; i < noOfCol; i++) {
	  var key = keys[i];
	  var match = key.match(/(\d+)$/); // Match the numeric suffix at the end of the key
	  if (match) {
		var suffix = match[1];
		seriesData[suffix] = chartDataObj[key];
	  } else {
		xAxisArr = chartDataObj[key];
	  }
	}
	var rawData = seriesData;
	for (var i = 0; i < noOfCol - 1; i++) {
	  var total = rawData[i].reduce((sum, value) => sum + value, 0);
	  percentArr[i] = rawData[i].map(
		(value) => ((value / total) * 100).toFixed(2) + "%"
	  );
  
	  var seriesObj = {
		smooth: 0.5,
		name: keys[i],
		type: "line",
		stack: "stacked",
		data: seriesData[i],
		symbolSize: markerSize,
		symbol: markerShape,
		//if(labeldata !== "''")
		//	                label:{show:'true'},
		areaStyle: {
		  color: new echarts.graphic.LinearGradient( // Custom gradient for area color
			0,
			0,
			0,
			1, // Define the direction of the gradient (top to bottom in this case)
			[
			  { offset: 0, color: areaColorArr[i % areaColorArr.length] || colorsArr[i % colorsArr.length]}, // Color at 0% position
			  //{ offset: 1, color: '#36a0d9' } // Color at 100% position
			]
		  ),
		  opacity: areaopacity, // Area opacity
		},
		lineStyle: {
		  color: linecolorArr[i % linecolorArr.length] || colorsArr[i % colorsArr.length],
		  width: lineWidth,
		  type: linetype,
		},
		itemStyle: {
		  color: markerColorArr[i % markerColorArr.length] || colorsArr[i % colorsArr.length] , // Marker color in hexadecimal notation
		  borderColor: "#168ab9", // Border color of the marker
		  borderWidth: 2, // Border width of the marker
		  borderType: "solid", // Border type of the marker
		  opacity: 1, // Opacity of the marker
		  shadowColor: "#168ab9", // Shadow color of the marker
		  shadowBlur: 10, // Shadow blur of the marker
		},
		label: {
		  show: "true",
		  position: labelPosition,
		  formatter: function (params) {
			var dataIndex = params.dataIndex;
			var ind = 0;
			if (labeldata != null && labeldata.trim() !== "") {
			  if (labeldata === "x") {
				return params.name;
			  }
			  if (labeldata === "y") {
				return params.value.toString(); // Convert value to string
			  }
			  if (labeldata === "%") {
				return " (" + percentArr[ind][dataIndex] + ")";
			  }
			  if (labeldata === "x+y") {
				return params.name + ": " + params.value.toString(); // Convert value to string
			  }
			  if (labeldata === "x+%") {
				return params.name + " (" + percentArr[ind][dataIndex] + ")";
			  }
			  if (labeldata === "y+%") {
				return (
				  params.value.toString() +
				  " (" +
				  percentArr[ind][dataIndex] +
				  ")"
				); // Convert value to string
			  }
			  ind++;
			}
		  },
		},
	  };
	  series.push(seriesObj);
	}
  
	option = {
	  title: {
		text: title,
	  },
	  tooltip: {
		trigger: "axis",
		axisPointer: {
		  type: "cross", // You can also use 'shadow', 'cross', etc. for different pointer types
		  label: {
			backgroundColor: hoverBGColor, // Set the background color of the tooltip label
			borderColor: hoverBorderColor, // Set the border color of the tooltip label
			borderWidth: 1, // Set the border width of the tooltip label
			borderRadius: 5, // Set the border radius of the tooltip label
			color: hoverFontColor, // Set the text color of the tooltip label
			fontFamily: hoverTextFont, // Set the font family of the tooltip label
			fontSize: hoverTextSize, // Set the font size of the tooltip label
			fontWeight: "bold", // Set the font weight of the tooltip label
		  },
		},
  
		formatter: function (params) {
		  var dataIndex = params[0].dataIndex;
		  var ind = 0;
		  if (hoverlabeldata != null && hoverlabeldata.trim() !== "") {
			if (hoverlabeldata === "x") {
			  return params[0].name;
			}
			if (hoverlabeldata === "y") {
			  return params[0].value.toString(); // Convert value to string
			}
			if (hoverlabeldata === "%") {
			  return " (" + percentArr[ind][dataIndex] + ")";
			}
			if (hoverlabeldata === "x+y") {
			  return params[0].name + ": " + params[0].value.toString(); // Convert value to string
			}
			if (hoverlabeldata === "x+%") {
			  return params[0].name + " (" + percentArr[ind][dataIndex] + ")";
			}
			if (hoverlabeldata === "y+%") {
			  return (
				params[0].value.toString() +
				" (" +
				percentArr[ind][dataIndex] +
				")"
			  ); // Convert value to string
			}
			ind++;
		  }
		},
	  },
	  legend: {
		data: xAxisArr,
	  },
	  toolbox: {
		feature: {
		  saveAsImage: {},
		},
	  },
	  grid: {
		left: "3%",
		right: "4%",
		bottom: "3%",
		containLabel: true,
	  },
	  xAxis: [
		{
		  type: "category",
		  boundaryGap: false,
		  data: xAxisArr,
		},
	  ],
	  yAxis: [
		{
		  type: "value",
		},
	  ],
	  series: series,
	
	};
	getToolBox(chartId, chartType, tableName,chartCOnfigObjStr,response,count,Object.keys(response.data).length);
	if (option && typeof option === "object") {
	  myChart.setOption(option);
	  $("#" + chartId).attr("echartOption", JSON.stringify(option));
	}
  }
  
function getGradientStackedAreaChartFromDashBoard(
	chartId,
	response,
	count,
	chartType
  ) {
	chartType = "GradStackAreaChart";
	$('#'+chartId).remove();
	var basicAreaChartId = "homeChartParentDiv" + count;
	var basicAreaChartHomeId = "homeChartParentDiv" + count;
	$("#" + basicAreaChartHomeId).append(
	  "<div id='"+chartId+
		"' type='" +
		chartType +
		"' count='" +
		count +
		"' class='visionVisualChartBoxClass visionVisualChartBoxSelected'></div>"
	);
	$("#" + chartId).css("width", "auto", "!important");
	$("#" + chartId).css("height", "330px", "!important");
	$("#" + basicAreaChartId).css("width", "auto", "!important");
	$("#" + basicAreaChartId).css("height", "330px", "!important");
	$("#" + basicAreaChartHomeId).css("width", "auto", "!important");
	$("#" + basicAreaChartHomeId).css("height", "330px", "!important");
	$("#" + basicAreaChartHomeId).addClass("visionVisualChartBoxClass");
	var chartDom = document.getElementById(chartId);
	var myChart = echarts.init(chartDom);
	var chartDataObj = response["data"];
	var keys = Object.keys(chartDataObj);
	var chartCOnfigObjStr = JSON.parse(response["chartCOnfigObjStr"]);
	var xAxisArr;
	var yAxisArr = [];
	var series = [];
	var chartEditoptions;
	var hoverlabeldata;
	var labeldata;
	var bigChartType = chartType.toUpperCase();
	var tableName= response['tableName'];
	var colorsObj = response['colorsObj'];
	var colorsArr=[];
	if(colorsObj!= undefined && colorsObj!= null && colorsObj!= ''){
		colorsArr = JSON.parse(colorsObj);
	}
	else{
		colorsArr=['#1864ab', '#fd7e14', '#0b7285', '#ff6b6b'];
		response['colorsObj']= ['#1864ab', '#fd7e14', '#0b7285', '#ff6b6b'];
	}
	if (
	  response["chartCOnfigObjStr"] != null &&
	  response["chartCOnfigObjStr"] != undefined
	) {
	  chartEditoptions = JSON.parse(response["chartCOnfigObjStr"]);
	  if (
		chartEditoptions[bigChartType + "HOVERBORDERCOLOR" + count] != null &&
		chartEditoptions[bigChartType + "HOVERBORDERCOLOR" + count] != ""
	  )
		hoverlabeldata =
		  chartEditoptions[bigChartType + "HOVERBORDERCOLOR" + count];
	  if (
		chartEditoptions[bigChartType + "LABELDATA" + count] != null &&
		chartEditoptions[bigChartType + "LABELDATA" + count] != ""
	  )
		labeldata = chartEditoptions[bigChartType + "LABELDATA" + count];
	}
	var rawData = yAxisArr;
	var total = rawData.reduce((sum, value) => sum + value, 0);
	var percentArr = rawData.map(
	  (value) => ((value / total) * 100).toFixed(2) + "%"
	);
  
	var option;
	var mode = chartCOnfigObjStr[bigChartType + "MODE"];
	var title = chartCOnfigObjStr[bigChartType + "CHARTTITLE"];
	var labelData = chartCOnfigObjStr[bigChartType + "LABELDATA"];
	var hoverlabeldata = chartCOnfigObjStr[bigChartType + "HOVERLABELDATA"];
	var labelPosition = chartCOnfigObjStr[bigChartType + "LABELPOSITION"];
	var markerShape = chartCOnfigObjStr[bigChartType + "MARKERSHAPE"];
	var symbolSize = chartCOnfigObjStr[bigChartType + "MARKERSIZE"] || "10";
  
	var hoverBGColor = chartCOnfigObjStr[bigChartType + "HOVERBG"];
	var hoverBorderColor = chartCOnfigObjStr[bigChartType + "HOVERBORDERCOLOR"];
	var hoverFontColor = chartCOnfigObjStr[bigChartType + "HOVERFONTCOLOR"];
	var hoverTextSize = chartCOnfigObjStr[bigChartType + "HOVERFONTSIZE"] || "10";
	var hoverTextFont =
	  chartCOnfigObjStr[bigChartType + "HOVERFONTCOLOR"] || "Arial, sans-serif";
  
	var markerColorArr =
	  chartCOnfigObjStr[bigChartType + "COLORSMARKER"].split(",") || colorsArr;
	  markerColorArr = markerColorArr.reverse();
	var markerSize = chartCOnfigObjStr[bigChartType + "MARKERSIZE"] || "10";
	var areaColorArr = chartCOnfigObjStr[bigChartType + "COLORSAREA"].split(",") || colorsArr;
	areaColorArr = areaColorArr.reverse();
	var areaopacity = chartCOnfigObjStr[bigChartType + "OPACITY"] || "0.8";
  
	var linecolorArr = chartCOnfigObjStr[bigChartType + "LINECOLORS"].split(",") || colorsArr;
	linecolorArr = linecolorArr.reverse();
	var lineWidth = chartCOnfigObjStr[bigChartType + "LINEWIDTH"] || "10";
  
	var linetype = chartCOnfigObjStr[bigChartType + "LINEDASH"];
	var isSmooth = false;
	if (linetype === "smooth") {
	  isSmooth = true;
	}
	if (mode === "lines") markerSize = 0;
  
	var noOfCol = keys.length;
	var percentArr = [];
	var dataMap = {};
	var seriesData = [];
  
	var color = ["#80FFA5", "#00DDFF", "#37A2FF", "#FF0087", "#FFBF00"];
	for (var i = 0; i < noOfCol; i++) {
	  var key = keys[i];
	  var match = key.match(/(\d+)$/); // Match the numeric suffix at the end of the key
	  if (match) {
		var suffix = match[1];
		seriesData[suffix] = chartDataObj[key];
	  } else {
		xAxisArr = chartDataObj[key];
	  }
	}
	var rawData = seriesData;
	for (var i = 0; i < noOfCol - 1; i++) {
	  var total = rawData[i].reduce((sum, value) => sum + value, 0);
	  percentArr[i] = rawData[i].map(
		(value) => ((value / total) * 100).toFixed(2) + "%"
	  );
  
	  var seriesObj = {
		smooth: 0.5,
		name: keys[i],
		type: "line",
		stack: "stacked",
		data: seriesData[i],
		symbolSize: markerSize,
		symbol: markerShape,
		//if(labeldata !== "''")
		//	                label:{show:'true'},
		areaStyle: {
		  color: new echarts.graphic.LinearGradient(0, 0, 0, 1, [
			{
			  offset: 0,
			  color: color[i % color.length] || colorsArr[i % colorsArr.length],
			},
			{
			  offset: 1,
			  color: color[(i + 1) % color.length] || colorsArr[(i+1) % colorsArr.length],
			},
		  ]),
		},
		lineStyle: {
		  color: linecolorArr[i % linecolorArr.length] || colorsArr[i % colorsArr.length],
		  width: lineWidth,
		  type: linetype,
		},
		itemStyle: {
		  color: markerColorArr[i % markerColorArr.length] || colorsArr[i % colorsArr.length], // Marker color in hexadecimal notation
		  borderColor: "#168ab9", // Border color of the marker
		  borderWidth: 2, // Border width of the marker
		  borderType: "solid", // Border type of the marker
		  opacity: 1, // Opacity of the marker
		  shadowColor: "#168ab9", // Shadow color of the marker
		  shadowBlur: 10, // Shadow blur of the marker
		},
		label: {
		  show: "true",
		  position: labelPosition,
		  formatter: function (params) {
			var dataIndex = params.dataIndex;
			var ind = 0;
			if (labeldata != null && labeldata.trim() !== "") {
			  if (labeldata === "x") {
				return params.name;
			  }
			  if (labeldata === "y") {
				return params.value.toString(); // Convert value to string
			  }
			  if (labeldata === "%") {
				return " (" + percentArr[ind][dataIndex] + ")";
			  }
			  if (labeldata === "x+y") {
				return params.name + ": " + params.value.toString(); // Convert value to string
			  }
			  if (labeldata === "x+%") {
				return params.name + " (" + percentArr[ind][dataIndex] + ")";
			  }
			  if (labeldata === "y+%") {
				return (
				  params.value.toString() +
				  " (" +
				  percentArr[ind][dataIndex] +
				  ")"
				); // Convert value to string
			  }
			  ind++;
			}
		  },
		},
	  };
	  series.push(seriesObj);
	}
  
	option = {
	  color: ["#80FFA5", "#00DDFF", "#37A2FF", "#FF0087", "#FFBF00"],
	  title: {
		text: title,
	  },
	  tooltip: {
		trigger: "axis",
		axisPointer: {
		  type: "cross", // You can also use 'shadow', 'cross', etc. for different pointer types
		  label: {
			backgroundColor: hoverBGColor, // Set the background color of the tooltip label
			borderColor: hoverBorderColor, // Set the border color of the tooltip label
			borderWidth: 1, // Set the border width of the tooltip label
			borderRadius: 5, // Set the border radius of the tooltip label
			color: hoverFontColor, // Set the text color of the tooltip label
			fontFamily: hoverTextFont, // Set the font family of the tooltip label
			fontSize: hoverTextSize, // Set the font size of the tooltip label
			fontWeight: "bold", // Set the font weight of the tooltip label
		  },
		},
  
		formatter: function (params) {
		  var dataIndex = params[0].dataIndex;
		  var ind = 0;
		  if (hoverlabeldata != null && hoverlabeldata.trim() !== "") {
			if (hoverlabeldata === "x") {
			  return params[0].name;
			}
			if (hoverlabeldata === "y") {
			  return params[0].value.toString(); // Convert value to string
			}
			if (hoverlabeldata === "%") {
			  return " (" + percentArr[ind][dataIndex] + ")";
			}
			if (hoverlabeldata === "x+y") {
			  return params[0].name + ": " + params[0].value.toString(); // Convert value to string
			}
			if (hoverlabeldata === "x+%") {
			  return params[0].name + " (" + percentArr[ind][dataIndex] + ")";
			}
			if (hoverlabeldata === "y+%") {
			  return (
				params[0].value.toString() +
				" (" +
				percentArr[ind][dataIndex] +
				")"
			  ); // Convert value to string
			}
			ind++;
		  }
		},
	  },
	  legend: {
		data: xAxisArr,
	  },
	  toolbox: {
		feature: {
		  saveAsImage: {},
		},
	  },
	  grid: {
		left: "3%",
		right: "4%",
		bottom: "3%",
		containLabel: true,
	  },
	  xAxis: [
		{
		  type: "category",
		  boundaryGap: false,
		  data: xAxisArr,
		},
	  ],
	  yAxis: [
		{
		  type: "value",
		},
	  ],
	  series: series,
	
	};
	getToolBox(chartId, chartType, tableName,chartCOnfigObjStr,response,count,Object.keys(response.data).length);
	if (option && typeof option === "object") {
	  myChart.setOption(option);
	  $("#" + chartId).attr("echartOption", JSON.stringify(option));
	}
  }


function getAreaPiecesChartFromDashBoard(chartId, response, count, chartType) {
	count = $('#'+chartId+'_count').val();
	$('#'+chartId).remove();
	var basicAreaChartId = "homeChartParentDiv" + count;
	var basicAreaChartHomeId = "homeChartParentDiv" + count;
	$("#" + basicAreaChartHomeId).append(
	  "<div id='"+chartId+
		"' type='" +
		chartType +
		"' count='" +
		count +
		"' class='visionVisualChartBoxClass visionVisualChartBoxSelected'></div>"
	);
	$("#" + chartId).css("width", "auto", "!important");
	$("#" + chartId).css("height", "330px", "!important");
	$("#" + basicAreaChartId).css("width", "auto", "!important");
	$("#" + basicAreaChartId).css("height", "330px", "!important");
	$("#" + basicAreaChartHomeId).css("width", "auto", "!important");
	$("#" + basicAreaChartHomeId).css("height", "330px", "!important");
	$("#" + basicAreaChartHomeId).addClass("visionVisualChartBoxClass");
	var chartDom = document.getElementById(chartId);
	var myChart = echarts.init(chartDom);
	var chartDataObj = response["data"];
	var keys = Object.keys(chartDataObj);
	var chartCOnfigObjStr = JSON.parse(response["chartCOnfigObjStr"]);
	var xAxisArr;
	var yAxisArr;
	var noOfCol = keys.length;
	var tableName= response['tableName'];
	var colorsObj = response['colorsObj'];
	var colorsArr=[];
	if(colorsObj!= undefined && colorsObj!= null && colorsObj!= ''){
		colorsArr = JSON.parse(colorsObj);
	}
	else{
		colorsArr=['#1864ab', '#fd7e14', '#0b7285', '#ff6b6b'];
		response['colorsObj']= ['#1864ab', '#fd7e14', '#0b7285', '#ff6b6b'];
	}
	for (var i = 0; i < noOfCol; i++) {
	  var key = keys[i];
	  var match = key.match(/(\d+)$/); // Match the numeric suffix at the end of the key
	  if (match) {
		yAxisArr = chartDataObj[key];
	  } else {
		xAxisArr = chartDataObj[key];
	  }
	}
  
	var chartEditoptions;
	var hoverlabeldata;
	var labeldata;
	var bigChartType = chartType.toUpperCase();
	if (
	  response["chartCOnfigObjStr"] != null &&
	  response["chartCOnfigObjStr"] != undefined
	) {
	  chartEditoptions = JSON.parse(response["chartCOnfigObjStr"]);
	  if (
		chartEditoptions[bigChartType + "HOVERBORDERCOLOR" + count] != null &&
		chartEditoptions[bigChartType + "HOVERBORDERCOLOR" + count] != ""
	  )
		hoverlabeldata =
		  chartEditoptions[bigChartType + "HOVERBORDERCOLOR" + count];
	  if (
		chartEditoptions[bigChartType + "LABELDATA" + count] != null &&
		chartEditoptions[bigChartType + "LABELDATA" + count] != ""
	  )
		labeldata = chartEditoptions[bigChartType + "LABELDATA" + count];
	}
  
	var rawData = yAxisArr;
	var total = rawData.reduce((sum, value) => sum + value, 0);
	var percentArr = rawData.map(
	  (value) => ((value / total) * 100).toFixed(2) + "%"
	);
  
	var mode = chartCOnfigObjStr[bigChartType + "MODE"];
	var title = chartCOnfigObjStr[bigChartType + "CHARTTITLE"];
	var labeldata = chartCOnfigObjStr[bigChartType + "LABELDATA"];
	var hoverlabeldata = chartCOnfigObjStr[bigChartType + "HOVERLABELDATA"];
	var labelPosition = chartCOnfigObjStr[bigChartType + "LABELPOSITION"];
	var markerShape = chartCOnfigObjStr[bigChartType + "MARKERSHAPE"];
	var symbolSize = chartCOnfigObjStr[bigChartType + "MARKERSIZE"] || "10";
  
	var hoverBGColor = chartCOnfigObjStr[bigChartType + "HOVERBG"];
	var hoverBorderColor = chartCOnfigObjStr[bigChartType + "HOVERBORDERCOLOR"];
	var hoverFontColor = chartCOnfigObjStr[bigChartType + "HOVERFONTCOLOR"];
	var hoverTextSize = chartCOnfigObjStr[bigChartType + "HOVERFONTSIZE"] || "10";
	var hoverTextFont =
	  chartCOnfigObjStr[bigChartType + "HOVERFONTCOLOR"] || "Arial, sans-serif";
  
	var markerColor = chartCOnfigObjStr[bigChartType + "COLORSMARKER"].split(",") || colorsArr;
	markerColor = markerColor.reverse();
	var markerSize = chartCOnfigObjStr[bigChartType + "MARKERSIZE"] || "10";
	var areaColor = chartCOnfigObjStr[bigChartType + "COLORSAREA"].split(",") || colorsArr; 
	areaColor = areaColor.reverse();
	var areaopacity = chartCOnfigObjStr[bigChartType + "OPACITY"] || "0.8";
  
	var linecolor = chartCOnfigObjStr[bigChartType + "LINECOLORS"].split(",") || colorsArr;
	linecolor = linecolor.reverse();
	var lineWidth = chartCOnfigObjStr[bigChartType + "LINEWIDTH"] || "10";
  
	var linetype = chartCOnfigObjStr[bigChartType + "LINEDASH"];
  
	var isSmooth = false;
	if (linetype === "smooth") {
	  isSmooth = true;
	}
	
  
	option = {
	  title: {
		text: title,
	  },
	  xAxis: {
		type: "category",
		data: xAxisArr,
	  },
	  yAxis: {
		type: "value",
	  },
	  visualMap: {
		type: "piecewise",
		show: false,
		dimension: 0,
		seriesIndex: 0,
		pieces: [
		  //		{
		  //			gt: 1,
		  //			lt: 3,
		  //			color: 'rgba(0, 0, 180, 0.4)'
		  //		},
		  //		{
		  //			gt: 5,
		  //			lt: 7,
		  //			color: 'rgba(0, 0, 180, 0.4)'
		  //		}
		],
	  },
	  series: [
		{
		  smooth: 0.5,
		  data: yAxisArr,
		  type: "line",
		  symbol: markerShape,
		  markLine: {
			symbol: ["none", "none"],
			label: { show: false },
			//data: [{ xAxis: 1 }, { xAxis: 3 }, { xAxis: 5 }, { xAxis: 7 }]
		  },
  
		  lineStyle: {
			color: linecolor[0] || colorsArr[0], // Line color in hexadecimal notation
			width: lineWidth, // Line width
			type: linetype, // Line type: 'solid', 'dashed', 'dotted', etc.
		  },
		  areaStyle: {
			    //    color: new echarts.graphic.LinearGradient( // Custom gradient for area color
			    //      0, 0, 0, 1, // Define the direction of the gradient (top to bottom in this case)
			    //      [
			    //        { offset: 0, color: areaColor[0] || colorsArr[0] }, // Color at 0% position
			    //        //{ offset: 1, color: '#36a0d9' } // Color at 100% position
			    //      ]
			    //    ),
			    //    opacity: areaopacity // Area opacity
		  },
		  itemStyle: { 
			color: markerColor[0] || colorsArr[0], // Marker color in hexadecimal notation
			borderColor: "#168ab9", // Border color of the marker
			borderWidth: 2, // Border width of the marker
			borderType: "solid", // Border type of the marker
			opacity: 1, // Opacity of the marker
			shadowColor: "#168ab9", // Shadow color of the marker
			shadowBlur: 10, // Shadow blur of the marker
		  },
		  label: {
			position: labelPosition,
			formatter: function (params) {
			  var dataIndex = params.dataIndex;
			  if (labeldata != null && labeldata.trim() !== "") {
				if (labeldata === "x") {
				  return params.name;
				}
				if (labeldata === "y") {
				  return params.value.toString(); // Convert value to string
				}
				if (labeldata === "%") {
				  return " (" + percentArr[dataIndex] + ")";
				}
				if (labeldata === "x+y") {
				  return params.name + ": " + params.value.toString(); // Convert value to string
				}
				if (labeldata === "x+%") {
				  return params.name + " (" + percentArr[dataIndex] + ")";
				}
				if (labeldata === "y+%") {
				  return (
					params.value.toString() + " (" + percentArr[dataIndex] + ")"
				  ); // Convert value to string
				}
			  }
			},
		  },
		},
	  ],
	  tooltip: {
		trigger: "axis",
		axisPointer: {
		  type: "cross", // You can also use 'shadow', 'cross', etc. for different pointer types
		  label: {
			backgroundColor: hoverBGColor, // Set the background color of the tooltip label
			borderColor: hoverBorderColor, // Set the border color of the tooltip label
			borderWidth: 1, // Set the border width of the tooltip label
			borderRadius: 5, // Set the border radius of the tooltip label
			color: hoverFontColor, // Set the text color of the tooltip label
			fontFamily: hoverTextFont, // Set the font family of the tooltip label
			fontSize: hoverTextSize, // Set the font size of the tooltip label
			fontWeight: "bold", // Set the font weight of the tooltip label
		  },
		},
  
		formatter: function (params) {
		  var dataIndex = params[0].dataIndex;
		  if (hoverlabeldata != null && hoverlabeldata.trim() !== "") {
			if (hoverlabeldata === "x") {
			  return params[0].name;
			}
			if (hoverlabeldata === "y") {
			  return params[0].value.toString(); // Convert value to string
			}
			if (hoverlabeldata === "%") {
			  return " (" + percentArr[dataIndex] + ")";
			}
			if (hoverlabeldata === "x+y") {
			  return params[0].name + ": " + params[0].value.toString(); // Convert value to string
			}
			if (hoverlabeldata === "x+%") {
			  return params[0].name + " (" + percentArr[dataIndex] + ")";
			}
			if (hoverlabeldata === "y+%") {
			  return (
				params[0].value.toString() + " (" + percentArr[dataIndex] + ")"
			  ); // Convert value to string
			}
		  }
		},
	  },
	
	};
  
  
	var piecesMarker = [];
	for (var i = 0; i < counter; i++) {
	  var lowerBound = $(`#AREAPIECESCHARTLOWERBOUND_${i}`).val();
	  var upperBound = $(`#AREAPIECESCHARTUPPERBOUND_${i}`).val();
	  if (
		(lowerBound != null &&
		  lowerBound != undefined &&
		  lowerBound != "" &&
		  upperBound != null) ||
		(upperBound != undefined && upperBound != "")
	  ) {
		var pieceObject = {};
		var markerObject = {};
		pieceObject["gt"] = parseInt(lowerBound);
		pieceObject["lt"] = parseInt(upperBound);
		piecesMarker.push(parseInt(lowerBound));
		piecesMarker.push(parseInt(upperBound));
		pieceObject["color"] = "rgba(0, 0, 180, 0.4)";
		option.visualMap.pieces.push(pieceObject);
	  }
	  else{
												if(xAxisArr.length > 4){
												var pieceObject = {};
												var markerObject = {};
												var xAxisArrLen = xAxisArr.length;
												var range1 = Math.floor(xAxisArrLen/3);
												var range2= xAxisArrLen - range1;
												piecesMarker.push(parseInt(0));
												piecesMarker.push(parseInt(range1));
												piecesMarker.push(parseInt(range2));
												piecesMarker.push(parseInt(xAxisArrLen-1));
												pieceObject[0]=	{
														  gt: 0,
														  lt: range1,
														  color: areaColor
													  },
												pieceObject[1]={
														  gt: range2,
														  lt: xAxisArrLen-1,
														  color: areaColor
												}
												option.visualMap.pieces.push(pieceObject[0]);
												
												option.visualMap.pieces.push(pieceObject[1]);
												}
												else 
												{
													for(var i=0;i<xAxisArr.length;i++)
													piecesMarker.push(i);
												}
												
											}
	}
	var markLine = {
	  symbol: ["none", "none"],
	  label: { show: false },
	  data: piecesMarker.map((value) => ({ xAxis: value })),
	};
	getToolBox(chartId, chartType, tableName, chartCOnfigObjStr,response,count,Object.keys(response.data).length);
	option.series[0].markLine = markLine;
	if (mode === "lines") markerSize = 0;
	if (labeldata !== "''") option.series[0].label.show = "true";
	option.series[0].symbolSize = markerSize;
	if (option && typeof option === "object") {
	  myChart.setOption(option);
	  $("#" + chartId).attr("echartOption", JSON.stringify(option));
	}
  }
  
  
  function saveChartAsImage(chartId,chartType){
	
    if(chartType =='geochart' || chartType == 'ganttChart'){
	var chartContainer = document.getElementById(chartId);
               var chartSVG = chartContainer.querySelector('svg');
                var canvas = document.createElement('canvas');
                var context = canvas.getContext('2d');

                canvas.width = chartSVG.clientWidth;
                canvas.height = chartSVG.clientHeight;

                var image = new Image();
                image.src = 'data:image/svg+xml;base64,' + btoa(new XMLSerializer().serializeToString(chartSVG));

                image.onload = function() {
                    context.drawImage(image, 0, 0);

                    // Add a footer to the canvas
                    context.font = '14px Arial';
                    context.fillStyle = 'black';

                    // Trigger the download
                    var link = document.createElement('a');
                    link.download = 'geo_chart.png';
                    link.href = canvas.toDataURL('image/png');
                    link.click();
                };

    }
    else{
	var myChart = echarts.init(document.getElementById(chartId));
	var dataURL = myChart.getDataURL({
        type: 'png', // Image format
        pixelRatio: 2, // Resolution
        backgroundColor: 'white' // Background color
    });

    var link = document.createElement('a');
    link.href = dataURL;
    link.download = 'myChart.png'; // Filename
    link.click();
    }
  }

/*function saveChartAsImage(){
	myChart.exportToImage({
		type: 'png', 
		name: 'myChart',
		pixelRatio: 5
	  });
  }*/
function changeEchartColors(chartId,chartType,colrsObj){
	var defaultColors;
	
	var defaultValuesArr ;
	var options = $("#" + chartId).attr("echartOption");
	if (colrsObj != null && colrsObj != '' && colrsObj != undefined) {
		defaultColors = colrsObj;
		defaultValuesArr = defaultColors.split(",");
	}
	else{
		defaultValuesArr=colorsArr=['#1864ab', '#fd7e14', '#0b7285', '#ff6b6b'];
	}
	var offset = "";
	var parrantId = "";
	var position = "";
	if (chartId != null && chartId != undefined) {
		var selector = $("#" + chartId+'_toolBox').find('.modebar-btn[title="Change Colors"]').closest('div');
		var select = $(selector['prevObject'][7]);
		position = "left";
		parrantId = selector;
	} else {
		parrantId = $("#imageid");
		position = "";
		offset = { left: 290, top: 60 }
	}
	var  defaultClrStr = "";
			if (defaultValuesArr !== null && !defaultValuesArr!= undefined && defaultValuesArr.length > 0) {
				for (var c = 0; c < defaultValuesArr.length; c++) {
					defaultClrStr += "<span class='themeBtns' data-color='" + defaultValuesArr[c]
							+ "' style='background-color: " + defaultValuesArr[c] + ";'></span>";
					if (c == 5) {
						break;
					}
				}
			}
			var result="";
			result += " <div class='colorPallatteMainDiv'>";
			if (chartId != null && chartId!= " ") {
				result += "<div class='themeBtnsContainer'>"
						+ " <div class='colorblockTitle'><h5>Default Color</h5></div>"
						+ "<div class='colorPalletteSection'>"
						+ "<div class='themeBtnsGroup' onclick=saveEchartColors(event,'" + chartId +"','"+ chartType
						+ "') title='Click to Save Color' onmouseover=\"updatecolorOnGraph(event,'" + chartId +"','"+ chartType+"')\">"
						+ defaultClrStr + "</div>" + "  </div>" + " </div>";
			}
			result += "<div class='themeBtnsContainer'>" + " <div class='colorblockTitle'><h5>Palette</h5></div>"
					+ "<div class='colorPalletteSection'>"
					+ "<div class='themeBtnsGroup' onclick=saveEchartColors(event,'" + chartId +"','"+ chartType
					+ "') title='Click to Save Color' onmouseover=\"updatecolorOnGraph(event,'" + chartId +"','"+ chartType+"')\">"
					+ "<div>"
					+ "<span class='themeBtns' data-color='#696969' style='background-color: #696969;'></span>"
					+ "  <span class='themeBtns' data-color='#888888' style='background-color: #888888;'></span>"
					+ " <span class='themeBtns' data-color='#A0A0A0' style='background-color: #A0A0A0;'></span>"
					+ "</div>" + "<div>"
					+ "  <span class='themeBtns' data-color='#A8A8A8' style='background-color: #A8A8A8;'></span>"
					+ "  <span class='themeBtns' data-color='#B8B8B8' style='background-color: #B8B8B8;'></span>"
					+ "  <span class='themeBtns' data-color='#C0C0C0' style='background-color: #C0C0C0;'></span>"
					+ "</div>" + "  </div>" + "<div class='themeBtnsGroup' onclick=saveEchartColors(event,'" + chartId +"','"+ chartType
					+ "') title='Click to Save Color' onmouseover=\"updatecolorOnGraph(event,'" + chartId +"','"+ chartType+"')\">"
					+ "<div>"
					+ "<span class='themeBtns' data-color='#00acee' style='background-color: #00acee;'></span>"
					+ "  <span class='themeBtns' data-color='#00b9ff' style='background-color: #00b9ff;'></span>"
					+ " <span class='themeBtns' data-color='#2bc4ff' style='background-color: #2bc4ff;'></span>"
					+ "</div>" + "<div>"
					+ "  <span class='themeBtns' data-color='#00aaee' style='background-color: #00aaee;'></span>"
					+ "  <span class='themeBtns' data-color='#26a7de' style='background-color: #26a7de;'></span>"
					+ "  <span class='themeBtns' data-color='#45b1e8' style='background-color: #45b1e8;'></span>"
					+ "</div>" + "  </div>" + "<div class='themeBtnsGroup' onclick=saveEchartColors(event,'" + chartId +"','"+ chartType
					+ "') title='Click to Save Color' onmouseover=\"updatecolorOnGraph(event,'" + chartId +"','"+ chartType+"')\">"
					+ "<div>"
					+ "<span class='themeBtns' data-color='#006400' style='background-color: #006400;'></span>"
					+ "  <span class='themeBtns' data-color='#008000' style='background-color: #008000;'></span>"
					+ " <span class='themeBtns' data-color='#228B22' style='background-color: #228B22;'></span>"
					+ "</div>" + "<div>"
					+ "  <span class='themeBtns' data-color='#347C2C' style='background-color: #347C2C;'></span>"
					+ "  <span class='themeBtns' data-color='#437C17' style='background-color: #437C17;'></span>"
					+ "  <span class='themeBtns' data-color='#4AA02C' style='background-color: #4AA02C;'></span>"
					+ "</div>" + "  </div>" + "<div class='themeBtnsGroup' onclick=saveEchartColors(event,'" + chartId +"','"+ chartType
					+ "') title='Click to Save Color' onmouseover=\"updatecolorOnGraph(event,'" + chartId +"','"+ chartType+"')\">"
					+ "<div>"
					+ "<span class='themeBtns' data-color='#EAC117' style='background-color: #EAC117;'></span>"
					+ "  <span class='themeBtns' data-color='#806517' style='background-color: #806517;'></span>"
					+ " <span class='themeBtns' data-color='#5C3317' style='background-color: #5C3317;'></span>"
					+ "</div>" + "<div>"
					+ "  <span class='themeBtns' data-color='#347C2C' style='background-color: #347C2C;'></span>"
					+ "  <span class='themeBtns' data-color='#E66C2C' style='background-color: #E66C2C;'></span>"
					+ "  <span class='themeBtns' data-color='#C11B17' style='background-color: #C11B17;'></span>"
					+ "</div>" + "  </div>" + "<div class='themeBtnsGroup' onclick=saveEchartColors(event,'" + chartId +"','"+ chartType
					+ "') title='Click to Save Color' onmouseover=\"updatecolorOnGraph(event,'" + chartId +"','"+ chartType+"')\">"
					+ "<div>"
					+ "<span class='themeBtns' data-color='#00008B' style='background-color: #00008B;'></span>"
					+ "  <span class='themeBtns' data-color='#191970' style='background-color: #191970;'></span>"
					+ " <span class='themeBtns' data-color='#000080' style='background-color:#000080;'></span>"
					+ "</div>" + "<div>"
					+ "  <span class='themeBtns' data-color='#0000A0' style='background-color: #0000A0;'></span>"
					+ "  <span class='themeBtns' data-color='#0020C2' style='background-color: #0020C2;'></span>"
					+ "  <span class='themeBtns' data-color='#0909FF' style='background-color: #0909FF;'></span>"
					+ "  </div>" + "</div>" + "<div class='themeBtnsGroup' onclick=saveEchartColors(event,'" + chartId +"','"+ chartType
					+ "') title='Click to Save Color' onmouseover=\"updatecolorOnGraph(event,'" + chartId +"','"+ chartType+"')\">"
					+ "<div>"
					+ "<span class='themeBtns' data-color='#00acee' style='background-color: #00acee;'></span>"
					+ "  <span class='themeBtns' data-color='#5cb9f1' style='background-color: #5cb9f1;'></span>"
					+ " <span class='themeBtns' data-color='#86c7f4' style='background-color: #86c7f4;'></span>"
					+ "</div>" + "<div>"
					+ "  <span class='themeBtns' data-color='#a8d5f7' style='background-color: #a8d5f7;'></span>"
					+ "  <span class='themeBtns' data-color='#c6e3fa' style='background-color: #c6e3fa;'></span>"
					+ "  <span class='themeBtns' data-color='#e3f1fc' style='background-color: #e3f1fc;'></span>"
					+ "</div>" + "  </div>" + " </div>" + " </div>" + "</div>";


					$("#dxpColorPopOver").remove();
					$("#dxpCreatePopOver").html("<div id='dxpColorPopOver'></div>");
					$("#dxpColorPopOver").html(result);
					//$("#dxpColorPopOver").jqxPopover('open');
					$("#dxpColorPopOver").jqxPopover({
						offset: offset,
						position: position,
						width: 262,
						height: 155,
						autoClose: true,
						title: "Color Palette",
						showCloseButton: true,
						selector: parrantId
	
					});
	
					// $('#dxpColorPopOver').jqxPopover({showArrow: true, arrowOffsetValue: 10});
					$('#dxpColorPopOver').addClass('chartPallettePopup');
					$("#dxpColorPopOver").jqxPopover('open');
	
}


function saveEchartColors(event, chartId, chartType){
	var colorarr = [];
    var update = "";
    var colorobj = [];
    var colorsobj = event.currentTarget.children;
	var dashBoard=$('#OptionDropdownData').val();
    if (colorsobj != null && !jQuery.isEmptyObject(colorsobj) && colorsobj.length == 2) {

        var array1 = colorsobj[0].children;
        var array2 = colorsobj[1].children;
        if (array1.length > 0 && array2.length > 0) {
            for (var i = 0; i < array1.length; i++) {
                colorobj.push(array1[i]);
                colorobj.push(array2[i]);
            }
        } else {
            colorobj = (colorsobj);
        }

    } else {
        colorobj = (colorsobj);
    }
	var colorarr;
    if (chartId != null && chartId != '' && chartId != 'null' && chartId != undefined) {
		if(['StackedAreaChart','GradStackAreaChart','BasicAreaChart','AreaPiecesChart'].includes(chartType)){
			var dom = document.getElementById(chartId);
			var myChart = echarts.init(dom);
			var existingOptions = myChart.getOption();
			for (var i = 0; i < existingOptions.series.length; i++) {
				colorarr.push(colorobj[i % colorobj.length].dataset['color']);
				existingOptions.series[i].areaStyle = {
					color: colorobj[i % colorobj.length].dataset['color']
				};
			}
			
			
			myChart.setOption(existingOptions);
		}
		if (chartType === 'ganttChart') {
	var ganttchartData = $("#" + chartId).attr("echartData");
	var options = $("#" + chartId).attr("echartOption");
			options= JSON.parse(options);
	chart = new google.visualization.GeoChart(document.getElementById(chartId));
	var geochartDataObject = new google.visualization.DataTable(JSON.parse(ganttchartData));
   
    // Define an array of colors
    var colorarr = [];

    for (var i = 0; i < colorobj.length; i++) {
        colorarr.push(colorobj[i % colorobj.length].dataset['color']);
    }
    
   options.gantt.innerGridTrack.fill=colorarr[0];

    // Redraw the chart (assuming you already have chart data and options)
    chart.draw(ganttchartData, options);
}else if (chartType === 'candlestick') {
    var dom = document.getElementById(chartId);
    var myChart = echarts.init(dom);
    var existingOptions = myChart.getOption();

    // Define an array of colors
    var colorarr = [];

    for (var i = 0; i < existingOptions.series.length; i++) {
        // Push a color from your colorobj array to colorarr
        colorarr.push(colorobj[i % colorobj.length].dataset['color']);

        // Update itemStyle for the series
        existingOptions.series[i].itemStyle = {
                color: 'red',     // Color of the rising candlestick
                color0: colorarr[0],      // Color of the falling candlestick
                borderColor: 'black', // Border color
                borderColor0: 'black' // Border color for falling candlestick*/
            
        };
    }

    // Set the updated options back to the chart
    myChart.setOption(existingOptions);
}
else if (chartType === 'geochart') {
	var geochartData = $("#" + chartId).attr("geochartData");
	var region = $("#"+chartId).attr("region");
	chart = new google.visualization.GeoChart(document.getElementById(chartId));
	var geochartDataObject = new google.visualization.DataTable(JSON.parse(geochartData));
   
    // Define an array of colors
    var colorarr = [];

    for (var i = 0; i < colorobj.length; i++) {
        colorarr.push(colorobj[i % colorobj.length].dataset['color']);
    }
     var options = {
         datalessRegionColor: colorarr[0],
         sizeAxis: { minValue: 1, maxValue: 1, minSize: 5, maxSize: 5 },
         colorAxis: { colors: [colorarr[1], colorarr[2], colorarr[3], colorarr[4], colorarr[5]] },
         region:region
    };
   

    // Redraw the chart (assuming you already have chart data and options)
    chart.draw(geochartDataObject, options);
}

	
	}
	if (colorarr != null && colorarr != '') {
        var message = 'Do u want to Save?';
        var modalObj = {
            title: labelObject["Message"] != null ? labelObject["Message"] : "Message",
            body: "<div class='isPopupDefaultSaveClass'>" + message + "</div>",
        };
        var buttonArray = [
            {
                text: labelObject['Save'] != null ? labelObject['Save'] : 'Save',
                click: function () {
                    var colorobj = {};
                    colorobj['clrs'] = colorarr
                    $.ajax({
                        type: "POST",
                        url: "updatePalatteColor",
                        cache: false,
                        dataType: 'json',
                        async: false,
                        data: {
                            colorArr: JSON.stringify(colorobj),
                            chartId: chartId,
                            dashBoard: dashBoard,
                        },
                        success: function (response) {
                            if (response != null) {
                                updatecolorOnGraph(event, chartId,chartType);
                            }
                        },
                        error: function (e) {
                            updatecolorOnGraph(event, chartId);
                            console.log(e);
                            sessionTimeout(e);
                            stopLoader();
                        }
                    });
                },
                isCloseButton: true
            } 
        ];
        modalObj['buttons'] = buttonArray;
        createModal("dataDxpSplitterValue", modalObj);
        $("#dataDxpSplitterValue").css("z-index", "99999", "!important");
    }
}

/*function saveEchartColors(event, chartId, chartType){
	var colorarr = [];
    var update = "";
    var colorobj = [];
    var colorsobj = event.currentTarget.children;
	var dashBoard=$('#OptionDropdownData').val();
    if (colorsobj != null && !jQuery.isEmptyObject(colorsobj) && colorsobj.length == 2) {

        var array1 = colorsobj[0].children;
        var array2 = colorsobj[1].children;
        if (array1.length > 0 && array2.length > 0) {
            for (var i = 0; i < array1.length; i++) {
                colorobj.push(array1[i]);
                colorobj.push(array2[i]);
            }
        } else {
            colorobj = (colorsobj);
        }

    } else {
        colorobj = (colorsobj);
    }
	var colorarr;
    if (chartId != null && chartId != '' && chartId != 'null' && chartId != undefined) {
		if(['StackedAreaChart','GradStackAreaChart','BasicAreaChart','AreaPiecesChart'].includes(chartType)){
			var dom = document.getElementById(chartId);
			var myChart = echarts.init(dom);
			var existingOptions = myChart.getOption();
			for (var i = 0; i < existingOptions.series.length; i++) {
				colorarr.push(colorobj[i % colorobj.length].dataset['color']);
				existingOptions.series[i].areaStyle = {
					color: colorobj[i % colorobj.length].dataset['color']
				};
			}
			
			
			myChart.setOption(existingOptions);
		}
		if (chartType === 'ganttChart') {
			var ganttchartData = $("#" + chartId).attr("echartData");
			var options = $("#" + chartId).attr("echartOption");
			options = JSON.parse(options);
			chart = new google.visualization.GeoChart(document.getElementById(chartId));
			var geochartDataObject = new google.visualization.DataTable(JSON.parse(ganttchartData));

			// Define an array of colors
			var colorarr = [];

			for (var i = 0; i < colorobj.length; i++) {
				colorarr.push(colorobj[i % colorobj.length].dataset['color']);
			}

			options.gantt.innerGridTrack.fill = colorarr[0];

			// Redraw the chart (assuming you already have chart data and options)
			chart.draw(ganttchartData, options);
		}

	
	}
	if (colorarr != null && colorarr != '') {
        var message = 'Do u want to Save?';
        var modalObj = {
            title: labelObject["Message"] != null ? labelObject["Message"] : "Message",
            body: "<div class='isPopupDefaultSaveClass'>" + message + "</div>",
        };
        var buttonArray = [
            {
                text: labelObject['Save'] != null ? labelObject['Save'] : 'Save',
                click: function () {
                    var colorobj = {};
                    colorobj['clrs'] = colorarr
                    $.ajax({
                        type: "POST",
                        url: "updatePalatteColor",
                        cache: false,
                        dataType: 'json',
                        async: false,
                        data: {
                            colorArr: JSON.stringify(colorobj),
                            chartId: chartId,
                            dashBoard: dashBoard,
                        },
                        success: function (response) {
                            if (response != null) {
                                updatecolorOnGraph(event, chartId,chartType);
                            }
                        },
                        error: function (e) {
                            updatecolorOnGraph(event, chartId);
                            console.log(e);
                            sessionTimeout(e);
                            stopLoader();
                        }
                    });
                },
                isCloseButton: true
            } 
        ];
        modalObj['buttons'] = buttonArray;
        createModal("dataDxpSplitterValue", modalObj);
        $("#dataDxpSplitterValue").css("z-index", "99999", "!important");
    }
}*/

function convertChartPropertiesPlotyToEchart(newChartType, oldchartType, chartConfigObj,colorsObj) {

	var chartProperties = [
		'MODE', 'CHARTTITLE', 'LABELDATA', 'HOVERLABELDATA', 'LABELPOSITION', 
		'MARKERSHAPE', 'MARKERSIZE', 'HOVERBG', 'HOVERBORDERCOLOR', 'HOVERFONTCOLOR',
		'HOVERFONTFAMILY', 'HOVERFONTSIZE', 'COLORSMARKER', 'COLORSAREA', 'OPACITY',
		'LINECOLORS', 'LINEWIDTH', 'LINEDASH'
	  ];
	  var properties = {};
	  newChartType=newChartType.toUpperCase();
	  properties[newChartType+'MODE']='lines';
	  properties[newChartType+'MARKERSHAPE']='triangle';
	  properties[newChartType+'MARKERSIZE'] ='10';
	  properties[newChartType+'HOVERFONTFAMILY'] = 'Arial, sans-serif';
	  properties[newChartType+'HOVERFONTSIZE'] ='5';
	  properties[newChartType+'COLORSMARKER'] = colorsObj; // NEED TO ASSIGN  COLOR
	  properties[newChartType+'COLORSAREA']=colorsObj ; // NEED TO ASSIGN COLOR
	  properties[newChartType+'OPACITY']='0.8';
	  properties[newChartType+'LINECOLORS']= colorsObj; // NEED TO ASSIGN color
	  properties[newChartType+'LINEWIDTH'] ='5' ;
	  properties[newChartType+'LINEDASH'] ='solid';


	  for (var i = 0; i < chartProperties.length; i++) {
		var property = chartProperties[i];
		var value;
		if(chartConfigObj.hasOwnProperty(oldchartType.toUpperCase()+property)){
			value = chartConfigObj[oldchartType.toUpperCase()+property];
			if(value !==undefined && value !== ' ' && value !== null){
				value = value.replace('label','x').replace('values','y').replace('percent','%');

				properties[newChartType + property ] = value;	
			}
			
		}
	}
	  
return properties;
  


}

function convertChartPropertiesEchartToPloty(newChartType, oldchartType,chartConfigObj){
	var properties = {};
	newChartType=newChartType.toUpperCase();
	properties[newChartType+"CHARTTITLE"]="layout";
	properties[newChartType+"HOVERLABEL"]= "layout";
	properties[newChartType+"HOVERLABELDATA"]= "data";
	properties[newChartType+"LABELDATA"]= "data";
	properties[newChartType+"LABELPOSITION"]= "data"
	properties[newChartType+"LEGEND"]= "layout";
	properties[newChartType+"LEGENDPOSITION"]= "layout";
	properties[newChartType+"MARKER"]= "data";
	properties[newChartType+"SHOWLEGEND"]= "layout";


	return properties; 

}

function showStr(title,message) {
	$("#dialog").html(message);
	$("#dialog").dialog({
		title: (labelObject[title] != null ? labelObject[title] : title),
		width: 600,
		maxWidth: 600,
		height: 150,
		maxHeight: 1000,
		fluid: true,
		buttons: [{

		}],
		open: function() {
			$("#Loader").css("display", "none");
			$("body").css({ "pointer-events": "auto" });
		},
		beforeClose: function(event, ui) {

		}
	});
}

var tableInserted = false;
function getChartDataonFlip(chartId, chartDataObj){
	
	var count = $('#'+chartId+'_count').val();
    $('#chart-container'+count).toggleClass('flipped');
	tableInserted= false;
	if (!tableInserted) {
			var stringArrayKeys = [];
            var numberKeys = [];

            for (var key in chartDataObj) {
                if (Array.isArray(chartDataObj[key]) && typeof chartDataObj[key][0] === "string") {
                    stringArrayKeys.push(key);
                } else {
                    numberKeys.push(key);
                }
            }

            var keys = stringArrayKeys.concat(numberKeys);

            var table = '<table><thead><tr><th>' + keys.join('</th><th>') + '</th></tr></thead><tbody>';

            for (var i = 0; i < chartDataObj[keys[0]].length; i++) {
                var row = keys.map(function(key) {
                    return chartDataObj[key][i];
                }).join('</td><td>');
                
                table += '<tr><td>' + row + '</td></tr>';
            }

            table += '</tbody></table>';
			var chartBackContent = '<div class="chart-table-container">' + table + '</div><div class="go-back-button-container"><button class="go-back-button" onclick="flipToggle(' + count + ')"><span class="go-back-icon">&#8617;</span> Go Back</button></div>';
        $('#chart-back-id' + count).html(chartBackContent);
			// $('#chart-back-id'+count).click(function(){
			// 	$('#chart-container'+count).toggleClass('flipped');
			// });
			tableInserted= true;
		}
}

function flipToggle(count) {
    $('#chart-container' + count).toggleClass('flipped');
}

function shrinkExpandCard() {

    $('#upperCpmpaireMainDIvID').toggleClass('shrinkSection');

    $('#expendInOutDivID i').toggleClass('fa-angle-double-up').toggleClass('fa-angle-double-down');
}

function closeAllDialogsBoxes(){
	$("body div[id*=dialog]").each(function() {
		var dialogId = $(this).attr("id");
		closeDialogBox('#'+dialogId);   
	});
}

function closeDia() {

	  
	$("body div[id*=dilog]").each(function() {
		var dialogId = $(this).attr("id");
		closeDialogBox('#'+dialogId);   
	});

}


function getQueryForQuestionAutoGeneratedCharts(question,querysMap)
{
	if(querysMap !=null && !jQuery.isEmptyObject(querysMap))
	{
	var query =  (querysMap[question] !=null && querysMap[question] !='' && querysMap[question] !=undefined)?querysMap[question]:""; 
	if(query !=null && query !='' && query !=undefined ){
		var connectionName = "Current_V10";
	$.ajax({
		type: "POST",
		url: "executeBISQLQuery",
		cache: false,
		dataType: 'json',
		async: false,
		data: {
			script: query,
		    connectionName: connectionName
		},
		success: function(response) {
			if (response != null && !jQuery.isEmptyObject(response)) {
				if (response['selectFlag']) {
					var result = response['gridObject'];
					var columnsList = result['columnList'];
					var tableName = response['tableName'];
					var joinQueryFlag = response['joinQueryFlag'];
					var dataTypeCountObj = response['dataTypeCount'];
					tableName = tableName.replace(/ /gi, ":");
					var sqlScript;
					/*var regexTableName;*/
					for (var entitykey in HtmlEntities) {
						var entity = HtmlEntities[entitykey];
						var regex = new RegExp(entitykey, 'g');
						sqlScript = query.replace(regex, entity);
						/*regexTableName = tableName.replace(regex, entity);*/
					}
					var resultQuery;
					if (sqlScript.includes('\n')) {
						var sqlScriptArr = sqlScript.split('\n');
						var sqlScriptStr = "";
						for (var i = 0; i < sqlScriptArr.length; i++) {
							sqlScriptStr += sqlScriptArr[i];
						}
						if (sqlScriptStr.includes("'")) {
							sqlScriptStr = sqlScriptStr.replace(/'/g, "\\'");
						}
						if (sqlScriptStr.includes("\r")) {
							var stringToRemove = "\r";
							var sqlScriptStr = sqlScriptStr.replace(new RegExp(stringToRemove, 'g'), "&nbsp;");
						}
						resultQuery = sqlScriptStr;
					} else {
						resultQuery = sqlScript;
					}
					for (var i = 0; i < columnsList.length; i++) {
						columnsList[i] = columnsList[i].trim();
					}

					/*var columnsLis = JSON.stringify(columnsList);
					columnsLis = columnsLis.replace(/"/g, "'");
					columnsLis = columnsLis.replace(/\\/g, '"');
					columnsLis = columnsLis.toUpperCase();*/
					var dataTypeCountObj = JSON.stringify(dataTypeCountObj);
					dataTypeCountObj = dataTypeCountObj.replaceAll('"', '#');
					showQueryCharts(resultQuery,columnsList, tableName, joinQueryFlag,"Y",dataTypeCountObj,"getSuggestedChartBasedonCols");

				} else {
						$("#dialog").html(response['message']);
						$("#dialog").dialog({
							title: (labelObject['Message'] != null ? labelObject['Message'] : 'Message'),
							modal: true,
							height: 'auto',
							minWidth: 300,
							maxWidth: 'auto',
							fluid: true,
							buttons: [{
								text: (labelObject['Ok'] != null ? labelObject['Ok'] : 'Ok'),
								click: function() {
									$(this).html("");
									//$(this).dialog("close");
									$(this).dialog("destroy");
								}
							}],
							open: function() {
								$(this).closest(".ui-dialog").find(".ui-button").eq(1).addClass("dialogyes");
								$(".visionHeaderMain").css("z-index", "999");
								$(".visionFooterMain").css("z-index", "999");
							},
							beforeClose: function(event, ui) {
								$(".visionHeaderMain").css("z-index", "99999");
								$(".visionFooterMain").css("z-index", "99999");
							}
						});
					}

				}
		},
		error: function(e) {
			console.log(e);
			sessionTimeout(e);
			stopLoader();
		}
	});
	}
	}
}


function getGanttChart(chartId, response, count, chartType)
{
	$("#visionVisualizeChartId" + count).remove();
	
	var ganttChartId = "visionVisualizeChart" + count;
	var ganttChartHomeId = "visionVisualizeChartHome" + count;
	$("#" + ganttChartId).append("<div id='visionVisualizeChartId" + count + "' type='" + chartType + "' count='" + count + "' class='visionVisualChartBoxClass visionVisualChartBoxSelected'></div>")
	$("#" + chartId).css("width", "auto", "!important");
	$("#" + chartId).css("height", "295px", "!important");
	$("#" + ganttChartId).css("width", "auto", "!important");
	$("#" + ganttChartId).css("height", "295px", "!important");
	$("#" + ganttChartHomeId).css("width", "auto", "!important");
	$("#" + ganttChartHomeId).css("height", "300px", "!important");
	$("#" + ganttChartHomeId).addClass("visionVisualChartBoxClass");
	var chartCOnfigObjStr = JSON.parse(response["chartCOnfigObjStr"]);
	var chartTitle , dataVisible, hoverDataVisible, areaColor, areaOpacity,barHeight=10;
	chartTitle= chartCOnfigObjStr['GANTTCHARTCHARTTITLE'] || $('#GANTTCHARTCHARTTITLE'+count).val();
	dataVisible=chartCOnfigObjStr['GANTTCHARTLABELDATA'] || $('#GANTTCHARTLABELDATA'+count).val();
	hoverDataVisible = chartCOnfigObjStr['GANTTCHARTHOVERLABELDATA'] || $('#GANTTCHARTHOVERLABELDATA'+count).val();
	areaColor=chartCOnfigObjStr['GANTTCHARTCOLORSAREA'] || $('#GANTTCHARTCOLORSAREA'+count).val();
	areaOpacity= chartCOnfigObjStr['GANTTCHARTOPACITY'] || $('#GANTTCHARTOPACITY'+count).val();
	barHeight =chartCOnfigObjStr['GANTTCHARTBARHEIGHT'] || $('#GANTTCHARTBARHEIGHT'+count).val();
	
      var result = response['data'];
      for(var i=1;i<result.length;i++)
      {
		  var resultArr = result[i];
		  var startDate = resultArr[2];
		  var endDate = resultArr[3];
		  resultArr[2] = new Date(startDate);
		  resultArr[3] = new Date(endDate);
	  }
      var  data = google.visualization.arrayToDataTable(result);
//options.gantt.innerGridTrack.fill
      var options = {
        height: 300, 
        width :700,
		gantt: {
			barHeight:barHeight,
	        trackHeight: 50 ,
			innerGridTrack: {fill: areaColor},
			labelStyle: {
					  //fontName: Roboto2,
					  fontSize: 14,
					  color: '#757575'
					},
   
        },
         dataLabels: 'tooltip',
		  
      };

      var chart = new google.visualization.Gantt(document.getElementById(chartId));
      $("#" + chartId).attr("echartData", JSON.stringify(data));
	$("#" + chartId).attr("echartOption", JSON.stringify(options));
    getToolBox(chartId, chartType, "", chartCOnfigObjStr, result, count, 1)
  

      chart.draw(data, options);

	 var titleElement = document.createElement("h1");
    titleElement.textContent = chartTitle; 
    titleElement.style.fontSize = '12px';
    titleElement.style.fontWeight = 'bold'; 
	var chartContainer = document.getElementById(chartId);
    chartContainer.insertBefore(titleElement, chartContainer.firstChild);
}




function getGeoChart(chartId, result, count, chartType,dashboardFlag) {
  var dataArr = result['data'];
  var labelsArr = result['labelsArr'];
  var region = result['region'];
  var totalValue = result['totalValue'][0];
  var tableName=result['tableName'];
 
  var chartConfigaration = result['chartCOnfigObjStr'];
  if(chartConfigaration != null && !jQuery.isEmptyObject(chartConfigaration)) {
	var fontSize,fontColor,fontFamily,backgroundColor,borderColor,title,hoverlabeldata,width,height;
	if(!(dashboardFlag!= null && dashboardFlag!= '' && dashboardFlag!= undefined)){
			
   fontSize = chartConfigaration[chartType.toUpperCase() + "HOVERFONTSIZE" + count];
   fontColor = chartConfigaration[chartType.toUpperCase() + "HOVERFONTCOLOR" + count];
   fontFamily = chartConfigaration[chartType.toUpperCase() + "HOVERFONTFAMILY" + count];
   backgroundColor = chartConfigaration[chartType.toUpperCase() + "HOVERBG" + count];
   borderColor = chartConfigaration[chartType.toUpperCase() + "HOVERBORDERCOLOR" + count];
   title = chartConfigaration[chartType.toUpperCase() + "CHARTTITLE" + count];
   hoverlabeldata = chartConfigaration[chartType.toUpperCase() + "HOVERLABELDATA" + count];
  $("#" + chartId).css("margin-top", "0", "!important");
  $("#" + chartId).css("overflow", "hidden", "!important");
  $("#" + chartId).css("width", "650px", "!important");
  $("#" + chartId).css("height", "505px", "!important");
   width=640;
   height=600;
  
  }
  else{
   fontSize = chartConfigaration[chartType.toUpperCase() + "HOVERFONTSIZE"];
   fontColor = chartConfigaration[chartType.toUpperCase() + "HOVERFONTCOLOR"];
   fontFamily = chartConfigaration[chartType.toUpperCase() + "HOVERFONTFAMILY"];
   backgroundColor = chartConfigaration[chartType.toUpperCase() + "HOVERBG"];
   borderColor = chartConfigaration[chartType.toUpperCase() + "HOVERBORDERCOLOR"];
   title = chartConfigaration[chartType.toUpperCase() + "CHARTTITLE"];
   hoverlabeldata = chartConfigaration[chartType.toUpperCase() + "HOVERLABELDATA" ];
   width=300;
   height=300;
  fontFamily = fontFamily.split(",")[0];
  $("#homeChartParentDiv"+ count).css("height","330px");
        
}

	}
  
  var geoChartId = "visionVisualizeChart" + count;

  // Ensure the chart container has sufficient dimensions
  
  $("#" + geoChartId).css("width", "645px", "!important");
  $("#" + geoChartId).css("height", "510px", "!important");
  $("#" + chartId+"_toolBox").css("height", "331px", "!important");
  $("#" + geoChartId).find("h1").remove();
  var data = new google.visualization.DataTable();

  // Use a loop to add columns
  for (var k = 0; k < labelsArr.length; k++) {
    var label = labelsArr[k];
    var columnType = label.split(":")[0];
    var columnName = label.split(":")[1];
    data.addColumn(columnType, "");
  }


  if(dataArr !=null && !jQuery.isEmptyObject(dataArr))
  {
  for (var i = 0; i < dataArr.length ; i++) {
    var dataPoint = dataArr[i];

    // Create custom tooltip content
    var labels = dataPoint[2]; 
     var Values=  columnName + ":"+ dataPoint[3];
     var percentage = "Percentage: " + ((dataPoint[3] / totalValue) * 100).toFixed(2) + "%";
    data.addRow(dataPoint);
    if(hoverlabeldata=='x'){
  data.setFormattedValue(i, 2, labels);
  data.setFormattedValue(i, 3, "")
  }
  else if(hoverlabeldata=='y'){
         data.setFormattedValue(i, 2, "");
  data.setFormattedValue(i, 3, Values);
}
else if(hoverlabeldata=='x+y'){
  data.setFormattedValue(i, 3, Values);
}
else if(hoverlabeldata=='%'){
  data.setFormattedValue(i, 2, ""); 
  data.setFormattedValue(i, 3, percentage);
}
else if (hoverlabeldata === 'x+%') {
        data.setFormattedValue(i, 2, labels); 
   data.setFormattedValue(i, 3, percentage);
                
        }
        else if (hoverlabeldata === 'y+%') {
                data.setFormattedValue(i, 2, Values); 
   data.setFormattedValue(i, 3, percentage);
                
        }

  }
  }
  $("#"+chartId).attr("region",region);
  var options = {
    region: region,
    displayMode: 'markers',
    resolution: 'provinces',
    width: width,
    height: height,
    sizeAxis: { minValue: 1, maxValue: 1, minSize: 5, maxSize: 5 },
    colorAxis: { colors: ['#e7711c', '#4374e0', '#FF7F50', '#DC143C', '#00008B'] },
    datalessRegionColor: '#FFFFFF', // Replace with the color for regions with no data
    defaultColor: '#f5f5f5',
    backgroundColor: {
      fill: 'white' // Set the background color to light blue
    },
    tooltip: {
    isHtml: true, // Enable HTML rendering in tooltips
    textStyle: {
      color: fontColor,
      fontSize: fontSize,
      fontName: fontFamily,
    },
    },
  };

  var chart = new google.visualization.GeoChart(document.getElementById(chartId));

  chart.draw(data, options);
  $("#" + chartId).attr("geochartData", JSON.stringify(data));
  getToolBox(chartId, chartType, tableName, chartConfigaration, result, count, Object.keys(result.data).length)

  // Create a title element
  var titleElement = document.createElement("h1");
  titleElement.textContent = ""; // Title text
  titleElement.style.fontSize = '12px'; // Title font size
  titleElement.style.fontWeight = 'bold'; // Make the title bold

  // Append the title element before the chart container
  var chartContainer = document.getElementById(geoChartId);
  chartContainer.insertBefore(titleElement, chartContainer.firstChild);

  // Add CSS rules to style the tooltips
  var customTooltipStyles = `
    .google-visualization-tooltip {
      background-color: ${backgroundColor} !important; // Customize background color
      border: 3px solid ${borderColor} !important; // Customize border
    } `;

  var styleSheet = document.createElement("style");
  styleSheet.type = "text/css";
  styleSheet.innerText = customTooltipStyles;
  document.head.appendChild(styleSheet);
}


function getCandlestickChart(chartId, response, count, chartType,dashBoardFlag) {
	$("#visionVisualizeChartId" + count).remove();
	var CandlestickChartId = "visionVisualizeChart" + count;
	var CandlestickChartHomeId = "visionVisualizeChartHome" + count;
	$("#" + CandlestickChartId).append("<div id='visionVisualizeChartId" + count + "' type='" + chartType + "' count='" + count + "' class='visionVisualChartBoxClass visionVisualChartBoxSelected'></div>")
	$("#" + chartId).css("width", "auto", "!important");
	$("#" + chartId).css("height", "329px", "!important");
	$("#" + chartId+"_toolBox").css("height", "331px", "!important");
	$("#" + CandlestickChartId).css("width", "900px", "!important");
	$("#" + CandlestickChartId).css("height", "400px", "!important");
	$("#" + CandlestickChartHomeId).css("width", "auto", "!important");
	$("#" + CandlestickChartHomeId).css("height", "380px", "!important");
	$("#" + CandlestickChartHomeId).addClass("visionVisualChartBoxClass");
	var tableName = response['tableName'];
	var bigChartType = chartType.toUpperCase();
	var dom = document.getElementById(chartId);
	if (response["chartCOnfigObjStr"] !='' && response["chartCOnfigObjStr"] != null && response["chartCOnfigObjStr"] != undefined) {
		chartEditoptions = JSON.parse(response["chartCOnfigObjStr"]);
     }
     var title,labeldata,hoverlabeldata,hoverBGColor,hoverBorderColor,hoverFontColor,hoverTextSize,hoverTextFont;
    if(!(dashBoardFlag !=null && dashBoardFlag !='' && dashBoardFlag !=undefined)){
	 title = chartEditoptions[bigChartType + "CHARTTITLE" + count];
	 labeldata = chartEditoptions[bigChartType + "LABELDATA"];
	 hoverlabeldata = chartEditoptions[bigChartType + "HOVERLABELDATA" + count];
	 hoverBGColor = chartEditoptions[bigChartType + "HOVERBG" + count];
	 hoverBorderColor = chartEditoptions[bigChartType + "HOVERBORDERCOLOR" + count];
	 hoverFontColor = chartEditoptions[bigChartType + "HOVERFONTCOLOR" + count];
	 hoverTextSize = chartEditoptions[bigChartType + "HOVERFONTSIZE" + count] || "10";
	 hoverTextFont = chartEditoptions[bigChartType + "HOVERFONTFAMILY" + count] || "Arial, sans-serif";
	}
	else{
	 title = chartEditoptions[bigChartType + "CHARTTITLE"];
	 labeldata = chartEditoptions[bigChartType + "LABELDATA"];
	 hoverlabeldata = chartEditoptions[bigChartType + "HOVERLABELDATA"];
	 hoverBGColor = chartEditoptions[bigChartType + "HOVERBG"];
	 hoverBorderColor = chartEditoptions[bigChartType + "HOVERBORDERCOLOR"];
	 hoverFontColor = chartEditoptions[bigChartType + "HOVERFONTCOLOR"];
	 hoverTextSize = chartEditoptions[bigChartType + "HOVERFONTSIZE"] || "10";
	 hoverTextFont = chartEditoptions[bigChartType + "HOVERFONTFAMILY"] || "Arial, sans-serif";
	}

	var myChart = echarts.init(dom, null, {
		renderer: 'canvas',
		useDirtyRect: false
	});
	if (response != null && !jQuery.isEmptyObject(response)) {
		var data = response['data'];
		var valuesData = [];

		var result = {};
		result.xAxis = { data: [] };
		result.yAxis = {};
		result.series = [
			{
				type: 'candlestick',
				data: [],
				itemStyle: {
            color: 'green', // Change the color of the candlestick
            borderColor: 'blue', // Change the border color
            borderColor0: 'orange' // Change the border color of the negative candlestick
        },
        
			}
		]
		$.each(data, function(keyName) {
			if (isArrayNumeric(data[keyName]))
				valuesData = data[keyName];
			else {
				result.xAxis.data = data[keyName];
			}
		});
		var minValue = Math.min(...valuesData);
		var maxValue = Math.max(...valuesData);
		i = 0;
		$.each(valuesData, function(value) {
			var tempArr = [valuesData[i], minValue, 0, maxValue];
			result.series[0].data.push(tempArr);
			i += 1;
		});

		var legend = result['legend'];
		var xAxis = result['xAxis'];
		var yAxis = result['yAxis'];
		var series = result['series'];
		var color = result['color'];
		var option = {
			title: {
				text: title
			},
			tooltip: {
				trigger: 'axis',
				axisPointer: {
					type: 'cross'
				},
				borderWidth: 1,
				borderColor: hoverBorderColor,
				backgroundColor: hoverBGColor,
				padding: 10,
				textStyle: {
					color: hoverFontColor,
					fontSize: hoverTextSize,
					fontFamily: hoverTextFont
				},
				formatter: function(params) {
					var data = params[0].data;
					var tooltipContent = '';
					if (hoverlabeldata === 'x') {
						tooltipContent = params[0].name;
					} else if (hoverlabeldata === 'y') {
						// Display only tooltip content
						tooltipContent = `Open: ${data[1]}, High: ${data[2]}, Low: ${data[3]}, Close: ${data[4]}`;
					} else if (hoverlabeldata === 'x+y') {
						tooltipContent = `${params[0].name}\nOpen: ${data[1]}, High: ${data[2]}, Low: ${data[3]}, Close: ${data[4]}`;
					}
					if (hoverlabeldata === '%') {
						// Calculate the percentage change (customize this calculation as needed)
						var open = data[1];
						var close = data[4];
						var percentageChange = ((close - open) / open * 100).toFixed(2);

						tooltipContent = `Percentage Change: ${percentageChange}%`;
					}
					else if (hoverlabeldata === 'x+%') {
						var open = data[1];
						var close = data[4];
						var percentageChange = ((close - open) / open * 100).toFixed(2);
						tooltipContent = `${params[0].name}\nPercentage Change: ${percentageChange}%`;
					}
					else if (hoverlabeldata === 'y+%') {
						var open = data[1];
						var close = data[4];
						var percentageChange = ((close - open) / open * 100).toFixed(2);

						tooltipContent = `Open: ${data[1]}, High: ${data[2]}, Low: ${data[3]}, Close: ${data[4]}\nPercentage Change: ${percentageChange}%`;
					}
					return tooltipContent;
				},
			},
			color: "red",
			legend: legend,
			xAxis: xAxis,
			yAxis: yAxis,
			series: series,
			
		};
     getToolBox(chartId, chartType, tableName, chartEditoptions, response, count, Object.keys(response.data).length);
		if (option && typeof option === 'object') {
			$("#" + chartId).attr("echartOption", JSON.stringify(option));
			myChart.setOption(option);
		}
	}
}













